
TechnoHack_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b750  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800b860  0800b860  0000c860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc50  0800bc50  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc50  0800bc50  0000cc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc58  0800bc58  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc58  0800bc58  0000cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc5c  0800bc5c  0000cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bc60  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  200001e0  0800be40  0000d1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800be40  0000d83c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001448a  00000000  00000000  0000d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1c  00000000  00000000  00021693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  000241b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108a  00000000  00000000  000256c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a432  00000000  00000000  00026752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c67  00000000  00000000  00040b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f70  00000000  00000000  000577eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea75b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e94  00000000  00000000  000ea7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f1634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b848 	.word	0x0800b848

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b848 	.word	0x0800b848

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_ldivmod>:
 800113c:	b97b      	cbnz	r3, 800115e <__aeabi_ldivmod+0x22>
 800113e:	b972      	cbnz	r2, 800115e <__aeabi_ldivmod+0x22>
 8001140:	2900      	cmp	r1, #0
 8001142:	bfbe      	ittt	lt
 8001144:	2000      	movlt	r0, #0
 8001146:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800114a:	e006      	blt.n	800115a <__aeabi_ldivmod+0x1e>
 800114c:	bf08      	it	eq
 800114e:	2800      	cmpeq	r0, #0
 8001150:	bf1c      	itt	ne
 8001152:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001156:	f04f 30ff 	movne.w	r0, #4294967295
 800115a:	f000 b9b3 	b.w	80014c4 <__aeabi_idiv0>
 800115e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001162:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001166:	2900      	cmp	r1, #0
 8001168:	db09      	blt.n	800117e <__aeabi_ldivmod+0x42>
 800116a:	2b00      	cmp	r3, #0
 800116c:	db1a      	blt.n	80011a4 <__aeabi_ldivmod+0x68>
 800116e:	f000 f84d 	bl	800120c <__udivmoddi4>
 8001172:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800117a:	b004      	add	sp, #16
 800117c:	4770      	bx	lr
 800117e:	4240      	negs	r0, r0
 8001180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	db1b      	blt.n	80011c0 <__aeabi_ldivmod+0x84>
 8001188:	f000 f840 	bl	800120c <__udivmoddi4>
 800118c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001194:	b004      	add	sp, #16
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	4252      	negs	r2, r2
 800119e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011a2:	4770      	bx	lr
 80011a4:	4252      	negs	r2, r2
 80011a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011aa:	f000 f82f 	bl	800120c <__udivmoddi4>
 80011ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b6:	b004      	add	sp, #16
 80011b8:	4240      	negs	r0, r0
 80011ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011be:	4770      	bx	lr
 80011c0:	4252      	negs	r2, r2
 80011c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011c6:	f000 f821 	bl	800120c <__udivmoddi4>
 80011ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d2:	b004      	add	sp, #16
 80011d4:	4252      	negs	r2, r2
 80011d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011da:	4770      	bx	lr

080011dc <__aeabi_uldivmod>:
 80011dc:	b953      	cbnz	r3, 80011f4 <__aeabi_uldivmod+0x18>
 80011de:	b94a      	cbnz	r2, 80011f4 <__aeabi_uldivmod+0x18>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bf08      	it	eq
 80011e4:	2800      	cmpeq	r0, #0
 80011e6:	bf1c      	itt	ne
 80011e8:	f04f 31ff 	movne.w	r1, #4294967295
 80011ec:	f04f 30ff 	movne.w	r0, #4294967295
 80011f0:	f000 b968 	b.w	80014c4 <__aeabi_idiv0>
 80011f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011fc:	f000 f806 	bl	800120c <__udivmoddi4>
 8001200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9d08      	ldr	r5, [sp, #32]
 8001212:	460c      	mov	r4, r1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d14e      	bne.n	80012b6 <__udivmoddi4+0xaa>
 8001218:	4694      	mov	ip, r2
 800121a:	458c      	cmp	ip, r1
 800121c:	4686      	mov	lr, r0
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	d962      	bls.n	80012ea <__udivmoddi4+0xde>
 8001224:	b14a      	cbz	r2, 800123a <__udivmoddi4+0x2e>
 8001226:	f1c2 0320 	rsb	r3, r2, #32
 800122a:	4091      	lsls	r1, r2
 800122c:	fa20 f303 	lsr.w	r3, r0, r3
 8001230:	fa0c fc02 	lsl.w	ip, ip, r2
 8001234:	4319      	orrs	r1, r3
 8001236:	fa00 fe02 	lsl.w	lr, r0, r2
 800123a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001242:	fb07 1114 	mls	r1, r7, r4, r1
 8001246:	fa1f f68c 	uxth.w	r6, ip
 800124a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb04 f106 	mul.w	r1, r4, r6
 8001256:	4299      	cmp	r1, r3
 8001258:	d90a      	bls.n	8001270 <__udivmoddi4+0x64>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001262:	f080 8110 	bcs.w	8001486 <__udivmoddi4+0x27a>
 8001266:	4299      	cmp	r1, r3
 8001268:	f240 810d 	bls.w	8001486 <__udivmoddi4+0x27a>
 800126c:	3c02      	subs	r4, #2
 800126e:	4463      	add	r3, ip
 8001270:	1a59      	subs	r1, r3, r1
 8001272:	fbb1 f0f7 	udiv	r0, r1, r7
 8001276:	fb07 1110 	mls	r1, r7, r0, r1
 800127a:	fb00 f606 	mul.w	r6, r0, r6
 800127e:	fa1f f38e 	uxth.w	r3, lr
 8001282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001286:	429e      	cmp	r6, r3
 8001288:	d90a      	bls.n	80012a0 <__udivmoddi4+0x94>
 800128a:	eb1c 0303 	adds.w	r3, ip, r3
 800128e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001292:	f080 80fa 	bcs.w	800148a <__udivmoddi4+0x27e>
 8001296:	429e      	cmp	r6, r3
 8001298:	f240 80f7 	bls.w	800148a <__udivmoddi4+0x27e>
 800129c:	4463      	add	r3, ip
 800129e:	3802      	subs	r0, #2
 80012a0:	2100      	movs	r1, #0
 80012a2:	1b9b      	subs	r3, r3, r6
 80012a4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012a8:	b11d      	cbz	r5, 80012b2 <__udivmoddi4+0xa6>
 80012aa:	40d3      	lsrs	r3, r2
 80012ac:	2200      	movs	r2, #0
 80012ae:	e9c5 3200 	strd	r3, r2, [r5]
 80012b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b6:	428b      	cmp	r3, r1
 80012b8:	d905      	bls.n	80012c6 <__udivmoddi4+0xba>
 80012ba:	b10d      	cbz	r5, 80012c0 <__udivmoddi4+0xb4>
 80012bc:	e9c5 0100 	strd	r0, r1, [r5]
 80012c0:	2100      	movs	r1, #0
 80012c2:	4608      	mov	r0, r1
 80012c4:	e7f5      	b.n	80012b2 <__udivmoddi4+0xa6>
 80012c6:	fab3 f183 	clz	r1, r3
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d146      	bne.n	800135c <__udivmoddi4+0x150>
 80012ce:	42a3      	cmp	r3, r4
 80012d0:	d302      	bcc.n	80012d8 <__udivmoddi4+0xcc>
 80012d2:	4290      	cmp	r0, r2
 80012d4:	f0c0 80ee 	bcc.w	80014b4 <__udivmoddi4+0x2a8>
 80012d8:	1a86      	subs	r6, r0, r2
 80012da:	eb64 0303 	sbc.w	r3, r4, r3
 80012de:	2001      	movs	r0, #1
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d0e6      	beq.n	80012b2 <__udivmoddi4+0xa6>
 80012e4:	e9c5 6300 	strd	r6, r3, [r5]
 80012e8:	e7e3      	b.n	80012b2 <__udivmoddi4+0xa6>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	f040 808f 	bne.w	800140e <__udivmoddi4+0x202>
 80012f0:	eba1 040c 	sub.w	r4, r1, ip
 80012f4:	2101      	movs	r1, #1
 80012f6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012fa:	fa1f f78c 	uxth.w	r7, ip
 80012fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8001302:	fb08 4416 	mls	r4, r8, r6, r4
 8001306:	fb07 f006 	mul.w	r0, r7, r6
 800130a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800130e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001312:	4298      	cmp	r0, r3
 8001314:	d908      	bls.n	8001328 <__udivmoddi4+0x11c>
 8001316:	eb1c 0303 	adds.w	r3, ip, r3
 800131a:	f106 34ff 	add.w	r4, r6, #4294967295
 800131e:	d202      	bcs.n	8001326 <__udivmoddi4+0x11a>
 8001320:	4298      	cmp	r0, r3
 8001322:	f200 80cb 	bhi.w	80014bc <__udivmoddi4+0x2b0>
 8001326:	4626      	mov	r6, r4
 8001328:	1a1c      	subs	r4, r3, r0
 800132a:	fbb4 f0f8 	udiv	r0, r4, r8
 800132e:	fb08 4410 	mls	r4, r8, r0, r4
 8001332:	fb00 f707 	mul.w	r7, r0, r7
 8001336:	fa1f f38e 	uxth.w	r3, lr
 800133a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800133e:	429f      	cmp	r7, r3
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x148>
 8001342:	eb1c 0303 	adds.w	r3, ip, r3
 8001346:	f100 34ff 	add.w	r4, r0, #4294967295
 800134a:	d202      	bcs.n	8001352 <__udivmoddi4+0x146>
 800134c:	429f      	cmp	r7, r3
 800134e:	f200 80ae 	bhi.w	80014ae <__udivmoddi4+0x2a2>
 8001352:	4620      	mov	r0, r4
 8001354:	1bdb      	subs	r3, r3, r7
 8001356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800135a:	e7a5      	b.n	80012a8 <__udivmoddi4+0x9c>
 800135c:	f1c1 0720 	rsb	r7, r1, #32
 8001360:	408b      	lsls	r3, r1
 8001362:	fa22 fc07 	lsr.w	ip, r2, r7
 8001366:	ea4c 0c03 	orr.w	ip, ip, r3
 800136a:	fa24 f607 	lsr.w	r6, r4, r7
 800136e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001372:	fbb6 f8f9 	udiv	r8, r6, r9
 8001376:	fa1f fe8c 	uxth.w	lr, ip
 800137a:	fb09 6618 	mls	r6, r9, r8, r6
 800137e:	fa20 f307 	lsr.w	r3, r0, r7
 8001382:	408c      	lsls	r4, r1
 8001384:	fa00 fa01 	lsl.w	sl, r0, r1
 8001388:	fb08 f00e 	mul.w	r0, r8, lr
 800138c:	431c      	orrs	r4, r3
 800138e:	0c23      	lsrs	r3, r4, #16
 8001390:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001394:	4298      	cmp	r0, r3
 8001396:	fa02 f201 	lsl.w	r2, r2, r1
 800139a:	d90a      	bls.n	80013b2 <__udivmoddi4+0x1a6>
 800139c:	eb1c 0303 	adds.w	r3, ip, r3
 80013a0:	f108 36ff 	add.w	r6, r8, #4294967295
 80013a4:	f080 8081 	bcs.w	80014aa <__udivmoddi4+0x29e>
 80013a8:	4298      	cmp	r0, r3
 80013aa:	d97e      	bls.n	80014aa <__udivmoddi4+0x29e>
 80013ac:	f1a8 0802 	sub.w	r8, r8, #2
 80013b0:	4463      	add	r3, ip
 80013b2:	1a1e      	subs	r6, r3, r0
 80013b4:	fbb6 f3f9 	udiv	r3, r6, r9
 80013b8:	fb09 6613 	mls	r6, r9, r3, r6
 80013bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80013c0:	b2a4      	uxth	r4, r4
 80013c2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80013c6:	45a6      	cmp	lr, r4
 80013c8:	d908      	bls.n	80013dc <__udivmoddi4+0x1d0>
 80013ca:	eb1c 0404 	adds.w	r4, ip, r4
 80013ce:	f103 30ff 	add.w	r0, r3, #4294967295
 80013d2:	d266      	bcs.n	80014a2 <__udivmoddi4+0x296>
 80013d4:	45a6      	cmp	lr, r4
 80013d6:	d964      	bls.n	80014a2 <__udivmoddi4+0x296>
 80013d8:	3b02      	subs	r3, #2
 80013da:	4464      	add	r4, ip
 80013dc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013e0:	fba0 8302 	umull	r8, r3, r0, r2
 80013e4:	eba4 040e 	sub.w	r4, r4, lr
 80013e8:	429c      	cmp	r4, r3
 80013ea:	46c6      	mov	lr, r8
 80013ec:	461e      	mov	r6, r3
 80013ee:	d350      	bcc.n	8001492 <__udivmoddi4+0x286>
 80013f0:	d04d      	beq.n	800148e <__udivmoddi4+0x282>
 80013f2:	b155      	cbz	r5, 800140a <__udivmoddi4+0x1fe>
 80013f4:	ebba 030e 	subs.w	r3, sl, lr
 80013f8:	eb64 0406 	sbc.w	r4, r4, r6
 80013fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001400:	40cb      	lsrs	r3, r1
 8001402:	431f      	orrs	r7, r3
 8001404:	40cc      	lsrs	r4, r1
 8001406:	e9c5 7400 	strd	r7, r4, [r5]
 800140a:	2100      	movs	r1, #0
 800140c:	e751      	b.n	80012b2 <__udivmoddi4+0xa6>
 800140e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001412:	f1c2 0320 	rsb	r3, r2, #32
 8001416:	40d9      	lsrs	r1, r3
 8001418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800141c:	fa20 f303 	lsr.w	r3, r0, r3
 8001420:	fa00 fe02 	lsl.w	lr, r0, r2
 8001424:	fbb1 f0f8 	udiv	r0, r1, r8
 8001428:	fb08 1110 	mls	r1, r8, r0, r1
 800142c:	4094      	lsls	r4, r2
 800142e:	431c      	orrs	r4, r3
 8001430:	fa1f f78c 	uxth.w	r7, ip
 8001434:	0c23      	lsrs	r3, r4, #16
 8001436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800143a:	fb00 f107 	mul.w	r1, r0, r7
 800143e:	4299      	cmp	r1, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x248>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f100 36ff 	add.w	r6, r0, #4294967295
 800144a:	d22c      	bcs.n	80014a6 <__udivmoddi4+0x29a>
 800144c:	4299      	cmp	r1, r3
 800144e:	d92a      	bls.n	80014a6 <__udivmoddi4+0x29a>
 8001450:	3802      	subs	r0, #2
 8001452:	4463      	add	r3, ip
 8001454:	1a5b      	subs	r3, r3, r1
 8001456:	fbb3 f1f8 	udiv	r1, r3, r8
 800145a:	fb08 3311 	mls	r3, r8, r1, r3
 800145e:	b2a4      	uxth	r4, r4
 8001460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001464:	fb01 f307 	mul.w	r3, r1, r7
 8001468:	42a3      	cmp	r3, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x272>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f101 36ff 	add.w	r6, r1, #4294967295
 8001474:	d213      	bcs.n	800149e <__udivmoddi4+0x292>
 8001476:	42a3      	cmp	r3, r4
 8001478:	d911      	bls.n	800149e <__udivmoddi4+0x292>
 800147a:	3902      	subs	r1, #2
 800147c:	4464      	add	r4, ip
 800147e:	1ae4      	subs	r4, r4, r3
 8001480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001484:	e73b      	b.n	80012fe <__udivmoddi4+0xf2>
 8001486:	4604      	mov	r4, r0
 8001488:	e6f2      	b.n	8001270 <__udivmoddi4+0x64>
 800148a:	4608      	mov	r0, r1
 800148c:	e708      	b.n	80012a0 <__udivmoddi4+0x94>
 800148e:	45c2      	cmp	sl, r8
 8001490:	d2af      	bcs.n	80013f2 <__udivmoddi4+0x1e6>
 8001492:	ebb8 0e02 	subs.w	lr, r8, r2
 8001496:	eb63 060c 	sbc.w	r6, r3, ip
 800149a:	3801      	subs	r0, #1
 800149c:	e7a9      	b.n	80013f2 <__udivmoddi4+0x1e6>
 800149e:	4631      	mov	r1, r6
 80014a0:	e7ed      	b.n	800147e <__udivmoddi4+0x272>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e79a      	b.n	80013dc <__udivmoddi4+0x1d0>
 80014a6:	4630      	mov	r0, r6
 80014a8:	e7d4      	b.n	8001454 <__udivmoddi4+0x248>
 80014aa:	46b0      	mov	r8, r6
 80014ac:	e781      	b.n	80013b2 <__udivmoddi4+0x1a6>
 80014ae:	4463      	add	r3, ip
 80014b0:	3802      	subs	r0, #2
 80014b2:	e74f      	b.n	8001354 <__udivmoddi4+0x148>
 80014b4:	4606      	mov	r6, r0
 80014b6:	4623      	mov	r3, r4
 80014b8:	4608      	mov	r0, r1
 80014ba:	e711      	b.n	80012e0 <__udivmoddi4+0xd4>
 80014bc:	3e02      	subs	r6, #2
 80014be:	4463      	add	r3, ip
 80014c0:	e732      	b.n	8001328 <__udivmoddi4+0x11c>
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fae7 	bl	8001ab0 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb02 	bl	8001af0 <SX1278_hw_SPIReadByte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fa9f 	bl	8001a3a <SX1278_hw_SetNSS>
	return tmp;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	4613      	mov	r3, r2
 8001514:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fa8c 	bl	8001a3a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f000 fabd 	bl	8001ab0 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	78ba      	ldrb	r2, [r7, #2]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fab6 	bl	8001ab0 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fa75 	bl	8001a3a <SX1278_hw_SetNSS>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	460b      	mov	r3, r1
 8001566:	72fb      	strb	r3, [r7, #11]
 8001568:	4613      	mov	r3, r2
 800156a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d929      	bls.n	80015c6 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fa5e 	bl	8001a3a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f000 fa8f 	bl	8001ab0 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
 8001596:	e00b      	b.n	80015b0 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f000 fa83 	bl	8001ab0 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	3301      	adds	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
 80015b0:	7dfa      	ldrb	r2, [r7, #23]
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3ef      	bcc.n	8001598 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fa3b 	bl	8001a3a <SX1278_hw_SetNSS>
 80015c4:	e000      	b.n	80015c8 <SX1278_SPIBurstWrite+0x70>
		return;
 80015c6:	bf00      	nop
	}
}
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f90d 	bl	80017f8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 faac 	bl	8001b3c <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f917 	bl	8001818 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	04d9      	lsls	r1, r3, #19
 80015fa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80015fe:	04d0      	lsls	r0, r2, #19
 8001600:	4a6f      	ldr	r2, [pc, #444]	@ (80017c0 <SX1278_config+0x1f0>)
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	f7ff fde9 	bl	80011dc <__aeabi_uldivmod>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8001612:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	0c02      	lsrs	r2, r0, #16
 8001620:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001624:	0c0b      	lsrs	r3, r1, #16
 8001626:	b2d3      	uxtb	r3, r2
 8001628:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800162a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	0a02      	lsrs	r2, r0, #8
 8001638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800163c:	0a0b      	lsrs	r3, r1, #8
 800163e:	b2d3      	uxtb	r3, r2
 8001640:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8001642:	7c3b      	ldrb	r3, [r7, #16]
 8001644:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001646:	f107 020c 	add.w	r2, r7, #12
 800164a:	2303      	movs	r3, #3
 800164c:	2106      	movs	r1, #6
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff82 	bl	8001558 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001654:	2234      	movs	r2, #52	@ 0x34
 8001656:	2139      	movs	r1, #57	@ 0x39
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff54 	bl	8001506 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7c1b      	ldrb	r3, [r3, #16]
 8001662:	461a      	mov	r2, r3
 8001664:	4b57      	ldr	r3, [pc, #348]	@ (80017c4 <SX1278_config+0x1f4>)
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	461a      	mov	r2, r3
 800166a:	2109      	movs	r1, #9
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff4a 	bl	8001506 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001672:	220b      	movs	r2, #11
 8001674:	210b      	movs	r1, #11
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff45 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800167c:	2223      	movs	r2, #35	@ 0x23
 800167e:	210c      	movs	r1, #12
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff40 	bl	8001506 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7c5b      	ldrb	r3, [r3, #17]
 800168a:	461a      	mov	r2, r3
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <SX1278_config+0x1f8>)
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b06      	cmp	r3, #6
 8001692:	d147      	bne.n	8001724 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7c9b      	ldrb	r3, [r3, #18]
 8001698:	461a      	mov	r2, r3
 800169a:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <SX1278_config+0x1fc>)
 800169c:	5c9b      	ldrb	r3, [r3, r2]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7cdb      	ldrb	r3, [r3, #19]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <SX1278_config+0x200>)
 80016aa:	5c5b      	ldrb	r3, [r3, r1]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	211d      	movs	r1, #29
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff22 	bl	8001506 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7c5b      	ldrb	r3, [r3, #17]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <SX1278_config+0x1f8>)
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7d1b      	ldrb	r3, [r3, #20]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <SX1278_config+0x204>)
 80016d8:	5c5b      	ldrb	r3, [r3, r1]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80016e2:	3303      	adds	r3, #3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	211e      	movs	r1, #30
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff0b 	bl	8001506 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80016f0:	2131      	movs	r1, #49	@ 0x31
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fee8 	bl	80014c8 <SX1278_SPIRead>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	f023 0307 	bic.w	r3, r3, #7
 8001702:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f043 0305 	orr.w	r3, r3, #5
 800170a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	461a      	mov	r2, r3
 8001710:	2131      	movs	r1, #49	@ 0x31
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fef7 	bl	8001506 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001718:	220c      	movs	r2, #12
 800171a:	2137      	movs	r1, #55	@ 0x37
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fef2 	bl	8001506 <SX1278_SPIWrite>
 8001722:	e029      	b.n	8001778 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7c9b      	ldrb	r3, [r3, #18]
 8001728:	461a      	mov	r2, r3
 800172a:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <SX1278_config+0x1fc>)
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7cdb      	ldrb	r3, [r3, #19]
 8001736:	4619      	mov	r1, r3
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <SX1278_config+0x200>)
 800173a:	5c5b      	ldrb	r3, [r3, r1]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	211d      	movs	r1, #29
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fedc 	bl	8001506 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7c5b      	ldrb	r3, [r3, #17]
 8001752:	461a      	mov	r2, r3
 8001754:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <SX1278_config+0x1f8>)
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7d1b      	ldrb	r3, [r3, #20]
 8001760:	4619      	mov	r1, r3
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <SX1278_config+0x204>)
 8001764:	5c5b      	ldrb	r3, [r3, r1]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	211e      	movs	r1, #30
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fec7 	bl	8001506 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001778:	2204      	movs	r2, #4
 800177a:	2126      	movs	r1, #38	@ 0x26
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fec2 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001782:	2208      	movs	r2, #8
 8001784:	211f      	movs	r1, #31
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff febd 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff feb8 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001796:	2208      	movs	r2, #8
 8001798:	2121      	movs	r1, #33	@ 0x21
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff feb3 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80017a0:	2201      	movs	r2, #1
 80017a2:	2141      	movs	r1, #65	@ 0x41
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff feae 	bl	8001506 <SX1278_SPIWrite>
	module->readBytes = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f810 	bl	80017d8 <SX1278_standby>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	01e84800 	.word	0x01e84800
 80017c4:	0800b860 	.word	0x0800b860
 80017c8:	0800b864 	.word	0x0800b864
 80017cc:	0800b86c 	.word	0x0800b86c
 80017d0:	0800b878 	.word	0x0800b878
 80017d4:	0800b87c 	.word	0x0800b87c

080017d8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80017e0:	2209      	movs	r2, #9
 80017e2:	2101      	movs	r1, #1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe8e 	bl	8001506 <SX1278_SPIWrite>
	module->status = STANDBY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	759a      	strb	r2, [r3, #22]
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001800:	2208      	movs	r2, #8
 8001802:	2101      	movs	r1, #1
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe7e 	bl	8001506 <SX1278_SPIWrite>
	module->status = SLEEP;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	759a      	strb	r2, [r3, #22]
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001820:	2288      	movs	r2, #136	@ 0x88
 8001822:	2101      	movs	r1, #1
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fe6e 	bl	8001506 <SX1278_SPIWrite>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800183a:	22ff      	movs	r2, #255	@ 0xff
 800183c:	2112      	movs	r1, #18
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fe61 	bl	8001506 <SX1278_SPIWrite>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	460b      	mov	r3, r1
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	7afa      	ldrb	r2, [r7, #11]
 800185e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff feb5 	bl	80015d0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001866:	2287      	movs	r2, #135	@ 0x87
 8001868:	214d      	movs	r1, #77	@ 0x4d
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fe4b 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001870:	2200      	movs	r2, #0
 8001872:	2124      	movs	r1, #36	@ 0x24
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff fe46 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800187a:	2241      	movs	r2, #65	@ 0x41
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f7ff fe41 	bl	8001506 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff ffd4 	bl	8001832 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800188a:	22f7      	movs	r2, #247	@ 0xf7
 800188c:	2111      	movs	r1, #17
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fe39 	bl	8001506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	461a      	mov	r2, r3
 8001898:	2122      	movs	r1, #34	@ 0x22
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fe33 	bl	8001506 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80018a0:	210e      	movs	r1, #14
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff fe10 	bl	80014c8 <SX1278_SPIRead>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	461a      	mov	r2, r3
 80018b0:	210d      	movs	r1, #13
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fe27 	bl	8001506 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80018b8:	2122      	movs	r1, #34	@ 0x22
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fe04 	bl	80014c8 <SX1278_SPIRead>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80018c4:	7dba      	ldrb	r2, [r7, #22]
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d104      	bne.n	80018d6 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	759a      	strb	r2, [r3, #22]
			return 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3b01      	subs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ea      	bne.n	80018b8 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f8be 	bl	8001a68 <SX1278_hw_Reset>
			SX1278_config(module);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fe6f 	bl	80015d0 <SX1278_config>
			return 0;
 80018f2:	2300      	movs	r3, #0
		}
	}
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	2100      	movs	r1, #0
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fe20 	bl	8001558 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001918:	228b      	movs	r2, #139	@ 0x8b
 800191a:	2101      	movs	r1, #1
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fdf2 	bl	8001506 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f913 	bl	8001b52 <SX1278_hw_GetDIO0>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001932:	2112      	movs	r1, #18
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fdc7 	bl	80014c8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff ff79 	bl	8001832 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff ff49 	bl	80017d8 <SX1278_standby>
			return 1;
 8001946:	2301      	movs	r3, #1
 8001948:	e013      	b.n	8001972 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f884 	bl	8001a68 <SX1278_hw_Reset>
			SX1278_config(module);
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff fe35 	bl	80015d0 <SX1278_config>
			return 0;
 8001966:	2300      	movs	r3, #0
 8001968:	e003      	b.n	8001972 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 f8e6 	bl	8001b3c <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001970:	e7d7      	b.n	8001922 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f840 	bl	8001a10 <SX1278_hw_init>
	module->frequency = frequency;
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001996:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	7e3a      	ldrb	r2, [r7, #24]
 800199e:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7f3a      	ldrb	r2, [r7, #28]
 80019a4:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019ac:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80019b4:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019bc:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019c4:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fe02 	bl	80015d0 <SX1278_config>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff2e 	bl	800184c <SX1278_LoRaEntryTx>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ff7d 	bl	80018fc <SX1278_LoRaTxPacket>
 8001a02:	4603      	mov	r3, r0
 8001a04:	e000      	b.n	8001a08 <SX1278_transmit+0x34>
	}
	return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f80d 	bl	8001a3a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6858      	ldr	r0, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f003 f816 	bl	8004a5e <HAL_GPIO_WritePin>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6958      	ldr	r0, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f002 ffff 	bl	8004a5e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffe1 	bl	8001a3a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6858      	ldr	r0, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	f002 ffea 	bl	8004a5e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 f856 	bl	8001b3c <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6858      	ldr	r0, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f002 ffde 	bl	8004a5e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001aa2:	2064      	movs	r0, #100	@ 0x64
 8001aa4:	f000 f84a 	bl	8001b3c <SX1278_hw_DelayMs>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffbb 	bl	8001a3a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6998      	ldr	r0, [r3, #24]
 8001ac8:	1cf9      	adds	r1, r7, #3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f005 f986 	bl	8006de0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001ad4:	bf00      	nop
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fc73 	bl	80073c6 <HAL_SPI_GetState>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d1f7      	bne.n	8001ad6 <SX1278_hw_SPICommand+0x26>
		;
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff99 	bl	8001a3a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6998      	ldr	r0, [r3, #24]
 8001b0c:	f107 020e 	add.w	r2, r7, #14
 8001b10:	f107 010f 	add.w	r1, r7, #15
 8001b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f005 faa3 	bl	8007066 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001b20:	bf00      	nop
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fc4d 	bl	80073c6 <HAL_SPI_GetState>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d1f7      	bne.n	8001b22 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f002 fcbd 	bl	80044c4 <HAL_Delay>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f002 ff62 	bl	8004a30 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	bf0c      	ite	eq
 8001b72:	2301      	moveq	r3, #1
 8001b74:	2300      	movne	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	715a      	strb	r2, [r3, #5]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b08a      	sub	sp, #40	@ 0x28
 8001bba:	af04      	add	r7, sp, #16
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	8af9      	ldrh	r1, [r7, #22]
 8001bd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2301      	movs	r3, #1
 8001be8:	f003 fcfa 	bl	80055e0 <HAL_I2C_Mem_Read>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10b      	bne.n	8001c0a <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001bf2:	7d7b      	ldrb	r3, [r7, #21]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	7d3b      	ldrb	r3, [r7, #20]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	801a      	strh	r2, [r3, #0]
		return true;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <read_register16+0x56>
	} else
		return false;
 8001c0a:	2300      	movs	r3, #0

}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08b      	sub	sp, #44	@ 0x2c
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
 8001c24:	4613      	mov	r3, r2
 8001c26:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	7abb      	ldrb	r3, [r7, #10]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8af9      	ldrh	r1, [r7, #22]
 8001c3e:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001c42:	9402      	str	r4, [sp, #8]
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f003 fcc8 	bl	80055e0 <HAL_I2C_Mem_Read>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <read_data+0x46>
		return 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <read_data+0x48>
	else
		return 1;
 8001c5a:	2301      	movs	r3, #1

}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2188      	movs	r1, #136	@ 0x88
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff9f 	bl	8001bb6 <read_register16>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06f      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3302      	adds	r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	218a      	movs	r1, #138	@ 0x8a
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff95 	bl	8001bb6 <read_register16>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d065      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	461a      	mov	r2, r3
 8001c98:	218c      	movs	r1, #140	@ 0x8c
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff8b 	bl	8001bb6 <read_register16>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d05b      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3306      	adds	r3, #6
 8001caa:	461a      	mov	r2, r3
 8001cac:	218e      	movs	r1, #142	@ 0x8e
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff81 	bl	8001bb6 <read_register16>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d051      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2190      	movs	r1, #144	@ 0x90
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff77 	bl	8001bb6 <read_register16>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d047      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	330a      	adds	r3, #10
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2192      	movs	r1, #146	@ 0x92
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff6d 	bl	8001bb6 <read_register16>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03d      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2194      	movs	r1, #148	@ 0x94
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff63 	bl	8001bb6 <read_register16>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d033      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	330e      	adds	r3, #14
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2196      	movs	r1, #150	@ 0x96
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff59 	bl	8001bb6 <read_register16>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d029      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2198      	movs	r1, #152	@ 0x98
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff4f 	bl	8001bb6 <read_register16>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01f      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3312      	adds	r3, #18
 8001d22:	461a      	mov	r2, r3
 8001d24:	219a      	movs	r1, #154	@ 0x9a
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff45 	bl	8001bb6 <read_register16>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d015      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3314      	adds	r3, #20
 8001d36:	461a      	mov	r2, r3
 8001d38:	219c      	movs	r1, #156	@ 0x9c
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff3b 	bl	8001bb6 <read_register16>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	219e      	movs	r1, #158	@ 0x9e
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ff31 	bl	8001bb6 <read_register16>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <read_calibration_data+0xfa>

		return true;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <read_calibration_data+0xfc>
	}

	return false;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f103 0218 	add.w	r2, r3, #24
 8001d76:	2301      	movs	r3, #1
 8001d78:	21a1      	movs	r1, #161	@ 0xa1
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff4a 	bl	8001c14 <read_data>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d14b      	bne.n	8001e1e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	331a      	adds	r3, #26
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	21e1      	movs	r1, #225	@ 0xe1
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff11 	bl	8001bb6 <read_register16>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d041      	beq.n	8001e1e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f103 021c 	add.w	r2, r3, #28
 8001da0:	2301      	movs	r3, #1
 8001da2:	21e3      	movs	r1, #227	@ 0xe3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff35 	bl	8001c14 <read_data>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d136      	bne.n	8001e1e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001db0:	f107 030e 	add.w	r3, r7, #14
 8001db4:	461a      	mov	r2, r3
 8001db6:	21e4      	movs	r1, #228	@ 0xe4
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fefc 	bl	8001bb6 <read_register16>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02c      	beq.n	8001e1e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	461a      	mov	r2, r3
 8001dca:	21e5      	movs	r1, #229	@ 0xe5
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fef2 	bl	8001bb6 <read_register16>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d022      	beq.n	8001e1e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001dde:	2301      	movs	r3, #1
 8001de0:	21e7      	movs	r1, #231	@ 0xe7
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff16 	bl	8001c14 <read_data>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d117      	bne.n	8001e1e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	121b      	asrs	r3, r3, #8
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001e0e:	89bb      	ldrh	r3, [r7, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	841a      	strh	r2, [r3, #32]

		return true;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
 8001e34:	4613      	mov	r3, r2
 8001e36:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	89f9      	ldrh	r1, [r7, #14]
 8001e4a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2301      	movs	r3, #1
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	1cbb      	adds	r3, r7, #2
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f003 fac7 	bl	80053ec <HAL_I2C_Mem_Write>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <write_register8+0x40>
		return false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <write_register8+0x42>
	else
		return true;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e80:	2b76      	cmp	r3, #118	@ 0x76
 8001e82:	d005      	beq.n	8001e90 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e88:	2b77      	cmp	r3, #119	@ 0x77
 8001e8a:	d001      	beq.n	8001e90 <bmp280_init+0x1e>

		return false;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e099      	b.n	8001fc4 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e96:	2301      	movs	r3, #1
 8001e98:	21d0      	movs	r1, #208	@ 0xd0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff feba 	bl	8001c14 <read_data>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <bmp280_init+0x38>
		return false;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e08c      	b.n	8001fc4 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001eb0:	2b58      	cmp	r3, #88	@ 0x58
 8001eb2:	d006      	beq.n	8001ec2 <bmp280_init+0x50>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001eba:	2b60      	cmp	r3, #96	@ 0x60
 8001ebc:	d001      	beq.n	8001ec2 <bmp280_init+0x50>

		return false;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e080      	b.n	8001fc4 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001ec2:	22b6      	movs	r2, #182	@ 0xb6
 8001ec4:	21e0      	movs	r1, #224	@ 0xe0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffae 	bl	8001e28 <write_register8>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <bmp280_init+0x64>
		return false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e076      	b.n	8001fc4 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001ed6:	f107 020c 	add.w	r2, r7, #12
 8001eda:	2301      	movs	r3, #1
 8001edc:	21f3      	movs	r1, #243	@ 0xf3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fe98 	bl	8001c14 <read_data>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f5      	bne.n	8001ed6 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001eea:	7b3b      	ldrb	r3, [r7, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff feb5 	bl	8001c64 <read_calibration_data>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d100      	bne.n	8001f08 <bmp280_init+0x96>
 8001f06:	e001      	b.n	8001f0c <bmp280_init+0x9a>
		return false;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e05b      	b.n	8001fc4 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f12:	2b60      	cmp	r3, #96	@ 0x60
 8001f14:	d10a      	bne.n	8001f2c <bmp280_init+0xba>
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff26 	bl	8001d68 <read_hum_calibration_data>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f083 0301 	eor.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <bmp280_init+0xba>
		return false;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e04b      	b.n	8001fc4 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	795b      	ldrb	r3, [r3, #5]
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	461a      	mov	r2, r3
 8001f46:	21f5      	movs	r1, #245	@ 0xf5
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff6d 	bl	8001e28 <write_register8>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <bmp280_init+0xe6>
		return false;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e035      	b.n	8001fc4 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	78db      	ldrb	r3, [r3, #3]
 8001f6a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	789b      	ldrb	r3, [r3, #2]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b25a      	sxtb	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001f84:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f8c:	2b60      	cmp	r3, #96	@ 0x60
 8001f8e:	d10d      	bne.n	8001fac <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001f96:	7b7b      	ldrb	r3, [r7, #13]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	21f2      	movs	r1, #242	@ 0xf2
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff43 	bl	8001e28 <write_register8>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <bmp280_init+0x13a>
			return false;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e00b      	b.n	8001fc4 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	21f4      	movs	r1, #244	@ 0xf4
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff38 	bl	8001e28 <write_register8>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <bmp280_init+0x150>
		return false;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <bmp280_init+0x152>
	}

	return true;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	10da      	asrs	r2, r3, #3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001fee:	12db      	asrs	r3, r3, #11
 8001ff0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	111b      	asrs	r3, r3, #4
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	8812      	ldrh	r2, [r2, #0]
 8001ffa:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	1112      	asrs	r2, r2, #4
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	8809      	ldrh	r1, [r1, #0]
 8002004:	1a52      	subs	r2, r2, r1
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002016:	139b      	asrs	r3, r3, #14
 8002018:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	441a      	add	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3380      	adds	r3, #128	@ 0x80
 8002030:	121b      	asrs	r3, r3, #8
}
 8002032:	4618      	mov	r0, r3
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b0cc      	sub	sp, #304	@ 0x130
 8002042:	af00      	add	r7, sp, #0
 8002044:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002048:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800204c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002054:	17da      	asrs	r2, r3, #31
 8002056:	461c      	mov	r4, r3
 8002058:	4615      	mov	r5, r2
 800205a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800205e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002062:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002066:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800206a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800206e:	fb03 f102 	mul.w	r1, r3, r2
 8002072:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002076:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	18ca      	adds	r2, r1, r3
 8002080:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002084:	fba3 8903 	umull	r8, r9, r3, r3
 8002088:	eb02 0309 	add.w	r3, r2, r9
 800208c:	4699      	mov	r9, r3
 800208e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002092:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002096:	b21b      	sxth	r3, r3
 8002098:	17da      	asrs	r2, r3, #31
 800209a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800209e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80020a6:	4603      	mov	r3, r0
 80020a8:	fb03 f209 	mul.w	r2, r3, r9
 80020ac:	460b      	mov	r3, r1
 80020ae:	fb08 f303 	mul.w	r3, r8, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	4602      	mov	r2, r0
 80020b6:	fba8 2102 	umull	r2, r1, r8, r2
 80020ba:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 80020be:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80020c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80020c6:	4413      	add	r3, r2
 80020c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020cc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80020d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80020d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80020d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	17da      	asrs	r2, r3, #31
 80020e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020e8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80020ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020f0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80020f4:	462a      	mov	r2, r5
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020fe:	4621      	mov	r1, r4
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	441a      	add	r2, r3
 8002106:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800210a:	4621      	mov	r1, r4
 800210c:	fba3 3101 	umull	r3, r1, r3, r1
 8002110:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8002114:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800212e:	462b      	mov	r3, r5
 8002130:	0459      	lsls	r1, r3, #17
 8002132:	4622      	mov	r2, r4
 8002134:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8002138:	4623      	mov	r3, r4
 800213a:	0458      	lsls	r0, r3, #17
 800213c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002140:	1814      	adds	r4, r2, r0
 8002142:	643c      	str	r4, [r7, #64]	@ 0x40
 8002144:	414b      	adcs	r3, r1
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
 8002148:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800214c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002154:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002158:	b21b      	sxth	r3, r3
 800215a:	17da      	asrs	r2, r3, #31
 800215c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002160:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002170:	00d9      	lsls	r1, r3, #3
 8002172:	2000      	movs	r0, #0
 8002174:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002178:	1814      	adds	r4, r2, r0
 800217a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800217c:	414b      	adcs	r3, r1
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002180:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002184:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002188:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800218c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002190:	fb03 f102 	mul.w	r1, r3, r2
 8002194:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002198:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	18ca      	adds	r2, r1, r3
 80021a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021a6:	fba3 3103 	umull	r3, r1, r3, r3
 80021aa:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 80021ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80021b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b6:	18d3      	adds	r3, r2, r3
 80021b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80021bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	17da      	asrs	r2, r3, #31
 80021c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021cc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021d0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80021d4:	4622      	mov	r2, r4
 80021d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021da:	4641      	mov	r1, r8
 80021dc:	fb01 f202 	mul.w	r2, r1, r2
 80021e0:	464d      	mov	r5, r9
 80021e2:	4618      	mov	r0, r3
 80021e4:	4621      	mov	r1, r4
 80021e6:	4603      	mov	r3, r0
 80021e8:	fb03 f305 	mul.w	r3, r3, r5
 80021ec:	4413      	add	r3, r2
 80021ee:	4602      	mov	r2, r0
 80021f0:	4641      	mov	r1, r8
 80021f2:	fba2 2101 	umull	r2, r1, r2, r1
 80021f6:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80021fa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80021fe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002202:	4413      	add	r3, r2
 8002204:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002214:	4623      	mov	r3, r4
 8002216:	0a18      	lsrs	r0, r3, #8
 8002218:	462a      	mov	r2, r5
 800221a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800221e:	462b      	mov	r3, r5
 8002220:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800222a:	b21b      	sxth	r3, r3
 800222c:	17da      	asrs	r2, r3, #31
 800222e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002232:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002236:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800223a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800223e:	464a      	mov	r2, r9
 8002240:	fb02 f203 	mul.w	r2, r2, r3
 8002244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002248:	4644      	mov	r4, r8
 800224a:	fb04 f303 	mul.w	r3, r4, r3
 800224e:	441a      	add	r2, r3
 8002250:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002254:	4644      	mov	r4, r8
 8002256:	fba3 3404 	umull	r3, r4, r3, r4
 800225a:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 800225e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002262:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002278:	464c      	mov	r4, r9
 800227a:	0323      	lsls	r3, r4, #12
 800227c:	46c4      	mov	ip, r8
 800227e:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8002282:	4644      	mov	r4, r8
 8002284:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002286:	1884      	adds	r4, r0, r2
 8002288:	633c      	str	r4, [r7, #48]	@ 0x30
 800228a:	eb41 0303 	adc.w	r3, r1, r3
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002290:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002294:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002298:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800229c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80022a0:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80022a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80022a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ac:	88db      	ldrh	r3, [r3, #6]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022b6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022ba:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80022be:	4622      	mov	r2, r4
 80022c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022c4:	4641      	mov	r1, r8
 80022c6:	fb01 f202 	mul.w	r2, r1, r2
 80022ca:	464d      	mov	r5, r9
 80022cc:	4618      	mov	r0, r3
 80022ce:	4621      	mov	r1, r4
 80022d0:	4603      	mov	r3, r0
 80022d2:	fb03 f305 	mul.w	r3, r3, r5
 80022d6:	4413      	add	r3, r2
 80022d8:	4602      	mov	r2, r0
 80022da:	4641      	mov	r1, r8
 80022dc:	fba2 2101 	umull	r2, r1, r2, r1
 80022e0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80022e4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80022e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80022ec:	4413      	add	r3, r2
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80022fe:	4629      	mov	r1, r5
 8002300:	104a      	asrs	r2, r1, #1
 8002302:	4629      	mov	r1, r5
 8002304:	17cb      	asrs	r3, r1, #31
 8002306:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800230a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800230e:	4313      	orrs	r3, r2
 8002310:	d101      	bne.n	8002316 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8002312:	2300      	movs	r3, #0
 8002314:	e146      	b.n	80025a4 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8002316:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800231a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800231e:	17da      	asrs	r2, r3, #31
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002324:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002328:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800232c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002330:	105b      	asrs	r3, r3, #1
 8002332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002336:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800233a:	07db      	lsls	r3, r3, #31
 800233c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002340:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002344:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002348:	4604      	mov	r4, r0
 800234a:	1aa4      	subs	r4, r4, r2
 800234c:	67bc      	str	r4, [r7, #120]	@ 0x78
 800234e:	eb61 0303 	sbc.w	r3, r1, r3
 8002352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002354:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002358:	4622      	mov	r2, r4
 800235a:	462b      	mov	r3, r5
 800235c:	1891      	adds	r1, r2, r2
 800235e:	6239      	str	r1, [r7, #32]
 8002360:	415b      	adcs	r3, r3
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
 8002364:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002368:	4621      	mov	r1, r4
 800236a:	1851      	adds	r1, r2, r1
 800236c:	61b9      	str	r1, [r7, #24]
 800236e:	4629      	mov	r1, r5
 8002370:	414b      	adcs	r3, r1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002380:	4649      	mov	r1, r9
 8002382:	018b      	lsls	r3, r1, #6
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800238a:	4641      	mov	r1, r8
 800238c:	018a      	lsls	r2, r1, #6
 800238e:	4641      	mov	r1, r8
 8002390:	1889      	adds	r1, r1, r2
 8002392:	6139      	str	r1, [r7, #16]
 8002394:	4649      	mov	r1, r9
 8002396:	eb43 0101 	adc.w	r1, r3, r1
 800239a:	6179      	str	r1, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023a8:	4649      	mov	r1, r9
 80023aa:	008b      	lsls	r3, r1, #2
 80023ac:	46c4      	mov	ip, r8
 80023ae:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80023b2:	4641      	mov	r1, r8
 80023b4:	008a      	lsls	r2, r1, #2
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	4622      	mov	r2, r4
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	460b      	mov	r3, r1
 80023c4:	462a      	mov	r2, r5
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80023d8:	4649      	mov	r1, r9
 80023da:	008b      	lsls	r3, r1, #2
 80023dc:	46c4      	mov	ip, r8
 80023de:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80023e2:	4641      	mov	r1, r8
 80023e4:	008a      	lsls	r2, r1, #2
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	4622      	mov	r2, r4
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023f2:	462b      	mov	r3, r5
 80023f4:	460a      	mov	r2, r1
 80023f6:	eb42 0303 	adc.w	r3, r2, r3
 80023fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80023fc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002400:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002404:	f7fe fe9a 	bl	800113c <__aeabi_ldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002414:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002418:	b21b      	sxth	r3, r3
 800241a:	17da      	asrs	r2, r3, #31
 800241c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800241e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002420:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	0b50      	lsrs	r0, r2, #13
 800242e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002432:	1359      	asrs	r1, r3, #13
 8002434:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8002438:	462b      	mov	r3, r5
 800243a:	fb00 f203 	mul.w	r2, r0, r3
 800243e:	4623      	mov	r3, r4
 8002440:	fb03 f301 	mul.w	r3, r3, r1
 8002444:	4413      	add	r3, r2
 8002446:	4622      	mov	r2, r4
 8002448:	fba2 2100 	umull	r2, r1, r2, r0
 800244c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8002450:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8002454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002458:	4413      	add	r3, r2
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800245e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	0b50      	lsrs	r0, r2, #13
 800246c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002470:	1359      	asrs	r1, r3, #13
 8002472:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002476:	462b      	mov	r3, r5
 8002478:	fb00 f203 	mul.w	r2, r0, r3
 800247c:	4623      	mov	r3, r4
 800247e:	fb03 f301 	mul.w	r3, r3, r1
 8002482:	4413      	add	r3, r2
 8002484:	4622      	mov	r2, r4
 8002486:	fba2 2100 	umull	r2, r1, r2, r0
 800248a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 800248e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002492:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002496:	4413      	add	r3, r2
 8002498:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80024a8:	4621      	mov	r1, r4
 80024aa:	0e4a      	lsrs	r2, r1, #25
 80024ac:	4620      	mov	r0, r4
 80024ae:	4629      	mov	r1, r5
 80024b0:	460c      	mov	r4, r1
 80024b2:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80024b6:	164b      	asrs	r3, r1, #25
 80024b8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80024bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	17da      	asrs	r2, r3, #31
 80024c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80024cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80024d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024d4:	462a      	mov	r2, r5
 80024d6:	fb02 f203 	mul.w	r2, r2, r3
 80024da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024de:	4621      	mov	r1, r4
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80024ea:	4621      	mov	r1, r4
 80024ec:	fba2 2101 	umull	r2, r1, r2, r1
 80024f0:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80024f4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80024f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80024fc:	4413      	add	r3, r2
 80024fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800250e:	4621      	mov	r1, r4
 8002510:	0cca      	lsrs	r2, r1, #19
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	460c      	mov	r4, r1
 8002518:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800251c:	14cb      	asrs	r3, r1, #19
 800251e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002522:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8002526:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800252a:	1884      	adds	r4, r0, r2
 800252c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800252e:	eb41 0303 	adc.w	r3, r1, r3
 8002532:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002534:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002538:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800253c:	4621      	mov	r1, r4
 800253e:	1889      	adds	r1, r1, r2
 8002540:	6539      	str	r1, [r7, #80]	@ 0x50
 8002542:	4629      	mov	r1, r5
 8002544:	eb43 0101 	adc.w	r1, r3, r1
 8002548:	6579      	str	r1, [r7, #84]	@ 0x54
 800254a:	f04f 0000 	mov.w	r0, #0
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002556:	4623      	mov	r3, r4
 8002558:	0a18      	lsrs	r0, r3, #8
 800255a:	462a      	mov	r2, r5
 800255c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002560:	462b      	mov	r3, r5
 8002562:	1219      	asrs	r1, r3, #8
 8002564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002568:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800256c:	b21b      	sxth	r3, r3
 800256e:	17da      	asrs	r2, r3, #31
 8002570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002572:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002580:	464c      	mov	r4, r9
 8002582:	0123      	lsls	r3, r4, #4
 8002584:	46c4      	mov	ip, r8
 8002586:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800258a:	4644      	mov	r4, r8
 800258c:	0122      	lsls	r2, r4, #4
 800258e:	1884      	adds	r4, r0, r2
 8002590:	603c      	str	r4, [r7, #0]
 8002592:	eb41 0303 	adc.w	r3, r1, r3
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e9d7 3400 	ldrd	r3, r4, [r7]
 800259c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80025a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80025aa:	46bd      	mov	sp, r7
 80025ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025b0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80025c2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	039a      	lsls	r2, r3, #14
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80025ce:	051b      	lsls	r3, r3, #20
 80025d0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80025d8:	4619      	mov	r1, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80025e6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80025ee:	4611      	mov	r1, r2
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	fb01 f202 	mul.w	r2, r1, r2
 80025f6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	7f09      	ldrb	r1, [r1, #28]
 80025fc:	4608      	mov	r0, r1
 80025fe:	6979      	ldr	r1, [r7, #20]
 8002600:	fb00 f101 	mul.w	r1, r0, r1
 8002604:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002606:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800260a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800260e:	1292      	asrs	r2, r2, #10
 8002610:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800261a:	fb01 f202 	mul.w	r2, r1, r2
 800261e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002622:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	13db      	asrs	r3, r3, #15
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	13d2      	asrs	r2, r2, #15
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	7e12      	ldrb	r2, [r2, #24]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800264e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002656:	bfa8      	it	ge
 8002658:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800265c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	131b      	asrs	r3, r3, #12
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	@ 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002680:	2b60      	cmp	r3, #96	@ 0x60
 8002682:	d007      	beq.n	8002694 <bmp280_read_fixed+0x28>
		if (humidity)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <bmp280_read_fixed+0x32>
 800269a:	2308      	movs	r3, #8
 800269c:	e000      	b.n	80026a0 <bmp280_read_fixed+0x34>
 800269e:	2306      	movs	r3, #6
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f107 0218 	add.w	r2, r7, #24
 80026aa:	21f7      	movs	r1, #247	@ 0xf7
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff fab1 	bl	8001c14 <read_data>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <bmp280_read_fixed+0x50>
		return false;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e038      	b.n	800272e <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80026bc:	7e3b      	ldrb	r3, [r7, #24]
 80026be:	031a      	lsls	r2, r3, #12
 80026c0:	7e7b      	ldrb	r3, [r7, #25]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4313      	orrs	r3, r2
 80026c6:	7eba      	ldrb	r2, [r7, #26]
 80026c8:	0912      	lsrs	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4313      	orrs	r3, r2
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80026d0:	7efb      	ldrb	r3, [r7, #27]
 80026d2:	031a      	lsls	r2, r3, #12
 80026d4:	7f3b      	ldrb	r3, [r7, #28]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4313      	orrs	r3, r2
 80026da:	7f7a      	ldrb	r2, [r7, #29]
 80026dc:	0912      	lsrs	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4313      	orrs	r3, r2
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	461a      	mov	r2, r3
 80026ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fc6d 	bl	8001fcc <compensate_temperature>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fc9c 	bl	800203c <compensate_pressure>
 8002704:	4602      	mov	r2, r0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002710:	7fbb      	ldrb	r3, [r7, #30]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	7ffa      	ldrb	r2, [r7, #31]
 8002716:	4313      	orrs	r3, r2
 8002718:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	461a      	mov	r2, r3
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff ff45 	bl	80025b0 <compensate_humidity>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
	}

	return true;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	@ 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *data) {
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, &fixed_humidity)) {
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	f107 0210 	add.w	r2, r7, #16
 800274a:	f107 0114 	add.w	r1, r7, #20
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff8c 	bl	800266c <bmp280_read_fixed>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02b      	beq.n	80027b2 <bmp280_read_float+0x7a>
		data[0] = (float) fixed_temperature / 100;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fa9d 	bl	8000c9c <__aeabi_i2f>
 8002762:	4603      	mov	r3, r0
 8002764:	4915      	ldr	r1, [pc, #84]	@ (80027bc <bmp280_read_float+0x84>)
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fba0 	bl	8000eac <__aeabi_fdiv>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]
		data[1] = (float) fixed_pressure / 256;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fa8c 	bl	8000c94 <__aeabi_ui2f>
 800277c:	4602      	mov	r2, r0
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	1d1c      	adds	r4, r3, #4
 8002782:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002786:	4610      	mov	r0, r2
 8002788:	f7fe fb90 	bl	8000eac <__aeabi_fdiv>
 800278c:	4603      	mov	r3, r0
 800278e:	6023      	str	r3, [r4, #0]
		data[2] = (float) fixed_humidity / 1024;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fa7e 	bl	8000c94 <__aeabi_ui2f>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f103 0408 	add.w	r4, r3, #8
 80027a0:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7fe fb81 	bl	8000eac <__aeabi_fdiv>
 80027aa:	4603      	mov	r3, r0
 80027ac:	6023      	str	r3, [r4, #0]
		return true;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <bmp280_read_float+0x7c>
	}

	return false;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	42c80000 	.word	0x42c80000

080027c0 <Crc16>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Crc16(uint8_t *pcBlock, uint16_t len)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 80027cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027d0:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 80027d2:	e025      	b.n	8002820 <Crc16+0x60>
    {
        crc ^= *pcBlock++ << 8;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b21a      	sxth	r2, r3
 80027e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e4:	4053      	eors	r3, r2
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	737b      	strb	r3, [r7, #13]
 80027ee:	e014      	b.n	800281a <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da09      	bge.n	800280c <Crc16+0x4c>
 80027f8:	89fb      	ldrh	r3, [r7, #14]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002802:	f083 0301 	eor.w	r3, r3, #1
 8002806:	b21b      	sxth	r3, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	e002      	b.n	8002812 <Crc16+0x52>
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8002814:	7b7b      	ldrb	r3, [r7, #13]
 8002816:	3301      	adds	r3, #1
 8002818:	737b      	strb	r3, [r7, #13]
 800281a:	7b7b      	ldrb	r3, [r7, #13]
 800281c:	2b07      	cmp	r3, #7
 800281e:	d9e7      	bls.n	80027f0 <Crc16+0x30>
    while (len--)
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	807a      	strh	r2, [r7, #2]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d4      	bne.n	80027d4 <Crc16+0x14>
    }
    return crc;
 800282a:	89fb      	ldrh	r3, [r7, #14]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
	...

08002838 <get_mpu_data>:

void get_mpu_data(float* mpuData){
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	mpuData[0] = getAccX(&mpu);
 8002840:	4818      	ldr	r0, [pc, #96]	@ (80028a4 <get_mpu_data+0x6c>)
 8002842:	f000 fc72 	bl	800312a <getAccX>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
	mpuData[1] = getAccY(&mpu);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1d1c      	adds	r4, r3, #4
 8002850:	4814      	ldr	r0, [pc, #80]	@ (80028a4 <get_mpu_data+0x6c>)
 8002852:	f000 fc75 	bl	8003140 <getAccY>
 8002856:	4603      	mov	r3, r0
 8002858:	6023      	str	r3, [r4, #0]
	mpuData[2] = getAccZ(&mpu);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f103 0408 	add.w	r4, r3, #8
 8002860:	4810      	ldr	r0, [pc, #64]	@ (80028a4 <get_mpu_data+0x6c>)
 8002862:	f000 fc78 	bl	8003156 <getAccZ>
 8002866:	4603      	mov	r3, r0
 8002868:	6023      	str	r3, [r4, #0]
	mpuData[3] = getGyroX(&mpu);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f103 040c 	add.w	r4, r3, #12
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <get_mpu_data+0x6c>)
 8002872:	f000 fc7b 	bl	800316c <getGyroX>
 8002876:	4603      	mov	r3, r0
 8002878:	6023      	str	r3, [r4, #0]
	mpuData[4] = getGyroY(&mpu);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f103 0410 	add.w	r4, r3, #16
 8002880:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <get_mpu_data+0x6c>)
 8002882:	f000 fc7e 	bl	8003182 <getGyroY>
 8002886:	4603      	mov	r3, r0
 8002888:	6023      	str	r3, [r4, #0]
	mpuData[5] = getGyroZ(&mpu);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f103 0414 	add.w	r4, r3, #20
 8002890:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <get_mpu_data+0x6c>)
 8002892:	f000 fc81 	bl	8003198 <getGyroZ>
 8002896:	4603      	mov	r3, r0
 8002898:	6023      	str	r3, [r4, #0]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200003b4 	.word	0x200003b4

080028a8 <make_tx_string>:

void make_tx_string(void){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	tx_string[0] = 0xFF;
 80028ac:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <make_tx_string+0x5c>)
 80028ae:	22ff      	movs	r2, #255	@ 0xff
 80028b0:	701a      	strb	r2, [r3, #0]
	tx_string[1] = 0xFF;
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <make_tx_string+0x5c>)
 80028b4:	22ff      	movs	r2, #255	@ 0xff
 80028b6:	705a      	strb	r2, [r3, #1]
	tx_string[2] = 0x01;
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <make_tx_string+0x5c>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	709a      	strb	r2, [r3, #2]
	tx_string[3] = 0x00;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <make_tx_string+0x5c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	70da      	strb	r2, [r3, #3]
	memcpy(tx_string + 4, mpuData, sizeof(mpuData));
 80028c4:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <make_tx_string+0x60>)
 80028c6:	2218      	movs	r2, #24
 80028c8:	4910      	ldr	r1, [pc, #64]	@ (800290c <make_tx_string+0x64>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f006 fdb1 	bl	8009432 <memcpy>
	memcpy(tx_string + (4 + sizeof(mpuData)), meteo, sizeof(meteo));
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <make_tx_string+0x68>)
 80028d2:	2210      	movs	r2, #16
 80028d4:	490f      	ldr	r1, [pc, #60]	@ (8002914 <make_tx_string+0x6c>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f006 fdab 	bl	8009432 <memcpy>
	memcpy(tx_string + (4 + sizeof(mpuData) + sizeof(meteo)), gps, sizeof(gps));
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <make_tx_string+0x70>)
 80028de:	220c      	movs	r2, #12
 80028e0:	490e      	ldr	r1, [pc, #56]	@ (800291c <make_tx_string+0x74>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 fda5 	bl	8009432 <memcpy>
	crc = Crc16((uint8_t*)tx_string, 4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps));
 80028e8:	2138      	movs	r1, #56	@ 0x38
 80028ea:	4806      	ldr	r0, [pc, #24]	@ (8002904 <make_tx_string+0x5c>)
 80028ec:	f7ff ff68 	bl	80027c0 <Crc16>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <make_tx_string+0x78>)
 80028f6:	801a      	strh	r2, [r3, #0]
	memcpy(tx_string + (4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps)), &crc, sizeof(crc));
 80028f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <make_tx_string+0x7c>)
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <make_tx_string+0x78>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	8013      	strh	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200005e8 	.word	0x200005e8
 8002908:	200005ec 	.word	0x200005ec
 800290c:	200005b4 	.word	0x200005b4
 8002910:	20000604 	.word	0x20000604
 8002914:	200005cc 	.word	0x200005cc
 8002918:	20000614 	.word	0x20000614
 800291c:	200005dc 	.word	0x200005dc
 8002920:	200005b0 	.word	0x200005b0
 8002924:	20000620 	.word	0x20000620

08002928 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d13d      	bne.n	80029b6 <HAL_TIM_IC_CaptureCallback+0x8e>
		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800293a:	2100      	movs	r1, #0
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f005 fb17 	bl	8007f70 <HAL_TIM_ReadCapturedValue>
 8002942:	6178      	str	r0, [r7, #20]
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002944:	2104      	movs	r1, #4
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f005 fb12 	bl	8007f70 <HAL_TIM_ReadCapturedValue>
 800294c:	6138      	str	r0, [r7, #16]
		uint32_t duty = (float) 100 * ch / cl;
 800294e:	6938      	ldr	r0, [r7, #16]
 8002950:	f7fe f9a0 	bl	8000c94 <__aeabi_ui2f>
 8002954:	4603      	mov	r3, r0
 8002956:	491b      	ldr	r1, [pc, #108]	@ (80029c4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f9f3 	bl	8000d44 <__aeabi_fmul>
 800295e:	4603      	mov	r3, r0
 8002960:	461c      	mov	r4, r3
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7fe f996 	bl	8000c94 <__aeabi_ui2f>
 8002968:	4603      	mov	r3, r0
 800296a:	4619      	mov	r1, r3
 800296c:	4620      	mov	r0, r4
 800296e:	f7fe fa9d 	bl	8000eac <__aeabi_fdiv>
 8002972:	4603      	mov	r3, r0
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fbc1 	bl	80010fc <__aeabi_f2uiz>
 800297a:	4603      	mov	r3, r0
 800297c:	60fb      	str	r3, [r7, #12]
		meteo[3] = 2000 * (((float)duty*10)-2) / 1002;
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fe f988 	bl	8000c94 <__aeabi_ui2f>
 8002984:	4603      	mov	r3, r0
 8002986:	4910      	ldr	r1, [pc, #64]	@ (80029c8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f9db 	bl	8000d44 <__aeabi_fmul>
 800298e:	4603      	mov	r3, r0
 8002990:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f8cb 	bl	8000b30 <__aeabi_fsub>
 800299a:	4603      	mov	r3, r0
 800299c:	490b      	ldr	r1, [pc, #44]	@ (80029cc <HAL_TIM_IC_CaptureCallback+0xa4>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe f9d0 	bl	8000d44 <__aeabi_fmul>
 80029a4:	4603      	mov	r3, r0
 80029a6:	490a      	ldr	r1, [pc, #40]	@ (80029d0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fa7f 	bl	8000eac <__aeabi_fdiv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_TIM_IC_CaptureCallback+0xac>)
 80029b4:	60da      	str	r2, [r3, #12]
	}
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	42c80000 	.word	0x42c80000
 80029c8:	41200000 	.word	0x41200000
 80029cc:	44fa0000 	.word	0x44fa0000
 80029d0:	447a8000 	.word	0x447a8000
 80029d4:	200005cc 	.word	0x200005cc

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029de:	f001 fd0f 	bl	8004400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e2:	f000 f8bd 	bl	8002b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e6:	f000 fa51 	bl	8002e8c <MX_GPIO_Init>
  MX_SPI1_Init();
 80029ea:	f000 f923 	bl	8002c34 <MX_SPI1_Init>
  MX_I2C1_Init();
 80029ee:	f000 f8f3 	bl	8002bd8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80029f2:	f000 f9f5 	bl	8002de0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80029f6:	f000 f953 	bl	8002ca0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80029fa:	f000 fa1d 	bl	8002e38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80029fe:	2100      	movs	r1, #0
 8002a00:	4847      	ldr	r0, [pc, #284]	@ (8002b20 <main+0x148>)
 8002a02:	f004 fefb 	bl	80077fc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8002a06:	2104      	movs	r1, #4
 8002a08:	4845      	ldr	r0, [pc, #276]	@ (8002b20 <main+0x148>)
 8002a0a:	f004 fe37 	bl	800767c <HAL_TIM_IC_Start>

  bmp280_init_default_params(&bmp280.params);
 8002a0e:	4845      	ldr	r0, [pc, #276]	@ (8002b24 <main+0x14c>)
 8002a10:	f7ff f8b6 	bl	8001b80 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002a14:	4b44      	ldr	r3, [pc, #272]	@ (8002b28 <main+0x150>)
 8002a16:	2276      	movs	r2, #118	@ 0x76
 8002a18:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002a1a:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <main+0x150>)
 8002a1c:	4a43      	ldr	r2, [pc, #268]	@ (8002b2c <main+0x154>)
 8002a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp_status = bmp280_init(&bmp280, &bmp280.params); // TODO handle error
 8002a20:	4940      	ldr	r1, [pc, #256]	@ (8002b24 <main+0x14c>)
 8002a22:	4841      	ldr	r0, [pc, #260]	@ (8002b28 <main+0x150>)
 8002a24:	f7ff fa25 	bl	8001e72 <bmp280_init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <main+0x158>)
 8002a2e:	701a      	strb	r2, [r3, #0]

  MPU9250SetDefault(&mpu);
 8002a30:	4840      	ldr	r0, [pc, #256]	@ (8002b34 <main+0x15c>)
 8002a32:	f001 f92d 	bl	8003c90 <MPU9250SetDefault>
  HAL_Delay(2000);
 8002a36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a3a:	f001 fd43 	bl	80044c4 <HAL_Delay>
  setupMPU(&mpu, MPU9250_ADDRESS); // TODO handle error
 8002a3e:	21d0      	movs	r1, #208	@ 0xd0
 8002a40:	483c      	ldr	r0, [pc, #240]	@ (8002b34 <main+0x15c>)
 8002a42:	f000 fab7 	bl	8002fb4 <setupMPU>

  SX1278_hw.dio0.port = LORA_DI0_GPIO_Port;
 8002a46:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <main+0x160>)
 8002a48:	4a3c      	ldr	r2, [pc, #240]	@ (8002b3c <main+0x164>)
 8002a4a:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = LORA_DI0_Pin;
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <main+0x160>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8002a52:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <main+0x160>)
 8002a54:	4a39      	ldr	r2, [pc, #228]	@ (8002b3c <main+0x164>)
 8002a56:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8002a58:	4b37      	ldr	r3, [pc, #220]	@ (8002b38 <main+0x160>)
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <main+0x160>)
 8002a60:	4a37      	ldr	r2, [pc, #220]	@ (8002b40 <main+0x168>)
 8002a62:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <main+0x160>)
 8002a66:	2202      	movs	r2, #2
 8002a68:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8002a6a:	4b33      	ldr	r3, [pc, #204]	@ (8002b38 <main+0x160>)
 8002a6c:	4a35      	ldr	r2, [pc, #212]	@ (8002b44 <main+0x16c>)
 8002a6e:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8002a70:	4b35      	ldr	r3, [pc, #212]	@ (8002b48 <main+0x170>)
 8002a72:	4a31      	ldr	r2, [pc, #196]	@ (8002b38 <main+0x160>)
 8002a74:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 15);
 8002a76:	230f      	movs	r3, #15
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9303      	str	r3, [sp, #12]
 8002a82:	2307      	movs	r3, #7
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	2301      	movs	r3, #1
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	a322      	add	r3, pc, #136	@ (adr r3, 8002b18 <main+0x140>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	482c      	ldr	r0, [pc, #176]	@ (8002b48 <main+0x170>)
 8002a96:	f7fe ff70 	bl	800197a <SX1278_init>
  ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8002a9a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	4829      	ldr	r0, [pc, #164]	@ (8002b48 <main+0x170>)
 8002aa2:	f7fe fed3 	bl	800184c <SX1278_LoRaEntryTx>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a28      	ldr	r2, [pc, #160]	@ (8002b4c <main+0x174>)
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(bmp_status == true) {
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <main+0x158>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <main+0xe4>
		  bmp280_read_float(&bmp280, meteo);
 8002ab4:	4926      	ldr	r1, [pc, #152]	@ (8002b50 <main+0x178>)
 8002ab6:	481c      	ldr	r0, [pc, #112]	@ (8002b28 <main+0x150>)
 8002ab8:	f7ff fe3e 	bl	8002738 <bmp280_read_float>
	  }

	  if (updateMPU(&mpu)) {
 8002abc:	481d      	ldr	r0, [pc, #116]	@ (8002b34 <main+0x15c>)
 8002abe:	f000 fb0c 	bl	80030da <updateMPU>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <main+0xf6>
		  get_mpu_data(mpuData);
 8002ac8:	4822      	ldr	r0, [pc, #136]	@ (8002b54 <main+0x17c>)
 8002aca:	f7ff feb5 	bl	8002838 <get_mpu_data>
	  }

	  // TODO gps data

	  make_tx_string();
 8002ace:	f7ff feeb 	bl	80028a8 <make_tx_string>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad8:	481f      	ldr	r0, [pc, #124]	@ (8002b58 <main+0x180>)
 8002ada:	f001 ffc0 	bl	8004a5e <HAL_GPIO_WritePin>
	  ret = SX1278_transmit(&SX1278, (uint8_t*) tx_string, 58, 2000); // TODO Handle error
 8002ade:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ae2:	223a      	movs	r2, #58	@ 0x3a
 8002ae4:	491d      	ldr	r1, [pc, #116]	@ (8002b5c <main+0x184>)
 8002ae6:	4818      	ldr	r0, [pc, #96]	@ (8002b48 <main+0x170>)
 8002ae8:	f7fe ff74 	bl	80019d4 <SX1278_transmit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <main+0x174>)
 8002af0:	6013      	str	r3, [r2, #0]
	  HAL_Delay(50);
 8002af2:	2032      	movs	r0, #50	@ 0x32
 8002af4:	f001 fce6 	bl	80044c4 <HAL_Delay>
	  if(ret > 0) {
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <main+0x174>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	dd05      	ble.n	8002b0c <main+0x134>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b06:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <main+0x180>)
 8002b08:	f001 ffa9 	bl	8004a5e <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(50);
 8002b0c:	2032      	movs	r0, #50	@ 0x32
 8002b0e:	f001 fcd9 	bl	80044c4 <HAL_Delay>
	  if(bmp_status == true) {
 8002b12:	e7cb      	b.n	8002aac <main+0xd4>
 8002b14:	f3af 8000 	nop.w
 8002b18:	19de5080 	.word	0x19de5080
 8002b1c:	00000000 	.word	0x00000000
 8002b20:	200002a8 	.word	0x200002a8
 8002b24:	200003ac 	.word	0x200003ac
 8002b28:	20000380 	.word	0x20000380
 8002b2c:	200001fc 	.word	0x200001fc
 8002b30:	200005a8 	.word	0x200005a8
 8002b34:	200003b4 	.word	0x200003b4
 8002b38:	20000474 	.word	0x20000474
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	20000250 	.word	0x20000250
 8002b48:	20000490 	.word	0x20000490
 8002b4c:	200005ac 	.word	0x200005ac
 8002b50:	200005cc 	.word	0x200005cc
 8002b54:	200005b4 	.word	0x200005b4
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	200005e8 	.word	0x200005e8

08002b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	@ 0x40
 8002b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b66:	f107 0318 	add.w	r3, r7, #24
 8002b6a:	2228      	movs	r2, #40	@ 0x28
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 fbd1 	bl	8009316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b86:	2301      	movs	r3, #1
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b92:	f107 0318 	add.w	r3, r7, #24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fc8e 	bl	80064b8 <HAL_RCC_OscConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002ba2:	f000 fa01 	bl	8002fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba6:	230f      	movs	r3, #15
 8002ba8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fefc 	bl	80069bc <HAL_RCC_ClockConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002bca:	f000 f9ed 	bl	8002fa8 <Error_Handler>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3740      	adds	r7, #64	@ 0x40
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002bde:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <MX_I2C1_Init+0x54>)
 8002be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002be4:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <MX_I2C1_Init+0x58>)
 8002be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002bf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c08:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c14:	4804      	ldr	r0, [pc, #16]	@ (8002c28 <MX_I2C1_Init+0x50>)
 8002c16:	f001 ff3b 	bl	8004a90 <HAL_I2C_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c20:	f000 f9c2 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200001fc 	.word	0x200001fc
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	000186a0 	.word	0x000186a0

08002c34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c38:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <MX_SPI1_Init+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c46:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c80:	220a      	movs	r2, #10
 8002c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c84:	4804      	ldr	r0, [pc, #16]	@ (8002c98 <MX_SPI1_Init+0x64>)
 8002c86:	f004 f827 	bl	8006cd8 <HAL_SPI_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c90:	f000 f98a 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000250 	.word	0x20000250
 8002c9c:	40013000 	.word	0x40013000

08002ca0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b090      	sub	sp, #64	@ 0x40
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cda:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8002ddc <MX_TIM1_Init+0x13c>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cec:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d06:	4834      	ldr	r0, [pc, #208]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d08:	f004 fc10 	bl	800752c <HAL_TIM_Base_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002d12:	f000 f949 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d20:	4619      	mov	r1, r3
 8002d22:	482d      	ldr	r0, [pc, #180]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d24:	f005 f81a 	bl	8007d5c <HAL_TIM_ConfigClockSource>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002d2e:	f000 f93b 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002d32:	4829      	ldr	r0, [pc, #164]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d34:	f004 fc49 	bl	80075ca <HAL_TIM_IC_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002d3e:	f000 f933 	bl	8002fa8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002d42:	2304      	movs	r3, #4
 8002d44:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002d46:	2350      	movs	r3, #80	@ 0x50
 8002d48:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481e      	ldr	r0, [pc, #120]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d5e:	f005 f8c4 	bl	8007eea <HAL_TIM_SlaveConfigSynchro>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002d68:	f000 f91e 	bl	8002fa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	4814      	ldr	r0, [pc, #80]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002d86:	f004 ff4d 	bl	8007c24 <HAL_TIM_IC_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002d90:	f000 f90a 	bl	8002fa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d94:	2302      	movs	r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	2204      	movs	r2, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002da6:	f004 ff3d 	bl	8007c24 <HAL_TIM_IC_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002db0:	f000 f8fa 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <MX_TIM1_Init+0x138>)
 8002dc2:	f005 fbf9 	bl	80085b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002dcc:	f000 f8ec 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	3740      	adds	r7, #64	@ 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200002a8 	.word	0x200002a8
 8002ddc:	40012c00 	.word	0x40012c00

08002de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002de6:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <MX_USART1_UART_Init+0x54>)
 8002de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002dec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002df4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002df8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	@ (8002e30 <MX_USART1_UART_Init+0x50>)
 8002e1c:	f005 fc3c 	bl	8008698 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002e26:	f000 f8bf 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200002f0 	.word	0x200002f0
 8002e34:	40013800 	.word	0x40013800

08002e38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <MX_USART2_UART_Init+0x50>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	@ (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e70:	f005 fc12 	bl	8008698 <HAL_UART_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e7a:	f000 f895 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000338 	.word	0x20000338
 8002e88:	40004400 	.word	0x40004400

08002e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ea6:	f043 0310 	orr.w	r3, r3, #16
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b3a      	ldr	r3, [pc, #232]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb8:	4b37      	ldr	r3, [pc, #220]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4a36      	ldr	r2, [pc, #216]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ebe:	f043 0320 	orr.w	r3, r3, #32
 8002ec2:	6193      	str	r3, [r2, #24]
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	4a30      	ldr	r2, [pc, #192]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6193      	str	r3, [r2, #24]
 8002edc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <MX_GPIO_Init+0x10c>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f06:	4825      	ldr	r0, [pc, #148]	@ (8002f9c <MX_GPIO_Init+0x110>)
 8002f08:	f001 fda9 	bl	8004a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2110      	movs	r1, #16
 8002f10:	4823      	ldr	r0, [pc, #140]	@ (8002fa0 <MX_GPIO_Init+0x114>)
 8002f12:	f001 fda4 	bl	8004a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4822      	ldr	r0, [pc, #136]	@ (8002fa4 <MX_GPIO_Init+0x118>)
 8002f1c:	f001 fd9f 	bl	8004a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4619      	mov	r1, r3
 8002f38:	4818      	ldr	r0, [pc, #96]	@ (8002f9c <MX_GPIO_Init+0x110>)
 8002f3a:	f001 fbf5 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DI0_Pin */
  GPIO_InitStruct.Pin = LORA_DI0_Pin;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_DI0_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4813      	ldr	r0, [pc, #76]	@ (8002fa0 <MX_GPIO_Init+0x114>)
 8002f52:	f001 fbe9 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8002f56:	2310      	movs	r3, #16
 8002f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480c      	ldr	r0, [pc, #48]	@ (8002fa0 <MX_GPIO_Init+0x114>)
 8002f6e:	f001 fbdb 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8002f72:	2302      	movs	r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f76:	2301      	movs	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 0310 	add.w	r3, r7, #16
 8002f86:	4619      	mov	r1, r3
 8002f88:	4806      	ldr	r0, [pc, #24]	@ (8002fa4 <MX_GPIO_Init+0x118>)
 8002f8a:	f001 fbcd 	bl	8004728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f8e:	bf00      	nop
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	40010c00 	.word	0x40010c00

08002fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fac:	b672      	cpsid	i
}
 8002fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <Error_Handler+0x8>

08002fb4 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b67      	cmp	r3, #103	@ 0x67
 8002fc8:	d904      	bls.n	8002fd4 <setupMPU+0x20>
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b6f      	cmp	r3, #111	@ 0x6f
 8002fd2:	d901      	bls.n	8002fd8 <setupMPU+0x24>
            return 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e022      	b.n	800301e <setupMPU+0x6a>
        }
        //mpu_i2c_addr = addr;


        if (isConnectedMPU9250(MPU9250)==1) {
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f824 	bl	8003026 <isConnectedMPU9250>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d117      	bne.n	8003014 <setupMPU+0x60>
        	MPU9250_Init(MPU9250);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fcb9 	bl	800395c <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f848 	bl	8003080 <isConnectedAK8963>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <setupMPU+0x54>
                initAK8963(MPU9250);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fc34 	bl	8003864 <initAK8963>
            }
        } else {
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        return 1;
 8003004:	2301      	movs	r3, #1
 8003006:	e00a      	b.n	800301e <setupMPU+0x6a>
            	MPU9250->has_connected = 0;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                return 0;
 8003010:	2300      	movs	r3, #0
 8003012:	e004      	b.n	800301e <setupMPU+0x6a>
        	MPU9250->has_connected = 0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            return 0;
 800301c:	2300      	movs	r3, #0
    }
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 800302c:	2175      	movs	r1, #117	@ 0x75
 800302e:	20d0      	movs	r0, #208	@ 0xd0
 8003030:	f000 fdae 	bl	8003b90 <readByte>
 8003034:	4603      	mov	r3, r0
 8003036:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b71      	cmp	r3, #113	@ 0x71
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b73      	cmp	r3, #115	@ 0x73
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	b25a      	sxtb	r2, r3
 8003054:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003058:	4313      	orrs	r3, r2
 800305a:	b25b      	sxtb	r3, r3
 800305c:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b70      	cmp	r3, #112	@ 0x70
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	b25a      	sxtb	r2, r3
 800306c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003070:	4313      	orrs	r3, r2
 8003072:	b25b      	sxtb	r3, r3
 8003074:	71bb      	strb	r3, [r7, #6]
	return b;
 8003076:	79bb      	ldrb	r3, [r7, #6]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 8003086:	2100      	movs	r1, #0
 8003088:	2018      	movs	r0, #24
 800308a:	f000 fd81 	bl	8003b90 <readByte>
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b48      	cmp	r3, #72	@ 0x48
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <MPUavailable+0x28>
 80030b8:	213a      	movs	r1, #58	@ 0x3a
 80030ba:	20d0      	movs	r0, #208	@ 0xd0
 80030bc:	f000 fd68 	bl	8003b90 <readByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MPUavailable+0x28>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <MPUavailable+0x2a>
 80030ce:	2300      	movs	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af02      	add	r7, sp, #8
 80030e0:	6078      	str	r0, [r7, #4]
	if (!MPUavailable(MPU9250)==1){
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffdf 	bl	80030a6 <MPUavailable>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <updateMPU+0x18>
		return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e017      	b.n	8003122 <updateMPU+0x48>
	}

	update_accel_gyro(MPU9250);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9b8 	bl	8003468 <update_accel_gyro>
	update_mag(MPU9250);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa51 	bl	80035a0 <update_mag>
    update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4603      	mov	r3, r0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f848 	bl	80031b0 <update_rpy>

	return 1;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <getAccX>:
float getAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->a[i] : 0.f; }
float getGyro(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->g[i] : 0.f; }
float getMag(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->m[i] : 0.f; }
float getLinearAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->lin_acc[i] : 0.f; }

float getAccX(MPU9250_t *MPU9250) { return MPU9250->a[0]; }
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <getAccY>:
float getAccY(MPU9250_t *MPU9250) { return MPU9250->a[1]; }
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <getAccZ>:
float getAccZ(MPU9250_t *MPU9250) { return MPU9250->a[2]; }
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <getGyroX>:
float getGyroX(MPU9250_t *MPU9250) { return MPU9250->g[0]; }
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <getGyroY>:
float getGyroY(MPU9250_t *MPU9250) { return MPU9250->g[1]; }
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <getGyroZ>:
float getGyroZ(MPU9250_t *MPU9250) { return MPU9250->g[2]; }
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b08b      	sub	sp, #44	@ 0x2c
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fd fdbf 	bl	8000d44 <__aeabi_fmul>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461c      	mov	r4, r3
 80031ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031cc:	68b8      	ldr	r0, [r7, #8]
 80031ce:	f7fd fdb9 	bl	8000d44 <__aeabi_fmul>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4619      	mov	r1, r3
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7fd fcac 	bl	8000b34 <__addsf3>
 80031dc:	4603      	mov	r3, r0
 80031de:	4619      	mov	r1, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fca7 	bl	8000b34 <__addsf3>
 80031e6:	4603      	mov	r3, r0
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	68b8      	ldr	r0, [r7, #8]
 80031ee:	f7fd fda9 	bl	8000d44 <__aeabi_fmul>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461c      	mov	r4, r3
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd fda3 	bl	8000d44 <__aeabi_fmul>
 80031fe:	4603      	mov	r3, r0
 8003200:	4619      	mov	r1, r3
 8003202:	4620      	mov	r0, r4
 8003204:	f7fd fc96 	bl	8000b34 <__addsf3>
 8003208:	4603      	mov	r3, r0
 800320a:	461c      	mov	r4, r3
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	6838      	ldr	r0, [r7, #0]
 8003210:	f7fd fd98 	bl	8000d44 <__aeabi_fmul>
 8003214:	4603      	mov	r3, r0
 8003216:	4619      	mov	r1, r3
 8003218:	4620      	mov	r0, r4
 800321a:	f7fd fc89 	bl	8000b30 <__aeabi_fsub>
 800321e:	4603      	mov	r3, r0
 8003220:	461c      	mov	r4, r3
 8003222:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003226:	f7fd fd8d 	bl	8000d44 <__aeabi_fmul>
 800322a:	4603      	mov	r3, r0
 800322c:	4619      	mov	r1, r3
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd fc7e 	bl	8000b30 <__aeabi_fsub>
 8003234:	4603      	mov	r3, r0
 8003236:	623b      	str	r3, [r7, #32]
	        a31 = 2.0f * (qw * qx + qy * qz);
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f7fd fd82 	bl	8000d44 <__aeabi_fmul>
 8003240:	4603      	mov	r3, r0
 8003242:	461c      	mov	r4, r3
 8003244:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f7fd fd7c 	bl	8000d44 <__aeabi_fmul>
 800324c:	4603      	mov	r3, r0
 800324e:	4619      	mov	r1, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f7fd fc6f 	bl	8000b34 <__addsf3>
 8003256:	4603      	mov	r3, r0
 8003258:	4619      	mov	r1, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fc6a 	bl	8000b34 <__addsf3>
 8003260:	4603      	mov	r3, r0
 8003262:	61fb      	str	r3, [r7, #28]
	        a32 = 2.0f * (qx * qz - qw * qy);
 8003264:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd6c 	bl	8000d44 <__aeabi_fmul>
 800326c:	4603      	mov	r3, r0
 800326e:	461c      	mov	r4, r3
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	68b8      	ldr	r0, [r7, #8]
 8003274:	f7fd fd66 	bl	8000d44 <__aeabi_fmul>
 8003278:	4603      	mov	r3, r0
 800327a:	4619      	mov	r1, r3
 800327c:	4620      	mov	r0, r4
 800327e:	f7fd fc57 	bl	8000b30 <__aeabi_fsub>
 8003282:	4603      	mov	r3, r0
 8003284:	4619      	mov	r1, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fc54 	bl	8000b34 <__addsf3>
 800328c:	4603      	mov	r3, r0
 800328e:	61bb      	str	r3, [r7, #24]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f7fd fd56 	bl	8000d44 <__aeabi_fmul>
 8003298:	4603      	mov	r3, r0
 800329a:	461c      	mov	r4, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fd50 	bl	8000d44 <__aeabi_fmul>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4619      	mov	r1, r3
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7fd fc41 	bl	8000b30 <__aeabi_fsub>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461c      	mov	r4, r3
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f7fd fd45 	bl	8000d44 <__aeabi_fmul>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4619      	mov	r1, r3
 80032be:	4620      	mov	r0, r4
 80032c0:	f7fd fc36 	bl	8000b30 <__aeabi_fsub>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461c      	mov	r4, r3
 80032c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032cc:	f7fd fd3a 	bl	8000d44 <__aeabi_fmul>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4619      	mov	r1, r3
 80032d4:	4620      	mov	r0, r4
 80032d6:	f7fd fc2d 	bl	8000b34 <__addsf3>
 80032da:	4603      	mov	r3, r0
 80032dc:	617b      	str	r3, [r7, #20]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	69f8      	ldr	r0, [r7, #28]
 80032e2:	f007 ff61 	bl	800b1a8 <atan2f>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 80032ee:	69b8      	ldr	r0, [r7, #24]
 80032f0:	f007 ff3a 	bl	800b168 <asinf>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003304:	f007 ff50 	bl	800b1a8 <atan2f>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f886 	bl	8000428 <__aeabi_f2d>
 800331c:	a34c      	add	r3, pc, #304	@ (adr r3, 8003450 <update_rpy+0x2a0>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fd f8d9 	bl	80004d8 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	f7fd fbab 	bl	8000a88 <__aeabi_d2f>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f871 	bl	8000428 <__aeabi_f2d>
 8003346:	a342      	add	r3, pc, #264	@ (adr r3, 8003450 <update_rpy+0x2a0>)
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f7fd f8c4 	bl	80004d8 <__aeabi_dmul>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fb96 	bl	8000a88 <__aeabi_d2f>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f85c 	bl	8000428 <__aeabi_f2d>
 8003370:	a337      	add	r3, pc, #220	@ (adr r3, 8003450 <update_rpy+0x2a0>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fd f8af 	bl	80004d8 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fb81 	bl	8000a88 <__aeabi_d2f>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fd fbca 	bl	8000b34 <__addsf3>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033b0:	4929      	ldr	r1, [pc, #164]	@ (8003458 <update_rpy+0x2a8>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fe78 	bl	80010a8 <__aeabi_fcmpge>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <update_rpy+0x228>
	        	MPU9250->rpy[2] -= 360.f;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033c4:	4925      	ldr	r1, [pc, #148]	@ (800345c <update_rpy+0x2ac>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fbb2 	bl	8000b30 <__aeabi_fsub>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80033d6:	e015      	b.n	8003404 <update_rpy+0x254>
	        else if (MPU9250->rpy[2] < -180.f)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033de:	4920      	ldr	r1, [pc, #128]	@ (8003460 <update_rpy+0x2b0>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fe4d 	bl	8001080 <__aeabi_fcmplt>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <update_rpy+0x254>
	        	MPU9250->rpy[2] += 360.f;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033f2:	491a      	ldr	r1, [pc, #104]	@ (800345c <update_rpy+0x2ac>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fb9d 	bl	8000b34 <__addsf3>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003408:	69f9      	ldr	r1, [r7, #28]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fb92 	bl	8000b34 <__addsf3>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fb87 	bl	8000b34 <__addsf3>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003434:	6979      	ldr	r1, [r7, #20]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fb7a 	bl	8000b30 <__aeabi_fsub>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
}
 8003446:	bf00      	nop
 8003448:	372c      	adds	r7, #44	@ 0x2c
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	bf00      	nop
 8003450:	1a63c1f8 	.word	0x1a63c1f8
 8003454:	404ca5dc 	.word	0x404ca5dc
 8003458:	43340000 	.word	0x43340000
 800345c:	43b40000 	.word	0x43b40000
 8003460:	c3340000 	.word	0xc3340000
 8003464:	00000000 	.word	0x00000000

08003468 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f94b 	bl	8003710 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution;  // get actual g value, this depends on scale being set
 800347a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fc0c 	bl	8000c9c <__aeabi_i2f>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f7fd fc59 	bl	8000d44 <__aeabi_fmul>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	66da      	str	r2, [r3, #108]	@ 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution;
 800349a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fbfc 	bl	8000c9c <__aeabi_i2f>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fd fc49 	bl	8000d44 <__aeabi_fmul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	671a      	str	r2, [r3, #112]	@ 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution;
 80034ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fbec 	bl	8000c9c <__aeabi_i2f>
 80034c4:	4602      	mov	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fd fc39 	bl	8000d44 <__aeabi_fmul>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	675a      	str	r2, [r3, #116]	@ 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 80034da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fbd6 	bl	8000c9c <__aeabi_i2f>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc ff98 	bl	8000428 <__aeabi_f2d>
 80034f8:	a325      	add	r3, pc, #148	@ (adr r3, 8003590 <update_accel_gyro+0x128>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fd f915 	bl	800072c <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <update_accel_gyro+0x130>)
 8003510:	f7fc fe2c 	bl	800016c <__adddf3>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fab4 	bl	8000a88 <__aeabi_d2f>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	651a      	str	r2, [r3, #80]	@ 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution;  // get actual gyro value, this depends on scale being set
 8003526:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fbb6 	bl	8000c9c <__aeabi_i2f>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7fd fc03 	bl	8000d44 <__aeabi_fmul>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	679a      	str	r2, [r3, #120]	@ 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution;
 8003546:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fba6 	bl	8000c9c <__aeabi_i2f>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f7fd fbf3 	bl	8000d44 <__aeabi_fmul>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	67da      	str	r2, [r3, #124]	@ 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution;
 8003566:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fb96 	bl	8000c9c <__aeabi_i2f>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fd fbe3 	bl	8000d44 <__aeabi_fmul>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	851eb852 	.word	0x851eb852
 8003594:	4074ddeb 	.word	0x4074ddeb
 8003598:	40350000 	.word	0x40350000
 800359c:	00000000 	.word	0x00000000

080035a0 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 80035a8:	2300      	movs	r3, #0
 80035aa:	81bb      	strh	r3, [r7, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	81fb      	strh	r3, [r7, #14]
 80035b0:	2300      	movs	r3, #0
 80035b2:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f8fd 	bl	80037b8 <readMag>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 809c 	bne.w	80036fe <update_mag+0x15e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ff2c 	bl	8000428 <__aeabi_f2d>
 80035d0:	a34d      	add	r3, pc, #308	@ (adr r3, 8003708 <update_mag+0x168>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f8a9 	bl	800072c <__aeabi_ddiv>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f7fd fa51 	bl	8000a88 <__aeabi_d2f>
 80035e6:	4603      	mov	r3, r0
 80035e8:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 80035ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fb54 	bl	8000c9c <__aeabi_i2f>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f7fd fba1 	bl	8000d44 <__aeabi_fmul>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fd fb99 	bl	8000d44 <__aeabi_fmul>
 8003612:	4603      	mov	r3, r0
 8003614:	461c      	mov	r4, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fb91 	bl	8000d44 <__aeabi_fmul>
 8003622:	4603      	mov	r3, r0
 8003624:	4619      	mov	r1, r3
 8003626:	4620      	mov	r0, r4
 8003628:	f7fd fa82 	bl	8000b30 <__aeabi_fsub>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f7fd fb84 	bl	8000d44 <__aeabi_fmul>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 8003646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fb26 	bl	8000c9c <__aeabi_i2f>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fd fb73 	bl	8000d44 <__aeabi_fmul>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fd fb6b 	bl	8000d44 <__aeabi_fmul>
 800366e:	4603      	mov	r3, r0
 8003670:	461c      	mov	r4, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fb63 	bl	8000d44 <__aeabi_fmul>
 800367e:	4603      	mov	r3, r0
 8003680:	4619      	mov	r1, r3
 8003682:	4620      	mov	r0, r4
 8003684:	f7fd fa54 	bl	8000b30 <__aeabi_fsub>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fd fb56 	bl	8000d44 <__aeabi_fmul>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 80036a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd faf8 	bl	8000c9c <__aeabi_i2f>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fd fb45 	bl	8000d44 <__aeabi_fmul>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7fd fb3d 	bl	8000d44 <__aeabi_fmul>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461c      	mov	r4, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fb35 	bl	8000d44 <__aeabi_fmul>
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fd fa26 	bl	8000b30 <__aeabi_fsub>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f7fd fb28 	bl	8000d44 <__aeabi_fmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
    }
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	d7fd7fd8 	.word	0xd7fd7fd8
 800370c:	3ff7fd7f 	.word	0x3ff7fd7f

08003710 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	220e      	movs	r2, #14
 800371e:	213b      	movs	r1, #59	@ 0x3b
 8003720:	20d0      	movs	r0, #208	@ 0xd0
 8003722:	f000 fa5b 	bl	8003bdc <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 8003726:	7a3b      	ldrb	r3, [r7, #8]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	7a7b      	ldrb	r3, [r7, #9]
 800372e:	b21b      	sxth	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	b21a      	sxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8003738:	7abb      	ldrb	r3, [r7, #10]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	b219      	sxth	r1, r3
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	b21a      	sxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3302      	adds	r3, #2
 8003746:	430a      	orrs	r2, r1
 8003748:	b212      	sxth	r2, r2
 800374a:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 800374c:	7b3b      	ldrb	r3, [r7, #12]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	b219      	sxth	r1, r3
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	b21a      	sxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	430a      	orrs	r2, r1
 800375c:	b212      	sxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	b219      	sxth	r1, r3
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	b21a      	sxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3306      	adds	r3, #6
 800376e:	430a      	orrs	r2, r1
 8003770:	b212      	sxth	r2, r2
 8003772:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 8003774:	7c3b      	ldrb	r3, [r7, #16]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	b219      	sxth	r1, r3
 800377a:	7c7b      	ldrb	r3, [r7, #17]
 800377c:	b21a      	sxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3308      	adds	r3, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	b212      	sxth	r2, r2
 8003786:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 8003788:	7cbb      	ldrb	r3, [r7, #18]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	b219      	sxth	r1, r3
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	b21a      	sxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	330a      	adds	r3, #10
 8003796:	430a      	orrs	r2, r1
 8003798:	b212      	sxth	r2, r2
 800379a:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 800379c:	7d3b      	ldrb	r3, [r7, #20]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	b219      	sxth	r1, r3
 80037a2:	7d7b      	ldrb	r3, [r7, #21]
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	330c      	adds	r3, #12
 80037aa:	430a      	orrs	r2, r1
 80037ac:	b212      	sxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <readMag>:


uint8_t readMag(int16_t* destination)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 80037c0:	2102      	movs	r1, #2
 80037c2:	2018      	movs	r0, #24
 80037c4:	f000 f9e4 	bl	8003b90 <readByte>
 80037c8:	4603      	mov	r3, r0
 80037ca:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03f      	beq.n	8003856 <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80037d6:	f107 030c 	add.w	r3, r7, #12
 80037da:	2207      	movs	r2, #7
 80037dc:	2103      	movs	r1, #3
 80037de:	2018      	movs	r0, #24
 80037e0:	f000 f9fc 	bl	8003bdc <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 80037e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <readMag+0xa8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d007      	beq.n	80037fc <readMag+0x44>
 80037ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003860 <readMag+0xa8>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d003      	beq.n	80037fc <readMag+0x44>
 80037f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <readMag+0xa8>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d106      	bne.n	800380a <readMag+0x52>
	                if ((st1 & 0x02) != 0)                                       // check if data is not skipped
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 8003806:	2300      	movs	r3, #0
 8003808:	e026      	b.n	8003858 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 800380a:	7cbb      	ldrb	r3, [r7, #18]
 800380c:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 800380e:	7dbb      	ldrb	r3, [r7, #22]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11e      	bne.n	8003856 <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8003818:	7b7b      	ldrb	r3, [r7, #13]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	b21a      	sxth	r2, r3
 800381e:	7b3b      	ldrb	r3, [r7, #12]
 8003820:	b21b      	sxth	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b21a      	sxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	b219      	sxth	r1, r3
 8003830:	7bbb      	ldrb	r3, [r7, #14]
 8003832:	b21a      	sxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3302      	adds	r3, #2
 8003838:	430a      	orrs	r2, r1
 800383a:	b212      	sxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 800383e:	7c7b      	ldrb	r3, [r7, #17]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	b219      	sxth	r1, r3
 8003844:	7c3b      	ldrb	r3, [r7, #16]
 8003846:	b21a      	sxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	430a      	orrs	r2, r1
 800384e:	b212      	sxth	r2, r2
 8003850:	801a      	strh	r2, [r3, #0]
	                return 1;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <readMag+0xa0>
	            }
	        }
	        return 0;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000003 	.word	0x20000003

08003864 <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 800386c:	2200      	movs	r2, #0
 800386e:	210a      	movs	r1, #10
 8003870:	2018      	movs	r0, #24
 8003872:	f000 f9ef 	bl	8003c54 <writeByte>
  HAL_Delay(100);
 8003876:	2064      	movs	r0, #100	@ 0x64
 8003878:	f000 fe24 	bl	80044c4 <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800387c:	220f      	movs	r2, #15
 800387e:	210a      	movs	r1, #10
 8003880:	2018      	movs	r0, #24
 8003882:	f000 f9e7 	bl	8003c54 <writeByte>
  HAL_Delay(100);
 8003886:	2064      	movs	r0, #100	@ 0x64
 8003888:	f000 fe1c 	bl	80044c4 <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2203      	movs	r2, #3
 8003892:	2110      	movs	r1, #16
 8003894:	2018      	movs	r0, #24
 8003896:	f000 f9a1 	bl	8003bdc <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800389a:	7b3b      	ldrb	r3, [r7, #12]
 800389c:	3b80      	subs	r3, #128	@ 0x80
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd f9fc 	bl	8000c9c <__aeabi_i2f>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fafe 	bl	8000eac <__aeabi_fdiv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd f93c 	bl	8000b34 <__addsf3>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80038c4:	7b7b      	ldrb	r3, [r7, #13]
 80038c6:	3b80      	subs	r3, #128	@ 0x80
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd f9e7 	bl	8000c9c <__aeabi_i2f>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fae9 	bl	8000eac <__aeabi_fdiv>
 80038da:	4603      	mov	r3, r0
 80038dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd f927 	bl	8000b34 <__addsf3>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	3b80      	subs	r3, #128	@ 0x80
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd f9d2 	bl	8000c9c <__aeabi_i2f>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fad4 	bl	8000eac <__aeabi_fdiv>
 8003904:	4603      	mov	r3, r0
 8003906:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f912 	bl	8000b34 <__addsf3>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003918:	2200      	movs	r2, #0
 800391a:	210a      	movs	r1, #10
 800391c:	2018      	movs	r0, #24
 800391e:	f000 f999 	bl	8003c54 <writeByte>
  HAL_Delay(100);
 8003922:	2064      	movs	r0, #100	@ 0x64
 8003924:	f000 fdce 	bl	80044c4 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <initAK8963+0xf0>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	b25a      	sxtb	r2, r3
 8003930:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <initAK8963+0xf4>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b25b      	sxtb	r3, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	b25b      	sxtb	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	210a      	movs	r1, #10
 8003940:	2018      	movs	r0, #24
 8003942:	f000 f987 	bl	8003c54 <writeByte>
  HAL_Delay(100);
 8003946:	2064      	movs	r0, #100	@ 0x64
 8003948:	f000 fdbc 	bl	80044c4 <HAL_Delay>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000002 	.word	0x20000002
 8003958:	20000003 	.word	0x20000003

0800395c <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8e3 	bl	8003b30 <getAres>
	getGres(MPU9250);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8ac 	bl	8003ac8 <getGres>
	getMres(MPU9250);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f88b 	bl	8003a8c <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003976:	2280      	movs	r2, #128	@ 0x80
 8003978:	216b      	movs	r1, #107	@ 0x6b
 800397a:	20d0      	movs	r0, #208	@ 0xd0
 800397c:	f000 f96a 	bl	8003c54 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8003980:	2064      	movs	r0, #100	@ 0x64
 8003982:	f000 fd9f 	bl	80044c4 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003986:	2200      	movs	r2, #0
 8003988:	216b      	movs	r1, #107	@ 0x6b
 800398a:	20d0      	movs	r0, #208	@ 0xd0
 800398c:	f000 f962 	bl	8003c54 <writeByte>
	HAL_Delay(100);
 8003990:	2064      	movs	r0, #100	@ 0x64
 8003992:	f000 fd97 	bl	80044c4 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003996:	2201      	movs	r2, #1
 8003998:	216b      	movs	r1, #107	@ 0x6b
 800399a:	20d0      	movs	r0, #208	@ 0xd0
 800399c:	f000 f95a 	bl	8003c54 <writeByte>
	HAL_Delay(100);
 80039a0:	2064      	movs	r0, #100	@ 0x64
 80039a2:	f000 fd8f 	bl	80044c4 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80039a6:	2203      	movs	r2, #3
 80039a8:	211a      	movs	r1, #26
 80039aa:	20d0      	movs	r0, #208	@ 0xd0
 80039ac:	f000 f952 	bl	8003c54 <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80039b0:	2204      	movs	r2, #4
 80039b2:	2119      	movs	r1, #25
 80039b4:	20d0      	movs	r0, #208	@ 0xd0
 80039b6:	f000 f94d 	bl	8003c54 <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 80039ba:	211b      	movs	r1, #27
 80039bc:	20d0      	movs	r0, #208	@ 0xd0
 80039be:	f000 f8e7 	bl	8003b90 <readByte>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	f023 0303 	bic.w	r3, r3, #3
 80039d4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	f023 0318 	bic.w	r3, r3, #24
 80039dc:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 80039de:	4b29      	ldr	r3, [pc, #164]	@ (8003a84 <MPU9250_Init+0x128>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	b25a      	sxtb	r2, r3
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	73fb      	strb	r3, [r7, #15]
	  c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	f043 0303 	orr.w	r3, r3, #3
 80039f6:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	461a      	mov	r2, r3
 80039fc:	211b      	movs	r1, #27
 80039fe:	20d0      	movs	r0, #208	@ 0xd0
 8003a00:	f000 f928 	bl	8003c54 <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8003a04:	211c      	movs	r1, #28
 8003a06:	20d0      	movs	r0, #208	@ 0xd0
 8003a08:	f000 f8c2 	bl	8003b90 <readByte>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f023 0318 	bic.w	r3, r3, #24
 8003a1e:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <MPU9250_Init+0x12c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	b25a      	sxtb	r2, r3
 8003a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	461a      	mov	r2, r3
 8003a36:	211c      	movs	r1, #28
 8003a38:	20d0      	movs	r0, #208	@ 0xd0
 8003a3a:	f000 f90b 	bl	8003c54 <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8003a3e:	211d      	movs	r1, #29
 8003a40:	20d0      	movs	r0, #208	@ 0xd0
 8003a42:	f000 f8a5 	bl	8003b90 <readByte>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	f043 0303 	orr.w	r3, r3, #3
 8003a58:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	211d      	movs	r1, #29
 8003a60:	20d0      	movs	r0, #208	@ 0xd0
 8003a62:	f000 f8f7 	bl	8003c54 <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8003a66:	2222      	movs	r2, #34	@ 0x22
 8003a68:	2137      	movs	r1, #55	@ 0x37
 8003a6a:	20d0      	movs	r0, #208	@ 0xd0
 8003a6c:	f000 f8f2 	bl	8003c54 <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8003a70:	2201      	movs	r2, #1
 8003a72:	2138      	movs	r1, #56	@ 0x38
 8003a74:	20d0      	movs	r0, #208	@ 0xd0
 8003a76:	f000 f8ed 	bl	8003c54 <writeByte>

}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000001 	.word	0x20000001
 8003a88:	20000000 	.word	0x20000000

08003a8c <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <getMres+0x30>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d002      	beq.n	8003aa2 <getMres+0x16>
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d004      	beq.n	8003aaa <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8003aa0:	e007      	b.n	8003ab2 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a06      	ldr	r2, [pc, #24]	@ (8003ac0 <getMres+0x34>)
 8003aa6:	609a      	str	r2, [r3, #8]
          break;
 8003aa8:	e003      	b.n	8003ab2 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <getMres+0x38>)
 8003aae:	609a      	str	r2, [r3, #8]
          break;
 8003ab0:	bf00      	nop
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	20000002 	.word	0x20000002
 8003ac0:	40bfebff 	.word	0x40bfebff
 8003ac4:	3fbfebff 	.word	0x3fbfebff

08003ac8 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <getGres+0x54>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d81a      	bhi.n	8003b10 <getGres+0x48>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <getGres+0x18>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003af9 	.word	0x08003af9
 8003ae8:	08003b01 	.word	0x08003b01
 8003aec:	08003b09 	.word	0x08003b09
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <getGres+0x58>)
 8003af4:	605a      	str	r2, [r3, #4]
          break;
 8003af6:	e00b      	b.n	8003b10 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <getGres+0x5c>)
 8003afc:	605a      	str	r2, [r3, #4]
          break;
 8003afe:	e007      	b.n	8003b10 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <getGres+0x60>)
 8003b04:	605a      	str	r2, [r3, #4]
          break;
 8003b06:	e003      	b.n	8003b10 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <getGres+0x64>)
 8003b0c:	605a      	str	r2, [r3, #4]
          break;
 8003b0e:	bf00      	nop
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000001 	.word	0x20000001
 8003b20:	3bfa0000 	.word	0x3bfa0000
 8003b24:	3c7a0000 	.word	0x3c7a0000
 8003b28:	3cfa0000 	.word	0x3cfa0000
 8003b2c:	3d7a0000 	.word	0x3d7a0000

08003b30 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <getAres+0x5c>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d81e      	bhi.n	8003b80 <getAres+0x50>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <getAres+0x18>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b63 	.word	0x08003b63
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b77 	.word	0x08003b77
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8003b5e:	601a      	str	r2, [r3, #0]
          break;
 8003b60:	e00e      	b.n	8003b80 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8003b68:	601a      	str	r2, [r3, #0]
          break;
 8003b6a:	e009      	b.n	8003b80 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8003b72:	601a      	str	r2, [r3, #0]
          break;
 8003b74:	e004      	b.n	8003b80 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8003b7c:	601a      	str	r2, [r3, #0]
          break;
 8003b7e:	bf00      	nop
  }
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000

08003b90 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	4603      	mov	r3, r0
 8003b98:	460a      	mov	r2, r1
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8003ba0:	79bb      	ldrb	r3, [r7, #6]
 8003ba2:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	b299      	uxth	r1, r3
 8003ba8:	f107 0208 	add.w	r2, r7, #8
 8003bac:	2364      	movs	r3, #100	@ 0x64
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4809      	ldr	r0, [pc, #36]	@ (8003bd8 <readByte+0x48>)
 8003bb4:	f001 f8b0 	bl	8004d18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	f107 020c 	add.w	r2, r7, #12
 8003bc0:	2364      	movs	r3, #100	@ 0x64
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4804      	ldr	r0, [pc, #16]	@ (8003bd8 <readByte+0x48>)
 8003bc8:	f001 f9a4 	bl	8004f14 <HAL_I2C_Master_Receive>

	return data[0];
 8003bcc:	7b3b      	ldrb	r3, [r7, #12]

}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200001fc 	.word	0x200001fc

08003bdc <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	71fb      	strb	r3, [r7, #7]
 8003be8:	460b      	mov	r3, r1
 8003bea:	71bb      	strb	r3, [r7, #6]
 8003bec:	4613      	mov	r3, r2
 8003bee:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8003bf0:	79bb      	ldrb	r3, [r7, #6]
 8003bf2:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	f107 0208 	add.w	r2, r7, #8
 8003bfc:	2364      	movs	r3, #100	@ 0x64
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2301      	movs	r3, #1
 8003c02:	4813      	ldr	r0, [pc, #76]	@ (8003c50 <readBytes+0x74>)
 8003c04:	f001 f888 	bl	8004d18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	b299      	uxth	r1, r3
 8003c0c:	797b      	ldrb	r3, [r7, #5]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f107 020c 	add.w	r2, r7, #12
 8003c14:	2064      	movs	r0, #100	@ 0x64
 8003c16:	9000      	str	r0, [sp, #0]
 8003c18:	480d      	ldr	r0, [pc, #52]	@ (8003c50 <readBytes+0x74>)
 8003c1a:	f001 f97b 	bl	8004f14 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e00b      	b.n	8003c3c <readBytes+0x60>
			dest[ii] = data[ii];
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f107 010c 	add.w	r1, r7, #12
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	440a      	add	r2, r1
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	797b      	ldrb	r3, [r7, #5]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	dbef      	blt.n	8003c24 <readBytes+0x48>
		}

}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200001fc 	.word	0x200001fc

08003c54 <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	71bb      	strb	r3, [r7, #6]
 8003c62:	4613      	mov	r3, r2
 8003c64:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8003c66:	79bb      	ldrb	r3, [r7, #6]
 8003c68:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8003c6a:	797b      	ldrb	r3, [r7, #5]
 8003c6c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	b299      	uxth	r1, r3
 8003c72:	f107 020c 	add.w	r2, r7, #12
 8003c76:	2364      	movs	r3, #100	@ 0x64
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	4803      	ldr	r0, [pc, #12]	@ (8003c8c <writeByte+0x38>)
 8003c7e:	f001 f84b 	bl	8004d18 <HAL_I2C_Master_Transmit>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200001fc 	.word	0x200001fc

08003c90 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	625a      	str	r2, [r3, #36]	@ 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	635a      	str	r2, [r3, #52]	@ 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d26:	645a      	str	r2, [r3, #68]	@ 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a44      	ldr	r2, [pc, #272]	@ (8003e3c <MPU9250SetDefault+0x1ac>)
 8003d2c:	649a      	str	r2, [r3, #72]	@ 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	651a      	str	r2, [r3, #80]	@ 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	659a      	str	r2, [r3, #88]	@ 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	65da      	str	r2, [r3, #92]	@ 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	661a      	str	r2, [r3, #96]	@ 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	665a      	str	r2, [r3, #100]	@ 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	669a      	str	r2, [r3, #104]	@ 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	66da      	str	r2, [r3, #108]	@ 0x6c
	MPU9250 -> a[1] = 0.;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	671a      	str	r2, [r3, #112]	@ 0x70
	MPU9250 -> a[2] = 0.;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	675a      	str	r2, [r3, #116]	@ 0x74
	MPU9250 -> g[0] = 0.;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	679a      	str	r2, [r3, #120]	@ 0x78
	MPU9250 -> g[1] = 0.;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	67da      	str	r2, [r3, #124]	@ 0x7c
	MPU9250 -> g[2] = 0.;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MPU9250 -> m[0] = 0.;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MPU9250 -> m[1] = 0.;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MPU9250 -> m[2] = 0.;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	MPU9250 -> q[1] = 0.;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	MPU9250 -> q[2] = 0.;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MPU9250 -> q[3] = 0.;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MPU9250 -> rpy[0] = 0.;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU9250 -> rpy[1] = 0.;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	MPU9250 -> rpy[2] = 0.;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	MPU9250 -> has_connected = 0;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	MPU9250 -> n_filter_iter = 1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	412e8f5c 	.word	0x412e8f5c

08003e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6193      	str	r3, [r2, #24]
 8003e52:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4a0e      	ldr	r2, [pc, #56]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	61d3      	str	r3, [r2, #28]
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_MspInit+0x5c>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_MspInit+0x60>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <HAL_MspInit+0x60>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40010000 	.word	0x40010000

08003ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0310 	add.w	r3, r7, #16
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_I2C_MspInit+0x70>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d123      	bne.n	8003f0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec4:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003eca:	f043 0308 	orr.w	r3, r3, #8
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003edc:	23c0      	movs	r3, #192	@ 0xc0
 8003ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee0:	2312      	movs	r3, #18
 8003ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee8:	f107 0310 	add.w	r3, r7, #16
 8003eec:	4619      	mov	r1, r3
 8003eee:	480b      	ldr	r0, [pc, #44]	@ (8003f1c <HAL_I2C_MspInit+0x78>)
 8003ef0:	f000 fc1a 	bl	8004728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ef4:	4b08      	ldr	r3, [pc, #32]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4a07      	ldr	r2, [pc, #28]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003efa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003efe:	61d3      	str	r3, [r2, #28]
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_I2C_MspInit+0x74>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f0c:	bf00      	nop
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40005400 	.word	0x40005400
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010c00 	.word	0x40010c00

08003f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 0310 	add.w	r3, r7, #16
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <HAL_SPI_MspInit+0x88>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d12f      	bne.n	8003fa0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f40:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a19      	ldr	r2, [pc, #100]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	6193      	str	r3, [r2, #24]
 8003f64:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <HAL_SPI_MspInit+0x8c>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f70:	23a0      	movs	r3, #160	@ 0xa0
 8003f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	f107 0310 	add.w	r3, r7, #16
 8003f80:	4619      	mov	r1, r3
 8003f82:	480b      	ldr	r0, [pc, #44]	@ (8003fb0 <HAL_SPI_MspInit+0x90>)
 8003f84:	f000 fbd0 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f88:	2340      	movs	r3, #64	@ 0x40
 8003f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4805      	ldr	r0, [pc, #20]	@ (8003fb0 <HAL_SPI_MspInit+0x90>)
 8003f9c:	f000 fbc4 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fa0:	bf00      	nop
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40013000 	.word	0x40013000
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40010800 	.word	0x40010800

08003fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <HAL_TIM_Base_MspInit+0xb4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d144      	bne.n	800405e <HAL_TIM_Base_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4a24      	ldr	r2, [pc, #144]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003fda:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fde:	6193      	str	r3, [r2, #24]
 8003fe0:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6193      	str	r3, [r2, #24]
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <HAL_TIM_Base_MspInit+0xb8>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004012:	f107 0310 	add.w	r3, r7, #16
 8004016:	4619      	mov	r1, r3
 8004018:	4815      	ldr	r0, [pc, #84]	@ (8004070 <HAL_TIM_Base_MspInit+0xbc>)
 800401a:	f000 fb85 	bl	8004728 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	2100      	movs	r1, #0
 8004022:	2018      	movs	r0, #24
 8004024:	f000 fb49 	bl	80046ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004028:	2018      	movs	r0, #24
 800402a:	f000 fb62 	bl	80046f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	2019      	movs	r0, #25
 8004034:	f000 fb41 	bl	80046ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004038:	2019      	movs	r0, #25
 800403a:	f000 fb5a 	bl	80046f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	201a      	movs	r0, #26
 8004044:	f000 fb39 	bl	80046ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004048:	201a      	movs	r0, #26
 800404a:	f000 fb52 	bl	80046f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	201b      	movs	r0, #27
 8004054:	f000 fb31 	bl	80046ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004058:	201b      	movs	r0, #27
 800405a:	f000 fb4a 	bl	80046f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800405e:	bf00      	nop
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40021000 	.word	0x40021000
 8004070:	40010800 	.word	0x40010800

08004074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 0318 	add.w	r3, r7, #24
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a37      	ldr	r2, [pc, #220]	@ (800416c <HAL_UART_MspInit+0xf8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d132      	bne.n	80040fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004094:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	4a35      	ldr	r2, [pc, #212]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 800409a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800409e:	6193      	str	r3, [r2, #24]
 80040a0:	4b33      	ldr	r3, [pc, #204]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	4b30      	ldr	r3, [pc, #192]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6193      	str	r3, [r2, #24]
 80040b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ce:	2303      	movs	r3, #3
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f107 0318 	add.w	r3, r7, #24
 80040d6:	4619      	mov	r1, r3
 80040d8:	4826      	ldr	r0, [pc, #152]	@ (8004174 <HAL_UART_MspInit+0x100>)
 80040da:	f000 fb25 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	f107 0318 	add.w	r3, r7, #24
 80040f0:	4619      	mov	r1, r3
 80040f2:	4820      	ldr	r0, [pc, #128]	@ (8004174 <HAL_UART_MspInit+0x100>)
 80040f4:	f000 fb18 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040f8:	e034      	b.n	8004164 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <HAL_UART_MspInit+0x104>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d12f      	bne.n	8004164 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410e:	61d3      	str	r3, [r2, #28]
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411c:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	6193      	str	r3, [r2, #24]
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_UART_MspInit+0xfc>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004134:	2304      	movs	r3, #4
 8004136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800413c:	2303      	movs	r3, #3
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	4619      	mov	r1, r3
 8004146:	480b      	ldr	r0, [pc, #44]	@ (8004174 <HAL_UART_MspInit+0x100>)
 8004148:	f000 faee 	bl	8004728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800414c:	2308      	movs	r3, #8
 800414e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 0318 	add.w	r3, r7, #24
 800415c:	4619      	mov	r1, r3
 800415e:	4805      	ldr	r0, [pc, #20]	@ (8004174 <HAL_UART_MspInit+0x100>)
 8004160:	f000 fae2 	bl	8004728 <HAL_GPIO_Init>
}
 8004164:	bf00      	nop
 8004166:	3728      	adds	r7, #40	@ 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40013800 	.word	0x40013800
 8004170:	40021000 	.word	0x40021000
 8004174:	40010800 	.word	0x40010800
 8004178:	40004400 	.word	0x40004400

0800417c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <NMI_Handler+0x4>

08004184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <HardFault_Handler+0x4>

0800418c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <MemManage_Handler+0x4>

08004194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <BusFault_Handler+0x4>

0800419c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <UsageFault_Handler+0x4>

080041a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f95e 	bl	800448c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041d8:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <TIM1_BRK_IRQHandler+0x10>)
 80041da:	f003 fc1b 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200002a8 	.word	0x200002a8

080041e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ec:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <TIM1_UP_IRQHandler+0x10>)
 80041ee:	f003 fc11 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200002a8 	.word	0x200002a8

080041fc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004200:	4802      	ldr	r0, [pc, #8]	@ (800420c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004202:	f003 fc07 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200002a8 	.word	0x200002a8

08004210 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004214:	4802      	ldr	r0, [pc, #8]	@ (8004220 <TIM1_CC_IRQHandler+0x10>)
 8004216:	f003 fbfd 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200002a8 	.word	0x200002a8

08004224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return 1;
 8004228:	2301      	movs	r3, #1
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <_kill>:

int _kill(int pid, int sig)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800423c:	f005 f8be 	bl	80093bc <__errno>
 8004240:	4603      	mov	r3, r0
 8004242:	2216      	movs	r2, #22
 8004244:	601a      	str	r2, [r3, #0]
  return -1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_exit>:

void _exit (int status)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800425a:	f04f 31ff 	mov.w	r1, #4294967295
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ffe7 	bl	8004232 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <_exit+0x12>

08004268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e00a      	b.n	8004290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800427a:	f3af 8000 	nop.w
 800427e:	4601      	mov	r1, r0
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	60ba      	str	r2, [r7, #8]
 8004286:	b2ca      	uxtb	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbf0      	blt.n	800427a <_read+0x12>
  }

  return len;
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e009      	b.n	80042c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	60ba      	str	r2, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3301      	adds	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	dbf1      	blt.n	80042b4 <_write+0x12>
  }
  return len;
 80042d0:	687b      	ldr	r3, [r7, #4]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_close>:

int _close(int file)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004300:	605a      	str	r2, [r3, #4]
  return 0;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <_isatty>:

int _isatty(int file)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
	...

0800433c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <_sbrk+0x5c>)
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <_sbrk+0x60>)
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004350:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004358:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <_sbrk+0x64>)
 800435a:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <_sbrk+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <_sbrk+0x64>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d207      	bcs.n	800437c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800436c:	f005 f826 	bl	80093bc <__errno>
 8004370:	4603      	mov	r3, r0
 8004372:	220c      	movs	r2, #12
 8004374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e009      	b.n	8004390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800437c:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <_sbrk+0x64>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <_sbrk+0x64>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	4a05      	ldr	r2, [pc, #20]	@ (80043a0 <_sbrk+0x64>)
 800438c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20005000 	.word	0x20005000
 800439c:	00000400 	.word	0x00000400
 80043a0:	200006e8 	.word	0x200006e8
 80043a4:	20000840 	.word	0x20000840

080043a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043b4:	f7ff fff8 	bl	80043a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043b8:	480b      	ldr	r0, [pc, #44]	@ (80043e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80043ba:	490c      	ldr	r1, [pc, #48]	@ (80043ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80043bc:	4a0c      	ldr	r2, [pc, #48]	@ (80043f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c0:	e002      	b.n	80043c8 <LoopCopyDataInit>

080043c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043c6:	3304      	adds	r3, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043cc:	d3f9      	bcc.n	80043c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80043d0:	4c09      	ldr	r4, [pc, #36]	@ (80043f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d4:	e001      	b.n	80043da <LoopFillZerobss>

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d8:	3204      	adds	r2, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043de:	f004 fff3 	bl	80093c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043e2:	f7fe faf9 	bl	80029d8 <main>
  bx lr
 80043e6:	4770      	bx	lr
  ldr r0, =_sdata
 80043e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80043f0:	0800bc60 	.word	0x0800bc60
  ldr r2, =_sbss
 80043f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80043f8:	2000083c 	.word	0x2000083c

080043fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043fc:	e7fe      	b.n	80043fc <ADC1_2_IRQHandler>
	...

08004400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_Init+0x28>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a07      	ldr	r2, [pc, #28]	@ (8004428 <HAL_Init+0x28>)
 800440a:	f043 0310 	orr.w	r3, r3, #16
 800440e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004410:	2003      	movs	r0, #3
 8004412:	f000 f947 	bl	80046a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004416:	200f      	movs	r0, #15
 8004418:	f000 f808 	bl	800442c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800441c:	f7ff fd10 	bl	8003e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000

0800442c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_InitTick+0x54>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <HAL_InitTick+0x58>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004442:	fbb3 f3f1 	udiv	r3, r3, r1
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f95f 	bl	800470e <HAL_SYSTICK_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00e      	b.n	8004478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	d80a      	bhi.n	8004476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004460:	2200      	movs	r2, #0
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	f000 f927 	bl	80046ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800446c:	4a06      	ldr	r2, [pc, #24]	@ (8004488 <HAL_InitTick+0x5c>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000004 	.word	0x20000004
 8004484:	2000000c 	.word	0x2000000c
 8004488:	20000008 	.word	0x20000008

0800448c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_IncTick+0x1c>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <HAL_IncTick+0x20>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4413      	add	r3, r2
 800449c:	4a03      	ldr	r2, [pc, #12]	@ (80044ac <HAL_IncTick+0x20>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	200006ec 	.word	0x200006ec

080044b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return uwTick;
 80044b4:	4b02      	ldr	r3, [pc, #8]	@ (80044c0 <HAL_GetTick+0x10>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	200006ec 	.word	0x200006ec

080044c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff fff0 	bl	80044b0 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d005      	beq.n	80044ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044de:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <HAL_Delay+0x44>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ea:	bf00      	nop
 80044ec:	f7ff ffe0 	bl	80044b0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d8f7      	bhi.n	80044ec <HAL_Delay+0x28>
  {
  }
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000000c 	.word	0x2000000c

0800450c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004528:	4013      	ands	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800453c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453e:	4a04      	ldr	r2, [pc, #16]	@ (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	60d3      	str	r3, [r2, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004558:	4b04      	ldr	r3, [pc, #16]	@ (800456c <__NVIC_GetPriorityGrouping+0x18>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 0307 	and.w	r3, r3, #7
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db0b      	blt.n	800459a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4906      	ldr	r1, [pc, #24]	@ (80045a4 <__NVIC_EnableIRQ+0x34>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100

080045a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db0a      	blt.n	80045d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	490c      	ldr	r1, [pc, #48]	@ (80045f4 <__NVIC_SetPriority+0x4c>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	440b      	add	r3, r1
 80045cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d0:	e00a      	b.n	80045e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4908      	ldr	r1, [pc, #32]	@ (80045f8 <__NVIC_SetPriority+0x50>)
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3b04      	subs	r3, #4
 80045e0:	0112      	lsls	r2, r2, #4
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	440b      	add	r3, r1
 80045e6:	761a      	strb	r2, [r3, #24]
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	e000e100 	.word	0xe000e100
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f1c3 0307 	rsb	r3, r3, #7
 8004616:	2b04      	cmp	r3, #4
 8004618:	bf28      	it	cs
 800461a:	2304      	movcs	r3, #4
 800461c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	2b06      	cmp	r3, #6
 8004624:	d902      	bls.n	800462c <NVIC_EncodePriority+0x30>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3b03      	subs	r3, #3
 800462a:	e000      	b.n	800462e <NVIC_EncodePriority+0x32>
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	401a      	ands	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	43d9      	mvns	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	4313      	orrs	r3, r2
         );
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	@ 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004670:	d301      	bcc.n	8004676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004672:	2301      	movs	r3, #1
 8004674:	e00f      	b.n	8004696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <SysTick_Config+0x40>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3b01      	subs	r3, #1
 800467c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800467e:	210f      	movs	r1, #15
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	f7ff ff90 	bl	80045a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <SysTick_Config+0x40>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800468e:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <SysTick_Config+0x40>)
 8004690:	2207      	movs	r2, #7
 8004692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	e000e010 	.word	0xe000e010

080046a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff2d 	bl	800450c <__NVIC_SetPriorityGrouping>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046cc:	f7ff ff42 	bl	8004554 <__NVIC_GetPriorityGrouping>
 80046d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff90 	bl	80045fc <NVIC_EncodePriority>
 80046dc:	4602      	mov	r2, r0
 80046de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff5f 	bl	80045a8 <__NVIC_SetPriority>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff35 	bl	8004570 <__NVIC_EnableIRQ>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ffa2 	bl	8004660 <SysTick_Config>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004728:	b480      	push	{r7}
 800472a:	b08b      	sub	sp, #44	@ 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473a:	e169      	b.n	8004a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800473c:	2201      	movs	r2, #1
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	f040 8158 	bne.w	8004a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4a9a      	ldr	r2, [pc, #616]	@ (80049c8 <HAL_GPIO_Init+0x2a0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d05e      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
 8004764:	4a98      	ldr	r2, [pc, #608]	@ (80049c8 <HAL_GPIO_Init+0x2a0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d875      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 800476a:	4a98      	ldr	r2, [pc, #608]	@ (80049cc <HAL_GPIO_Init+0x2a4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d058      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
 8004770:	4a96      	ldr	r2, [pc, #600]	@ (80049cc <HAL_GPIO_Init+0x2a4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d86f      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 8004776:	4a96      	ldr	r2, [pc, #600]	@ (80049d0 <HAL_GPIO_Init+0x2a8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d052      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
 800477c:	4a94      	ldr	r2, [pc, #592]	@ (80049d0 <HAL_GPIO_Init+0x2a8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d869      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 8004782:	4a94      	ldr	r2, [pc, #592]	@ (80049d4 <HAL_GPIO_Init+0x2ac>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d04c      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
 8004788:	4a92      	ldr	r2, [pc, #584]	@ (80049d4 <HAL_GPIO_Init+0x2ac>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d863      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 800478e:	4a92      	ldr	r2, [pc, #584]	@ (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d046      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
 8004794:	4a90      	ldr	r2, [pc, #576]	@ (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d85d      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 800479a:	2b12      	cmp	r3, #18
 800479c:	d82a      	bhi.n	80047f4 <HAL_GPIO_Init+0xcc>
 800479e:	2b12      	cmp	r3, #18
 80047a0:	d859      	bhi.n	8004856 <HAL_GPIO_Init+0x12e>
 80047a2:	a201      	add	r2, pc, #4	@ (adr r2, 80047a8 <HAL_GPIO_Init+0x80>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	08004823 	.word	0x08004823
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	0800480f 	.word	0x0800480f
 80047b4:	08004851 	.word	0x08004851
 80047b8:	08004857 	.word	0x08004857
 80047bc:	08004857 	.word	0x08004857
 80047c0:	08004857 	.word	0x08004857
 80047c4:	08004857 	.word	0x08004857
 80047c8:	08004857 	.word	0x08004857
 80047cc:	08004857 	.word	0x08004857
 80047d0:	08004857 	.word	0x08004857
 80047d4:	08004857 	.word	0x08004857
 80047d8:	08004857 	.word	0x08004857
 80047dc:	08004857 	.word	0x08004857
 80047e0:	08004857 	.word	0x08004857
 80047e4:	08004857 	.word	0x08004857
 80047e8:	08004857 	.word	0x08004857
 80047ec:	08004805 	.word	0x08004805
 80047f0:	08004819 	.word	0x08004819
 80047f4:	4a79      	ldr	r2, [pc, #484]	@ (80049dc <HAL_GPIO_Init+0x2b4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047fa:	e02c      	b.n	8004856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	623b      	str	r3, [r7, #32]
          break;
 8004802:	e029      	b.n	8004858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	3304      	adds	r3, #4
 800480a:	623b      	str	r3, [r7, #32]
          break;
 800480c:	e024      	b.n	8004858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	3308      	adds	r3, #8
 8004814:	623b      	str	r3, [r7, #32]
          break;
 8004816:	e01f      	b.n	8004858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	330c      	adds	r3, #12
 800481e:	623b      	str	r3, [r7, #32]
          break;
 8004820:	e01a      	b.n	8004858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800482a:	2304      	movs	r3, #4
 800482c:	623b      	str	r3, [r7, #32]
          break;
 800482e:	e013      	b.n	8004858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004838:	2308      	movs	r3, #8
 800483a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	611a      	str	r2, [r3, #16]
          break;
 8004842:	e009      	b.n	8004858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004844:	2308      	movs	r3, #8
 8004846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	615a      	str	r2, [r3, #20]
          break;
 800484e:	e003      	b.n	8004858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
          break;
 8004854:	e000      	b.n	8004858 <HAL_GPIO_Init+0x130>
          break;
 8004856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2bff      	cmp	r3, #255	@ 0xff
 800485c:	d801      	bhi.n	8004862 <HAL_GPIO_Init+0x13a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	e001      	b.n	8004866 <HAL_GPIO_Init+0x13e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2bff      	cmp	r3, #255	@ 0xff
 800486c:	d802      	bhi.n	8004874 <HAL_GPIO_Init+0x14c>
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	e002      	b.n	800487a <HAL_GPIO_Init+0x152>
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	3b08      	subs	r3, #8
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	210f      	movs	r1, #15
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	6a39      	ldr	r1, [r7, #32]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80b1 	beq.w	8004a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048a8:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <HAL_GPIO_Init+0x2b8>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4a4c      	ldr	r2, [pc, #304]	@ (80049e0 <HAL_GPIO_Init+0x2b8>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6193      	str	r3, [r2, #24]
 80048b4:	4b4a      	ldr	r3, [pc, #296]	@ (80049e0 <HAL_GPIO_Init+0x2b8>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048c0:	4a48      	ldr	r2, [pc, #288]	@ (80049e4 <HAL_GPIO_Init+0x2bc>)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	3302      	adds	r3, #2
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	220f      	movs	r2, #15
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a40      	ldr	r2, [pc, #256]	@ (80049e8 <HAL_GPIO_Init+0x2c0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_GPIO_Init+0x1ec>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3f      	ldr	r2, [pc, #252]	@ (80049ec <HAL_GPIO_Init+0x2c4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00d      	beq.n	8004910 <HAL_GPIO_Init+0x1e8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3e      	ldr	r2, [pc, #248]	@ (80049f0 <HAL_GPIO_Init+0x2c8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <HAL_GPIO_Init+0x1e4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	@ (80049f4 <HAL_GPIO_Init+0x2cc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_GPIO_Init+0x1e0>
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <HAL_GPIO_Init+0x1ee>
 8004908:	2304      	movs	r3, #4
 800490a:	e004      	b.n	8004916 <HAL_GPIO_Init+0x1ee>
 800490c:	2302      	movs	r3, #2
 800490e:	e002      	b.n	8004916 <HAL_GPIO_Init+0x1ee>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_GPIO_Init+0x1ee>
 8004914:	2300      	movs	r3, #0
 8004916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004918:	f002 0203 	and.w	r2, r2, #3
 800491c:	0092      	lsls	r2, r2, #2
 800491e:	4093      	lsls	r3, r2
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004926:	492f      	ldr	r1, [pc, #188]	@ (80049e4 <HAL_GPIO_Init+0x2bc>)
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004940:	4b2d      	ldr	r3, [pc, #180]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	492c      	ldr	r1, [pc, #176]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
 800494c:	e006      	b.n	800495c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800494e:	4b2a      	ldr	r3, [pc, #168]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	43db      	mvns	r3, r3
 8004956:	4928      	ldr	r1, [pc, #160]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004958:	4013      	ands	r3, r2
 800495a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004968:	4b23      	ldr	r3, [pc, #140]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4922      	ldr	r1, [pc, #136]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	4313      	orrs	r3, r2
 8004972:	60cb      	str	r3, [r1, #12]
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	43db      	mvns	r3, r3
 800497e:	491e      	ldr	r1, [pc, #120]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004980:	4013      	ands	r3, r2
 8004982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004990:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	4918      	ldr	r1, [pc, #96]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
 800499c:	e006      	b.n	80049ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800499e:	4b16      	ldr	r3, [pc, #88]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	4914      	ldr	r1, [pc, #80]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d021      	beq.n	80049fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	490e      	ldr	r1, [pc, #56]	@ (80049f8 <HAL_GPIO_Init+0x2d0>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]
 80049c4:	e021      	b.n	8004a0a <HAL_GPIO_Init+0x2e2>
 80049c6:	bf00      	nop
 80049c8:	10320000 	.word	0x10320000
 80049cc:	10310000 	.word	0x10310000
 80049d0:	10220000 	.word	0x10220000
 80049d4:	10210000 	.word	0x10210000
 80049d8:	10120000 	.word	0x10120000
 80049dc:	10110000 	.word	0x10110000
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40010800 	.word	0x40010800
 80049ec:	40010c00 	.word	0x40010c00
 80049f0:	40011000 	.word	0x40011000
 80049f4:	40011400 	.word	0x40011400
 80049f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_GPIO_Init+0x304>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	4909      	ldr	r1, [pc, #36]	@ (8004a2c <HAL_GPIO_Init+0x304>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f47f ae8e 	bne.w	800473c <HAL_GPIO_Init+0x14>
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	372c      	adds	r7, #44	@ 0x2c
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40010400 	.word	0x40010400

08004a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e001      	b.n	8004a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	807b      	strh	r3, [r7, #2]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a6e:	787b      	ldrb	r3, [r7, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a7a:	e003      	b.n	8004a84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a7c:	887b      	ldrh	r3, [r7, #2]
 8004a7e:	041a      	lsls	r2, r3, #16
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	611a      	str	r2, [r3, #16]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff f9f4 	bl	8003ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	@ 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f002 f8aa 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	@ (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	@ (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	@ (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	@ (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	461a      	mov	r2, r3
 8004d24:	460b      	mov	r3, r1
 8004d26:	817b      	strh	r3, [r7, #10]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7ff fbc0 	bl	80044b0 <HAL_GetTick>
 8004d30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	f040 80e0 	bne.w	8004f00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2319      	movs	r3, #25
 8004d46:	2201      	movs	r2, #1
 8004d48:	4970      	ldr	r1, [pc, #448]	@ (8004f0c <HAL_I2C_Master_Transmit+0x1f4>)
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 f97e 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0d3      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_I2C_Master_Transmit+0x50>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0cc      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d007      	beq.n	8004d8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2221      	movs	r2, #33	@ 0x21
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2210      	movs	r2, #16
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	893a      	ldrh	r2, [r7, #8]
 8004dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a50      	ldr	r2, [pc, #320]	@ (8004f10 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fe6a 	bl	8005ab0 <I2C_MasterRequestWrite>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e08d      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dfc:	e066      	b.n	8004ecc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f001 fa3c 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06b      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11b      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x188>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	6a39      	ldr	r1, [r7, #32]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f001 fa33 	bl	8006310 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d107      	bne.n	8004ec8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01a      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d194      	bne.n	8004dfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
  }
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	00100002 	.word	0x00100002
 8004f10:	ffff0000 	.word	0xffff0000

08004f14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	460b      	mov	r3, r1
 8004f22:	817b      	strh	r3, [r7, #10]
 8004f24:	4613      	mov	r3, r2
 8004f26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f2c:	f7ff fac0 	bl	80044b0 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 824b 	bne.w	80053d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2319      	movs	r3, #25
 8004f46:	2201      	movs	r2, #1
 8004f48:	497f      	ldr	r1, [pc, #508]	@ (8005148 <HAL_I2C_Master_Receive+0x234>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f001 f87e 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
 8004f58:	e23e      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2C_Master_Receive+0x54>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e237      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d007      	beq.n	8004f8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2222      	movs	r2, #34	@ 0x22
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	893a      	ldrh	r2, [r7, #8]
 8004fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a5f      	ldr	r2, [pc, #380]	@ (800514c <HAL_I2C_Master_Receive+0x238>)
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fd0:	8979      	ldrh	r1, [r7, #10]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fdec 	bl	8005bb4 <I2C_MasterRequestRead>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e1f8      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d113      	bne.n	8005016 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e1cc      	b.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501a:	2b01      	cmp	r3, #1
 800501c:	d11e      	bne.n	800505c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800502e:	b672      	cpsid	i
}
 8005030:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005058:	b662      	cpsie	i
}
 800505a:	e035      	b.n	80050c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005060:	2b02      	cmp	r3, #2
 8005062:	d11e      	bne.n	80050a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005074:	b672      	cpsid	i
}
 8005076:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800509c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800509e:	b662      	cpsie	i
}
 80050a0:	e012      	b.n	80050c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80050c8:	e172      	b.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f200 811f 	bhi.w	8005312 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d123      	bne.n	8005124 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 f95d 	bl	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e173      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005122:	e145      	b.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005128:	2b02      	cmp	r3, #2
 800512a:	d152      	bne.n	80051d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	4906      	ldr	r1, [pc, #24]	@ (8005150 <HAL_I2C_Master_Receive+0x23c>)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 ff88 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e148      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
 8005146:	bf00      	nop
 8005148:	00100002 	.word	0x00100002
 800514c:	ffff0000 	.word	0xffff0000
 8005150:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005154:	b672      	cpsid	i
}
 8005156:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800519a:	b662      	cpsie	i
}
 800519c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051d0:	e0ee      	b.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2200      	movs	r2, #0
 80051da:	4981      	ldr	r1, [pc, #516]	@ (80053e0 <HAL_I2C_Master_Receive+0x4cc>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 ff35 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0f5      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051fc:	b672      	cpsid	i
}
 80051fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005232:	4b6c      	ldr	r3, [pc, #432]	@ (80053e4 <HAL_I2C_Master_Receive+0x4d0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	08db      	lsrs	r3, r3, #3
 8005238:	4a6b      	ldr	r2, [pc, #428]	@ (80053e8 <HAL_I2C_Master_Receive+0x4d4>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	0a1a      	lsrs	r2, r3, #8
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00da      	lsls	r2, r3, #3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	3b01      	subs	r3, #1
 8005250:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d118      	bne.n	800528a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800527a:	b662      	cpsie	i
}
 800527c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0a6      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d1d9      	bne.n	800524c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052da:	b662      	cpsie	i
}
 80052dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005310:	e04e      	b.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f001 f842 	bl	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e058      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d124      	bne.n	80053b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536a:	2b03      	cmp	r3, #3
 800536c:	d107      	bne.n	800537e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f ae88 	bne.w	80050ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	@ 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	00010004 	.word	0x00010004
 80053e4:	20000004 	.word	0x20000004
 80053e8:	14f8b589 	.word	0x14f8b589

080053ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005406:	f7ff f853 	bl	80044b0 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b20      	cmp	r3, #32
 8005416:	f040 80d9 	bne.w	80055cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2319      	movs	r3, #25
 8005420:	2201      	movs	r2, #1
 8005422:	496d      	ldr	r1, [pc, #436]	@ (80055d8 <HAL_I2C_Mem_Write+0x1ec>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fe11 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
 8005432:	e0cc      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Mem_Write+0x56>
 800543e:	2302      	movs	r3, #2
 8005440:	e0c5      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d007      	beq.n	8005468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	@ 0x21
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	@ 0x40
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005498:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a4d      	ldr	r2, [pc, #308]	@ (80055dc <HAL_I2C_Mem_Write+0x1f0>)
 80054a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054aa:	88f8      	ldrh	r0, [r7, #6]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4603      	mov	r3, r0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fc48 	bl	8005d50 <I2C_RequestMemoryWrite>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d052      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e081      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fed6 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06b      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11b      	bne.n	800556c <HAL_I2C_Mem_Write+0x180>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1aa      	bne.n	80054ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fec9 	bl	8006310 <I2C_WaitOnBTFFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e016      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	00100002 	.word	0x00100002
 80055dc:	ffff0000 	.word	0xffff0000

080055e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	@ 0x30
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	817b      	strh	r3, [r7, #10]
 80055f2:	460b      	mov	r3, r1
 80055f4:	813b      	strh	r3, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055fe:	f7fe ff57 	bl	80044b0 <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 8244 	bne.w	8005a9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2319      	movs	r3, #25
 8005618:	2201      	movs	r2, #1
 800561a:	4982      	ldr	r1, [pc, #520]	@ (8005824 <HAL_I2C_Mem_Read+0x244>)
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fd15 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
 800562a:	e237      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_I2C_Mem_Read+0x5a>
 8005636:	2302      	movs	r3, #2
 8005638:	e230      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d007      	beq.n	8005660 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2222      	movs	r2, #34	@ 0x22
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2240      	movs	r2, #64	@ 0x40
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a62      	ldr	r2, [pc, #392]	@ (8005828 <HAL_I2C_Mem_Read+0x248>)
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a2:	88f8      	ldrh	r0, [r7, #6]
 80056a4:	893a      	ldrh	r2, [r7, #8]
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4603      	mov	r3, r0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fbe2 	bl	8005e7c <I2C_RequestMemoryRead>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1ec      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e1c0      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11e      	bne.n	8005738 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800570a:	b672      	cpsid	i
}
 800570c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005734:	b662      	cpsie	i
}
 8005736:	e035      	b.n	80057a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11e      	bne.n	800577e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800574e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005750:	b672      	cpsid	i
}
 8005752:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800577a:	b662      	cpsie	i
}
 800577c:	e012      	b.n	80057a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800578c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80057a4:	e166      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	f200 811f 	bhi.w	80059ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d123      	bne.n	8005800 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fdef 	bl	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e167      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057fe:	e139      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	2b02      	cmp	r3, #2
 8005806:	d152      	bne.n	80058ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	2200      	movs	r2, #0
 8005810:	4906      	ldr	r1, [pc, #24]	@ (800582c <HAL_I2C_Mem_Read+0x24c>)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fc1a 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e13c      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
 8005822:	bf00      	nop
 8005824:	00100002 	.word	0x00100002
 8005828:	ffff0000 	.word	0xffff0000
 800582c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005830:	b672      	cpsid	i
}
 8005832:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005876:	b662      	cpsie	i
}
 8005878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058ac:	e0e2      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	497b      	ldr	r1, [pc, #492]	@ (8005aa4 <HAL_I2C_Mem_Read+0x4c4>)
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fbc7 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0e9      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058d8:	b672      	cpsid	i
}
 80058da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800590e:	4b66      	ldr	r3, [pc, #408]	@ (8005aa8 <HAL_I2C_Mem_Read+0x4c8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	08db      	lsrs	r3, r3, #3
 8005914:	4a65      	ldr	r2, [pc, #404]	@ (8005aac <HAL_I2C_Mem_Read+0x4cc>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0a1a      	lsrs	r2, r3, #8
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00da      	lsls	r2, r3, #3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	3b01      	subs	r3, #1
 800592c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d118      	bne.n	8005966 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005956:	b662      	cpsie	i
}
 8005958:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e09a      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d1d9      	bne.n	8005928 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059b6:	b662      	cpsie	i
}
 80059b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059ec:	e042      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fcd4 	bl	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e04c      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d118      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f47f ae94 	bne.w	80057a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	@ 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	00010004 	.word	0x00010004
 8005aa8:	20000004 	.word	0x20000004
 8005aac:	14f8b589 	.word	0x14f8b589

08005ab0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	607a      	str	r2, [r7, #4]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	460b      	mov	r3, r1
 8005abe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d006      	beq.n	8005ada <I2C_MasterRequestWrite+0x2a>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d003      	beq.n	8005ada <I2C_MasterRequestWrite+0x2a>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ad8:	d108      	bne.n	8005aec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e00b      	b.n	8005b04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af0:	2b12      	cmp	r3, #18
 8005af2:	d107      	bne.n	8005b04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fa9b 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2a:	d103      	bne.n	8005b34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e035      	b.n	8005ba4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b40:	d108      	bne.n	8005b54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b50:	611a      	str	r2, [r3, #16]
 8005b52:	e01b      	b.n	8005b8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	11db      	asrs	r3, r3, #7
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f063 030f 	orn	r3, r3, #15
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	490e      	ldr	r1, [pc, #56]	@ (8005bac <I2C_MasterRequestWrite+0xfc>)
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fae4 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e010      	b.n	8005ba4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4907      	ldr	r1, [pc, #28]	@ (8005bb0 <I2C_MasterRequestWrite+0x100>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fad4 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	00010008 	.word	0x00010008
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d006      	beq.n	8005bee <I2C_MasterRequestRead+0x3a>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d003      	beq.n	8005bee <I2C_MasterRequestRead+0x3a>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bec:	d108      	bne.n	8005c00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e00b      	b.n	8005c18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	2b11      	cmp	r3, #17
 8005c06:	d107      	bne.n	8005c18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fa11 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3e:	d103      	bne.n	8005c48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e079      	b.n	8005d40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c54:	d108      	bne.n	8005c68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	e05f      	b.n	8005d28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c68:	897b      	ldrh	r3, [r7, #10]
 8005c6a:	11db      	asrs	r3, r3, #7
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0306 	and.w	r3, r3, #6
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f063 030f 	orn	r3, r3, #15
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4930      	ldr	r1, [pc, #192]	@ (8005d48 <I2C_MasterRequestRead+0x194>)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa5a 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e054      	b.n	8005d40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4929      	ldr	r1, [pc, #164]	@ (8005d4c <I2C_MasterRequestRead+0x198>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fa4a 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e044      	b.n	8005d40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9af 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d02:	d103      	bne.n	8005d0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d0a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e017      	b.n	8005d40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	11db      	asrs	r3, r3, #7
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f063 030e 	orn	r3, r3, #14
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4907      	ldr	r1, [pc, #28]	@ (8005d4c <I2C_MasterRequestRead+0x198>)
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fa06 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	00010008 	.word	0x00010008
 8005d4c:	00010002 	.word	0x00010002

08005d50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	460b      	mov	r3, r1
 8005d64:	813b      	strh	r3, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f960 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00d      	beq.n	8005dae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da0:	d103      	bne.n	8005daa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e05f      	b.n	8005e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	492d      	ldr	r1, [pc, #180]	@ (8005e78 <I2C_RequestMemoryWrite+0x128>)
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f9bb 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e04c      	b.n	8005e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dec:	6a39      	ldr	r1, [r7, #32]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa46 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d107      	bne.n	8005e12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e02b      	b.n	8005e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e1c:	893b      	ldrh	r3, [r7, #8]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	611a      	str	r2, [r3, #16]
 8005e26:	e021      	b.n	8005e6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e28:	893b      	ldrh	r3, [r7, #8]
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e38:	6a39      	ldr	r1, [r7, #32]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa20 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00d      	beq.n	8005e62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d107      	bne.n	8005e5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e005      	b.n	8005e6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e62:	893b      	ldrh	r3, [r7, #8]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	00010002 	.word	0x00010002

08005e7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	817b      	strh	r3, [r7, #10]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	813b      	strh	r3, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f8c2 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005edc:	d103      	bne.n	8005ee6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ee4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0aa      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	4952      	ldr	r1, [pc, #328]	@ (8006048 <I2C_RequestMemoryRead+0x1cc>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f91d 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e097      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	6a39      	ldr	r1, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f9a8 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d107      	bne.n	8005f4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e076      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f58:	893b      	ldrh	r3, [r7, #8]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	611a      	str	r2, [r3, #16]
 8005f62:	e021      	b.n	8005fa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f64:	893b      	ldrh	r3, [r7, #8]
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f74:	6a39      	ldr	r1, [r7, #32]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f982 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d107      	bne.n	8005f9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e050      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f9e:	893b      	ldrh	r3, [r7, #8]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005faa:	6a39      	ldr	r1, [r7, #32]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f967 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d107      	bne.n	8005fd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e035      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f82b 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800600a:	d103      	bne.n	8006014 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e013      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006018:	897b      	ldrh	r3, [r7, #10]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	6a3a      	ldr	r2, [r7, #32]
 800602c:	4906      	ldr	r1, [pc, #24]	@ (8006048 <I2C_RequestMemoryRead+0x1cc>)
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f886 	bl	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	00010002 	.word	0x00010002

0800604c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605c:	e048      	b.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d044      	beq.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006066:	f7fe fa23 	bl	80044b0 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d139      	bne.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10d      	bne.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	43da      	mvns	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4013      	ands	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	e00c      	b.n	80060bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4013      	ands	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf0c      	ite	eq
 80060b4:	2301      	moveq	r3, #1
 80060b6:	2300      	movne	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d116      	bne.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e023      	b.n	8006138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10d      	bne.n	8006116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	43da      	mvns	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	e00c      	b.n	8006130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	43da      	mvns	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	d093      	beq.n	800605e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800614e:	e071      	b.n	8006234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800615e:	d123      	bne.n	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006194:	f043 0204 	orr.w	r2, r3, #4
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e067      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d041      	beq.n	8006234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b0:	f7fe f97e 	bl	80044b0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d302      	bcc.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d136      	bne.n	8006234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	43da      	mvns	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e00b      	b.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	43da      	mvns	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e021      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10c      	bne.n	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	43da      	mvns	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e00b      	b.n	8006270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	43da      	mvns	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4013      	ands	r3, r2
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	bf14      	ite	ne
 800626a:	2301      	movne	r3, #1
 800626c:	2300      	moveq	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	f47f af6d 	bne.w	8006150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628c:	e034      	b.n	80062f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8e3 	bl	800645a <I2C_IsAcknowledgeFailed>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e034      	b.n	8006308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d028      	beq.n	80062f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fe f903 	bl	80044b0 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11d      	bne.n	80062f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d016      	beq.n	80062f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e007      	b.n	8006308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006302:	2b80      	cmp	r3, #128	@ 0x80
 8006304:	d1c3      	bne.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800631c:	e034      	b.n	8006388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f89b 	bl	800645a <I2C_IsAcknowledgeFailed>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e034      	b.n	8006398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d028      	beq.n	8006388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006336:	f7fe f8bb 	bl	80044b0 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11d      	bne.n	8006388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b04      	cmp	r3, #4
 8006358:	d016      	beq.n	8006388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e007      	b.n	8006398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d1c3      	bne.n	800631e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063ac:	e049      	b.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d119      	bne.n	80063f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0210 	mvn.w	r2, #16
 80063c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e030      	b.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f0:	f7fe f85e 	bl	80044b0 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d11d      	bne.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b40      	cmp	r3, #64	@ 0x40
 8006412:	d016      	beq.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e007      	b.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b40      	cmp	r3, #64	@ 0x40
 800644e:	d1ae      	bne.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006470:	d11b      	bne.n	80064aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800647a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	f043 0204 	orr.w	r2, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e272      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8087 	beq.w	80065e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064d8:	4b92      	ldr	r3, [pc, #584]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d00c      	beq.n	80064fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 030c 	and.w	r3, r3, #12
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d112      	bne.n	8006516 <HAL_RCC_OscConfig+0x5e>
 80064f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fc:	d10b      	bne.n	8006516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fe:	4b89      	ldr	r3, [pc, #548]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d06c      	beq.n	80065e4 <HAL_RCC_OscConfig+0x12c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d168      	bne.n	80065e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e24c      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651e:	d106      	bne.n	800652e <HAL_RCC_OscConfig+0x76>
 8006520:	4b80      	ldr	r3, [pc, #512]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7f      	ldr	r2, [pc, #508]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e02e      	b.n	800658c <HAL_RCC_OscConfig+0xd4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10c      	bne.n	8006550 <HAL_RCC_OscConfig+0x98>
 8006536:	4b7b      	ldr	r3, [pc, #492]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a7a      	ldr	r2, [pc, #488]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800653c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b78      	ldr	r3, [pc, #480]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a77      	ldr	r2, [pc, #476]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e01d      	b.n	800658c <HAL_RCC_OscConfig+0xd4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006558:	d10c      	bne.n	8006574 <HAL_RCC_OscConfig+0xbc>
 800655a:	4b72      	ldr	r3, [pc, #456]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a71      	ldr	r2, [pc, #452]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	4b6f      	ldr	r3, [pc, #444]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a6e      	ldr	r2, [pc, #440]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e00b      	b.n	800658c <HAL_RCC_OscConfig+0xd4>
 8006574:	4b6b      	ldr	r3, [pc, #428]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6a      	ldr	r2, [pc, #424]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800657a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b68      	ldr	r3, [pc, #416]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a67      	ldr	r2, [pc, #412]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fd ff8c 	bl	80044b0 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800659c:	f7fd ff88 	bl	80044b0 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	@ 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e200      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0xe4>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fd ff78 	bl	80044b0 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd ff74 	bl	80044b0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	@ 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1ec      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d6:	4b53      	ldr	r3, [pc, #332]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x10c>
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d063      	beq.n	80066ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065fe:	4b49      	ldr	r3, [pc, #292]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 030c 	and.w	r3, r3, #12
 8006606:	2b08      	cmp	r3, #8
 8006608:	d11c      	bne.n	8006644 <HAL_RCC_OscConfig+0x18c>
 800660a:	4b46      	ldr	r3, [pc, #280]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d116      	bne.n	8006644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	4b43      	ldr	r3, [pc, #268]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_RCC_OscConfig+0x176>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d001      	beq.n	800662e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e1c0      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4939      	ldr	r1, [pc, #228]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006642:	e03a      	b.n	80066ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d020      	beq.n	800668e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800664c:	4b36      	ldr	r3, [pc, #216]	@ (8006728 <HAL_RCC_OscConfig+0x270>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006652:	f7fd ff2d 	bl	80044b0 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800665a:	f7fd ff29 	bl	80044b0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e1a1      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666c:	4b2d      	ldr	r3, [pc, #180]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006678:	4b2a      	ldr	r3, [pc, #168]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4927      	ldr	r1, [pc, #156]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 8006688:	4313      	orrs	r3, r2
 800668a:	600b      	str	r3, [r1, #0]
 800668c:	e015      	b.n	80066ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668e:	4b26      	ldr	r3, [pc, #152]	@ (8006728 <HAL_RCC_OscConfig+0x270>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fd ff0c 	bl	80044b0 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800669c:	f7fd ff08 	bl	80044b0 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e180      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03a      	beq.n	800673c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d019      	beq.n	8006702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ce:	4b17      	ldr	r3, [pc, #92]	@ (800672c <HAL_RCC_OscConfig+0x274>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d4:	f7fd feec 	bl	80044b0 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066dc:	f7fd fee8 	bl	80044b0 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e160      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <HAL_RCC_OscConfig+0x26c>)
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066fa:	2001      	movs	r0, #1
 80066fc:	f000 face 	bl	8006c9c <RCC_Delay>
 8006700:	e01c      	b.n	800673c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <HAL_RCC_OscConfig+0x274>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006708:	f7fd fed2 	bl	80044b0 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800670e:	e00f      	b.n	8006730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006710:	f7fd fece 	bl	80044b0 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d908      	bls.n	8006730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e146      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	42420000 	.word	0x42420000
 800672c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006730:	4b92      	ldr	r3, [pc, #584]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e9      	bne.n	8006710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 80a6 	beq.w	8006896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800674a:	2300      	movs	r3, #0
 800674c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800674e:	4b8b      	ldr	r3, [pc, #556]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800675a:	4b88      	ldr	r3, [pc, #544]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4a87      	ldr	r2, [pc, #540]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006764:	61d3      	str	r3, [r2, #28]
 8006766:	4b85      	ldr	r3, [pc, #532]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800676e:	60bb      	str	r3, [r7, #8]
 8006770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006776:	4b82      	ldr	r3, [pc, #520]	@ (8006980 <HAL_RCC_OscConfig+0x4c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677e:	2b00      	cmp	r3, #0
 8006780:	d118      	bne.n	80067b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006782:	4b7f      	ldr	r3, [pc, #508]	@ (8006980 <HAL_RCC_OscConfig+0x4c8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7e      	ldr	r2, [pc, #504]	@ (8006980 <HAL_RCC_OscConfig+0x4c8>)
 8006788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678e:	f7fd fe8f 	bl	80044b0 <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006796:	f7fd fe8b 	bl	80044b0 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	@ 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e103      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a8:	4b75      	ldr	r3, [pc, #468]	@ (8006980 <HAL_RCC_OscConfig+0x4c8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d106      	bne.n	80067ca <HAL_RCC_OscConfig+0x312>
 80067bc:	4b6f      	ldr	r3, [pc, #444]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	4a6e      	ldr	r2, [pc, #440]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6213      	str	r3, [r2, #32]
 80067c8:	e02d      	b.n	8006826 <HAL_RCC_OscConfig+0x36e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10c      	bne.n	80067ec <HAL_RCC_OscConfig+0x334>
 80067d2:	4b6a      	ldr	r3, [pc, #424]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	4a69      	ldr	r2, [pc, #420]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6213      	str	r3, [r2, #32]
 80067de:	4b67      	ldr	r3, [pc, #412]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4a66      	ldr	r2, [pc, #408]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067e4:	f023 0304 	bic.w	r3, r3, #4
 80067e8:	6213      	str	r3, [r2, #32]
 80067ea:	e01c      	b.n	8006826 <HAL_RCC_OscConfig+0x36e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	d10c      	bne.n	800680e <HAL_RCC_OscConfig+0x356>
 80067f4:	4b61      	ldr	r3, [pc, #388]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4a60      	ldr	r2, [pc, #384]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	f043 0304 	orr.w	r3, r3, #4
 80067fe:	6213      	str	r3, [r2, #32]
 8006800:	4b5e      	ldr	r3, [pc, #376]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	4a5d      	ldr	r2, [pc, #372]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6213      	str	r3, [r2, #32]
 800680c:	e00b      	b.n	8006826 <HAL_RCC_OscConfig+0x36e>
 800680e:	4b5b      	ldr	r3, [pc, #364]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4a5a      	ldr	r2, [pc, #360]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	6213      	str	r3, [r2, #32]
 800681a:	4b58      	ldr	r3, [pc, #352]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	4a57      	ldr	r2, [pc, #348]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006820:	f023 0304 	bic.w	r3, r3, #4
 8006824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d015      	beq.n	800685a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682e:	f7fd fe3f 	bl	80044b0 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fd fe3b 	bl	80044b0 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0b1      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684c:	4b4b      	ldr	r3, [pc, #300]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ee      	beq.n	8006836 <HAL_RCC_OscConfig+0x37e>
 8006858:	e014      	b.n	8006884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685a:	f7fd fe29 	bl	80044b0 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fd fe25 	bl	80044b0 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e09b      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006878:	4b40      	ldr	r3, [pc, #256]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ee      	bne.n	8006862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688a:	4b3c      	ldr	r3, [pc, #240]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	4a3b      	ldr	r2, [pc, #236]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8087 	beq.w	80069ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a0:	4b36      	ldr	r3, [pc, #216]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d061      	beq.n	8006970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d146      	bne.n	8006942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b4:	4b33      	ldr	r3, [pc, #204]	@ (8006984 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ba:	f7fd fdf9 	bl	80044b0 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c2:	f7fd fdf5 	bl	80044b0 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e06d      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068d4:	4b29      	ldr	r3, [pc, #164]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e8:	d108      	bne.n	80068fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068ea:	4b24      	ldr	r3, [pc, #144]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	4921      	ldr	r1, [pc, #132]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068fc:	4b1f      	ldr	r3, [pc, #124]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a19      	ldr	r1, [r3, #32]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	430b      	orrs	r3, r1
 800690e:	491b      	ldr	r1, [pc, #108]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006910:	4313      	orrs	r3, r2
 8006912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <HAL_RCC_OscConfig+0x4cc>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691a:	f7fd fdc9 	bl	80044b0 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006922:	f7fd fdc5 	bl	80044b0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e03d      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006934:	4b11      	ldr	r3, [pc, #68]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x46a>
 8006940:	e035      	b.n	80069ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <HAL_RCC_OscConfig+0x4cc>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fd fdb2 	bl	80044b0 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006950:	f7fd fdae 	bl	80044b0 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e026      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006962:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_RCC_OscConfig+0x4c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x498>
 800696e:	e01e      	b.n	80069ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d107      	bne.n	8006988 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e019      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
 8006984:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006988:	4b0b      	ldr	r3, [pc, #44]	@ (80069b8 <HAL_RCC_OscConfig+0x500>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	429a      	cmp	r2, r3
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d001      	beq.n	80069ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40021000 	.word	0x40021000

080069bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e0d0      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d910      	bls.n	8006a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069de:	4b67      	ldr	r3, [pc, #412]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 0207 	bic.w	r2, r3, #7
 80069e6:	4965      	ldr	r1, [pc, #404]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ee:	4b63      	ldr	r3, [pc, #396]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d001      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0b8      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d020      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a18:	4b59      	ldr	r3, [pc, #356]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a58      	ldr	r2, [pc, #352]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a30:	4b53      	ldr	r3, [pc, #332]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a52      	ldr	r2, [pc, #328]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006a3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a3c:	4b50      	ldr	r3, [pc, #320]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	494d      	ldr	r1, [pc, #308]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d040      	beq.n	8006adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d107      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	4b47      	ldr	r3, [pc, #284]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d115      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e07f      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d107      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e073      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e06b      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f023 0203 	bic.w	r2, r3, #3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4936      	ldr	r1, [pc, #216]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006aac:	f7fd fd00 	bl	80044b0 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab2:	e00a      	b.n	8006aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ab4:	f7fd fcfc 	bl	80044b0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e053      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aca:	4b2d      	ldr	r3, [pc, #180]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 020c 	and.w	r2, r3, #12
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d1eb      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006adc:	4b27      	ldr	r3, [pc, #156]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d210      	bcs.n	8006b0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aea:	4b24      	ldr	r3, [pc, #144]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 0207 	bic.w	r2, r3, #7
 8006af2:	4922      	ldr	r1, [pc, #136]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afa:	4b20      	ldr	r3, [pc, #128]	@ (8006b7c <HAL_RCC_ClockConfig+0x1c0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e032      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b18:	4b19      	ldr	r3, [pc, #100]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4916      	ldr	r1, [pc, #88]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b36:	4b12      	ldr	r3, [pc, #72]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	490e      	ldr	r1, [pc, #56]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b4a:	f000 f821 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	490a      	ldr	r1, [pc, #40]	@ (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5c:	5ccb      	ldrb	r3, [r1, r3]
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	4a09      	ldr	r2, [pc, #36]	@ (8006b88 <HAL_RCC_ClockConfig+0x1cc>)
 8006b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <HAL_RCC_ClockConfig+0x1d0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fd fc5e 	bl	800442c <HAL_InitTick>

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40022000 	.word	0x40022000
 8006b80:	40021000 	.word	0x40021000
 8006b84:	0800b880 	.word	0x0800b880
 8006b88:	20000004 	.word	0x20000004
 8006b8c:	20000008 	.word	0x20000008

08006b90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006baa:	4b1e      	ldr	r3, [pc, #120]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x94>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d002      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x30>
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d003      	beq.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x36>
 8006bbe:	e027      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bc0:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006bc2:	613b      	str	r3, [r7, #16]
      break;
 8006bc4:	e027      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	0c9b      	lsrs	r3, r3, #18
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006bd0:	5cd3      	ldrb	r3, [r2, r3]
 8006bd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bde:	4b11      	ldr	r3, [pc, #68]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x94>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	0c5b      	lsrs	r3, r3, #17
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	4a11      	ldr	r2, [pc, #68]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006bea:	5cd3      	ldrb	r3, [r2, r3]
 8006bec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006bf2:	fb03 f202 	mul.w	r2, r3, r2
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e004      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0c      	ldr	r2, [pc, #48]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	613b      	str	r3, [r7, #16]
      break;
 8006c0e:	e002      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c12:	613b      	str	r3, [r7, #16]
      break;
 8006c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c16:	693b      	ldr	r3, [r7, #16]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	007a1200 	.word	0x007a1200
 8006c2c:	0800b898 	.word	0x0800b898
 8006c30:	0800b8a8 	.word	0x0800b8a8
 8006c34:	003d0900 	.word	0x003d0900

08006c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c3c:	4b02      	ldr	r3, [pc, #8]	@ (8006c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	20000004 	.word	0x20000004

08006c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c50:	f7ff fff2 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b05      	ldr	r3, [pc, #20]	@ (8006c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	4903      	ldr	r1, [pc, #12]	@ (8006c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c62:	5ccb      	ldrb	r3, [r1, r3]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	0800b890 	.word	0x0800b890

08006c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c78:	f7ff ffde 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	0adb      	lsrs	r3, r3, #11
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	4903      	ldr	r1, [pc, #12]	@ (8006c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c8a:	5ccb      	ldrb	r3, [r1, r3]
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40021000 	.word	0x40021000
 8006c98:	0800b890 	.word	0x0800b890

08006c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <RCC_Delay+0x34>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd4 <RCC_Delay+0x38>)
 8006caa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cae:	0a5b      	lsrs	r3, r3, #9
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cb8:	bf00      	nop
  }
  while (Delay --);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	60fa      	str	r2, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f9      	bne.n	8006cb8 <RCC_Delay+0x1c>
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr
 8006cd0:	20000004 	.word	0x20000004
 8006cd4:	10624dd3 	.word	0x10624dd3

08006cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e076      	b.n	8006dd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cfa:	d009      	beq.n	8006d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	61da      	str	r2, [r3, #28]
 8006d02:	e005      	b.n	8006d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fd f8f8 	bl	8003f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	ea42 0103 	orr.w	r1, r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	0c1a      	lsrs	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f002 0204 	and.w	r2, r2, #4
 8006db6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_SPI_Transmit+0x22>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e12d      	b.n	800705e <HAL_SPI_Transmit+0x27e>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e0a:	f7fd fb51 	bl	80044b0 <HAL_GetTick>
 8006e0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d002      	beq.n	8006e26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
 8006e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e24:	e116      	b.n	8007054 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_Transmit+0x52>
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e36:	e10d      	b.n	8007054 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d007      	beq.n	8006ebe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ec6:	d14f      	bne.n	8006f68 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_SPI_Transmit+0xf6>
 8006ed0:	8afb      	ldrh	r3, [r7, #22]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d142      	bne.n	8006f5c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eda:	881a      	ldrh	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006efa:	e02f      	b.n	8006f5c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d112      	bne.n	8006f30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f2e:	e015      	b.n	8006f5c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f30:	f7fd fabe 	bl	80044b0 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d803      	bhi.n	8006f48 <HAL_SPI_Transmit+0x168>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d102      	bne.n	8006f4e <HAL_SPI_Transmit+0x16e>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006f5a:	e07b      	b.n	8007054 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1ca      	bne.n	8006efc <HAL_SPI_Transmit+0x11c>
 8006f66:	e050      	b.n	800700a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_SPI_Transmit+0x196>
 8006f70:	8afb      	ldrh	r3, [r7, #22]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d144      	bne.n	8007000 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f9c:	e030      	b.n	8007000 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d113      	bne.n	8006fd4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fd2:	e015      	b.n	8007000 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd4:	f7fd fa6c 	bl	80044b0 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d803      	bhi.n	8006fec <HAL_SPI_Transmit+0x20c>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_Transmit+0x212>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006ffe:	e029      	b.n	8007054 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1c9      	bne.n	8006f9e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fa6e 	bl	80074f0 <SPI_EndRxTxTransaction>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	77fb      	strb	r3, [r7, #31]
 800704a:	e003      	b.n	8007054 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800705c:	7ffb      	ldrb	r3, [r7, #31]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b08c      	sub	sp, #48	@ 0x30
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007074:	2301      	movs	r3, #1
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_SPI_TransmitReceive+0x26>
 8007088:	2302      	movs	r3, #2
 800708a:	e198      	b.n	80073be <HAL_SPI_TransmitReceive+0x358>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007094:	f7fd fa0c 	bl	80044b0 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d00f      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x70>
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070bc:	d107      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x68>
 80070c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d003      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070ce:	2302      	movs	r3, #2
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80070d4:	e16d      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x82>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x82>
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80070ee:	e160      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d003      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2205      	movs	r2, #5
 8007100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	887a      	ldrh	r2, [r7, #2]
 8007114:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	887a      	ldrh	r2, [r7, #2]
 8007126:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	887a      	ldrh	r2, [r7, #2]
 800712c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007144:	2b40      	cmp	r3, #64	@ 0x40
 8007146:	d007      	beq.n	8007158 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007160:	d17c      	bne.n	800725c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SPI_TransmitReceive+0x10a>
 800716a:	8b7b      	ldrh	r3, [r7, #26]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d16a      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007194:	e057      	b.n	8007246 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d11b      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x176>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x176>
 80071ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d113      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	1c9a      	adds	r2, r3, #2
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d119      	bne.n	800721e <HAL_SPI_TransmitReceive+0x1b8>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d014      	beq.n	800721e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fe:	b292      	uxth	r2, r2
 8007200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800721a:	2301      	movs	r3, #1
 800721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800721e:	f7fd f947 	bl	80044b0 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800722a:	429a      	cmp	r2, r3
 800722c:	d80b      	bhi.n	8007246 <HAL_SPI_TransmitReceive+0x1e0>
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d007      	beq.n	8007246 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007244:	e0b5      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1a2      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x130>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d19d      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x130>
 800725a:	e080      	b.n	800735e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_SPI_TransmitReceive+0x204>
 8007264:	8b7b      	ldrh	r3, [r7, #26]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d16f      	bne.n	800734a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007290:	e05b      	b.n	800734a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d11c      	bne.n	80072da <HAL_SPI_TransmitReceive+0x274>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_SPI_TransmitReceive+0x274>
 80072aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d114      	bne.n	80072da <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d119      	bne.n	800731c <HAL_SPI_TransmitReceive+0x2b6>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d014      	beq.n	800731c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007318:	2301      	movs	r3, #1
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800731c:	f7fd f8c8 	bl	80044b0 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007328:	429a      	cmp	r2, r3
 800732a:	d803      	bhi.n	8007334 <HAL_SPI_TransmitReceive+0x2ce>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d102      	bne.n	800733a <HAL_SPI_TransmitReceive+0x2d4>
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007348:	e033      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19e      	bne.n	8007292 <HAL_SPI_TransmitReceive+0x22c>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d199      	bne.n	8007292 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800735e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f8c4 	bl	80074f0 <SPI_EndRxTxTransaction>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800737a:	e01a      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a8:	e003      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80073ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3730      	adds	r7, #48	@ 0x30
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073d4:	b2db      	uxtb	r3, r3
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073f0:	f7fd f85e 	bl	80044b0 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4413      	add	r3, r2
 80073fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007400:	f7fd f856 	bl	80044b0 <HAL_GetTick>
 8007404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007406:	4b39      	ldr	r3, [pc, #228]	@ (80074ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	015b      	lsls	r3, r3, #5
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007416:	e054      	b.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d050      	beq.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007420:	f7fd f846 	bl	80044b0 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	429a      	cmp	r2, r3
 800742e:	d902      	bls.n	8007436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d13d      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800744e:	d111      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007458:	d004      	beq.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007462:	d107      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800747c:	d10f      	bne.n	800749e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800749c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e017      	b.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3b01      	subs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4013      	ands	r3, r2
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	bf0c      	ite	eq
 80074d2:	2301      	moveq	r3, #1
 80074d4:	2300      	movne	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d19b      	bne.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000004 	.word	0x20000004

080074f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	2180      	movs	r1, #128	@ 0x80
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff ff6a 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e000      	b.n	8007524 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e041      	b.n	80075c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc fd2e 	bl	8003fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f000 fd68 	bl	8008040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e041      	b.n	8007660 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f839 	bl	8007668 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f000 fd19 	bl	8008040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr
	...

0800767c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <HAL_TIM_IC_Start+0x1a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e013      	b.n	80076be <HAL_TIM_IC_Start+0x42>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b04      	cmp	r3, #4
 800769a:	d104      	bne.n	80076a6 <HAL_TIM_IC_Start+0x2a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	e00b      	b.n	80076be <HAL_TIM_IC_Start+0x42>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_IC_Start+0x3a>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e003      	b.n	80076be <HAL_TIM_IC_Start+0x42>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <HAL_TIM_IC_Start+0x54>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e013      	b.n	80076f8 <HAL_TIM_IC_Start+0x7c>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d104      	bne.n	80076e0 <HAL_TIM_IC_Start+0x64>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e00b      	b.n	80076f8 <HAL_TIM_IC_Start+0x7c>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d104      	bne.n	80076f0 <HAL_TIM_IC_Start+0x74>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	e003      	b.n	80076f8 <HAL_TIM_IC_Start+0x7c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d102      	bne.n	8007706 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d001      	beq.n	800770a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e06d      	b.n	80077e6 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_TIM_IC_Start+0x9e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007718:	e013      	b.n	8007742 <HAL_TIM_IC_Start+0xc6>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d104      	bne.n	800772a <HAL_TIM_IC_Start+0xae>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	e00b      	b.n	8007742 <HAL_TIM_IC_Start+0xc6>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d104      	bne.n	800773a <HAL_TIM_IC_Start+0xbe>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007738:	e003      	b.n	8007742 <HAL_TIM_IC_Start+0xc6>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <HAL_TIM_IC_Start+0xd6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007750:	e013      	b.n	800777a <HAL_TIM_IC_Start+0xfe>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d104      	bne.n	8007762 <HAL_TIM_IC_Start+0xe6>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007760:	e00b      	b.n	800777a <HAL_TIM_IC_Start+0xfe>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b08      	cmp	r3, #8
 8007766:	d104      	bne.n	8007772 <HAL_TIM_IC_Start+0xf6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007770:	e003      	b.n	800777a <HAL_TIM_IC_Start+0xfe>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fef3 	bl	800856e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <HAL_TIM_IC_Start+0x174>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00e      	beq.n	80077b0 <HAL_TIM_IC_Start+0x134>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779a:	d009      	beq.n	80077b0 <HAL_TIM_IC_Start+0x134>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a14      	ldr	r2, [pc, #80]	@ (80077f4 <HAL_TIM_IC_Start+0x178>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIM_IC_Start+0x134>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a13      	ldr	r2, [pc, #76]	@ (80077f8 <HAL_TIM_IC_Start+0x17c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d111      	bne.n	80077d4 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d010      	beq.n	80077e4 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d2:	e007      	b.n	80077e4 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40012c00 	.word	0x40012c00
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800

080077fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_TIM_IC_Start_IT+0x1e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007816:	b2db      	uxtb	r3, r3
 8007818:	e013      	b.n	8007842 <HAL_TIM_IC_Start_IT+0x46>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d104      	bne.n	800782a <HAL_TIM_IC_Start_IT+0x2e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007826:	b2db      	uxtb	r3, r3
 8007828:	e00b      	b.n	8007842 <HAL_TIM_IC_Start_IT+0x46>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d104      	bne.n	800783a <HAL_TIM_IC_Start_IT+0x3e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007836:	b2db      	uxtb	r3, r3
 8007838:	e003      	b.n	8007842 <HAL_TIM_IC_Start_IT+0x46>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007840:	b2db      	uxtb	r3, r3
 8007842:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <HAL_TIM_IC_Start_IT+0x58>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007850:	b2db      	uxtb	r3, r3
 8007852:	e013      	b.n	800787c <HAL_TIM_IC_Start_IT+0x80>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d104      	bne.n	8007864 <HAL_TIM_IC_Start_IT+0x68>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e00b      	b.n	800787c <HAL_TIM_IC_Start_IT+0x80>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b08      	cmp	r3, #8
 8007868:	d104      	bne.n	8007874 <HAL_TIM_IC_Start_IT+0x78>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007870:	b2db      	uxtb	r3, r3
 8007872:	e003      	b.n	800787c <HAL_TIM_IC_Start_IT+0x80>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800787a:	b2db      	uxtb	r3, r3
 800787c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d102      	bne.n	800788a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007884:	7b7b      	ldrb	r3, [r7, #13]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d001      	beq.n	800788e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e0b8      	b.n	8007a00 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_TIM_IC_Start_IT+0xa2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800789c:	e013      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0xca>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_IC_Start_IT+0xb2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078ac:	e00b      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0xca>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d104      	bne.n	80078be <HAL_TIM_IC_Start_IT+0xc2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078bc:	e003      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0xca>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_IC_Start_IT+0xda>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078d4:	e013      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x102>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_IC_Start_IT+0xea>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x102>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_IC_Start_IT+0xfa>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f4:	e003      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x102>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d841      	bhi.n	8007988 <HAL_TIM_IC_Start_IT+0x18c>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_TIM_IC_Start_IT+0x110>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007941 	.word	0x08007941
 8007910:	08007989 	.word	0x08007989
 8007914:	08007989 	.word	0x08007989
 8007918:	08007989 	.word	0x08007989
 800791c:	08007953 	.word	0x08007953
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007965 	.word	0x08007965
 8007930:	08007989 	.word	0x08007989
 8007934:	08007989 	.word	0x08007989
 8007938:	08007989 	.word	0x08007989
 800793c:	08007977 	.word	0x08007977
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0202 	orr.w	r2, r2, #2
 800794e:	60da      	str	r2, [r3, #12]
      break;
 8007950:	e01d      	b.n	800798e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0204 	orr.w	r2, r2, #4
 8007960:	60da      	str	r2, [r3, #12]
      break;
 8007962:	e014      	b.n	800798e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0208 	orr.w	r2, r2, #8
 8007972:	60da      	str	r2, [r3, #12]
      break;
 8007974:	e00b      	b.n	800798e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0210 	orr.w	r2, r2, #16
 8007984:	60da      	str	r2, [r3, #12]
      break;
 8007986:	e002      	b.n	800798e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	bf00      	nop
  }

  if (status == HAL_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d134      	bne.n	80079fe <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fde6 	bl	800856e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a18      	ldr	r2, [pc, #96]	@ (8007a08 <HAL_TIM_IC_Start_IT+0x20c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00e      	beq.n	80079ca <HAL_TIM_IC_Start_IT+0x1ce>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d009      	beq.n	80079ca <HAL_TIM_IC_Start_IT+0x1ce>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a14      	ldr	r2, [pc, #80]	@ (8007a0c <HAL_TIM_IC_Start_IT+0x210>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d004      	beq.n	80079ca <HAL_TIM_IC_Start_IT+0x1ce>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a12      	ldr	r2, [pc, #72]	@ (8007a10 <HAL_TIM_IC_Start_IT+0x214>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d111      	bne.n	80079ee <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b06      	cmp	r3, #6
 80079da:	d010      	beq.n	80079fe <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ec:	e007      	b.n	80079fe <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800

08007a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0202 	mvn.w	r2, #2
 8007a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fa ff66 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fad3 	bl	800800a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fad9 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0204 	mvn.w	r2, #4
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fa ff3c 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 faa9 	bl	800800a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 faaf 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d122      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d11b      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0208 	mvn.w	r2, #8
 8007ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fa ff12 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8007b04:	e005      	b.n	8007b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa7f 	bl	800800a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa85 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b10      	cmp	r3, #16
 8007b24:	d122      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d11b      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0210 	mvn.w	r2, #16
 8007b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2208      	movs	r2, #8
 8007b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fa fee8 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8007b58:	e005      	b.n	8007b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa55 	bl	800800a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fa5b 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10e      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d107      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0201 	mvn.w	r2, #1
 8007b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa30 	bl	8007ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba2:	2b80      	cmp	r3, #128	@ 0x80
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb0:	2b80      	cmp	r3, #128	@ 0x80
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd61 	bl	8008686 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bce:	2b40      	cmp	r3, #64	@ 0x40
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bdc:	2b40      	cmp	r3, #64	@ 0x40
 8007bde:	d107      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa1f 	bl	800802e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d10e      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d107      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0220 	mvn.w	r2, #32
 8007c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd2c 	bl	8008674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e088      	b.n	8007d54 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007c60:	f000 fae2 	bl	8008228 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 020c 	bic.w	r2, r2, #12
 8007c72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6999      	ldr	r1, [r3, #24]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	619a      	str	r2, [r3, #24]
 8007c86:	e060      	b.n	8007d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d11c      	bne.n	8007cc8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007c9e:	f000 fb4b 	bl	8008338 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007cb0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6999      	ldr	r1, [r3, #24]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	021a      	lsls	r2, r3, #8
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	619a      	str	r2, [r3, #24]
 8007cc6:	e040      	b.n	8007d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d11b      	bne.n	8007d06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007cde:	f000 fb96 	bl	800840e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 020c 	bic.w	r2, r2, #12
 8007cf0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69d9      	ldr	r1, [r3, #28]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	61da      	str	r2, [r3, #28]
 8007d04:	e021      	b.n	8007d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d11c      	bne.n	8007d46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007d1c:	f000 fbb2 	bl	8008484 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007d2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69d9      	ldr	r1, [r3, #28]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021a      	lsls	r2, r3, #8
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	61da      	str	r2, [r3, #28]
 8007d44:	e001      	b.n	8007d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIM_ConfigClockSource+0x1c>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e0b4      	b.n	8007ee2 <HAL_TIM_ConfigClockSource+0x186>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db0:	d03e      	beq.n	8007e30 <HAL_TIM_ConfigClockSource+0xd4>
 8007db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db6:	f200 8087 	bhi.w	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dbe:	f000 8086 	beq.w	8007ece <HAL_TIM_ConfigClockSource+0x172>
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc6:	d87f      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b70      	cmp	r3, #112	@ 0x70
 8007dca:	d01a      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0xa6>
 8007dcc:	2b70      	cmp	r3, #112	@ 0x70
 8007dce:	d87b      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b60      	cmp	r3, #96	@ 0x60
 8007dd2:	d050      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x11a>
 8007dd4:	2b60      	cmp	r3, #96	@ 0x60
 8007dd6:	d877      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b50      	cmp	r3, #80	@ 0x50
 8007dda:	d03c      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0xfa>
 8007ddc:	2b50      	cmp	r3, #80	@ 0x50
 8007dde:	d873      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	d058      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x13a>
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	d86f      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b30      	cmp	r3, #48	@ 0x30
 8007dea:	d064      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	2b30      	cmp	r3, #48	@ 0x30
 8007dee:	d86b      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d060      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d867      	bhi.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d05c      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d05a      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007e00:	e062      	b.n	8007ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e12:	f000 fb8d 	bl	8008530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	609a      	str	r2, [r3, #8]
      break;
 8007e2e:	e04f      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e40:	f000 fb76 	bl	8008530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e52:	609a      	str	r2, [r3, #8]
      break;
 8007e54:	e03c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e62:	461a      	mov	r2, r3
 8007e64:	f000 fa3a 	bl	80082dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2150      	movs	r1, #80	@ 0x50
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fb44 	bl	80084fc <TIM_ITRx_SetConfig>
      break;
 8007e74:	e02c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 fa94 	bl	80083b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2160      	movs	r1, #96	@ 0x60
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb34 	bl	80084fc <TIM_ITRx_SetConfig>
      break;
 8007e94:	e01c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 fa1a 	bl	80082dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2140      	movs	r1, #64	@ 0x40
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fb24 	bl	80084fc <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e00c      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f000 fb1b 	bl	80084fc <TIM_ITRx_SetConfig>
      break;
 8007ec6:	e003      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ecc:	e000      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e031      	b.n	8007f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8f5 	bl	8008104 <TIM_SlaveTimer_SetConfig>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e018      	b.n	8007f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d831      	bhi.n	8007fe8 <HAL_TIM_ReadCapturedValue+0x78>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fcb 	.word	0x08007fcb
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	08007fe9 	.word	0x08007fe9
 8007fb8:	08007fe9 	.word	0x08007fe9
 8007fbc:	08007fdf 	.word	0x08007fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc6:	60fb      	str	r3, [r7, #12]

      break;
 8007fc8:	e00f      	b.n	8007fea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd0:	60fb      	str	r3, [r7, #12]

      break;
 8007fd2:	e00a      	b.n	8007fea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fda:	60fb      	str	r3, [r7, #12]

      break;
 8007fdc:	e005      	b.n	8007fea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe4:	60fb      	str	r3, [r7, #12]

      break;
 8007fe6:	e000      	b.n	8007fea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007fe8:	bf00      	nop
  }

  return tmpreg;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop

08007ff8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr

0800802e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a29      	ldr	r2, [pc, #164]	@ (80080f8 <TIM_Base_SetConfig+0xb8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00b      	beq.n	8008070 <TIM_Base_SetConfig+0x30>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805e:	d007      	beq.n	8008070 <TIM_Base_SetConfig+0x30>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a26      	ldr	r2, [pc, #152]	@ (80080fc <TIM_Base_SetConfig+0xbc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_Base_SetConfig+0x30>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a25      	ldr	r2, [pc, #148]	@ (8008100 <TIM_Base_SetConfig+0xc0>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d108      	bne.n	8008082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <TIM_Base_SetConfig+0xb8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0x62>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0x62>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a19      	ldr	r2, [pc, #100]	@ (80080fc <TIM_Base_SetConfig+0xbc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x62>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a18      	ldr	r2, [pc, #96]	@ (8008100 <TIM_Base_SetConfig+0xc0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a07      	ldr	r2, [pc, #28]	@ (80080f8 <TIM_Base_SetConfig+0xb8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d103      	bne.n	80080e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	615a      	str	r2, [r3, #20]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40000400 	.word	0x40000400
 8008100:	40000800 	.word	0x40000800

08008104 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008120:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 0307 	bic.w	r3, r3, #7
 8008132:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	2b70      	cmp	r3, #112	@ 0x70
 800814c:	d01a      	beq.n	8008184 <TIM_SlaveTimer_SetConfig+0x80>
 800814e:	2b70      	cmp	r3, #112	@ 0x70
 8008150:	d860      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 8008152:	2b60      	cmp	r3, #96	@ 0x60
 8008154:	d054      	beq.n	8008200 <TIM_SlaveTimer_SetConfig+0xfc>
 8008156:	2b60      	cmp	r3, #96	@ 0x60
 8008158:	d85c      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 800815a:	2b50      	cmp	r3, #80	@ 0x50
 800815c:	d046      	beq.n	80081ec <TIM_SlaveTimer_SetConfig+0xe8>
 800815e:	2b50      	cmp	r3, #80	@ 0x50
 8008160:	d858      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 8008162:	2b40      	cmp	r3, #64	@ 0x40
 8008164:	d019      	beq.n	800819a <TIM_SlaveTimer_SetConfig+0x96>
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d854      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 800816a:	2b30      	cmp	r3, #48	@ 0x30
 800816c:	d055      	beq.n	800821a <TIM_SlaveTimer_SetConfig+0x116>
 800816e:	2b30      	cmp	r3, #48	@ 0x30
 8008170:	d850      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d051      	beq.n	800821a <TIM_SlaveTimer_SetConfig+0x116>
 8008176:	2b20      	cmp	r3, #32
 8008178:	d84c      	bhi.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d04d      	beq.n	800821a <TIM_SlaveTimer_SetConfig+0x116>
 800817e:	2b10      	cmp	r3, #16
 8008180:	d04b      	beq.n	800821a <TIM_SlaveTimer_SetConfig+0x116>
 8008182:	e047      	b.n	8008214 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008194:	f000 f9cc 	bl	8008530 <TIM_ETR_SetConfig>
      break;
 8008198:	e040      	b.n	800821c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b05      	cmp	r3, #5
 80081a0:	d101      	bne.n	80081a6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e03b      	b.n	800821e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0201 	bic.w	r2, r2, #1
 80081bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
      break;
 80081ea:	e017      	b.n	800821c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f8:	461a      	mov	r2, r3
 80081fa:	f000 f86f 	bl	80082dc <TIM_TI1_ConfigInputStage>
      break;
 80081fe:	e00d      	b.n	800821c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800820c:	461a      	mov	r2, r3
 800820e:	f000 f8cf 	bl	80083b0 <TIM_TI2_ConfigInputStage>
      break;
 8008212:	e003      	b.n	800821c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	e000      	b.n	800821c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800821a:	bf00      	nop
  }

  return status;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f023 0201 	bic.w	r2, r3, #1
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a1f      	ldr	r2, [pc, #124]	@ (80082d0 <TIM_TI1_SetConfig+0xa8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00b      	beq.n	800826e <TIM_TI1_SetConfig+0x46>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825c:	d007      	beq.n	800826e <TIM_TI1_SetConfig+0x46>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <TIM_TI1_SetConfig+0xac>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d003      	beq.n	800826e <TIM_TI1_SetConfig+0x46>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a1b      	ldr	r2, [pc, #108]	@ (80082d8 <TIM_TI1_SetConfig+0xb0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <TIM_TI1_SetConfig+0x4a>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <TIM_TI1_SetConfig+0x4c>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	e003      	b.n	8008292 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f043 0301 	orr.w	r3, r3, #1
 8008290:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f023 030a 	bic.w	r3, r3, #10
 80082ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 030a 	and.w	r3, r3, #10
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800

080082dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f023 0201 	bic.w	r2, r3, #1
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 030a 	bic.w	r3, r3, #10
 8008318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr

08008338 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	f023 0210 	bic.w	r2, r3, #16
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	031b      	lsls	r3, r3, #12
 800837c:	b29b      	uxth	r3, r3
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800838a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f023 0210 	bic.w	r2, r3, #16
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	031b      	lsls	r3, r3, #12
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr

0800840e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800840e:	b480      	push	{r7}
 8008410:	b087      	sub	sp, #28
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
 800841a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f023 0303 	bic.w	r3, r3, #3
 800843a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	b2db      	uxtb	r3, r3
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800845e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr

08008484 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	031b      	lsls	r3, r3, #12
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	031b      	lsls	r3, r3, #12
 80084dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	621a      	str	r2, [r3, #32]
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr

080084fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	f043 0307 	orr.w	r3, r3, #7
 800851e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800854a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	021a      	lsls	r2, r3, #8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	431a      	orrs	r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4313      	orrs	r3, r2
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	609a      	str	r2, [r3, #8]
}
 8008564:	bf00      	nop
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a1a      	ldr	r2, [r3, #32]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	43db      	mvns	r3, r3
 8008590:	401a      	ands	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	fa01 f303 	lsl.w	r3, r1, r3
 80085a6:	431a      	orrs	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr
	...

080085b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e046      	b.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a16      	ldr	r2, [pc, #88]	@ (8008668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861c:	d009      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a12      	ldr	r2, [pc, #72]	@ (800866c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a10      	ldr	r2, [pc, #64]	@ (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d10c      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4313      	orrs	r3, r2
 8008642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40000400 	.word	0x40000400
 8008670:	40000800 	.word	0x40000800

08008674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr

08008698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e042      	b.n	8008730 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fb fcd8 	bl	8004074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	@ 0x24
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f82b 	bl	8008738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008772:	f023 030c 	bic.w	r3, r3, #12
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	430b      	orrs	r3, r1
 800877e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a2c      	ldr	r2, [pc, #176]	@ (800884c <UART_SetConfig+0x114>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d103      	bne.n	80087a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80087a0:	f7fe fa68 	bl	8006c74 <HAL_RCC_GetPCLK2Freq>
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	e002      	b.n	80087ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087a8:	f7fe fa50 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 80087ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009a      	lsls	r2, r3, #2
 80087b8:	441a      	add	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	4a22      	ldr	r2, [pc, #136]	@ (8008850 <UART_SetConfig+0x118>)
 80087c6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	0119      	lsls	r1, r3, #4
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009a      	lsls	r2, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80087e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008850 <UART_SetConfig+0x118>)
 80087e6:	fba3 0302 	umull	r0, r3, r3, r2
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	2064      	movs	r0, #100	@ 0x64
 80087ee:	fb00 f303 	mul.w	r3, r0, r3
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	3332      	adds	r3, #50	@ 0x32
 80087f8:	4a15      	ldr	r2, [pc, #84]	@ (8008850 <UART_SetConfig+0x118>)
 80087fa:	fba2 2303 	umull	r2, r3, r2, r3
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008804:	4419      	add	r1, r3
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	009a      	lsls	r2, r3, #2
 8008810:	441a      	add	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	fbb2 f2f3 	udiv	r2, r2, r3
 800881c:	4b0c      	ldr	r3, [pc, #48]	@ (8008850 <UART_SetConfig+0x118>)
 800881e:	fba3 0302 	umull	r0, r3, r3, r2
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	2064      	movs	r0, #100	@ 0x64
 8008826:	fb00 f303 	mul.w	r3, r0, r3
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	3332      	adds	r3, #50	@ 0x32
 8008830:	4a07      	ldr	r2, [pc, #28]	@ (8008850 <UART_SetConfig+0x118>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	f003 020f 	and.w	r2, r3, #15
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	440a      	add	r2, r1
 8008842:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008844:	bf00      	nop
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40013800 	.word	0x40013800
 8008850:	51eb851f 	.word	0x51eb851f

08008854 <__cvt>:
 8008854:	2b00      	cmp	r3, #0
 8008856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885a:	461d      	mov	r5, r3
 800885c:	bfbb      	ittet	lt
 800885e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008862:	461d      	movlt	r5, r3
 8008864:	2300      	movge	r3, #0
 8008866:	232d      	movlt	r3, #45	@ 0x2d
 8008868:	b088      	sub	sp, #32
 800886a:	4614      	mov	r4, r2
 800886c:	bfb8      	it	lt
 800886e:	4614      	movlt	r4, r2
 8008870:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008872:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008874:	7013      	strb	r3, [r2, #0]
 8008876:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008878:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800887c:	f023 0820 	bic.w	r8, r3, #32
 8008880:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008884:	d005      	beq.n	8008892 <__cvt+0x3e>
 8008886:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800888a:	d100      	bne.n	800888e <__cvt+0x3a>
 800888c:	3601      	adds	r6, #1
 800888e:	2302      	movs	r3, #2
 8008890:	e000      	b.n	8008894 <__cvt+0x40>
 8008892:	2303      	movs	r3, #3
 8008894:	aa07      	add	r2, sp, #28
 8008896:	9204      	str	r2, [sp, #16]
 8008898:	aa06      	add	r2, sp, #24
 800889a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800889e:	e9cd 3600 	strd	r3, r6, [sp]
 80088a2:	4622      	mov	r2, r4
 80088a4:	462b      	mov	r3, r5
 80088a6:	f000 fe5b 	bl	8009560 <_dtoa_r>
 80088aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088ae:	4607      	mov	r7, r0
 80088b0:	d119      	bne.n	80088e6 <__cvt+0x92>
 80088b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088b4:	07db      	lsls	r3, r3, #31
 80088b6:	d50e      	bpl.n	80088d6 <__cvt+0x82>
 80088b8:	eb00 0906 	add.w	r9, r0, r6
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	4620      	mov	r0, r4
 80088c2:	4629      	mov	r1, r5
 80088c4:	f7f8 f870 	bl	80009a8 <__aeabi_dcmpeq>
 80088c8:	b108      	cbz	r0, 80088ce <__cvt+0x7a>
 80088ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80088ce:	2230      	movs	r2, #48	@ 0x30
 80088d0:	9b07      	ldr	r3, [sp, #28]
 80088d2:	454b      	cmp	r3, r9
 80088d4:	d31e      	bcc.n	8008914 <__cvt+0xc0>
 80088d6:	4638      	mov	r0, r7
 80088d8:	9b07      	ldr	r3, [sp, #28]
 80088da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80088dc:	1bdb      	subs	r3, r3, r7
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	b008      	add	sp, #32
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088ea:	eb00 0906 	add.w	r9, r0, r6
 80088ee:	d1e5      	bne.n	80088bc <__cvt+0x68>
 80088f0:	7803      	ldrb	r3, [r0, #0]
 80088f2:	2b30      	cmp	r3, #48	@ 0x30
 80088f4:	d10a      	bne.n	800890c <__cvt+0xb8>
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f8 f853 	bl	80009a8 <__aeabi_dcmpeq>
 8008902:	b918      	cbnz	r0, 800890c <__cvt+0xb8>
 8008904:	f1c6 0601 	rsb	r6, r6, #1
 8008908:	f8ca 6000 	str.w	r6, [sl]
 800890c:	f8da 3000 	ldr.w	r3, [sl]
 8008910:	4499      	add	r9, r3
 8008912:	e7d3      	b.n	80088bc <__cvt+0x68>
 8008914:	1c59      	adds	r1, r3, #1
 8008916:	9107      	str	r1, [sp, #28]
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e7d9      	b.n	80088d0 <__cvt+0x7c>

0800891c <__exponent>:
 800891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800891e:	2900      	cmp	r1, #0
 8008920:	bfb6      	itet	lt
 8008922:	232d      	movlt	r3, #45	@ 0x2d
 8008924:	232b      	movge	r3, #43	@ 0x2b
 8008926:	4249      	neglt	r1, r1
 8008928:	2909      	cmp	r1, #9
 800892a:	7002      	strb	r2, [r0, #0]
 800892c:	7043      	strb	r3, [r0, #1]
 800892e:	dd29      	ble.n	8008984 <__exponent+0x68>
 8008930:	f10d 0307 	add.w	r3, sp, #7
 8008934:	461d      	mov	r5, r3
 8008936:	270a      	movs	r7, #10
 8008938:	fbb1 f6f7 	udiv	r6, r1, r7
 800893c:	461a      	mov	r2, r3
 800893e:	fb07 1416 	mls	r4, r7, r6, r1
 8008942:	3430      	adds	r4, #48	@ 0x30
 8008944:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008948:	460c      	mov	r4, r1
 800894a:	2c63      	cmp	r4, #99	@ 0x63
 800894c:	4631      	mov	r1, r6
 800894e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008952:	dcf1      	bgt.n	8008938 <__exponent+0x1c>
 8008954:	3130      	adds	r1, #48	@ 0x30
 8008956:	1e94      	subs	r4, r2, #2
 8008958:	f803 1c01 	strb.w	r1, [r3, #-1]
 800895c:	4623      	mov	r3, r4
 800895e:	1c41      	adds	r1, r0, #1
 8008960:	42ab      	cmp	r3, r5
 8008962:	d30a      	bcc.n	800897a <__exponent+0x5e>
 8008964:	f10d 0309 	add.w	r3, sp, #9
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	42ac      	cmp	r4, r5
 800896c:	bf88      	it	hi
 800896e:	2300      	movhi	r3, #0
 8008970:	3302      	adds	r3, #2
 8008972:	4403      	add	r3, r0
 8008974:	1a18      	subs	r0, r3, r0
 8008976:	b003      	add	sp, #12
 8008978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800897e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008982:	e7ed      	b.n	8008960 <__exponent+0x44>
 8008984:	2330      	movs	r3, #48	@ 0x30
 8008986:	3130      	adds	r1, #48	@ 0x30
 8008988:	7083      	strb	r3, [r0, #2]
 800898a:	70c1      	strb	r1, [r0, #3]
 800898c:	1d03      	adds	r3, r0, #4
 800898e:	e7f1      	b.n	8008974 <__exponent+0x58>

08008990 <_printf_float>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	b091      	sub	sp, #68	@ 0x44
 8008996:	460c      	mov	r4, r1
 8008998:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800899c:	4616      	mov	r6, r2
 800899e:	461f      	mov	r7, r3
 80089a0:	4605      	mov	r5, r0
 80089a2:	f000 fcc1 	bl	8009328 <_localeconv_r>
 80089a6:	6803      	ldr	r3, [r0, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	9308      	str	r3, [sp, #32]
 80089ac:	f7f7 fbd0 	bl	8000150 <strlen>
 80089b0:	2300      	movs	r3, #0
 80089b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80089b4:	f8d8 3000 	ldr.w	r3, [r8]
 80089b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80089ba:	3307      	adds	r3, #7
 80089bc:	f023 0307 	bic.w	r3, r3, #7
 80089c0:	f103 0208 	add.w	r2, r3, #8
 80089c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089c8:	f8d4 b000 	ldr.w	fp, [r4]
 80089cc:	f8c8 2000 	str.w	r2, [r8]
 80089d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089da:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80089de:	f04f 32ff 	mov.w	r2, #4294967295
 80089e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089ea:	4b9c      	ldr	r3, [pc, #624]	@ (8008c5c <_printf_float+0x2cc>)
 80089ec:	f7f8 f80e 	bl	8000a0c <__aeabi_dcmpun>
 80089f0:	bb70      	cbnz	r0, 8008a50 <_printf_float+0xc0>
 80089f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089f6:	f04f 32ff 	mov.w	r2, #4294967295
 80089fa:	4b98      	ldr	r3, [pc, #608]	@ (8008c5c <_printf_float+0x2cc>)
 80089fc:	f7f7 ffe8 	bl	80009d0 <__aeabi_dcmple>
 8008a00:	bb30      	cbnz	r0, 8008a50 <_printf_float+0xc0>
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 ffd7 	bl	80009bc <__aeabi_dcmplt>
 8008a0e:	b110      	cbz	r0, 8008a16 <_printf_float+0x86>
 8008a10:	232d      	movs	r3, #45	@ 0x2d
 8008a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a16:	4a92      	ldr	r2, [pc, #584]	@ (8008c60 <_printf_float+0x2d0>)
 8008a18:	4b92      	ldr	r3, [pc, #584]	@ (8008c64 <_printf_float+0x2d4>)
 8008a1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a1e:	bf94      	ite	ls
 8008a20:	4690      	movls	r8, r2
 8008a22:	4698      	movhi	r8, r3
 8008a24:	2303      	movs	r3, #3
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	f02b 0304 	bic.w	r3, fp, #4
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	4633      	mov	r3, r6
 8008a34:	4621      	mov	r1, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	9700      	str	r7, [sp, #0]
 8008a3a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008a3c:	f000 f9d4 	bl	8008de8 <_printf_common>
 8008a40:	3001      	adds	r0, #1
 8008a42:	f040 8090 	bne.w	8008b66 <_printf_float+0x1d6>
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4a:	b011      	add	sp, #68	@ 0x44
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	4642      	mov	r2, r8
 8008a52:	464b      	mov	r3, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	4649      	mov	r1, r9
 8008a58:	f7f7 ffd8 	bl	8000a0c <__aeabi_dcmpun>
 8008a5c:	b148      	cbz	r0, 8008a72 <_printf_float+0xe2>
 8008a5e:	464b      	mov	r3, r9
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bfb8      	it	lt
 8008a64:	232d      	movlt	r3, #45	@ 0x2d
 8008a66:	4a80      	ldr	r2, [pc, #512]	@ (8008c68 <_printf_float+0x2d8>)
 8008a68:	bfb8      	it	lt
 8008a6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c6c <_printf_float+0x2dc>)
 8008a70:	e7d3      	b.n	8008a1a <_printf_float+0x8a>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	d13f      	bne.n	8008afc <_printf_float+0x16c>
 8008a7c:	2306      	movs	r3, #6
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	9206      	str	r2, [sp, #24]
 8008a8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8008a8c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008a90:	aa0d      	add	r2, sp, #52	@ 0x34
 8008a92:	9203      	str	r2, [sp, #12]
 8008a94:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008a98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	910a      	str	r1, [sp, #40]	@ 0x28
 8008aa8:	f7ff fed4 	bl	8008854 <__cvt>
 8008aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008aae:	4680      	mov	r8, r0
 8008ab0:	2947      	cmp	r1, #71	@ 0x47
 8008ab2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008ab4:	d128      	bne.n	8008b08 <_printf_float+0x178>
 8008ab6:	1cc8      	adds	r0, r1, #3
 8008ab8:	db02      	blt.n	8008ac0 <_printf_float+0x130>
 8008aba:	6863      	ldr	r3, [r4, #4]
 8008abc:	4299      	cmp	r1, r3
 8008abe:	dd40      	ble.n	8008b42 <_printf_float+0x1b2>
 8008ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ac8:	4652      	mov	r2, sl
 8008aca:	3901      	subs	r1, #1
 8008acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ad0:	910d      	str	r1, [sp, #52]	@ 0x34
 8008ad2:	f7ff ff23 	bl	800891c <__exponent>
 8008ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ad8:	4681      	mov	r9, r0
 8008ada:	1813      	adds	r3, r2, r0
 8008adc:	2a01      	cmp	r2, #1
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	dc02      	bgt.n	8008ae8 <_printf_float+0x158>
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	07d2      	lsls	r2, r2, #31
 8008ae6:	d501      	bpl.n	8008aec <_printf_float+0x15c>
 8008ae8:	3301      	adds	r3, #1
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d09e      	beq.n	8008a32 <_printf_float+0xa2>
 8008af4:	232d      	movs	r3, #45	@ 0x2d
 8008af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008afa:	e79a      	b.n	8008a32 <_printf_float+0xa2>
 8008afc:	2947      	cmp	r1, #71	@ 0x47
 8008afe:	d1bf      	bne.n	8008a80 <_printf_float+0xf0>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1bd      	bne.n	8008a80 <_printf_float+0xf0>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e7ba      	b.n	8008a7e <_printf_float+0xee>
 8008b08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b0c:	d9dc      	bls.n	8008ac8 <_printf_float+0x138>
 8008b0e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b12:	d118      	bne.n	8008b46 <_printf_float+0x1b6>
 8008b14:	2900      	cmp	r1, #0
 8008b16:	6863      	ldr	r3, [r4, #4]
 8008b18:	dd0b      	ble.n	8008b32 <_printf_float+0x1a2>
 8008b1a:	6121      	str	r1, [r4, #16]
 8008b1c:	b913      	cbnz	r3, 8008b24 <_printf_float+0x194>
 8008b1e:	6822      	ldr	r2, [r4, #0]
 8008b20:	07d0      	lsls	r0, r2, #31
 8008b22:	d502      	bpl.n	8008b2a <_printf_float+0x19a>
 8008b24:	3301      	adds	r3, #1
 8008b26:	440b      	add	r3, r1
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	f04f 0900 	mov.w	r9, #0
 8008b2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b30:	e7dc      	b.n	8008aec <_printf_float+0x15c>
 8008b32:	b913      	cbnz	r3, 8008b3a <_printf_float+0x1aa>
 8008b34:	6822      	ldr	r2, [r4, #0]
 8008b36:	07d2      	lsls	r2, r2, #31
 8008b38:	d501      	bpl.n	8008b3e <_printf_float+0x1ae>
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	e7f4      	b.n	8008b28 <_printf_float+0x198>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7f2      	b.n	8008b28 <_printf_float+0x198>
 8008b42:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	db05      	blt.n	8008b58 <_printf_float+0x1c8>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	6121      	str	r1, [r4, #16]
 8008b50:	07d8      	lsls	r0, r3, #31
 8008b52:	d5ea      	bpl.n	8008b2a <_printf_float+0x19a>
 8008b54:	1c4b      	adds	r3, r1, #1
 8008b56:	e7e7      	b.n	8008b28 <_printf_float+0x198>
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	bfcc      	ite	gt
 8008b5c:	2201      	movgt	r2, #1
 8008b5e:	f1c1 0202 	rsble	r2, r1, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	e7e0      	b.n	8008b28 <_printf_float+0x198>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	055a      	lsls	r2, r3, #21
 8008b6a:	d407      	bmi.n	8008b7c <_printf_float+0x1ec>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	4642      	mov	r2, r8
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	d12b      	bne.n	8008bd2 <_printf_float+0x242>
 8008b7a:	e764      	b.n	8008a46 <_printf_float+0xb6>
 8008b7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b80:	f240 80dc 	bls.w	8008d3c <_printf_float+0x3ac>
 8008b84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f7f7 ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d033      	beq.n	8008bfc <_printf_float+0x26c>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	4a35      	ldr	r2, [pc, #212]	@ (8008c70 <_printf_float+0x2e0>)
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f af51 	beq.w	8008a46 <_printf_float+0xb6>
 8008ba4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008ba8:	4543      	cmp	r3, r8
 8008baa:	db02      	blt.n	8008bb2 <_printf_float+0x222>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	07d8      	lsls	r0, r3, #31
 8008bb0:	d50f      	bpl.n	8008bd2 <_printf_float+0x242>
 8008bb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f af42 	beq.w	8008a46 <_printf_float+0xb6>
 8008bc2:	f04f 0900 	mov.w	r9, #0
 8008bc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bca:	f104 0a1a 	add.w	sl, r4, #26
 8008bce:	45c8      	cmp	r8, r9
 8008bd0:	dc09      	bgt.n	8008be6 <_printf_float+0x256>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	079b      	lsls	r3, r3, #30
 8008bd6:	f100 8102 	bmi.w	8008dde <_printf_float+0x44e>
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bde:	4298      	cmp	r0, r3
 8008be0:	bfb8      	it	lt
 8008be2:	4618      	movlt	r0, r3
 8008be4:	e731      	b.n	8008a4a <_printf_float+0xba>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4652      	mov	r2, sl
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f af28 	beq.w	8008a46 <_printf_float+0xb6>
 8008bf6:	f109 0901 	add.w	r9, r9, #1
 8008bfa:	e7e8      	b.n	8008bce <_printf_float+0x23e>
 8008bfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dc38      	bgt.n	8008c74 <_printf_float+0x2e4>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4631      	mov	r1, r6
 8008c06:	4628      	mov	r0, r5
 8008c08:	4a19      	ldr	r2, [pc, #100]	@ (8008c70 <_printf_float+0x2e0>)
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f af1a 	beq.w	8008a46 <_printf_float+0xb6>
 8008c12:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008c16:	ea59 0303 	orrs.w	r3, r9, r3
 8008c1a:	d102      	bne.n	8008c22 <_printf_float+0x292>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	07d9      	lsls	r1, r3, #31
 8008c20:	d5d7      	bpl.n	8008bd2 <_printf_float+0x242>
 8008c22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c26:	4631      	mov	r1, r6
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f43f af0a 	beq.w	8008a46 <_printf_float+0xb6>
 8008c32:	f04f 0a00 	mov.w	sl, #0
 8008c36:	f104 0b1a 	add.w	fp, r4, #26
 8008c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	4553      	cmp	r3, sl
 8008c40:	dc01      	bgt.n	8008c46 <_printf_float+0x2b6>
 8008c42:	464b      	mov	r3, r9
 8008c44:	e793      	b.n	8008b6e <_printf_float+0x1de>
 8008c46:	2301      	movs	r3, #1
 8008c48:	465a      	mov	r2, fp
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	f43f aef8 	beq.w	8008a46 <_printf_float+0xb6>
 8008c56:	f10a 0a01 	add.w	sl, sl, #1
 8008c5a:	e7ee      	b.n	8008c3a <_printf_float+0x2aa>
 8008c5c:	7fefffff 	.word	0x7fefffff
 8008c60:	0800b8aa 	.word	0x0800b8aa
 8008c64:	0800b8ae 	.word	0x0800b8ae
 8008c68:	0800b8b2 	.word	0x0800b8b2
 8008c6c:	0800b8b6 	.word	0x0800b8b6
 8008c70:	0800b8ba 	.word	0x0800b8ba
 8008c74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008c7a:	4553      	cmp	r3, sl
 8008c7c:	bfa8      	it	ge
 8008c7e:	4653      	movge	r3, sl
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	4699      	mov	r9, r3
 8008c84:	dc36      	bgt.n	8008cf4 <_printf_float+0x364>
 8008c86:	f04f 0b00 	mov.w	fp, #0
 8008c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c8e:	f104 021a 	add.w	r2, r4, #26
 8008c92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c94:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c96:	eba3 0309 	sub.w	r3, r3, r9
 8008c9a:	455b      	cmp	r3, fp
 8008c9c:	dc31      	bgt.n	8008d02 <_printf_float+0x372>
 8008c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ca0:	459a      	cmp	sl, r3
 8008ca2:	dc3a      	bgt.n	8008d1a <_printf_float+0x38a>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d437      	bmi.n	8008d1a <_printf_float+0x38a>
 8008caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cac:	ebaa 0903 	sub.w	r9, sl, r3
 8008cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cb2:	ebaa 0303 	sub.w	r3, sl, r3
 8008cb6:	4599      	cmp	r9, r3
 8008cb8:	bfa8      	it	ge
 8008cba:	4699      	movge	r9, r3
 8008cbc:	f1b9 0f00 	cmp.w	r9, #0
 8008cc0:	dc33      	bgt.n	8008d2a <_printf_float+0x39a>
 8008cc2:	f04f 0800 	mov.w	r8, #0
 8008cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cca:	f104 0b1a 	add.w	fp, r4, #26
 8008cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cd0:	ebaa 0303 	sub.w	r3, sl, r3
 8008cd4:	eba3 0309 	sub.w	r3, r3, r9
 8008cd8:	4543      	cmp	r3, r8
 8008cda:	f77f af7a 	ble.w	8008bd2 <_printf_float+0x242>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	465a      	mov	r2, fp
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f aeac 	beq.w	8008a46 <_printf_float+0xb6>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	e7ec      	b.n	8008cce <_printf_float+0x33e>
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d1c2      	bne.n	8008c86 <_printf_float+0x2f6>
 8008d00:	e6a1      	b.n	8008a46 <_printf_float+0xb6>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f43f ae9a 	beq.w	8008a46 <_printf_float+0xb6>
 8008d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d14:	f10b 0b01 	add.w	fp, fp, #1
 8008d18:	e7bb      	b.n	8008c92 <_printf_float+0x302>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	d1c0      	bne.n	8008caa <_printf_float+0x31a>
 8008d28:	e68d      	b.n	8008a46 <_printf_float+0xb6>
 8008d2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	4442      	add	r2, r8
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c3      	bne.n	8008cc2 <_printf_float+0x332>
 8008d3a:	e684      	b.n	8008a46 <_printf_float+0xb6>
 8008d3c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008d40:	f1ba 0f01 	cmp.w	sl, #1
 8008d44:	dc01      	bgt.n	8008d4a <_printf_float+0x3ba>
 8008d46:	07db      	lsls	r3, r3, #31
 8008d48:	d536      	bpl.n	8008db8 <_printf_float+0x428>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f ae76 	beq.w	8008a46 <_printf_float+0xb6>
 8008d5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b8      	blx	r7
 8008d64:	3001      	adds	r0, #1
 8008d66:	f43f ae6e 	beq.w	8008a46 <_printf_float+0xb6>
 8008d6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2300      	movs	r3, #0
 8008d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d76:	f7f7 fe17 	bl	80009a8 <__aeabi_dcmpeq>
 8008d7a:	b9c0      	cbnz	r0, 8008dae <_printf_float+0x41e>
 8008d7c:	4653      	mov	r3, sl
 8008d7e:	f108 0201 	add.w	r2, r8, #1
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d10c      	bne.n	8008da6 <_printf_float+0x416>
 8008d8c:	e65b      	b.n	8008a46 <_printf_float+0xb6>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	465a      	mov	r2, fp
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f ae54 	beq.w	8008a46 <_printf_float+0xb6>
 8008d9e:	f108 0801 	add.w	r8, r8, #1
 8008da2:	45d0      	cmp	r8, sl
 8008da4:	dbf3      	blt.n	8008d8e <_printf_float+0x3fe>
 8008da6:	464b      	mov	r3, r9
 8008da8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008dac:	e6e0      	b.n	8008b70 <_printf_float+0x1e0>
 8008dae:	f04f 0800 	mov.w	r8, #0
 8008db2:	f104 0b1a 	add.w	fp, r4, #26
 8008db6:	e7f4      	b.n	8008da2 <_printf_float+0x412>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4642      	mov	r2, r8
 8008dbc:	e7e1      	b.n	8008d82 <_printf_float+0x3f2>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	464a      	mov	r2, r9
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f43f ae3c 	beq.w	8008a46 <_printf_float+0xb6>
 8008dce:	f108 0801 	add.w	r8, r8, #1
 8008dd2:	68e3      	ldr	r3, [r4, #12]
 8008dd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008dd6:	1a5b      	subs	r3, r3, r1
 8008dd8:	4543      	cmp	r3, r8
 8008dda:	dcf0      	bgt.n	8008dbe <_printf_float+0x42e>
 8008ddc:	e6fd      	b.n	8008bda <_printf_float+0x24a>
 8008dde:	f04f 0800 	mov.w	r8, #0
 8008de2:	f104 0919 	add.w	r9, r4, #25
 8008de6:	e7f4      	b.n	8008dd2 <_printf_float+0x442>

08008de8 <_printf_common>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	4616      	mov	r6, r2
 8008dee:	4698      	mov	r8, r3
 8008df0:	688a      	ldr	r2, [r1, #8]
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	4607      	mov	r7, r0
 8008df6:	4293      	cmp	r3, r2
 8008df8:	bfb8      	it	lt
 8008dfa:	4613      	movlt	r3, r2
 8008dfc:	6033      	str	r3, [r6, #0]
 8008dfe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e02:	460c      	mov	r4, r1
 8008e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e08:	b10a      	cbz	r2, 8008e0e <_printf_common+0x26>
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	0699      	lsls	r1, r3, #26
 8008e12:	bf42      	ittt	mi
 8008e14:	6833      	ldrmi	r3, [r6, #0]
 8008e16:	3302      	addmi	r3, #2
 8008e18:	6033      	strmi	r3, [r6, #0]
 8008e1a:	6825      	ldr	r5, [r4, #0]
 8008e1c:	f015 0506 	ands.w	r5, r5, #6
 8008e20:	d106      	bne.n	8008e30 <_printf_common+0x48>
 8008e22:	f104 0a19 	add.w	sl, r4, #25
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	6832      	ldr	r2, [r6, #0]
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc2b      	bgt.n	8008e88 <_printf_common+0xa0>
 8008e30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	3b00      	subs	r3, #0
 8008e38:	bf18      	it	ne
 8008e3a:	2301      	movne	r3, #1
 8008e3c:	0692      	lsls	r2, r2, #26
 8008e3e:	d430      	bmi.n	8008ea2 <_printf_common+0xba>
 8008e40:	4641      	mov	r1, r8
 8008e42:	4638      	mov	r0, r7
 8008e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e48:	47c8      	blx	r9
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d023      	beq.n	8008e96 <_printf_common+0xae>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	6922      	ldr	r2, [r4, #16]
 8008e52:	f003 0306 	and.w	r3, r3, #6
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	bf14      	ite	ne
 8008e5a:	2500      	movne	r5, #0
 8008e5c:	6833      	ldreq	r3, [r6, #0]
 8008e5e:	f04f 0600 	mov.w	r6, #0
 8008e62:	bf08      	it	eq
 8008e64:	68e5      	ldreq	r5, [r4, #12]
 8008e66:	f104 041a 	add.w	r4, r4, #26
 8008e6a:	bf08      	it	eq
 8008e6c:	1aed      	subeq	r5, r5, r3
 8008e6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e72:	bf08      	it	eq
 8008e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	bfc4      	itt	gt
 8008e7c:	1a9b      	subgt	r3, r3, r2
 8008e7e:	18ed      	addgt	r5, r5, r3
 8008e80:	42b5      	cmp	r5, r6
 8008e82:	d11a      	bne.n	8008eba <_printf_common+0xd2>
 8008e84:	2000      	movs	r0, #0
 8008e86:	e008      	b.n	8008e9a <_printf_common+0xb2>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	4638      	mov	r0, r7
 8008e90:	47c8      	blx	r9
 8008e92:	3001      	adds	r0, #1
 8008e94:	d103      	bne.n	8008e9e <_printf_common+0xb6>
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	3501      	adds	r5, #1
 8008ea0:	e7c1      	b.n	8008e26 <_printf_common+0x3e>
 8008ea2:	2030      	movs	r0, #48	@ 0x30
 8008ea4:	18e1      	adds	r1, r4, r3
 8008ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eb0:	4422      	add	r2, r4
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008eb8:	e7c2      	b.n	8008e40 <_printf_common+0x58>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	47c8      	blx	r9
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d0e6      	beq.n	8008e96 <_printf_common+0xae>
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7d9      	b.n	8008e80 <_printf_common+0x98>

08008ecc <_printf_i>:
 8008ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	7e0f      	ldrb	r7, [r1, #24]
 8008ed2:	4691      	mov	r9, r2
 8008ed4:	2f78      	cmp	r7, #120	@ 0x78
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	460c      	mov	r4, r1
 8008eda:	469a      	mov	sl, r3
 8008edc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ee2:	d807      	bhi.n	8008ef4 <_printf_i+0x28>
 8008ee4:	2f62      	cmp	r7, #98	@ 0x62
 8008ee6:	d80a      	bhi.n	8008efe <_printf_i+0x32>
 8008ee8:	2f00      	cmp	r7, #0
 8008eea:	f000 80d3 	beq.w	8009094 <_printf_i+0x1c8>
 8008eee:	2f58      	cmp	r7, #88	@ 0x58
 8008ef0:	f000 80ba 	beq.w	8009068 <_printf_i+0x19c>
 8008ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008efc:	e03a      	b.n	8008f74 <_printf_i+0xa8>
 8008efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f02:	2b15      	cmp	r3, #21
 8008f04:	d8f6      	bhi.n	8008ef4 <_printf_i+0x28>
 8008f06:	a101      	add	r1, pc, #4	@ (adr r1, 8008f0c <_printf_i+0x40>)
 8008f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008ef5 	.word	0x08008ef5
 8008f18:	08008ef5 	.word	0x08008ef5
 8008f1c:	08008ef5 	.word	0x08008ef5
 8008f20:	08008ef5 	.word	0x08008ef5
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	08008ef5 	.word	0x08008ef5
 8008f2c:	08008ef5 	.word	0x08008ef5
 8008f30:	08008ef5 	.word	0x08008ef5
 8008f34:	08008ef5 	.word	0x08008ef5
 8008f38:	0800907b 	.word	0x0800907b
 8008f3c:	08008fa3 	.word	0x08008fa3
 8008f40:	08009035 	.word	0x08009035
 8008f44:	08008ef5 	.word	0x08008ef5
 8008f48:	08008ef5 	.word	0x08008ef5
 8008f4c:	0800909d 	.word	0x0800909d
 8008f50:	08008ef5 	.word	0x08008ef5
 8008f54:	08008fa3 	.word	0x08008fa3
 8008f58:	08008ef5 	.word	0x08008ef5
 8008f5c:	08008ef5 	.word	0x08008ef5
 8008f60:	0800903d 	.word	0x0800903d
 8008f64:	6833      	ldr	r3, [r6, #0]
 8008f66:	1d1a      	adds	r2, r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6032      	str	r2, [r6, #0]
 8008f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f74:	2301      	movs	r3, #1
 8008f76:	e09e      	b.n	80090b6 <_printf_i+0x1ea>
 8008f78:	6833      	ldr	r3, [r6, #0]
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	1d19      	adds	r1, r3, #4
 8008f7e:	6031      	str	r1, [r6, #0]
 8008f80:	0606      	lsls	r6, r0, #24
 8008f82:	d501      	bpl.n	8008f88 <_printf_i+0xbc>
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	e003      	b.n	8008f90 <_printf_i+0xc4>
 8008f88:	0645      	lsls	r5, r0, #25
 8008f8a:	d5fb      	bpl.n	8008f84 <_printf_i+0xb8>
 8008f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	da03      	bge.n	8008f9c <_printf_i+0xd0>
 8008f94:	232d      	movs	r3, #45	@ 0x2d
 8008f96:	426d      	negs	r5, r5
 8008f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	4859      	ldr	r0, [pc, #356]	@ (8009104 <_printf_i+0x238>)
 8008fa0:	e011      	b.n	8008fc6 <_printf_i+0xfa>
 8008fa2:	6821      	ldr	r1, [r4, #0]
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	0608      	lsls	r0, r1, #24
 8008fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fac:	d402      	bmi.n	8008fb4 <_printf_i+0xe8>
 8008fae:	0649      	lsls	r1, r1, #25
 8008fb0:	bf48      	it	mi
 8008fb2:	b2ad      	uxthmi	r5, r5
 8008fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	bf14      	ite	ne
 8008fba:	230a      	movne	r3, #10
 8008fbc:	2308      	moveq	r3, #8
 8008fbe:	4851      	ldr	r0, [pc, #324]	@ (8009104 <_printf_i+0x238>)
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fc6:	6866      	ldr	r6, [r4, #4]
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	bfa8      	it	ge
 8008fcc:	6821      	ldrge	r1, [r4, #0]
 8008fce:	60a6      	str	r6, [r4, #8]
 8008fd0:	bfa4      	itt	ge
 8008fd2:	f021 0104 	bicge.w	r1, r1, #4
 8008fd6:	6021      	strge	r1, [r4, #0]
 8008fd8:	b90d      	cbnz	r5, 8008fde <_printf_i+0x112>
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	d04b      	beq.n	8009076 <_printf_i+0x1aa>
 8008fde:	4616      	mov	r6, r2
 8008fe0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fe4:	fb03 5711 	mls	r7, r3, r1, r5
 8008fe8:	5dc7      	ldrb	r7, [r0, r7]
 8008fea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fee:	462f      	mov	r7, r5
 8008ff0:	42bb      	cmp	r3, r7
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	d9f4      	bls.n	8008fe0 <_printf_i+0x114>
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d10b      	bne.n	8009012 <_printf_i+0x146>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	07df      	lsls	r7, r3, #31
 8008ffe:	d508      	bpl.n	8009012 <_printf_i+0x146>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	6861      	ldr	r1, [r4, #4]
 8009004:	4299      	cmp	r1, r3
 8009006:	bfde      	ittt	le
 8009008:	2330      	movle	r3, #48	@ 0x30
 800900a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800900e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009012:	1b92      	subs	r2, r2, r6
 8009014:	6122      	str	r2, [r4, #16]
 8009016:	464b      	mov	r3, r9
 8009018:	4621      	mov	r1, r4
 800901a:	4640      	mov	r0, r8
 800901c:	f8cd a000 	str.w	sl, [sp]
 8009020:	aa03      	add	r2, sp, #12
 8009022:	f7ff fee1 	bl	8008de8 <_printf_common>
 8009026:	3001      	adds	r0, #1
 8009028:	d14a      	bne.n	80090c0 <_printf_i+0x1f4>
 800902a:	f04f 30ff 	mov.w	r0, #4294967295
 800902e:	b004      	add	sp, #16
 8009030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	f043 0320 	orr.w	r3, r3, #32
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	2778      	movs	r7, #120	@ 0x78
 800903e:	4832      	ldr	r0, [pc, #200]	@ (8009108 <_printf_i+0x23c>)
 8009040:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	6831      	ldr	r1, [r6, #0]
 8009048:	061f      	lsls	r7, r3, #24
 800904a:	f851 5b04 	ldr.w	r5, [r1], #4
 800904e:	d402      	bmi.n	8009056 <_printf_i+0x18a>
 8009050:	065f      	lsls	r7, r3, #25
 8009052:	bf48      	it	mi
 8009054:	b2ad      	uxthmi	r5, r5
 8009056:	6031      	str	r1, [r6, #0]
 8009058:	07d9      	lsls	r1, r3, #31
 800905a:	bf44      	itt	mi
 800905c:	f043 0320 	orrmi.w	r3, r3, #32
 8009060:	6023      	strmi	r3, [r4, #0]
 8009062:	b11d      	cbz	r5, 800906c <_printf_i+0x1a0>
 8009064:	2310      	movs	r3, #16
 8009066:	e7ab      	b.n	8008fc0 <_printf_i+0xf4>
 8009068:	4826      	ldr	r0, [pc, #152]	@ (8009104 <_printf_i+0x238>)
 800906a:	e7e9      	b.n	8009040 <_printf_i+0x174>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f023 0320 	bic.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	e7f6      	b.n	8009064 <_printf_i+0x198>
 8009076:	4616      	mov	r6, r2
 8009078:	e7bd      	b.n	8008ff6 <_printf_i+0x12a>
 800907a:	6833      	ldr	r3, [r6, #0]
 800907c:	6825      	ldr	r5, [r4, #0]
 800907e:	1d18      	adds	r0, r3, #4
 8009080:	6961      	ldr	r1, [r4, #20]
 8009082:	6030      	str	r0, [r6, #0]
 8009084:	062e      	lsls	r6, r5, #24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	d501      	bpl.n	800908e <_printf_i+0x1c2>
 800908a:	6019      	str	r1, [r3, #0]
 800908c:	e002      	b.n	8009094 <_printf_i+0x1c8>
 800908e:	0668      	lsls	r0, r5, #25
 8009090:	d5fb      	bpl.n	800908a <_printf_i+0x1be>
 8009092:	8019      	strh	r1, [r3, #0]
 8009094:	2300      	movs	r3, #0
 8009096:	4616      	mov	r6, r2
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	e7bc      	b.n	8009016 <_printf_i+0x14a>
 800909c:	6833      	ldr	r3, [r6, #0]
 800909e:	2100      	movs	r1, #0
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	6032      	str	r2, [r6, #0]
 80090a4:	681e      	ldr	r6, [r3, #0]
 80090a6:	6862      	ldr	r2, [r4, #4]
 80090a8:	4630      	mov	r0, r6
 80090aa:	f000 f9b4 	bl	8009416 <memchr>
 80090ae:	b108      	cbz	r0, 80090b4 <_printf_i+0x1e8>
 80090b0:	1b80      	subs	r0, r0, r6
 80090b2:	6060      	str	r0, [r4, #4]
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	6123      	str	r3, [r4, #16]
 80090b8:	2300      	movs	r3, #0
 80090ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090be:	e7aa      	b.n	8009016 <_printf_i+0x14a>
 80090c0:	4632      	mov	r2, r6
 80090c2:	4649      	mov	r1, r9
 80090c4:	4640      	mov	r0, r8
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	47d0      	blx	sl
 80090ca:	3001      	adds	r0, #1
 80090cc:	d0ad      	beq.n	800902a <_printf_i+0x15e>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	079b      	lsls	r3, r3, #30
 80090d2:	d413      	bmi.n	80090fc <_printf_i+0x230>
 80090d4:	68e0      	ldr	r0, [r4, #12]
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	4298      	cmp	r0, r3
 80090da:	bfb8      	it	lt
 80090dc:	4618      	movlt	r0, r3
 80090de:	e7a6      	b.n	800902e <_printf_i+0x162>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4632      	mov	r2, r6
 80090e4:	4649      	mov	r1, r9
 80090e6:	4640      	mov	r0, r8
 80090e8:	47d0      	blx	sl
 80090ea:	3001      	adds	r0, #1
 80090ec:	d09d      	beq.n	800902a <_printf_i+0x15e>
 80090ee:	3501      	adds	r5, #1
 80090f0:	68e3      	ldr	r3, [r4, #12]
 80090f2:	9903      	ldr	r1, [sp, #12]
 80090f4:	1a5b      	subs	r3, r3, r1
 80090f6:	42ab      	cmp	r3, r5
 80090f8:	dcf2      	bgt.n	80090e0 <_printf_i+0x214>
 80090fa:	e7eb      	b.n	80090d4 <_printf_i+0x208>
 80090fc:	2500      	movs	r5, #0
 80090fe:	f104 0619 	add.w	r6, r4, #25
 8009102:	e7f5      	b.n	80090f0 <_printf_i+0x224>
 8009104:	0800b8bc 	.word	0x0800b8bc
 8009108:	0800b8cd 	.word	0x0800b8cd

0800910c <std>:
 800910c:	2300      	movs	r3, #0
 800910e:	b510      	push	{r4, lr}
 8009110:	4604      	mov	r4, r0
 8009112:	e9c0 3300 	strd	r3, r3, [r0]
 8009116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800911a:	6083      	str	r3, [r0, #8]
 800911c:	8181      	strh	r1, [r0, #12]
 800911e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009120:	81c2      	strh	r2, [r0, #14]
 8009122:	6183      	str	r3, [r0, #24]
 8009124:	4619      	mov	r1, r3
 8009126:	2208      	movs	r2, #8
 8009128:	305c      	adds	r0, #92	@ 0x5c
 800912a:	f000 f8f4 	bl	8009316 <memset>
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <std+0x58>)
 8009130:	6224      	str	r4, [r4, #32]
 8009132:	6263      	str	r3, [r4, #36]	@ 0x24
 8009134:	4b0c      	ldr	r3, [pc, #48]	@ (8009168 <std+0x5c>)
 8009136:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009138:	4b0c      	ldr	r3, [pc, #48]	@ (800916c <std+0x60>)
 800913a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800913c:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <std+0x64>)
 800913e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009140:	4b0c      	ldr	r3, [pc, #48]	@ (8009174 <std+0x68>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d006      	beq.n	8009154 <std+0x48>
 8009146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800914a:	4294      	cmp	r4, r2
 800914c:	d002      	beq.n	8009154 <std+0x48>
 800914e:	33d0      	adds	r3, #208	@ 0xd0
 8009150:	429c      	cmp	r4, r3
 8009152:	d105      	bne.n	8009160 <std+0x54>
 8009154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915c:	f000 b958 	b.w	8009410 <__retarget_lock_init_recursive>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	08009291 	.word	0x08009291
 8009168:	080092b3 	.word	0x080092b3
 800916c:	080092eb 	.word	0x080092eb
 8009170:	0800930f 	.word	0x0800930f
 8009174:	200006f0 	.word	0x200006f0

08009178 <stdio_exit_handler>:
 8009178:	4a02      	ldr	r2, [pc, #8]	@ (8009184 <stdio_exit_handler+0xc>)
 800917a:	4903      	ldr	r1, [pc, #12]	@ (8009188 <stdio_exit_handler+0x10>)
 800917c:	4803      	ldr	r0, [pc, #12]	@ (800918c <stdio_exit_handler+0x14>)
 800917e:	f000 b869 	b.w	8009254 <_fwalk_sglue>
 8009182:	bf00      	nop
 8009184:	20000010 	.word	0x20000010
 8009188:	0800aaed 	.word	0x0800aaed
 800918c:	20000020 	.word	0x20000020

08009190 <cleanup_stdio>:
 8009190:	6841      	ldr	r1, [r0, #4]
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <cleanup_stdio+0x34>)
 8009194:	b510      	push	{r4, lr}
 8009196:	4299      	cmp	r1, r3
 8009198:	4604      	mov	r4, r0
 800919a:	d001      	beq.n	80091a0 <cleanup_stdio+0x10>
 800919c:	f001 fca6 	bl	800aaec <_fflush_r>
 80091a0:	68a1      	ldr	r1, [r4, #8]
 80091a2:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <cleanup_stdio+0x38>)
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d002      	beq.n	80091ae <cleanup_stdio+0x1e>
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 fc9f 	bl	800aaec <_fflush_r>
 80091ae:	68e1      	ldr	r1, [r4, #12]
 80091b0:	4b06      	ldr	r3, [pc, #24]	@ (80091cc <cleanup_stdio+0x3c>)
 80091b2:	4299      	cmp	r1, r3
 80091b4:	d004      	beq.n	80091c0 <cleanup_stdio+0x30>
 80091b6:	4620      	mov	r0, r4
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f001 bc96 	b.w	800aaec <_fflush_r>
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	200006f0 	.word	0x200006f0
 80091c8:	20000758 	.word	0x20000758
 80091cc:	200007c0 	.word	0x200007c0

080091d0 <global_stdio_init.part.0>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <global_stdio_init.part.0+0x30>)
 80091d4:	4c0b      	ldr	r4, [pc, #44]	@ (8009204 <global_stdio_init.part.0+0x34>)
 80091d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009208 <global_stdio_init.part.0+0x38>)
 80091d8:	4620      	mov	r0, r4
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	2104      	movs	r1, #4
 80091de:	2200      	movs	r2, #0
 80091e0:	f7ff ff94 	bl	800910c <std>
 80091e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091e8:	2201      	movs	r2, #1
 80091ea:	2109      	movs	r1, #9
 80091ec:	f7ff ff8e 	bl	800910c <std>
 80091f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091f4:	2202      	movs	r2, #2
 80091f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fa:	2112      	movs	r1, #18
 80091fc:	f7ff bf86 	b.w	800910c <std>
 8009200:	20000828 	.word	0x20000828
 8009204:	200006f0 	.word	0x200006f0
 8009208:	08009179 	.word	0x08009179

0800920c <__sfp_lock_acquire>:
 800920c:	4801      	ldr	r0, [pc, #4]	@ (8009214 <__sfp_lock_acquire+0x8>)
 800920e:	f000 b900 	b.w	8009412 <__retarget_lock_acquire_recursive>
 8009212:	bf00      	nop
 8009214:	20000831 	.word	0x20000831

08009218 <__sfp_lock_release>:
 8009218:	4801      	ldr	r0, [pc, #4]	@ (8009220 <__sfp_lock_release+0x8>)
 800921a:	f000 b8fb 	b.w	8009414 <__retarget_lock_release_recursive>
 800921e:	bf00      	nop
 8009220:	20000831 	.word	0x20000831

08009224 <__sinit>:
 8009224:	b510      	push	{r4, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	f7ff fff0 	bl	800920c <__sfp_lock_acquire>
 800922c:	6a23      	ldr	r3, [r4, #32]
 800922e:	b11b      	cbz	r3, 8009238 <__sinit+0x14>
 8009230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009234:	f7ff bff0 	b.w	8009218 <__sfp_lock_release>
 8009238:	4b04      	ldr	r3, [pc, #16]	@ (800924c <__sinit+0x28>)
 800923a:	6223      	str	r3, [r4, #32]
 800923c:	4b04      	ldr	r3, [pc, #16]	@ (8009250 <__sinit+0x2c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1f5      	bne.n	8009230 <__sinit+0xc>
 8009244:	f7ff ffc4 	bl	80091d0 <global_stdio_init.part.0>
 8009248:	e7f2      	b.n	8009230 <__sinit+0xc>
 800924a:	bf00      	nop
 800924c:	08009191 	.word	0x08009191
 8009250:	20000828 	.word	0x20000828

08009254 <_fwalk_sglue>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	4607      	mov	r7, r0
 800925a:	4688      	mov	r8, r1
 800925c:	4614      	mov	r4, r2
 800925e:	2600      	movs	r6, #0
 8009260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009264:	f1b9 0901 	subs.w	r9, r9, #1
 8009268:	d505      	bpl.n	8009276 <_fwalk_sglue+0x22>
 800926a:	6824      	ldr	r4, [r4, #0]
 800926c:	2c00      	cmp	r4, #0
 800926e:	d1f7      	bne.n	8009260 <_fwalk_sglue+0xc>
 8009270:	4630      	mov	r0, r6
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d907      	bls.n	800928c <_fwalk_sglue+0x38>
 800927c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009280:	3301      	adds	r3, #1
 8009282:	d003      	beq.n	800928c <_fwalk_sglue+0x38>
 8009284:	4629      	mov	r1, r5
 8009286:	4638      	mov	r0, r7
 8009288:	47c0      	blx	r8
 800928a:	4306      	orrs	r6, r0
 800928c:	3568      	adds	r5, #104	@ 0x68
 800928e:	e7e9      	b.n	8009264 <_fwalk_sglue+0x10>

08009290 <__sread>:
 8009290:	b510      	push	{r4, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009298:	f000 f86c 	bl	8009374 <_read_r>
 800929c:	2800      	cmp	r0, #0
 800929e:	bfab      	itete	ge
 80092a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092a2:	89a3      	ldrhlt	r3, [r4, #12]
 80092a4:	181b      	addge	r3, r3, r0
 80092a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092aa:	bfac      	ite	ge
 80092ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092ae:	81a3      	strhlt	r3, [r4, #12]
 80092b0:	bd10      	pop	{r4, pc}

080092b2 <__swrite>:
 80092b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	461f      	mov	r7, r3
 80092b8:	898b      	ldrh	r3, [r1, #12]
 80092ba:	4605      	mov	r5, r0
 80092bc:	05db      	lsls	r3, r3, #23
 80092be:	460c      	mov	r4, r1
 80092c0:	4616      	mov	r6, r2
 80092c2:	d505      	bpl.n	80092d0 <__swrite+0x1e>
 80092c4:	2302      	movs	r3, #2
 80092c6:	2200      	movs	r2, #0
 80092c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092cc:	f000 f840 	bl	8009350 <_lseek_r>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	4632      	mov	r2, r6
 80092d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	4628      	mov	r0, r5
 80092dc:	463b      	mov	r3, r7
 80092de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	f000 b857 	b.w	8009398 <_write_r>

080092ea <__sseek>:
 80092ea:	b510      	push	{r4, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 f82d 	bl	8009350 <_lseek_r>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	bf15      	itete	ne
 80092fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009306:	81a3      	strheq	r3, [r4, #12]
 8009308:	bf18      	it	ne
 800930a:	81a3      	strhne	r3, [r4, #12]
 800930c:	bd10      	pop	{r4, pc}

0800930e <__sclose>:
 800930e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009312:	f000 b80d 	b.w	8009330 <_close_r>

08009316 <memset>:
 8009316:	4603      	mov	r3, r0
 8009318:	4402      	add	r2, r0
 800931a:	4293      	cmp	r3, r2
 800931c:	d100      	bne.n	8009320 <memset+0xa>
 800931e:	4770      	bx	lr
 8009320:	f803 1b01 	strb.w	r1, [r3], #1
 8009324:	e7f9      	b.n	800931a <memset+0x4>
	...

08009328 <_localeconv_r>:
 8009328:	4800      	ldr	r0, [pc, #0]	@ (800932c <_localeconv_r+0x4>)
 800932a:	4770      	bx	lr
 800932c:	2000015c 	.word	0x2000015c

08009330 <_close_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	2300      	movs	r3, #0
 8009334:	4d05      	ldr	r5, [pc, #20]	@ (800934c <_close_r+0x1c>)
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7fa ffcd 	bl	80042da <_close>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_close_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_close_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	2000082c 	.word	0x2000082c

08009350 <_lseek_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	2200      	movs	r2, #0
 800935a:	4d05      	ldr	r5, [pc, #20]	@ (8009370 <_lseek_r+0x20>)
 800935c:	602a      	str	r2, [r5, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f7fa ffdf 	bl	8004322 <_lseek>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_lseek_r+0x1e>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_lseek_r+0x1e>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	2000082c 	.word	0x2000082c

08009374 <_read_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4604      	mov	r4, r0
 8009378:	4608      	mov	r0, r1
 800937a:	4611      	mov	r1, r2
 800937c:	2200      	movs	r2, #0
 800937e:	4d05      	ldr	r5, [pc, #20]	@ (8009394 <_read_r+0x20>)
 8009380:	602a      	str	r2, [r5, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f7fa ff70 	bl	8004268 <_read>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_read_r+0x1e>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_read_r+0x1e>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	2000082c 	.word	0x2000082c

08009398 <_write_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	2200      	movs	r2, #0
 80093a2:	4d05      	ldr	r5, [pc, #20]	@ (80093b8 <_write_r+0x20>)
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f7fa ff7b 	bl	80042a2 <_write>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_write_r+0x1e>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_write_r+0x1e>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	2000082c 	.word	0x2000082c

080093bc <__errno>:
 80093bc:	4b01      	ldr	r3, [pc, #4]	@ (80093c4 <__errno+0x8>)
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	2000001c 	.word	0x2000001c

080093c8 <__libc_init_array>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	2600      	movs	r6, #0
 80093cc:	4d0c      	ldr	r5, [pc, #48]	@ (8009400 <__libc_init_array+0x38>)
 80093ce:	4c0d      	ldr	r4, [pc, #52]	@ (8009404 <__libc_init_array+0x3c>)
 80093d0:	1b64      	subs	r4, r4, r5
 80093d2:	10a4      	asrs	r4, r4, #2
 80093d4:	42a6      	cmp	r6, r4
 80093d6:	d109      	bne.n	80093ec <__libc_init_array+0x24>
 80093d8:	f002 fa36 	bl	800b848 <_init>
 80093dc:	2600      	movs	r6, #0
 80093de:	4d0a      	ldr	r5, [pc, #40]	@ (8009408 <__libc_init_array+0x40>)
 80093e0:	4c0a      	ldr	r4, [pc, #40]	@ (800940c <__libc_init_array+0x44>)
 80093e2:	1b64      	subs	r4, r4, r5
 80093e4:	10a4      	asrs	r4, r4, #2
 80093e6:	42a6      	cmp	r6, r4
 80093e8:	d105      	bne.n	80093f6 <__libc_init_array+0x2e>
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f0:	4798      	blx	r3
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7ee      	b.n	80093d4 <__libc_init_array+0xc>
 80093f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fa:	4798      	blx	r3
 80093fc:	3601      	adds	r6, #1
 80093fe:	e7f2      	b.n	80093e6 <__libc_init_array+0x1e>
 8009400:	0800bc58 	.word	0x0800bc58
 8009404:	0800bc58 	.word	0x0800bc58
 8009408:	0800bc58 	.word	0x0800bc58
 800940c:	0800bc5c 	.word	0x0800bc5c

08009410 <__retarget_lock_init_recursive>:
 8009410:	4770      	bx	lr

08009412 <__retarget_lock_acquire_recursive>:
 8009412:	4770      	bx	lr

08009414 <__retarget_lock_release_recursive>:
 8009414:	4770      	bx	lr

08009416 <memchr>:
 8009416:	4603      	mov	r3, r0
 8009418:	b510      	push	{r4, lr}
 800941a:	b2c9      	uxtb	r1, r1
 800941c:	4402      	add	r2, r0
 800941e:	4293      	cmp	r3, r2
 8009420:	4618      	mov	r0, r3
 8009422:	d101      	bne.n	8009428 <memchr+0x12>
 8009424:	2000      	movs	r0, #0
 8009426:	e003      	b.n	8009430 <memchr+0x1a>
 8009428:	7804      	ldrb	r4, [r0, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	428c      	cmp	r4, r1
 800942e:	d1f6      	bne.n	800941e <memchr+0x8>
 8009430:	bd10      	pop	{r4, pc}

08009432 <memcpy>:
 8009432:	440a      	add	r2, r1
 8009434:	4291      	cmp	r1, r2
 8009436:	f100 33ff 	add.w	r3, r0, #4294967295
 800943a:	d100      	bne.n	800943e <memcpy+0xc>
 800943c:	4770      	bx	lr
 800943e:	b510      	push	{r4, lr}
 8009440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009444:	4291      	cmp	r1, r2
 8009446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944a:	d1f9      	bne.n	8009440 <memcpy+0xe>
 800944c:	bd10      	pop	{r4, pc}

0800944e <quorem>:
 800944e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009452:	6903      	ldr	r3, [r0, #16]
 8009454:	690c      	ldr	r4, [r1, #16]
 8009456:	4607      	mov	r7, r0
 8009458:	42a3      	cmp	r3, r4
 800945a:	db7e      	blt.n	800955a <quorem+0x10c>
 800945c:	3c01      	subs	r4, #1
 800945e:	00a3      	lsls	r3, r4, #2
 8009460:	f100 0514 	add.w	r5, r0, #20
 8009464:	f101 0814 	add.w	r8, r1, #20
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009478:	3301      	adds	r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009484:	d32e      	bcc.n	80094e4 <quorem+0x96>
 8009486:	f04f 0a00 	mov.w	sl, #0
 800948a:	46c4      	mov	ip, r8
 800948c:	46ae      	mov	lr, r5
 800948e:	46d3      	mov	fp, sl
 8009490:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009494:	b298      	uxth	r0, r3
 8009496:	fb06 a000 	mla	r0, r6, r0, sl
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	0c02      	lsrs	r2, r0, #16
 800949e:	fb06 2303 	mla	r3, r6, r3, r2
 80094a2:	f8de 2000 	ldr.w	r2, [lr]
 80094a6:	b280      	uxth	r0, r0
 80094a8:	b292      	uxth	r2, r2
 80094aa:	1a12      	subs	r2, r2, r0
 80094ac:	445a      	add	r2, fp
 80094ae:	f8de 0000 	ldr.w	r0, [lr]
 80094b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094c0:	b292      	uxth	r2, r2
 80094c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094c6:	45e1      	cmp	r9, ip
 80094c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094cc:	f84e 2b04 	str.w	r2, [lr], #4
 80094d0:	d2de      	bcs.n	8009490 <quorem+0x42>
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	58eb      	ldr	r3, [r5, r3]
 80094d6:	b92b      	cbnz	r3, 80094e4 <quorem+0x96>
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	3b04      	subs	r3, #4
 80094dc:	429d      	cmp	r5, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	d32f      	bcc.n	8009542 <quorem+0xf4>
 80094e2:	613c      	str	r4, [r7, #16]
 80094e4:	4638      	mov	r0, r7
 80094e6:	f001 f979 	bl	800a7dc <__mcmp>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	db25      	blt.n	800953a <quorem+0xec>
 80094ee:	4629      	mov	r1, r5
 80094f0:	2000      	movs	r0, #0
 80094f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80094f6:	f8d1 c000 	ldr.w	ip, [r1]
 80094fa:	fa1f fe82 	uxth.w	lr, r2
 80094fe:	fa1f f38c 	uxth.w	r3, ip
 8009502:	eba3 030e 	sub.w	r3, r3, lr
 8009506:	4403      	add	r3, r0
 8009508:	0c12      	lsrs	r2, r2, #16
 800950a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800950e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009512:	b29b      	uxth	r3, r3
 8009514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009518:	45c1      	cmp	r9, r8
 800951a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800951e:	f841 3b04 	str.w	r3, [r1], #4
 8009522:	d2e6      	bcs.n	80094f2 <quorem+0xa4>
 8009524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009528:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800952c:	b922      	cbnz	r2, 8009538 <quorem+0xea>
 800952e:	3b04      	subs	r3, #4
 8009530:	429d      	cmp	r5, r3
 8009532:	461a      	mov	r2, r3
 8009534:	d30b      	bcc.n	800954e <quorem+0x100>
 8009536:	613c      	str	r4, [r7, #16]
 8009538:	3601      	adds	r6, #1
 800953a:	4630      	mov	r0, r6
 800953c:	b003      	add	sp, #12
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	6812      	ldr	r2, [r2, #0]
 8009544:	3b04      	subs	r3, #4
 8009546:	2a00      	cmp	r2, #0
 8009548:	d1cb      	bne.n	80094e2 <quorem+0x94>
 800954a:	3c01      	subs	r4, #1
 800954c:	e7c6      	b.n	80094dc <quorem+0x8e>
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	3b04      	subs	r3, #4
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1ef      	bne.n	8009536 <quorem+0xe8>
 8009556:	3c01      	subs	r4, #1
 8009558:	e7ea      	b.n	8009530 <quorem+0xe2>
 800955a:	2000      	movs	r0, #0
 800955c:	e7ee      	b.n	800953c <quorem+0xee>
	...

08009560 <_dtoa_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4614      	mov	r4, r2
 8009566:	461d      	mov	r5, r3
 8009568:	69c7      	ldr	r7, [r0, #28]
 800956a:	b097      	sub	sp, #92	@ 0x5c
 800956c:	4683      	mov	fp, r0
 800956e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009572:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009574:	b97f      	cbnz	r7, 8009596 <_dtoa_r+0x36>
 8009576:	2010      	movs	r0, #16
 8009578:	f000 fe02 	bl	800a180 <malloc>
 800957c:	4602      	mov	r2, r0
 800957e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009582:	b920      	cbnz	r0, 800958e <_dtoa_r+0x2e>
 8009584:	21ef      	movs	r1, #239	@ 0xef
 8009586:	4ba8      	ldr	r3, [pc, #672]	@ (8009828 <_dtoa_r+0x2c8>)
 8009588:	48a8      	ldr	r0, [pc, #672]	@ (800982c <_dtoa_r+0x2cc>)
 800958a:	f001 fae7 	bl	800ab5c <__assert_func>
 800958e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009592:	6007      	str	r7, [r0, #0]
 8009594:	60c7      	str	r7, [r0, #12]
 8009596:	f8db 301c 	ldr.w	r3, [fp, #28]
 800959a:	6819      	ldr	r1, [r3, #0]
 800959c:	b159      	cbz	r1, 80095b6 <_dtoa_r+0x56>
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	2301      	movs	r3, #1
 80095a2:	4093      	lsls	r3, r2
 80095a4:	604a      	str	r2, [r1, #4]
 80095a6:	608b      	str	r3, [r1, #8]
 80095a8:	4658      	mov	r0, fp
 80095aa:	f000 fedf 	bl	800a36c <_Bfree>
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	1e2b      	subs	r3, r5, #0
 80095b8:	bfaf      	iteee	ge
 80095ba:	2300      	movge	r3, #0
 80095bc:	2201      	movlt	r2, #1
 80095be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095c2:	9303      	strlt	r3, [sp, #12]
 80095c4:	bfa8      	it	ge
 80095c6:	6033      	strge	r3, [r6, #0]
 80095c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095cc:	4b98      	ldr	r3, [pc, #608]	@ (8009830 <_dtoa_r+0x2d0>)
 80095ce:	bfb8      	it	lt
 80095d0:	6032      	strlt	r2, [r6, #0]
 80095d2:	ea33 0308 	bics.w	r3, r3, r8
 80095d6:	d112      	bne.n	80095fe <_dtoa_r+0x9e>
 80095d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095e4:	4323      	orrs	r3, r4
 80095e6:	f000 8550 	beq.w	800a08a <_dtoa_r+0xb2a>
 80095ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80095ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009834 <_dtoa_r+0x2d4>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8552 	beq.w	800a09a <_dtoa_r+0xb3a>
 80095f6:	f10a 0303 	add.w	r3, sl, #3
 80095fa:	f000 bd4c 	b.w	800a096 <_dtoa_r+0xb36>
 80095fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009602:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	f7f7 f9cb 	bl	80009a8 <__aeabi_dcmpeq>
 8009612:	4607      	mov	r7, r0
 8009614:	b158      	cbz	r0, 800962e <_dtoa_r+0xce>
 8009616:	2301      	movs	r3, #1
 8009618:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800961e:	b113      	cbz	r3, 8009626 <_dtoa_r+0xc6>
 8009620:	4b85      	ldr	r3, [pc, #532]	@ (8009838 <_dtoa_r+0x2d8>)
 8009622:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800983c <_dtoa_r+0x2dc>
 800962a:	f000 bd36 	b.w	800a09a <_dtoa_r+0xb3a>
 800962e:	ab14      	add	r3, sp, #80	@ 0x50
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	ab15      	add	r3, sp, #84	@ 0x54
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4658      	mov	r0, fp
 8009638:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800963c:	f001 f97e 	bl	800a93c <__d2b>
 8009640:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009644:	4681      	mov	r9, r0
 8009646:	2e00      	cmp	r6, #0
 8009648:	d077      	beq.n	800973a <_dtoa_r+0x1da>
 800964a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800964e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009650:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009658:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800965c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009660:	9712      	str	r7, [sp, #72]	@ 0x48
 8009662:	4619      	mov	r1, r3
 8009664:	2200      	movs	r2, #0
 8009666:	4b76      	ldr	r3, [pc, #472]	@ (8009840 <_dtoa_r+0x2e0>)
 8009668:	f7f6 fd7e 	bl	8000168 <__aeabi_dsub>
 800966c:	a368      	add	r3, pc, #416	@ (adr r3, 8009810 <_dtoa_r+0x2b0>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f7f6 ff31 	bl	80004d8 <__aeabi_dmul>
 8009676:	a368      	add	r3, pc, #416	@ (adr r3, 8009818 <_dtoa_r+0x2b8>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f6 fd76 	bl	800016c <__adddf3>
 8009680:	4604      	mov	r4, r0
 8009682:	4630      	mov	r0, r6
 8009684:	460d      	mov	r5, r1
 8009686:	f7f6 febd 	bl	8000404 <__aeabi_i2d>
 800968a:	a365      	add	r3, pc, #404	@ (adr r3, 8009820 <_dtoa_r+0x2c0>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 ff22 	bl	80004d8 <__aeabi_dmul>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4620      	mov	r0, r4
 800969a:	4629      	mov	r1, r5
 800969c:	f7f6 fd66 	bl	800016c <__adddf3>
 80096a0:	4604      	mov	r4, r0
 80096a2:	460d      	mov	r5, r1
 80096a4:	f7f7 f9c8 	bl	8000a38 <__aeabi_d2iz>
 80096a8:	2200      	movs	r2, #0
 80096aa:	4607      	mov	r7, r0
 80096ac:	2300      	movs	r3, #0
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 f983 	bl	80009bc <__aeabi_dcmplt>
 80096b6:	b140      	cbz	r0, 80096ca <_dtoa_r+0x16a>
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7f6 fea3 	bl	8000404 <__aeabi_i2d>
 80096be:	4622      	mov	r2, r4
 80096c0:	462b      	mov	r3, r5
 80096c2:	f7f7 f971 	bl	80009a8 <__aeabi_dcmpeq>
 80096c6:	b900      	cbnz	r0, 80096ca <_dtoa_r+0x16a>
 80096c8:	3f01      	subs	r7, #1
 80096ca:	2f16      	cmp	r7, #22
 80096cc:	d853      	bhi.n	8009776 <_dtoa_r+0x216>
 80096ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096d2:	4b5c      	ldr	r3, [pc, #368]	@ (8009844 <_dtoa_r+0x2e4>)
 80096d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f7f7 f96e 	bl	80009bc <__aeabi_dcmplt>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d04a      	beq.n	800977a <_dtoa_r+0x21a>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3f01      	subs	r7, #1
 80096e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096ec:	1b9b      	subs	r3, r3, r6
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	bf46      	itte	mi
 80096f2:	f1c3 0801 	rsbmi	r8, r3, #1
 80096f6:	2300      	movmi	r3, #0
 80096f8:	f04f 0800 	movpl.w	r8, #0
 80096fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80096fe:	bf48      	it	mi
 8009700:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009702:	2f00      	cmp	r7, #0
 8009704:	db3b      	blt.n	800977e <_dtoa_r+0x21e>
 8009706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009708:	970e      	str	r7, [sp, #56]	@ 0x38
 800970a:	443b      	add	r3, r7
 800970c:	9309      	str	r3, [sp, #36]	@ 0x24
 800970e:	2300      	movs	r3, #0
 8009710:	930a      	str	r3, [sp, #40]	@ 0x28
 8009712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009714:	2b09      	cmp	r3, #9
 8009716:	d866      	bhi.n	80097e6 <_dtoa_r+0x286>
 8009718:	2b05      	cmp	r3, #5
 800971a:	bfc4      	itt	gt
 800971c:	3b04      	subgt	r3, #4
 800971e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009720:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009722:	bfc8      	it	gt
 8009724:	2400      	movgt	r4, #0
 8009726:	f1a3 0302 	sub.w	r3, r3, #2
 800972a:	bfd8      	it	le
 800972c:	2401      	movle	r4, #1
 800972e:	2b03      	cmp	r3, #3
 8009730:	d864      	bhi.n	80097fc <_dtoa_r+0x29c>
 8009732:	e8df f003 	tbb	[pc, r3]
 8009736:	382b      	.short	0x382b
 8009738:	5636      	.short	0x5636
 800973a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800973e:	441e      	add	r6, r3
 8009740:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009744:	2b20      	cmp	r3, #32
 8009746:	bfc1      	itttt	gt
 8009748:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800974c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009750:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009754:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009758:	bfd6      	itet	le
 800975a:	f1c3 0320 	rsble	r3, r3, #32
 800975e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009762:	fa04 f003 	lslle.w	r0, r4, r3
 8009766:	f7f6 fe3d 	bl	80003e4 <__aeabi_ui2d>
 800976a:	2201      	movs	r2, #1
 800976c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009770:	3e01      	subs	r6, #1
 8009772:	9212      	str	r2, [sp, #72]	@ 0x48
 8009774:	e775      	b.n	8009662 <_dtoa_r+0x102>
 8009776:	2301      	movs	r3, #1
 8009778:	e7b6      	b.n	80096e8 <_dtoa_r+0x188>
 800977a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800977c:	e7b5      	b.n	80096ea <_dtoa_r+0x18a>
 800977e:	427b      	negs	r3, r7
 8009780:	930a      	str	r3, [sp, #40]	@ 0x28
 8009782:	2300      	movs	r3, #0
 8009784:	eba8 0807 	sub.w	r8, r8, r7
 8009788:	930e      	str	r3, [sp, #56]	@ 0x38
 800978a:	e7c2      	b.n	8009712 <_dtoa_r+0x1b2>
 800978c:	2300      	movs	r3, #0
 800978e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009790:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009792:	2b00      	cmp	r3, #0
 8009794:	dc35      	bgt.n	8009802 <_dtoa_r+0x2a2>
 8009796:	2301      	movs	r3, #1
 8009798:	461a      	mov	r2, r3
 800979a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800979e:	9221      	str	r2, [sp, #132]	@ 0x84
 80097a0:	e00b      	b.n	80097ba <_dtoa_r+0x25a>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e7f3      	b.n	800978e <_dtoa_r+0x22e>
 80097a6:	2300      	movs	r3, #0
 80097a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	9308      	str	r3, [sp, #32]
 80097b0:	3301      	adds	r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	bfb8      	it	lt
 80097b8:	2301      	movlt	r3, #1
 80097ba:	2100      	movs	r1, #0
 80097bc:	2204      	movs	r2, #4
 80097be:	f8db 001c 	ldr.w	r0, [fp, #28]
 80097c2:	f102 0514 	add.w	r5, r2, #20
 80097c6:	429d      	cmp	r5, r3
 80097c8:	d91f      	bls.n	800980a <_dtoa_r+0x2aa>
 80097ca:	6041      	str	r1, [r0, #4]
 80097cc:	4658      	mov	r0, fp
 80097ce:	f000 fd8d 	bl	800a2ec <_Balloc>
 80097d2:	4682      	mov	sl, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d139      	bne.n	800984c <_dtoa_r+0x2ec>
 80097d8:	4602      	mov	r2, r0
 80097da:	f240 11af 	movw	r1, #431	@ 0x1af
 80097de:	4b1a      	ldr	r3, [pc, #104]	@ (8009848 <_dtoa_r+0x2e8>)
 80097e0:	e6d2      	b.n	8009588 <_dtoa_r+0x28>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e7e0      	b.n	80097a8 <_dtoa_r+0x248>
 80097e6:	2401      	movs	r4, #1
 80097e8:	2300      	movs	r3, #0
 80097ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80097ee:	f04f 33ff 	mov.w	r3, #4294967295
 80097f2:	2200      	movs	r2, #0
 80097f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80097f8:	2312      	movs	r3, #18
 80097fa:	e7d0      	b.n	800979e <_dtoa_r+0x23e>
 80097fc:	2301      	movs	r3, #1
 80097fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009800:	e7f5      	b.n	80097ee <_dtoa_r+0x28e>
 8009802:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009804:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009808:	e7d7      	b.n	80097ba <_dtoa_r+0x25a>
 800980a:	3101      	adds	r1, #1
 800980c:	0052      	lsls	r2, r2, #1
 800980e:	e7d8      	b.n	80097c2 <_dtoa_r+0x262>
 8009810:	636f4361 	.word	0x636f4361
 8009814:	3fd287a7 	.word	0x3fd287a7
 8009818:	8b60c8b3 	.word	0x8b60c8b3
 800981c:	3fc68a28 	.word	0x3fc68a28
 8009820:	509f79fb 	.word	0x509f79fb
 8009824:	3fd34413 	.word	0x3fd34413
 8009828:	0800b8eb 	.word	0x0800b8eb
 800982c:	0800b902 	.word	0x0800b902
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	0800b8e7 	.word	0x0800b8e7
 8009838:	0800b8bb 	.word	0x0800b8bb
 800983c:	0800b8ba 	.word	0x0800b8ba
 8009840:	3ff80000 	.word	0x3ff80000
 8009844:	0800b9f8 	.word	0x0800b9f8
 8009848:	0800b95a 	.word	0x0800b95a
 800984c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009850:	6018      	str	r0, [r3, #0]
 8009852:	9b07      	ldr	r3, [sp, #28]
 8009854:	2b0e      	cmp	r3, #14
 8009856:	f200 80a4 	bhi.w	80099a2 <_dtoa_r+0x442>
 800985a:	2c00      	cmp	r4, #0
 800985c:	f000 80a1 	beq.w	80099a2 <_dtoa_r+0x442>
 8009860:	2f00      	cmp	r7, #0
 8009862:	dd33      	ble.n	80098cc <_dtoa_r+0x36c>
 8009864:	4b86      	ldr	r3, [pc, #536]	@ (8009a80 <_dtoa_r+0x520>)
 8009866:	f007 020f 	and.w	r2, r7, #15
 800986a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986e:	05f8      	lsls	r0, r7, #23
 8009870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009874:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800987c:	d516      	bpl.n	80098ac <_dtoa_r+0x34c>
 800987e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009882:	4b80      	ldr	r3, [pc, #512]	@ (8009a84 <_dtoa_r+0x524>)
 8009884:	2603      	movs	r6, #3
 8009886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800988a:	f7f6 ff4f 	bl	800072c <__aeabi_ddiv>
 800988e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009892:	f004 040f 	and.w	r4, r4, #15
 8009896:	4d7b      	ldr	r5, [pc, #492]	@ (8009a84 <_dtoa_r+0x524>)
 8009898:	b954      	cbnz	r4, 80098b0 <_dtoa_r+0x350>
 800989a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800989e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a2:	f7f6 ff43 	bl	800072c <__aeabi_ddiv>
 80098a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098aa:	e028      	b.n	80098fe <_dtoa_r+0x39e>
 80098ac:	2602      	movs	r6, #2
 80098ae:	e7f2      	b.n	8009896 <_dtoa_r+0x336>
 80098b0:	07e1      	lsls	r1, r4, #31
 80098b2:	d508      	bpl.n	80098c6 <_dtoa_r+0x366>
 80098b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098bc:	f7f6 fe0c 	bl	80004d8 <__aeabi_dmul>
 80098c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098c4:	3601      	adds	r6, #1
 80098c6:	1064      	asrs	r4, r4, #1
 80098c8:	3508      	adds	r5, #8
 80098ca:	e7e5      	b.n	8009898 <_dtoa_r+0x338>
 80098cc:	f000 80d2 	beq.w	8009a74 <_dtoa_r+0x514>
 80098d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098d4:	427c      	negs	r4, r7
 80098d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009a80 <_dtoa_r+0x520>)
 80098d8:	f004 020f 	and.w	r2, r4, #15
 80098dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f6 fdf8 	bl	80004d8 <__aeabi_dmul>
 80098e8:	2602      	movs	r6, #2
 80098ea:	2300      	movs	r3, #0
 80098ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f0:	4d64      	ldr	r5, [pc, #400]	@ (8009a84 <_dtoa_r+0x524>)
 80098f2:	1124      	asrs	r4, r4, #4
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	f040 80b2 	bne.w	8009a5e <_dtoa_r+0x4fe>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d3      	bne.n	80098a6 <_dtoa_r+0x346>
 80098fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 80b7 	beq.w	8009a78 <_dtoa_r+0x518>
 800990a:	2200      	movs	r2, #0
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	4b5d      	ldr	r3, [pc, #372]	@ (8009a88 <_dtoa_r+0x528>)
 8009912:	f7f7 f853 	bl	80009bc <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	f000 80ae 	beq.w	8009a78 <_dtoa_r+0x518>
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 80aa 	beq.w	8009a78 <_dtoa_r+0x518>
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd37      	ble.n	800999a <_dtoa_r+0x43a>
 800992a:	1e7b      	subs	r3, r7, #1
 800992c:	4620      	mov	r0, r4
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	2200      	movs	r2, #0
 8009932:	4629      	mov	r1, r5
 8009934:	4b55      	ldr	r3, [pc, #340]	@ (8009a8c <_dtoa_r+0x52c>)
 8009936:	f7f6 fdcf 	bl	80004d8 <__aeabi_dmul>
 800993a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800993e:	9c08      	ldr	r4, [sp, #32]
 8009940:	3601      	adds	r6, #1
 8009942:	4630      	mov	r0, r6
 8009944:	f7f6 fd5e 	bl	8000404 <__aeabi_i2d>
 8009948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800994c:	f7f6 fdc4 	bl	80004d8 <__aeabi_dmul>
 8009950:	2200      	movs	r2, #0
 8009952:	4b4f      	ldr	r3, [pc, #316]	@ (8009a90 <_dtoa_r+0x530>)
 8009954:	f7f6 fc0a 	bl	800016c <__adddf3>
 8009958:	4605      	mov	r5, r0
 800995a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800995e:	2c00      	cmp	r4, #0
 8009960:	f040 809a 	bne.w	8009a98 <_dtoa_r+0x538>
 8009964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	4b4a      	ldr	r3, [pc, #296]	@ (8009a94 <_dtoa_r+0x534>)
 800996c:	f7f6 fbfc 	bl	8000168 <__aeabi_dsub>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009978:	462a      	mov	r2, r5
 800997a:	4633      	mov	r3, r6
 800997c:	f7f7 f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8009980:	2800      	cmp	r0, #0
 8009982:	f040 828e 	bne.w	8009ea2 <_dtoa_r+0x942>
 8009986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800998a:	462a      	mov	r2, r5
 800998c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009990:	f7f7 f814 	bl	80009bc <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 8127 	bne.w	8009be8 <_dtoa_r+0x688>
 800999a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800999e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80099a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f2c0 8163 	blt.w	8009c70 <_dtoa_r+0x710>
 80099aa:	2f0e      	cmp	r7, #14
 80099ac:	f300 8160 	bgt.w	8009c70 <_dtoa_r+0x710>
 80099b0:	4b33      	ldr	r3, [pc, #204]	@ (8009a80 <_dtoa_r+0x520>)
 80099b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	da03      	bge.n	80099cc <_dtoa_r+0x46c>
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f340 8100 	ble.w	8009bcc <_dtoa_r+0x66c>
 80099cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099d0:	4656      	mov	r6, sl
 80099d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f6 fea7 	bl	800072c <__aeabi_ddiv>
 80099de:	f7f7 f82b 	bl	8000a38 <__aeabi_d2iz>
 80099e2:	4680      	mov	r8, r0
 80099e4:	f7f6 fd0e 	bl	8000404 <__aeabi_i2d>
 80099e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ec:	f7f6 fd74 	bl	80004d8 <__aeabi_dmul>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f6 fbb6 	bl	8000168 <__aeabi_dsub>
 80099fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a00:	9d07      	ldr	r5, [sp, #28]
 8009a02:	f806 4b01 	strb.w	r4, [r6], #1
 8009a06:	eba6 040a 	sub.w	r4, r6, sl
 8009a0a:	42a5      	cmp	r5, r4
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	f040 8116 	bne.w	8009c40 <_dtoa_r+0x6e0>
 8009a14:	f7f6 fbaa 	bl	800016c <__adddf3>
 8009a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	460d      	mov	r5, r1
 8009a20:	f7f6 ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f040 80f8 	bne.w	8009c1a <_dtoa_r+0x6ba>
 8009a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8009a36:	b118      	cbz	r0, 8009a40 <_dtoa_r+0x4e0>
 8009a38:	f018 0f01 	tst.w	r8, #1
 8009a3c:	f040 80ed 	bne.w	8009c1a <_dtoa_r+0x6ba>
 8009a40:	4649      	mov	r1, r9
 8009a42:	4658      	mov	r0, fp
 8009a44:	f000 fc92 	bl	800a36c <_Bfree>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	7033      	strb	r3, [r6, #0]
 8009a4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a4e:	3701      	adds	r7, #1
 8009a50:	601f      	str	r7, [r3, #0]
 8009a52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8320 	beq.w	800a09a <_dtoa_r+0xb3a>
 8009a5a:	601e      	str	r6, [r3, #0]
 8009a5c:	e31d      	b.n	800a09a <_dtoa_r+0xb3a>
 8009a5e:	07e2      	lsls	r2, r4, #31
 8009a60:	d505      	bpl.n	8009a6e <_dtoa_r+0x50e>
 8009a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a66:	f7f6 fd37 	bl	80004d8 <__aeabi_dmul>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	1064      	asrs	r4, r4, #1
 8009a70:	3508      	adds	r5, #8
 8009a72:	e73f      	b.n	80098f4 <_dtoa_r+0x394>
 8009a74:	2602      	movs	r6, #2
 8009a76:	e742      	b.n	80098fe <_dtoa_r+0x39e>
 8009a78:	9c07      	ldr	r4, [sp, #28]
 8009a7a:	9704      	str	r7, [sp, #16]
 8009a7c:	e761      	b.n	8009942 <_dtoa_r+0x3e2>
 8009a7e:	bf00      	nop
 8009a80:	0800b9f8 	.word	0x0800b9f8
 8009a84:	0800b9d0 	.word	0x0800b9d0
 8009a88:	3ff00000 	.word	0x3ff00000
 8009a8c:	40240000 	.word	0x40240000
 8009a90:	401c0000 	.word	0x401c0000
 8009a94:	40140000 	.word	0x40140000
 8009a98:	4b70      	ldr	r3, [pc, #448]	@ (8009c5c <_dtoa_r+0x6fc>)
 8009a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aa4:	4454      	add	r4, sl
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d045      	beq.n	8009b36 <_dtoa_r+0x5d6>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	496c      	ldr	r1, [pc, #432]	@ (8009c60 <_dtoa_r+0x700>)
 8009aae:	f7f6 fe3d 	bl	800072c <__aeabi_ddiv>
 8009ab2:	4633      	mov	r3, r6
 8009ab4:	462a      	mov	r2, r5
 8009ab6:	f7f6 fb57 	bl	8000168 <__aeabi_dsub>
 8009aba:	4656      	mov	r6, sl
 8009abc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac4:	f7f6 ffb8 	bl	8000a38 <__aeabi_d2iz>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	f7f6 fc9b 	bl	8000404 <__aeabi_i2d>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad6:	f7f6 fb47 	bl	8000168 <__aeabi_dsub>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	3530      	adds	r5, #48	@ 0x30
 8009ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ae4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ae8:	f806 5b01 	strb.w	r5, [r6], #1
 8009aec:	f7f6 ff66 	bl	80009bc <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d163      	bne.n	8009bbc <_dtoa_r+0x65c>
 8009af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009af8:	2000      	movs	r0, #0
 8009afa:	495a      	ldr	r1, [pc, #360]	@ (8009c64 <_dtoa_r+0x704>)
 8009afc:	f7f6 fb34 	bl	8000168 <__aeabi_dsub>
 8009b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b04:	f7f6 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f040 8087 	bne.w	8009c1c <_dtoa_r+0x6bc>
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	f43f af43 	beq.w	800999a <_dtoa_r+0x43a>
 8009b14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4b53      	ldr	r3, [pc, #332]	@ (8009c68 <_dtoa_r+0x708>)
 8009b1c:	f7f6 fcdc 	bl	80004d8 <__aeabi_dmul>
 8009b20:	2200      	movs	r2, #0
 8009b22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8009c68 <_dtoa_r+0x708>)
 8009b2c:	f7f6 fcd4 	bl	80004d8 <__aeabi_dmul>
 8009b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b34:	e7c4      	b.n	8009ac0 <_dtoa_r+0x560>
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7f6 fccd 	bl	80004d8 <__aeabi_dmul>
 8009b3e:	4656      	mov	r6, sl
 8009b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b44:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b4a:	f7f6 ff75 	bl	8000a38 <__aeabi_d2iz>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	f7f6 fc58 	bl	8000404 <__aeabi_i2d>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	3530      	adds	r5, #48	@ 0x30
 8009b66:	f806 5b01 	strb.w	r5, [r6], #1
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	d124      	bne.n	8009bc0 <_dtoa_r+0x660>
 8009b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b7a:	4b39      	ldr	r3, [pc, #228]	@ (8009c60 <_dtoa_r+0x700>)
 8009b7c:	f7f6 faf6 	bl	800016c <__adddf3>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b88:	f7f6 ff36 	bl	80009f8 <__aeabi_dcmpgt>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d145      	bne.n	8009c1c <_dtoa_r+0x6bc>
 8009b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b94:	2000      	movs	r0, #0
 8009b96:	4932      	ldr	r1, [pc, #200]	@ (8009c60 <_dtoa_r+0x700>)
 8009b98:	f7f6 fae6 	bl	8000168 <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba4:	f7f6 ff0a 	bl	80009bc <__aeabi_dcmplt>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f43f aef6 	beq.w	800999a <_dtoa_r+0x43a>
 8009bae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009bb0:	1e73      	subs	r3, r6, #1
 8009bb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bb8:	2b30      	cmp	r3, #48	@ 0x30
 8009bba:	d0f8      	beq.n	8009bae <_dtoa_r+0x64e>
 8009bbc:	9f04      	ldr	r7, [sp, #16]
 8009bbe:	e73f      	b.n	8009a40 <_dtoa_r+0x4e0>
 8009bc0:	4b29      	ldr	r3, [pc, #164]	@ (8009c68 <_dtoa_r+0x708>)
 8009bc2:	f7f6 fc89 	bl	80004d8 <__aeabi_dmul>
 8009bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bca:	e7bc      	b.n	8009b46 <_dtoa_r+0x5e6>
 8009bcc:	d10c      	bne.n	8009be8 <_dtoa_r+0x688>
 8009bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b25      	ldr	r3, [pc, #148]	@ (8009c6c <_dtoa_r+0x70c>)
 8009bd6:	f7f6 fc7f 	bl	80004d8 <__aeabi_dmul>
 8009bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bde:	f7f6 ff01 	bl	80009e4 <__aeabi_dcmpge>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	f000 815b 	beq.w	8009e9e <_dtoa_r+0x93e>
 8009be8:	2400      	movs	r4, #0
 8009bea:	4625      	mov	r5, r4
 8009bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bee:	4656      	mov	r6, sl
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	2700      	movs	r7, #0
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4658      	mov	r0, fp
 8009bfa:	f000 fbb7 	bl	800a36c <_Bfree>
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	d0dc      	beq.n	8009bbc <_dtoa_r+0x65c>
 8009c02:	b12f      	cbz	r7, 8009c10 <_dtoa_r+0x6b0>
 8009c04:	42af      	cmp	r7, r5
 8009c06:	d003      	beq.n	8009c10 <_dtoa_r+0x6b0>
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 fbae 	bl	800a36c <_Bfree>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 fbaa 	bl	800a36c <_Bfree>
 8009c18:	e7d0      	b.n	8009bbc <_dtoa_r+0x65c>
 8009c1a:	9704      	str	r7, [sp, #16]
 8009c1c:	4633      	mov	r3, r6
 8009c1e:	461e      	mov	r6, r3
 8009c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c24:	2a39      	cmp	r2, #57	@ 0x39
 8009c26:	d107      	bne.n	8009c38 <_dtoa_r+0x6d8>
 8009c28:	459a      	cmp	sl, r3
 8009c2a:	d1f8      	bne.n	8009c1e <_dtoa_r+0x6be>
 8009c2c:	9a04      	ldr	r2, [sp, #16]
 8009c2e:	3201      	adds	r2, #1
 8009c30:	9204      	str	r2, [sp, #16]
 8009c32:	2230      	movs	r2, #48	@ 0x30
 8009c34:	f88a 2000 	strb.w	r2, [sl]
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	3201      	adds	r2, #1
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e7bd      	b.n	8009bbc <_dtoa_r+0x65c>
 8009c40:	2200      	movs	r2, #0
 8009c42:	4b09      	ldr	r3, [pc, #36]	@ (8009c68 <_dtoa_r+0x708>)
 8009c44:	f7f6 fc48 	bl	80004d8 <__aeabi_dmul>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	460d      	mov	r5, r1
 8009c50:	f7f6 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f43f aebc 	beq.w	80099d2 <_dtoa_r+0x472>
 8009c5a:	e6f1      	b.n	8009a40 <_dtoa_r+0x4e0>
 8009c5c:	0800b9f8 	.word	0x0800b9f8
 8009c60:	3fe00000 	.word	0x3fe00000
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	40240000 	.word	0x40240000
 8009c6c:	40140000 	.word	0x40140000
 8009c70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	f000 80db 	beq.w	8009e2e <_dtoa_r+0x8ce>
 8009c78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c7a:	2a01      	cmp	r2, #1
 8009c7c:	f300 80bf 	bgt.w	8009dfe <_dtoa_r+0x89e>
 8009c80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	f000 80b7 	beq.w	8009df6 <_dtoa_r+0x896>
 8009c88:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c8c:	4646      	mov	r6, r8
 8009c8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c92:	2101      	movs	r1, #1
 8009c94:	441a      	add	r2, r3
 8009c96:	4658      	mov	r0, fp
 8009c98:	4498      	add	r8, r3
 8009c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c9c:	f000 fc1a 	bl	800a4d4 <__i2b>
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	b15e      	cbz	r6, 8009cbc <_dtoa_r+0x75c>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dd08      	ble.n	8009cbc <_dtoa_r+0x75c>
 8009caa:	42b3      	cmp	r3, r6
 8009cac:	bfa8      	it	ge
 8009cae:	4633      	movge	r3, r6
 8009cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cb2:	eba8 0803 	sub.w	r8, r8, r3
 8009cb6:	1af6      	subs	r6, r6, r3
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbe:	b1f3      	cbz	r3, 8009cfe <_dtoa_r+0x79e>
 8009cc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80b7 	beq.w	8009e36 <_dtoa_r+0x8d6>
 8009cc8:	b18c      	cbz	r4, 8009cee <_dtoa_r+0x78e>
 8009cca:	4629      	mov	r1, r5
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fcbe 	bl	800a650 <__pow5mult>
 8009cd4:	464a      	mov	r2, r9
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	4605      	mov	r5, r0
 8009cda:	4658      	mov	r0, fp
 8009cdc:	f000 fc10 	bl	800a500 <__multiply>
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	9004      	str	r0, [sp, #16]
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	f000 fb41 	bl	800a36c <_Bfree>
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	4699      	mov	r9, r3
 8009cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cf0:	1b1a      	subs	r2, r3, r4
 8009cf2:	d004      	beq.n	8009cfe <_dtoa_r+0x79e>
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4658      	mov	r0, fp
 8009cf8:	f000 fcaa 	bl	800a650 <__pow5mult>
 8009cfc:	4681      	mov	r9, r0
 8009cfe:	2101      	movs	r1, #1
 8009d00:	4658      	mov	r0, fp
 8009d02:	f000 fbe7 	bl	800a4d4 <__i2b>
 8009d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d08:	4604      	mov	r4, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 81c9 	beq.w	800a0a2 <_dtoa_r+0xb42>
 8009d10:	461a      	mov	r2, r3
 8009d12:	4601      	mov	r1, r0
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 fc9b 	bl	800a650 <__pow5mult>
 8009d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	f300 808f 	bgt.w	8009e42 <_dtoa_r+0x8e2>
 8009d24:	9b02      	ldr	r3, [sp, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 8087 	bne.w	8009e3a <_dtoa_r+0x8da>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 8083 	bne.w	8009e3e <_dtoa_r+0x8de>
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d3e:	0d1b      	lsrs	r3, r3, #20
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	b12b      	cbz	r3, 8009d50 <_dtoa_r+0x7f0>
 8009d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d46:	f108 0801 	add.w	r8, r8, #1
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d4e:	2301      	movs	r3, #1
 8009d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 81aa 	beq.w	800a0ae <_dtoa_r+0xb4e>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d60:	6918      	ldr	r0, [r3, #16]
 8009d62:	f000 fb6b 	bl	800a43c <__hi0bits>
 8009d66:	f1c0 0020 	rsb	r0, r0, #32
 8009d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6c:	4418      	add	r0, r3
 8009d6e:	f010 001f 	ands.w	r0, r0, #31
 8009d72:	d071      	beq.n	8009e58 <_dtoa_r+0x8f8>
 8009d74:	f1c0 0320 	rsb	r3, r0, #32
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	dd65      	ble.n	8009e48 <_dtoa_r+0x8e8>
 8009d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7e:	f1c0 001c 	rsb	r0, r0, #28
 8009d82:	4403      	add	r3, r0
 8009d84:	4480      	add	r8, r0
 8009d86:	4406      	add	r6, r0
 8009d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	dd05      	ble.n	8009d9c <_dtoa_r+0x83c>
 8009d90:	4649      	mov	r1, r9
 8009d92:	4642      	mov	r2, r8
 8009d94:	4658      	mov	r0, fp
 8009d96:	f000 fcb5 	bl	800a704 <__lshift>
 8009d9a:	4681      	mov	r9, r0
 8009d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dd05      	ble.n	8009dae <_dtoa_r+0x84e>
 8009da2:	4621      	mov	r1, r4
 8009da4:	461a      	mov	r2, r3
 8009da6:	4658      	mov	r0, fp
 8009da8:	f000 fcac 	bl	800a704 <__lshift>
 8009dac:	4604      	mov	r4, r0
 8009dae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d053      	beq.n	8009e5c <_dtoa_r+0x8fc>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4648      	mov	r0, r9
 8009db8:	f000 fd10 	bl	800a7dc <__mcmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	da4d      	bge.n	8009e5c <_dtoa_r+0x8fc>
 8009dc0:	1e7b      	subs	r3, r7, #1
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	220a      	movs	r2, #10
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4658      	mov	r0, fp
 8009dcc:	f000 faf0 	bl	800a3b0 <__multadd>
 8009dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd2:	4681      	mov	r9, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 816c 	beq.w	800a0b2 <_dtoa_r+0xb52>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4629      	mov	r1, r5
 8009dde:	220a      	movs	r2, #10
 8009de0:	4658      	mov	r0, fp
 8009de2:	f000 fae5 	bl	800a3b0 <__multadd>
 8009de6:	9b08      	ldr	r3, [sp, #32]
 8009de8:	4605      	mov	r5, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dc61      	bgt.n	8009eb2 <_dtoa_r+0x952>
 8009dee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	dc3b      	bgt.n	8009e6c <_dtoa_r+0x90c>
 8009df4:	e05d      	b.n	8009eb2 <_dtoa_r+0x952>
 8009df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009df8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dfc:	e746      	b.n	8009c8c <_dtoa_r+0x72c>
 8009dfe:	9b07      	ldr	r3, [sp, #28]
 8009e00:	1e5c      	subs	r4, r3, #1
 8009e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	bfbf      	itttt	lt
 8009e08:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e0a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009e0c:	1ae3      	sublt	r3, r4, r3
 8009e0e:	18d2      	addlt	r2, r2, r3
 8009e10:	bfa8      	it	ge
 8009e12:	1b1c      	subge	r4, r3, r4
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	bfbe      	ittt	lt
 8009e18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009e1a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009e1c:	2400      	movlt	r4, #0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfb5      	itete	lt
 8009e22:	eba8 0603 	sublt.w	r6, r8, r3
 8009e26:	4646      	movge	r6, r8
 8009e28:	2300      	movlt	r3, #0
 8009e2a:	9b07      	ldrge	r3, [sp, #28]
 8009e2c:	e730      	b.n	8009c90 <_dtoa_r+0x730>
 8009e2e:	4646      	mov	r6, r8
 8009e30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e34:	e735      	b.n	8009ca2 <_dtoa_r+0x742>
 8009e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e38:	e75c      	b.n	8009cf4 <_dtoa_r+0x794>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e788      	b.n	8009d50 <_dtoa_r+0x7f0>
 8009e3e:	9b02      	ldr	r3, [sp, #8]
 8009e40:	e786      	b.n	8009d50 <_dtoa_r+0x7f0>
 8009e42:	2300      	movs	r3, #0
 8009e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e46:	e788      	b.n	8009d5a <_dtoa_r+0x7fa>
 8009e48:	d09f      	beq.n	8009d8a <_dtoa_r+0x82a>
 8009e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e4c:	331c      	adds	r3, #28
 8009e4e:	441a      	add	r2, r3
 8009e50:	4498      	add	r8, r3
 8009e52:	441e      	add	r6, r3
 8009e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e56:	e798      	b.n	8009d8a <_dtoa_r+0x82a>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	e7f6      	b.n	8009e4a <_dtoa_r+0x8ea>
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	9704      	str	r7, [sp, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dc20      	bgt.n	8009ea6 <_dtoa_r+0x946>
 8009e64:	9308      	str	r3, [sp, #32]
 8009e66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	dd1e      	ble.n	8009eaa <_dtoa_r+0x94a>
 8009e6c:	9b08      	ldr	r3, [sp, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f47f aebc 	bne.w	8009bec <_dtoa_r+0x68c>
 8009e74:	4621      	mov	r1, r4
 8009e76:	2205      	movs	r2, #5
 8009e78:	4658      	mov	r0, fp
 8009e7a:	f000 fa99 	bl	800a3b0 <__multadd>
 8009e7e:	4601      	mov	r1, r0
 8009e80:	4604      	mov	r4, r0
 8009e82:	4648      	mov	r0, r9
 8009e84:	f000 fcaa 	bl	800a7dc <__mcmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f77f aeaf 	ble.w	8009bec <_dtoa_r+0x68c>
 8009e8e:	2331      	movs	r3, #49	@ 0x31
 8009e90:	4656      	mov	r6, sl
 8009e92:	f806 3b01 	strb.w	r3, [r6], #1
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	e6aa      	b.n	8009bf4 <_dtoa_r+0x694>
 8009e9e:	9c07      	ldr	r4, [sp, #28]
 8009ea0:	9704      	str	r7, [sp, #16]
 8009ea2:	4625      	mov	r5, r4
 8009ea4:	e7f3      	b.n	8009e8e <_dtoa_r+0x92e>
 8009ea6:	9b07      	ldr	r3, [sp, #28]
 8009ea8:	9308      	str	r3, [sp, #32]
 8009eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8104 	beq.w	800a0ba <_dtoa_r+0xb5a>
 8009eb2:	2e00      	cmp	r6, #0
 8009eb4:	dd05      	ble.n	8009ec2 <_dtoa_r+0x962>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4632      	mov	r2, r6
 8009eba:	4658      	mov	r0, fp
 8009ebc:	f000 fc22 	bl	800a704 <__lshift>
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d05a      	beq.n	8009f7e <_dtoa_r+0xa1e>
 8009ec8:	4658      	mov	r0, fp
 8009eca:	6869      	ldr	r1, [r5, #4]
 8009ecc:	f000 fa0e 	bl	800a2ec <_Balloc>
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	b928      	cbnz	r0, 8009ee0 <_dtoa_r+0x980>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009eda:	4b83      	ldr	r3, [pc, #524]	@ (800a0e8 <_dtoa_r+0xb88>)
 8009edc:	f7ff bb54 	b.w	8009588 <_dtoa_r+0x28>
 8009ee0:	692a      	ldr	r2, [r5, #16]
 8009ee2:	f105 010c 	add.w	r1, r5, #12
 8009ee6:	3202      	adds	r2, #2
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	300c      	adds	r0, #12
 8009eec:	f7ff faa1 	bl	8009432 <memcpy>
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	f000 fc05 	bl	800a704 <__lshift>
 8009efa:	462f      	mov	r7, r5
 8009efc:	4605      	mov	r5, r0
 8009efe:	f10a 0301 	add.w	r3, sl, #1
 8009f02:	9307      	str	r3, [sp, #28]
 8009f04:	9b08      	ldr	r3, [sp, #32]
 8009f06:	4453      	add	r3, sl
 8009f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f0a:	9b02      	ldr	r3, [sp, #8]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f12:	9b07      	ldr	r3, [sp, #28]
 8009f14:	4621      	mov	r1, r4
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4648      	mov	r0, r9
 8009f1a:	9302      	str	r3, [sp, #8]
 8009f1c:	f7ff fa97 	bl	800944e <quorem>
 8009f20:	4639      	mov	r1, r7
 8009f22:	9008      	str	r0, [sp, #32]
 8009f24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f28:	4648      	mov	r0, r9
 8009f2a:	f000 fc57 	bl	800a7dc <__mcmp>
 8009f2e:	462a      	mov	r2, r5
 8009f30:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f32:	4621      	mov	r1, r4
 8009f34:	4658      	mov	r0, fp
 8009f36:	f000 fc6d 	bl	800a814 <__mdiff>
 8009f3a:	68c2      	ldr	r2, [r0, #12]
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	bb02      	cbnz	r2, 8009f82 <_dtoa_r+0xa22>
 8009f40:	4601      	mov	r1, r0
 8009f42:	4648      	mov	r0, r9
 8009f44:	f000 fc4a 	bl	800a7dc <__mcmp>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f50:	f000 fa0c 	bl	800a36c <_Bfree>
 8009f54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f58:	9e07      	ldr	r6, [sp, #28]
 8009f5a:	ea43 0102 	orr.w	r1, r3, r2
 8009f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f60:	4319      	orrs	r1, r3
 8009f62:	d110      	bne.n	8009f86 <_dtoa_r+0xa26>
 8009f64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f68:	d029      	beq.n	8009fbe <_dtoa_r+0xa5e>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd02      	ble.n	8009f76 <_dtoa_r+0xa16>
 8009f70:	9b08      	ldr	r3, [sp, #32]
 8009f72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	f883 8000 	strb.w	r8, [r3]
 8009f7c:	e63b      	b.n	8009bf6 <_dtoa_r+0x696>
 8009f7e:	4628      	mov	r0, r5
 8009f80:	e7bb      	b.n	8009efa <_dtoa_r+0x99a>
 8009f82:	2201      	movs	r2, #1
 8009f84:	e7e1      	b.n	8009f4a <_dtoa_r+0x9ea>
 8009f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db04      	blt.n	8009f96 <_dtoa_r+0xa36>
 8009f8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009f8e:	430b      	orrs	r3, r1
 8009f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f92:	430b      	orrs	r3, r1
 8009f94:	d120      	bne.n	8009fd8 <_dtoa_r+0xa78>
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	dded      	ble.n	8009f76 <_dtoa_r+0xa16>
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f000 fbb0 	bl	800a704 <__lshift>
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4681      	mov	r9, r0
 8009fa8:	f000 fc18 	bl	800a7dc <__mcmp>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	dc03      	bgt.n	8009fb8 <_dtoa_r+0xa58>
 8009fb0:	d1e1      	bne.n	8009f76 <_dtoa_r+0xa16>
 8009fb2:	f018 0f01 	tst.w	r8, #1
 8009fb6:	d0de      	beq.n	8009f76 <_dtoa_r+0xa16>
 8009fb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fbc:	d1d8      	bne.n	8009f70 <_dtoa_r+0xa10>
 8009fbe:	2339      	movs	r3, #57	@ 0x39
 8009fc0:	9a02      	ldr	r2, [sp, #8]
 8009fc2:	7013      	strb	r3, [r2, #0]
 8009fc4:	4633      	mov	r3, r6
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	2a39      	cmp	r2, #57	@ 0x39
 8009fd0:	d052      	beq.n	800a078 <_dtoa_r+0xb18>
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e60e      	b.n	8009bf6 <_dtoa_r+0x696>
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	dd07      	ble.n	8009fec <_dtoa_r+0xa8c>
 8009fdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fe0:	d0ed      	beq.n	8009fbe <_dtoa_r+0xa5e>
 8009fe2:	9a02      	ldr	r2, [sp, #8]
 8009fe4:	f108 0301 	add.w	r3, r8, #1
 8009fe8:	7013      	strb	r3, [r2, #0]
 8009fea:	e604      	b.n	8009bf6 <_dtoa_r+0x696>
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	9a07      	ldr	r2, [sp, #28]
 8009ff0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d028      	beq.n	800a04c <_dtoa_r+0xaec>
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	220a      	movs	r2, #10
 800a000:	4658      	mov	r0, fp
 800a002:	f000 f9d5 	bl	800a3b0 <__multadd>
 800a006:	42af      	cmp	r7, r5
 800a008:	4681      	mov	r9, r0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	f04f 020a 	mov.w	r2, #10
 800a012:	4639      	mov	r1, r7
 800a014:	4658      	mov	r0, fp
 800a016:	d107      	bne.n	800a028 <_dtoa_r+0xac8>
 800a018:	f000 f9ca 	bl	800a3b0 <__multadd>
 800a01c:	4607      	mov	r7, r0
 800a01e:	4605      	mov	r5, r0
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	3301      	adds	r3, #1
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	e774      	b.n	8009f12 <_dtoa_r+0x9b2>
 800a028:	f000 f9c2 	bl	800a3b0 <__multadd>
 800a02c:	4629      	mov	r1, r5
 800a02e:	4607      	mov	r7, r0
 800a030:	2300      	movs	r3, #0
 800a032:	220a      	movs	r2, #10
 800a034:	4658      	mov	r0, fp
 800a036:	f000 f9bb 	bl	800a3b0 <__multadd>
 800a03a:	4605      	mov	r5, r0
 800a03c:	e7f0      	b.n	800a020 <_dtoa_r+0xac0>
 800a03e:	9b08      	ldr	r3, [sp, #32]
 800a040:	2700      	movs	r7, #0
 800a042:	2b00      	cmp	r3, #0
 800a044:	bfcc      	ite	gt
 800a046:	461e      	movgt	r6, r3
 800a048:	2601      	movle	r6, #1
 800a04a:	4456      	add	r6, sl
 800a04c:	4649      	mov	r1, r9
 800a04e:	2201      	movs	r2, #1
 800a050:	4658      	mov	r0, fp
 800a052:	f000 fb57 	bl	800a704 <__lshift>
 800a056:	4621      	mov	r1, r4
 800a058:	4681      	mov	r9, r0
 800a05a:	f000 fbbf 	bl	800a7dc <__mcmp>
 800a05e:	2800      	cmp	r0, #0
 800a060:	dcb0      	bgt.n	8009fc4 <_dtoa_r+0xa64>
 800a062:	d102      	bne.n	800a06a <_dtoa_r+0xb0a>
 800a064:	f018 0f01 	tst.w	r8, #1
 800a068:	d1ac      	bne.n	8009fc4 <_dtoa_r+0xa64>
 800a06a:	4633      	mov	r3, r6
 800a06c:	461e      	mov	r6, r3
 800a06e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a072:	2a30      	cmp	r2, #48	@ 0x30
 800a074:	d0fa      	beq.n	800a06c <_dtoa_r+0xb0c>
 800a076:	e5be      	b.n	8009bf6 <_dtoa_r+0x696>
 800a078:	459a      	cmp	sl, r3
 800a07a:	d1a4      	bne.n	8009fc6 <_dtoa_r+0xa66>
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	3301      	adds	r3, #1
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	2331      	movs	r3, #49	@ 0x31
 800a084:	f88a 3000 	strb.w	r3, [sl]
 800a088:	e5b5      	b.n	8009bf6 <_dtoa_r+0x696>
 800a08a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a08c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0ec <_dtoa_r+0xb8c>
 800a090:	b11b      	cbz	r3, 800a09a <_dtoa_r+0xb3a>
 800a092:	f10a 0308 	add.w	r3, sl, #8
 800a096:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	4650      	mov	r0, sl
 800a09c:	b017      	add	sp, #92	@ 0x5c
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	f77f ae3d 	ble.w	8009d24 <_dtoa_r+0x7c4>
 800a0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e65b      	b.n	8009d6a <_dtoa_r+0x80a>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f77f aed6 	ble.w	8009e66 <_dtoa_r+0x906>
 800a0ba:	4656      	mov	r6, sl
 800a0bc:	4621      	mov	r1, r4
 800a0be:	4648      	mov	r0, r9
 800a0c0:	f7ff f9c5 	bl	800944e <quorem>
 800a0c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	f806 8b01 	strb.w	r8, [r6], #1
 800a0ce:	eba6 020a 	sub.w	r2, r6, sl
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	ddb3      	ble.n	800a03e <_dtoa_r+0xade>
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	2300      	movs	r3, #0
 800a0da:	220a      	movs	r2, #10
 800a0dc:	4658      	mov	r0, fp
 800a0de:	f000 f967 	bl	800a3b0 <__multadd>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	e7ea      	b.n	800a0bc <_dtoa_r+0xb5c>
 800a0e6:	bf00      	nop
 800a0e8:	0800b95a 	.word	0x0800b95a
 800a0ec:	0800b8de 	.word	0x0800b8de

0800a0f0 <_free_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d040      	beq.n	800a17a <_free_r+0x8a>
 800a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fc:	1f0c      	subs	r4, r1, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfb8      	it	lt
 800a102:	18e4      	addlt	r4, r4, r3
 800a104:	f000 f8e6 	bl	800a2d4 <__malloc_lock>
 800a108:	4a1c      	ldr	r2, [pc, #112]	@ (800a17c <_free_r+0x8c>)
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	b933      	cbnz	r3, 800a11c <_free_r+0x2c>
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	6014      	str	r4, [r2, #0]
 800a112:	4628      	mov	r0, r5
 800a114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a118:	f000 b8e2 	b.w	800a2e0 <__malloc_unlock>
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	d908      	bls.n	800a132 <_free_r+0x42>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	1821      	adds	r1, r4, r0
 800a124:	428b      	cmp	r3, r1
 800a126:	bf01      	itttt	eq
 800a128:	6819      	ldreq	r1, [r3, #0]
 800a12a:	685b      	ldreq	r3, [r3, #4]
 800a12c:	1809      	addeq	r1, r1, r0
 800a12e:	6021      	streq	r1, [r4, #0]
 800a130:	e7ed      	b.n	800a10e <_free_r+0x1e>
 800a132:	461a      	mov	r2, r3
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	b10b      	cbz	r3, 800a13c <_free_r+0x4c>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d9fa      	bls.n	800a132 <_free_r+0x42>
 800a13c:	6811      	ldr	r1, [r2, #0]
 800a13e:	1850      	adds	r0, r2, r1
 800a140:	42a0      	cmp	r0, r4
 800a142:	d10b      	bne.n	800a15c <_free_r+0x6c>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	4401      	add	r1, r0
 800a148:	1850      	adds	r0, r2, r1
 800a14a:	4283      	cmp	r3, r0
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	d1e0      	bne.n	800a112 <_free_r+0x22>
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	4408      	add	r0, r1
 800a156:	6010      	str	r0, [r2, #0]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	e7da      	b.n	800a112 <_free_r+0x22>
 800a15c:	d902      	bls.n	800a164 <_free_r+0x74>
 800a15e:	230c      	movs	r3, #12
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	e7d6      	b.n	800a112 <_free_r+0x22>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	1821      	adds	r1, r4, r0
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf01      	itttt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	1809      	addeq	r1, r1, r0
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	6054      	str	r4, [r2, #4]
 800a178:	e7cb      	b.n	800a112 <_free_r+0x22>
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20000838 	.word	0x20000838

0800a180 <malloc>:
 800a180:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <malloc+0xc>)
 800a182:	4601      	mov	r1, r0
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	f000 b825 	b.w	800a1d4 <_malloc_r>
 800a18a:	bf00      	nop
 800a18c:	2000001c 	.word	0x2000001c

0800a190 <sbrk_aligned>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	4e0f      	ldr	r6, [pc, #60]	@ (800a1d0 <sbrk_aligned+0x40>)
 800a194:	460c      	mov	r4, r1
 800a196:	6831      	ldr	r1, [r6, #0]
 800a198:	4605      	mov	r5, r0
 800a19a:	b911      	cbnz	r1, 800a1a2 <sbrk_aligned+0x12>
 800a19c:	f000 fcce 	bl	800ab3c <_sbrk_r>
 800a1a0:	6030      	str	r0, [r6, #0]
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 fcc9 	bl	800ab3c <_sbrk_r>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	d103      	bne.n	800a1b6 <sbrk_aligned+0x26>
 800a1ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	bd70      	pop	{r4, r5, r6, pc}
 800a1b6:	1cc4      	adds	r4, r0, #3
 800a1b8:	f024 0403 	bic.w	r4, r4, #3
 800a1bc:	42a0      	cmp	r0, r4
 800a1be:	d0f8      	beq.n	800a1b2 <sbrk_aligned+0x22>
 800a1c0:	1a21      	subs	r1, r4, r0
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 fcba 	bl	800ab3c <_sbrk_r>
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d1f2      	bne.n	800a1b2 <sbrk_aligned+0x22>
 800a1cc:	e7ef      	b.n	800a1ae <sbrk_aligned+0x1e>
 800a1ce:	bf00      	nop
 800a1d0:	20000834 	.word	0x20000834

0800a1d4 <_malloc_r>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	1ccd      	adds	r5, r1, #3
 800a1da:	f025 0503 	bic.w	r5, r5, #3
 800a1de:	3508      	adds	r5, #8
 800a1e0:	2d0c      	cmp	r5, #12
 800a1e2:	bf38      	it	cc
 800a1e4:	250c      	movcc	r5, #12
 800a1e6:	2d00      	cmp	r5, #0
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	db01      	blt.n	800a1f0 <_malloc_r+0x1c>
 800a1ec:	42a9      	cmp	r1, r5
 800a1ee:	d904      	bls.n	800a1fa <_malloc_r+0x26>
 800a1f0:	230c      	movs	r3, #12
 800a1f2:	6033      	str	r3, [r6, #0]
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2d0 <_malloc_r+0xfc>
 800a1fe:	f000 f869 	bl	800a2d4 <__malloc_lock>
 800a202:	f8d8 3000 	ldr.w	r3, [r8]
 800a206:	461c      	mov	r4, r3
 800a208:	bb44      	cbnz	r4, 800a25c <_malloc_r+0x88>
 800a20a:	4629      	mov	r1, r5
 800a20c:	4630      	mov	r0, r6
 800a20e:	f7ff ffbf 	bl	800a190 <sbrk_aligned>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	4604      	mov	r4, r0
 800a216:	d158      	bne.n	800a2ca <_malloc_r+0xf6>
 800a218:	f8d8 4000 	ldr.w	r4, [r8]
 800a21c:	4627      	mov	r7, r4
 800a21e:	2f00      	cmp	r7, #0
 800a220:	d143      	bne.n	800a2aa <_malloc_r+0xd6>
 800a222:	2c00      	cmp	r4, #0
 800a224:	d04b      	beq.n	800a2be <_malloc_r+0xea>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	eb04 0903 	add.w	r9, r4, r3
 800a230:	f000 fc84 	bl	800ab3c <_sbrk_r>
 800a234:	4581      	cmp	r9, r0
 800a236:	d142      	bne.n	800a2be <_malloc_r+0xea>
 800a238:	6821      	ldr	r1, [r4, #0]
 800a23a:	4630      	mov	r0, r6
 800a23c:	1a6d      	subs	r5, r5, r1
 800a23e:	4629      	mov	r1, r5
 800a240:	f7ff ffa6 	bl	800a190 <sbrk_aligned>
 800a244:	3001      	adds	r0, #1
 800a246:	d03a      	beq.n	800a2be <_malloc_r+0xea>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	442b      	add	r3, r5
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	f8d8 3000 	ldr.w	r3, [r8]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	bb62      	cbnz	r2, 800a2b0 <_malloc_r+0xdc>
 800a256:	f8c8 7000 	str.w	r7, [r8]
 800a25a:	e00f      	b.n	800a27c <_malloc_r+0xa8>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	1b52      	subs	r2, r2, r5
 800a260:	d420      	bmi.n	800a2a4 <_malloc_r+0xd0>
 800a262:	2a0b      	cmp	r2, #11
 800a264:	d917      	bls.n	800a296 <_malloc_r+0xc2>
 800a266:	1961      	adds	r1, r4, r5
 800a268:	42a3      	cmp	r3, r4
 800a26a:	6025      	str	r5, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	6059      	strne	r1, [r3, #4]
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	bf08      	it	eq
 800a274:	f8c8 1000 	streq.w	r1, [r8]
 800a278:	5162      	str	r2, [r4, r5]
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f82f 	bl	800a2e0 <__malloc_unlock>
 800a282:	f104 000b 	add.w	r0, r4, #11
 800a286:	1d23      	adds	r3, r4, #4
 800a288:	f020 0007 	bic.w	r0, r0, #7
 800a28c:	1ac2      	subs	r2, r0, r3
 800a28e:	bf1c      	itt	ne
 800a290:	1a1b      	subne	r3, r3, r0
 800a292:	50a3      	strne	r3, [r4, r2]
 800a294:	e7af      	b.n	800a1f6 <_malloc_r+0x22>
 800a296:	6862      	ldr	r2, [r4, #4]
 800a298:	42a3      	cmp	r3, r4
 800a29a:	bf0c      	ite	eq
 800a29c:	f8c8 2000 	streq.w	r2, [r8]
 800a2a0:	605a      	strne	r2, [r3, #4]
 800a2a2:	e7eb      	b.n	800a27c <_malloc_r+0xa8>
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	6864      	ldr	r4, [r4, #4]
 800a2a8:	e7ae      	b.n	800a208 <_malloc_r+0x34>
 800a2aa:	463c      	mov	r4, r7
 800a2ac:	687f      	ldr	r7, [r7, #4]
 800a2ae:	e7b6      	b.n	800a21e <_malloc_r+0x4a>
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	d1fb      	bne.n	800a2b0 <_malloc_r+0xdc>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	6053      	str	r3, [r2, #4]
 800a2bc:	e7de      	b.n	800a27c <_malloc_r+0xa8>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	6033      	str	r3, [r6, #0]
 800a2c4:	f000 f80c 	bl	800a2e0 <__malloc_unlock>
 800a2c8:	e794      	b.n	800a1f4 <_malloc_r+0x20>
 800a2ca:	6005      	str	r5, [r0, #0]
 800a2cc:	e7d6      	b.n	800a27c <_malloc_r+0xa8>
 800a2ce:	bf00      	nop
 800a2d0:	20000838 	.word	0x20000838

0800a2d4 <__malloc_lock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	@ (800a2dc <__malloc_lock+0x8>)
 800a2d6:	f7ff b89c 	b.w	8009412 <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20000830 	.word	0x20000830

0800a2e0 <__malloc_unlock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__malloc_unlock+0x8>)
 800a2e2:	f7ff b897 	b.w	8009414 <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20000830 	.word	0x20000830

0800a2ec <_Balloc>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	69c6      	ldr	r6, [r0, #28]
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	b976      	cbnz	r6, 800a314 <_Balloc+0x28>
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	f7ff ff42 	bl	800a180 <malloc>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	61e0      	str	r0, [r4, #28]
 800a300:	b920      	cbnz	r0, 800a30c <_Balloc+0x20>
 800a302:	216b      	movs	r1, #107	@ 0x6b
 800a304:	4b17      	ldr	r3, [pc, #92]	@ (800a364 <_Balloc+0x78>)
 800a306:	4818      	ldr	r0, [pc, #96]	@ (800a368 <_Balloc+0x7c>)
 800a308:	f000 fc28 	bl	800ab5c <__assert_func>
 800a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a310:	6006      	str	r6, [r0, #0]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	69e6      	ldr	r6, [r4, #28]
 800a316:	68f3      	ldr	r3, [r6, #12]
 800a318:	b183      	cbz	r3, 800a33c <_Balloc+0x50>
 800a31a:	69e3      	ldr	r3, [r4, #28]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a322:	b9b8      	cbnz	r0, 800a354 <_Balloc+0x68>
 800a324:	2101      	movs	r1, #1
 800a326:	fa01 f605 	lsl.w	r6, r1, r5
 800a32a:	1d72      	adds	r2, r6, #5
 800a32c:	4620      	mov	r0, r4
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	f000 fc32 	bl	800ab98 <_calloc_r>
 800a334:	b160      	cbz	r0, 800a350 <_Balloc+0x64>
 800a336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a33a:	e00e      	b.n	800a35a <_Balloc+0x6e>
 800a33c:	2221      	movs	r2, #33	@ 0x21
 800a33e:	2104      	movs	r1, #4
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fc29 	bl	800ab98 <_calloc_r>
 800a346:	69e3      	ldr	r3, [r4, #28]
 800a348:	60f0      	str	r0, [r6, #12]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e4      	bne.n	800a31a <_Balloc+0x2e>
 800a350:	2000      	movs	r0, #0
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	6802      	ldr	r2, [r0, #0]
 800a356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a35a:	2300      	movs	r3, #0
 800a35c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a360:	e7f7      	b.n	800a352 <_Balloc+0x66>
 800a362:	bf00      	nop
 800a364:	0800b8eb 	.word	0x0800b8eb
 800a368:	0800b96b 	.word	0x0800b96b

0800a36c <_Bfree>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	69c6      	ldr	r6, [r0, #28]
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b976      	cbnz	r6, 800a394 <_Bfree+0x28>
 800a376:	2010      	movs	r0, #16
 800a378:	f7ff ff02 	bl	800a180 <malloc>
 800a37c:	4602      	mov	r2, r0
 800a37e:	61e8      	str	r0, [r5, #28]
 800a380:	b920      	cbnz	r0, 800a38c <_Bfree+0x20>
 800a382:	218f      	movs	r1, #143	@ 0x8f
 800a384:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <_Bfree+0x3c>)
 800a386:	4809      	ldr	r0, [pc, #36]	@ (800a3ac <_Bfree+0x40>)
 800a388:	f000 fbe8 	bl	800ab5c <__assert_func>
 800a38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a390:	6006      	str	r6, [r0, #0]
 800a392:	60c6      	str	r6, [r0, #12]
 800a394:	b13c      	cbz	r4, 800a3a6 <_Bfree+0x3a>
 800a396:	69eb      	ldr	r3, [r5, #28]
 800a398:	6862      	ldr	r2, [r4, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3a0:	6021      	str	r1, [r4, #0]
 800a3a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	0800b8eb 	.word	0x0800b8eb
 800a3ac:	0800b96b 	.word	0x0800b96b

0800a3b0 <__multadd>:
 800a3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	461e      	mov	r6, r3
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	690d      	ldr	r5, [r1, #16]
 800a3be:	f101 0c14 	add.w	ip, r1, #20
 800a3c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	b299      	uxth	r1, r3
 800a3ca:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ce:	0c1e      	lsrs	r6, r3, #16
 800a3d0:	0c0b      	lsrs	r3, r1, #16
 800a3d2:	fb02 3306 	mla	r3, r2, r6, r3
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3dc:	4285      	cmp	r5, r0
 800a3de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a3e6:	dcec      	bgt.n	800a3c2 <__multadd+0x12>
 800a3e8:	b30e      	cbz	r6, 800a42e <__multadd+0x7e>
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	42ab      	cmp	r3, r5
 800a3ee:	dc19      	bgt.n	800a424 <__multadd+0x74>
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	f7ff ff79 	bl	800a2ec <_Balloc>
 800a3fa:	4680      	mov	r8, r0
 800a3fc:	b928      	cbnz	r0, 800a40a <__multadd+0x5a>
 800a3fe:	4602      	mov	r2, r0
 800a400:	21ba      	movs	r1, #186	@ 0xba
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <__multadd+0x84>)
 800a404:	480c      	ldr	r0, [pc, #48]	@ (800a438 <__multadd+0x88>)
 800a406:	f000 fba9 	bl	800ab5c <__assert_func>
 800a40a:	6922      	ldr	r2, [r4, #16]
 800a40c:	f104 010c 	add.w	r1, r4, #12
 800a410:	3202      	adds	r2, #2
 800a412:	0092      	lsls	r2, r2, #2
 800a414:	300c      	adds	r0, #12
 800a416:	f7ff f80c 	bl	8009432 <memcpy>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4638      	mov	r0, r7
 800a41e:	f7ff ffa5 	bl	800a36c <_Bfree>
 800a422:	4644      	mov	r4, r8
 800a424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a428:	3501      	adds	r5, #1
 800a42a:	615e      	str	r6, [r3, #20]
 800a42c:	6125      	str	r5, [r4, #16]
 800a42e:	4620      	mov	r0, r4
 800a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a434:	0800b95a 	.word	0x0800b95a
 800a438:	0800b96b 	.word	0x0800b96b

0800a43c <__hi0bits>:
 800a43c:	4603      	mov	r3, r0
 800a43e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a442:	bf3a      	itte	cc
 800a444:	0403      	lslcc	r3, r0, #16
 800a446:	2010      	movcc	r0, #16
 800a448:	2000      	movcs	r0, #0
 800a44a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a44e:	bf3c      	itt	cc
 800a450:	021b      	lslcc	r3, r3, #8
 800a452:	3008      	addcc	r0, #8
 800a454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a458:	bf3c      	itt	cc
 800a45a:	011b      	lslcc	r3, r3, #4
 800a45c:	3004      	addcc	r0, #4
 800a45e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a462:	bf3c      	itt	cc
 800a464:	009b      	lslcc	r3, r3, #2
 800a466:	3002      	addcc	r0, #2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db05      	blt.n	800a478 <__hi0bits+0x3c>
 800a46c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a470:	f100 0001 	add.w	r0, r0, #1
 800a474:	bf08      	it	eq
 800a476:	2020      	moveq	r0, #32
 800a478:	4770      	bx	lr

0800a47a <__lo0bits>:
 800a47a:	6803      	ldr	r3, [r0, #0]
 800a47c:	4602      	mov	r2, r0
 800a47e:	f013 0007 	ands.w	r0, r3, #7
 800a482:	d00b      	beq.n	800a49c <__lo0bits+0x22>
 800a484:	07d9      	lsls	r1, r3, #31
 800a486:	d421      	bmi.n	800a4cc <__lo0bits+0x52>
 800a488:	0798      	lsls	r0, r3, #30
 800a48a:	bf49      	itett	mi
 800a48c:	085b      	lsrmi	r3, r3, #1
 800a48e:	089b      	lsrpl	r3, r3, #2
 800a490:	2001      	movmi	r0, #1
 800a492:	6013      	strmi	r3, [r2, #0]
 800a494:	bf5c      	itt	pl
 800a496:	2002      	movpl	r0, #2
 800a498:	6013      	strpl	r3, [r2, #0]
 800a49a:	4770      	bx	lr
 800a49c:	b299      	uxth	r1, r3
 800a49e:	b909      	cbnz	r1, 800a4a4 <__lo0bits+0x2a>
 800a4a0:	2010      	movs	r0, #16
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	b2d9      	uxtb	r1, r3
 800a4a6:	b909      	cbnz	r1, 800a4ac <__lo0bits+0x32>
 800a4a8:	3008      	adds	r0, #8
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	0719      	lsls	r1, r3, #28
 800a4ae:	bf04      	itt	eq
 800a4b0:	091b      	lsreq	r3, r3, #4
 800a4b2:	3004      	addeq	r0, #4
 800a4b4:	0799      	lsls	r1, r3, #30
 800a4b6:	bf04      	itt	eq
 800a4b8:	089b      	lsreq	r3, r3, #2
 800a4ba:	3002      	addeq	r0, #2
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d403      	bmi.n	800a4c8 <__lo0bits+0x4e>
 800a4c0:	085b      	lsrs	r3, r3, #1
 800a4c2:	f100 0001 	add.w	r0, r0, #1
 800a4c6:	d003      	beq.n	800a4d0 <__lo0bits+0x56>
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	4770      	bx	lr
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	4770      	bx	lr
 800a4d0:	2020      	movs	r0, #32
 800a4d2:	4770      	bx	lr

0800a4d4 <__i2b>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2101      	movs	r1, #1
 800a4da:	f7ff ff07 	bl	800a2ec <_Balloc>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <__i2b+0x1a>
 800a4e2:	f240 1145 	movw	r1, #325	@ 0x145
 800a4e6:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <__i2b+0x24>)
 800a4e8:	4804      	ldr	r0, [pc, #16]	@ (800a4fc <__i2b+0x28>)
 800a4ea:	f000 fb37 	bl	800ab5c <__assert_func>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	6144      	str	r4, [r0, #20]
 800a4f2:	6103      	str	r3, [r0, #16]
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800b95a 	.word	0x0800b95a
 800a4fc:	0800b96b 	.word	0x0800b96b

0800a500 <__multiply>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	4614      	mov	r4, r2
 800a506:	690a      	ldr	r2, [r1, #16]
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	460f      	mov	r7, r1
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bfa2      	ittt	ge
 800a510:	4623      	movge	r3, r4
 800a512:	460c      	movge	r4, r1
 800a514:	461f      	movge	r7, r3
 800a516:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a51a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	eb0a 0609 	add.w	r6, sl, r9
 800a526:	42b3      	cmp	r3, r6
 800a528:	b085      	sub	sp, #20
 800a52a:	bfb8      	it	lt
 800a52c:	3101      	addlt	r1, #1
 800a52e:	f7ff fedd 	bl	800a2ec <_Balloc>
 800a532:	b930      	cbnz	r0, 800a542 <__multiply+0x42>
 800a534:	4602      	mov	r2, r0
 800a536:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a53a:	4b43      	ldr	r3, [pc, #268]	@ (800a648 <__multiply+0x148>)
 800a53c:	4843      	ldr	r0, [pc, #268]	@ (800a64c <__multiply+0x14c>)
 800a53e:	f000 fb0d 	bl	800ab5c <__assert_func>
 800a542:	f100 0514 	add.w	r5, r0, #20
 800a546:	462b      	mov	r3, r5
 800a548:	2200      	movs	r2, #0
 800a54a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a54e:	4543      	cmp	r3, r8
 800a550:	d321      	bcc.n	800a596 <__multiply+0x96>
 800a552:	f107 0114 	add.w	r1, r7, #20
 800a556:	f104 0214 	add.w	r2, r4, #20
 800a55a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a55e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a562:	9302      	str	r3, [sp, #8]
 800a564:	1b13      	subs	r3, r2, r4
 800a566:	3b15      	subs	r3, #21
 800a568:	f023 0303 	bic.w	r3, r3, #3
 800a56c:	3304      	adds	r3, #4
 800a56e:	f104 0715 	add.w	r7, r4, #21
 800a572:	42ba      	cmp	r2, r7
 800a574:	bf38      	it	cc
 800a576:	2304      	movcc	r3, #4
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	9103      	str	r1, [sp, #12]
 800a57e:	428b      	cmp	r3, r1
 800a580:	d80c      	bhi.n	800a59c <__multiply+0x9c>
 800a582:	2e00      	cmp	r6, #0
 800a584:	dd03      	ble.n	800a58e <__multiply+0x8e>
 800a586:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d05a      	beq.n	800a644 <__multiply+0x144>
 800a58e:	6106      	str	r6, [r0, #16]
 800a590:	b005      	add	sp, #20
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	f843 2b04 	str.w	r2, [r3], #4
 800a59a:	e7d8      	b.n	800a54e <__multiply+0x4e>
 800a59c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5a0:	f1ba 0f00 	cmp.w	sl, #0
 800a5a4:	d023      	beq.n	800a5ee <__multiply+0xee>
 800a5a6:	46a9      	mov	r9, r5
 800a5a8:	f04f 0c00 	mov.w	ip, #0
 800a5ac:	f104 0e14 	add.w	lr, r4, #20
 800a5b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5b4:	f8d9 3000 	ldr.w	r3, [r9]
 800a5b8:	fa1f fb87 	uxth.w	fp, r7
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5c2:	4463      	add	r3, ip
 800a5c4:	f8d9 c000 	ldr.w	ip, [r9]
 800a5c8:	0c3f      	lsrs	r7, r7, #16
 800a5ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a5ce:	fb0a c707 	mla	r7, sl, r7, ip
 800a5d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5dc:	4572      	cmp	r2, lr
 800a5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5e2:	f849 3b04 	str.w	r3, [r9], #4
 800a5e6:	d8e3      	bhi.n	800a5b0 <__multiply+0xb0>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f845 c003 	str.w	ip, [r5, r3]
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	3104      	adds	r1, #4
 800a5f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5f6:	f1b9 0f00 	cmp.w	r9, #0
 800a5fa:	d021      	beq.n	800a640 <__multiply+0x140>
 800a5fc:	46ae      	mov	lr, r5
 800a5fe:	f04f 0a00 	mov.w	sl, #0
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	f104 0c14 	add.w	ip, r4, #20
 800a608:	f8bc b000 	ldrh.w	fp, [ip]
 800a60c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a610:	b29b      	uxth	r3, r3
 800a612:	fb09 770b 	mla	r7, r9, fp, r7
 800a616:	4457      	add	r7, sl
 800a618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a61c:	f84e 3b04 	str.w	r3, [lr], #4
 800a620:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a628:	f8be 3000 	ldrh.w	r3, [lr]
 800a62c:	4562      	cmp	r2, ip
 800a62e:	fb09 330a 	mla	r3, r9, sl, r3
 800a632:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a636:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a63a:	d8e5      	bhi.n	800a608 <__multiply+0x108>
 800a63c:	9f01      	ldr	r7, [sp, #4]
 800a63e:	51eb      	str	r3, [r5, r7]
 800a640:	3504      	adds	r5, #4
 800a642:	e79a      	b.n	800a57a <__multiply+0x7a>
 800a644:	3e01      	subs	r6, #1
 800a646:	e79c      	b.n	800a582 <__multiply+0x82>
 800a648:	0800b95a 	.word	0x0800b95a
 800a64c:	0800b96b 	.word	0x0800b96b

0800a650 <__pow5mult>:
 800a650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a654:	4615      	mov	r5, r2
 800a656:	f012 0203 	ands.w	r2, r2, #3
 800a65a:	4607      	mov	r7, r0
 800a65c:	460e      	mov	r6, r1
 800a65e:	d007      	beq.n	800a670 <__pow5mult+0x20>
 800a660:	4c25      	ldr	r4, [pc, #148]	@ (800a6f8 <__pow5mult+0xa8>)
 800a662:	3a01      	subs	r2, #1
 800a664:	2300      	movs	r3, #0
 800a666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a66a:	f7ff fea1 	bl	800a3b0 <__multadd>
 800a66e:	4606      	mov	r6, r0
 800a670:	10ad      	asrs	r5, r5, #2
 800a672:	d03d      	beq.n	800a6f0 <__pow5mult+0xa0>
 800a674:	69fc      	ldr	r4, [r7, #28]
 800a676:	b97c      	cbnz	r4, 800a698 <__pow5mult+0x48>
 800a678:	2010      	movs	r0, #16
 800a67a:	f7ff fd81 	bl	800a180 <malloc>
 800a67e:	4602      	mov	r2, r0
 800a680:	61f8      	str	r0, [r7, #28]
 800a682:	b928      	cbnz	r0, 800a690 <__pow5mult+0x40>
 800a684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a688:	4b1c      	ldr	r3, [pc, #112]	@ (800a6fc <__pow5mult+0xac>)
 800a68a:	481d      	ldr	r0, [pc, #116]	@ (800a700 <__pow5mult+0xb0>)
 800a68c:	f000 fa66 	bl	800ab5c <__assert_func>
 800a690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a694:	6004      	str	r4, [r0, #0]
 800a696:	60c4      	str	r4, [r0, #12]
 800a698:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a69c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6a0:	b94c      	cbnz	r4, 800a6b6 <__pow5mult+0x66>
 800a6a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f7ff ff14 	bl	800a4d4 <__i2b>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	f04f 0900 	mov.w	r9, #0
 800a6ba:	07eb      	lsls	r3, r5, #31
 800a6bc:	d50a      	bpl.n	800a6d4 <__pow5mult+0x84>
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f7ff ff1c 	bl	800a500 <__multiply>
 800a6c8:	4680      	mov	r8, r0
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f7ff fe4d 	bl	800a36c <_Bfree>
 800a6d2:	4646      	mov	r6, r8
 800a6d4:	106d      	asrs	r5, r5, #1
 800a6d6:	d00b      	beq.n	800a6f0 <__pow5mult+0xa0>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	b938      	cbnz	r0, 800a6ec <__pow5mult+0x9c>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff ff0d 	bl	800a500 <__multiply>
 800a6e6:	6020      	str	r0, [r4, #0]
 800a6e8:	f8c0 9000 	str.w	r9, [r0]
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	e7e4      	b.n	800a6ba <__pow5mult+0x6a>
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f6:	bf00      	nop
 800a6f8:	0800b9c4 	.word	0x0800b9c4
 800a6fc:	0800b8eb 	.word	0x0800b8eb
 800a700:	0800b96b 	.word	0x0800b96b

0800a704 <__lshift>:
 800a704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a708:	460c      	mov	r4, r1
 800a70a:	4607      	mov	r7, r0
 800a70c:	4691      	mov	r9, r2
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	6849      	ldr	r1, [r1, #4]
 800a712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a71c:	f108 0601 	add.w	r6, r8, #1
 800a720:	42b3      	cmp	r3, r6
 800a722:	db0b      	blt.n	800a73c <__lshift+0x38>
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff fde1 	bl	800a2ec <_Balloc>
 800a72a:	4605      	mov	r5, r0
 800a72c:	b948      	cbnz	r0, 800a742 <__lshift+0x3e>
 800a72e:	4602      	mov	r2, r0
 800a730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a734:	4b27      	ldr	r3, [pc, #156]	@ (800a7d4 <__lshift+0xd0>)
 800a736:	4828      	ldr	r0, [pc, #160]	@ (800a7d8 <__lshift+0xd4>)
 800a738:	f000 fa10 	bl	800ab5c <__assert_func>
 800a73c:	3101      	adds	r1, #1
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	e7ee      	b.n	800a720 <__lshift+0x1c>
 800a742:	2300      	movs	r3, #0
 800a744:	f100 0114 	add.w	r1, r0, #20
 800a748:	f100 0210 	add.w	r2, r0, #16
 800a74c:	4618      	mov	r0, r3
 800a74e:	4553      	cmp	r3, sl
 800a750:	db33      	blt.n	800a7ba <__lshift+0xb6>
 800a752:	6920      	ldr	r0, [r4, #16]
 800a754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a758:	f104 0314 	add.w	r3, r4, #20
 800a75c:	f019 091f 	ands.w	r9, r9, #31
 800a760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a768:	d02b      	beq.n	800a7c2 <__lshift+0xbe>
 800a76a:	468a      	mov	sl, r1
 800a76c:	2200      	movs	r2, #0
 800a76e:	f1c9 0e20 	rsb	lr, r9, #32
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	fa00 f009 	lsl.w	r0, r0, r9
 800a778:	4310      	orrs	r0, r2
 800a77a:	f84a 0b04 	str.w	r0, [sl], #4
 800a77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a782:	459c      	cmp	ip, r3
 800a784:	fa22 f20e 	lsr.w	r2, r2, lr
 800a788:	d8f3      	bhi.n	800a772 <__lshift+0x6e>
 800a78a:	ebac 0304 	sub.w	r3, ip, r4
 800a78e:	3b15      	subs	r3, #21
 800a790:	f023 0303 	bic.w	r3, r3, #3
 800a794:	3304      	adds	r3, #4
 800a796:	f104 0015 	add.w	r0, r4, #21
 800a79a:	4584      	cmp	ip, r0
 800a79c:	bf38      	it	cc
 800a79e:	2304      	movcc	r3, #4
 800a7a0:	50ca      	str	r2, [r1, r3]
 800a7a2:	b10a      	cbz	r2, 800a7a8 <__lshift+0xa4>
 800a7a4:	f108 0602 	add.w	r6, r8, #2
 800a7a8:	3e01      	subs	r6, #1
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	612e      	str	r6, [r5, #16]
 800a7b0:	f7ff fddc 	bl	800a36c <_Bfree>
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7be:	3301      	adds	r3, #1
 800a7c0:	e7c5      	b.n	800a74e <__lshift+0x4a>
 800a7c2:	3904      	subs	r1, #4
 800a7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c8:	459c      	cmp	ip, r3
 800a7ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7ce:	d8f9      	bhi.n	800a7c4 <__lshift+0xc0>
 800a7d0:	e7ea      	b.n	800a7a8 <__lshift+0xa4>
 800a7d2:	bf00      	nop
 800a7d4:	0800b95a 	.word	0x0800b95a
 800a7d8:	0800b96b 	.word	0x0800b96b

0800a7dc <__mcmp>:
 800a7dc:	4603      	mov	r3, r0
 800a7de:	690a      	ldr	r2, [r1, #16]
 800a7e0:	6900      	ldr	r0, [r0, #16]
 800a7e2:	b530      	push	{r4, r5, lr}
 800a7e4:	1a80      	subs	r0, r0, r2
 800a7e6:	d10e      	bne.n	800a806 <__mcmp+0x2a>
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	3114      	adds	r1, #20
 800a7ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7fc:	4295      	cmp	r5, r2
 800a7fe:	d003      	beq.n	800a808 <__mcmp+0x2c>
 800a800:	d205      	bcs.n	800a80e <__mcmp+0x32>
 800a802:	f04f 30ff 	mov.w	r0, #4294967295
 800a806:	bd30      	pop	{r4, r5, pc}
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d3f3      	bcc.n	800a7f4 <__mcmp+0x18>
 800a80c:	e7fb      	b.n	800a806 <__mcmp+0x2a>
 800a80e:	2001      	movs	r0, #1
 800a810:	e7f9      	b.n	800a806 <__mcmp+0x2a>
	...

0800a814 <__mdiff>:
 800a814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	4689      	mov	r9, r1
 800a81a:	4606      	mov	r6, r0
 800a81c:	4611      	mov	r1, r2
 800a81e:	4648      	mov	r0, r9
 800a820:	4614      	mov	r4, r2
 800a822:	f7ff ffdb 	bl	800a7dc <__mcmp>
 800a826:	1e05      	subs	r5, r0, #0
 800a828:	d112      	bne.n	800a850 <__mdiff+0x3c>
 800a82a:	4629      	mov	r1, r5
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7ff fd5d 	bl	800a2ec <_Balloc>
 800a832:	4602      	mov	r2, r0
 800a834:	b928      	cbnz	r0, 800a842 <__mdiff+0x2e>
 800a836:	f240 2137 	movw	r1, #567	@ 0x237
 800a83a:	4b3e      	ldr	r3, [pc, #248]	@ (800a934 <__mdiff+0x120>)
 800a83c:	483e      	ldr	r0, [pc, #248]	@ (800a938 <__mdiff+0x124>)
 800a83e:	f000 f98d 	bl	800ab5c <__assert_func>
 800a842:	2301      	movs	r3, #1
 800a844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a848:	4610      	mov	r0, r2
 800a84a:	b003      	add	sp, #12
 800a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a850:	bfbc      	itt	lt
 800a852:	464b      	movlt	r3, r9
 800a854:	46a1      	movlt	r9, r4
 800a856:	4630      	mov	r0, r6
 800a858:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a85c:	bfba      	itte	lt
 800a85e:	461c      	movlt	r4, r3
 800a860:	2501      	movlt	r5, #1
 800a862:	2500      	movge	r5, #0
 800a864:	f7ff fd42 	bl	800a2ec <_Balloc>
 800a868:	4602      	mov	r2, r0
 800a86a:	b918      	cbnz	r0, 800a874 <__mdiff+0x60>
 800a86c:	f240 2145 	movw	r1, #581	@ 0x245
 800a870:	4b30      	ldr	r3, [pc, #192]	@ (800a934 <__mdiff+0x120>)
 800a872:	e7e3      	b.n	800a83c <__mdiff+0x28>
 800a874:	f100 0b14 	add.w	fp, r0, #20
 800a878:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a87c:	f109 0310 	add.w	r3, r9, #16
 800a880:	60c5      	str	r5, [r0, #12]
 800a882:	f04f 0c00 	mov.w	ip, #0
 800a886:	f109 0514 	add.w	r5, r9, #20
 800a88a:	46d9      	mov	r9, fp
 800a88c:	6926      	ldr	r6, [r4, #16]
 800a88e:	f104 0e14 	add.w	lr, r4, #20
 800a892:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a896:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8a6:	b281      	uxth	r1, r0
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	fa1f f38a 	uxth.w	r3, sl
 800a8ae:	1a5b      	subs	r3, r3, r1
 800a8b0:	0c00      	lsrs	r0, r0, #16
 800a8b2:	4463      	add	r3, ip
 800a8b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8b8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8c2:	4576      	cmp	r6, lr
 800a8c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8c8:	f849 3b04 	str.w	r3, [r9], #4
 800a8cc:	d8e6      	bhi.n	800a89c <__mdiff+0x88>
 800a8ce:	1b33      	subs	r3, r6, r4
 800a8d0:	3b15      	subs	r3, #21
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	3415      	adds	r4, #21
 800a8d8:	3304      	adds	r3, #4
 800a8da:	42a6      	cmp	r6, r4
 800a8dc:	bf38      	it	cc
 800a8de:	2304      	movcc	r3, #4
 800a8e0:	441d      	add	r5, r3
 800a8e2:	445b      	add	r3, fp
 800a8e4:	461e      	mov	r6, r3
 800a8e6:	462c      	mov	r4, r5
 800a8e8:	4544      	cmp	r4, r8
 800a8ea:	d30e      	bcc.n	800a90a <__mdiff+0xf6>
 800a8ec:	f108 0103 	add.w	r1, r8, #3
 800a8f0:	1b49      	subs	r1, r1, r5
 800a8f2:	f021 0103 	bic.w	r1, r1, #3
 800a8f6:	3d03      	subs	r5, #3
 800a8f8:	45a8      	cmp	r8, r5
 800a8fa:	bf38      	it	cc
 800a8fc:	2100      	movcc	r1, #0
 800a8fe:	440b      	add	r3, r1
 800a900:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a904:	b199      	cbz	r1, 800a92e <__mdiff+0x11a>
 800a906:	6117      	str	r7, [r2, #16]
 800a908:	e79e      	b.n	800a848 <__mdiff+0x34>
 800a90a:	46e6      	mov	lr, ip
 800a90c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a910:	fa1f fc81 	uxth.w	ip, r1
 800a914:	44f4      	add	ip, lr
 800a916:	0c08      	lsrs	r0, r1, #16
 800a918:	4471      	add	r1, lr
 800a91a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a91e:	b289      	uxth	r1, r1
 800a920:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a928:	f846 1b04 	str.w	r1, [r6], #4
 800a92c:	e7dc      	b.n	800a8e8 <__mdiff+0xd4>
 800a92e:	3f01      	subs	r7, #1
 800a930:	e7e6      	b.n	800a900 <__mdiff+0xec>
 800a932:	bf00      	nop
 800a934:	0800b95a 	.word	0x0800b95a
 800a938:	0800b96b 	.word	0x0800b96b

0800a93c <__d2b>:
 800a93c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a940:	2101      	movs	r1, #1
 800a942:	4690      	mov	r8, r2
 800a944:	4699      	mov	r9, r3
 800a946:	9e08      	ldr	r6, [sp, #32]
 800a948:	f7ff fcd0 	bl	800a2ec <_Balloc>
 800a94c:	4604      	mov	r4, r0
 800a94e:	b930      	cbnz	r0, 800a95e <__d2b+0x22>
 800a950:	4602      	mov	r2, r0
 800a952:	f240 310f 	movw	r1, #783	@ 0x30f
 800a956:	4b23      	ldr	r3, [pc, #140]	@ (800a9e4 <__d2b+0xa8>)
 800a958:	4823      	ldr	r0, [pc, #140]	@ (800a9e8 <__d2b+0xac>)
 800a95a:	f000 f8ff 	bl	800ab5c <__assert_func>
 800a95e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a962:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a966:	b10d      	cbz	r5, 800a96c <__d2b+0x30>
 800a968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	f1b8 0300 	subs.w	r3, r8, #0
 800a972:	d024      	beq.n	800a9be <__d2b+0x82>
 800a974:	4668      	mov	r0, sp
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	f7ff fd7f 	bl	800a47a <__lo0bits>
 800a97c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a980:	b1d8      	cbz	r0, 800a9ba <__d2b+0x7e>
 800a982:	f1c0 0320 	rsb	r3, r0, #32
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	430b      	orrs	r3, r1
 800a98c:	40c2      	lsrs	r2, r0
 800a98e:	6163      	str	r3, [r4, #20]
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	bf0c      	ite	eq
 800a998:	2201      	moveq	r2, #1
 800a99a:	2202      	movne	r2, #2
 800a99c:	61a3      	str	r3, [r4, #24]
 800a99e:	6122      	str	r2, [r4, #16]
 800a9a0:	b1ad      	cbz	r5, 800a9ce <__d2b+0x92>
 800a9a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9a6:	4405      	add	r5, r0
 800a9a8:	6035      	str	r5, [r6, #0]
 800a9aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b0:	6018      	str	r0, [r3, #0]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	b002      	add	sp, #8
 800a9b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a9ba:	6161      	str	r1, [r4, #20]
 800a9bc:	e7e9      	b.n	800a992 <__d2b+0x56>
 800a9be:	a801      	add	r0, sp, #4
 800a9c0:	f7ff fd5b 	bl	800a47a <__lo0bits>
 800a9c4:	9b01      	ldr	r3, [sp, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	6163      	str	r3, [r4, #20]
 800a9ca:	3020      	adds	r0, #32
 800a9cc:	e7e7      	b.n	800a99e <__d2b+0x62>
 800a9ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9d6:	6030      	str	r0, [r6, #0]
 800a9d8:	6918      	ldr	r0, [r3, #16]
 800a9da:	f7ff fd2f 	bl	800a43c <__hi0bits>
 800a9de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9e2:	e7e4      	b.n	800a9ae <__d2b+0x72>
 800a9e4:	0800b95a 	.word	0x0800b95a
 800a9e8:	0800b96b 	.word	0x0800b96b

0800a9ec <__sflush_r>:
 800a9ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	0716      	lsls	r6, r2, #28
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	d454      	bmi.n	800aaa4 <__sflush_r+0xb8>
 800a9fa:	684b      	ldr	r3, [r1, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc02      	bgt.n	800aa06 <__sflush_r+0x1a>
 800aa00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd48      	ble.n	800aa98 <__sflush_r+0xac>
 800aa06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa08:	2e00      	cmp	r6, #0
 800aa0a:	d045      	beq.n	800aa98 <__sflush_r+0xac>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa12:	682f      	ldr	r7, [r5, #0]
 800aa14:	6a21      	ldr	r1, [r4, #32]
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	d030      	beq.n	800aa7c <__sflush_r+0x90>
 800aa1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	0759      	lsls	r1, r3, #29
 800aa20:	d505      	bpl.n	800aa2e <__sflush_r+0x42>
 800aa22:	6863      	ldr	r3, [r4, #4]
 800aa24:	1ad2      	subs	r2, r2, r3
 800aa26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa28:	b10b      	cbz	r3, 800aa2e <__sflush_r+0x42>
 800aa2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa2c:	1ad2      	subs	r2, r2, r3
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa34:	6a21      	ldr	r1, [r4, #32]
 800aa36:	47b0      	blx	r6
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	d106      	bne.n	800aa4c <__sflush_r+0x60>
 800aa3e:	6829      	ldr	r1, [r5, #0]
 800aa40:	291d      	cmp	r1, #29
 800aa42:	d82b      	bhi.n	800aa9c <__sflush_r+0xb0>
 800aa44:	4a28      	ldr	r2, [pc, #160]	@ (800aae8 <__sflush_r+0xfc>)
 800aa46:	410a      	asrs	r2, r1
 800aa48:	07d6      	lsls	r6, r2, #31
 800aa4a:	d427      	bmi.n	800aa9c <__sflush_r+0xb0>
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	6062      	str	r2, [r4, #4]
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	04d9      	lsls	r1, r3, #19
 800aa54:	6022      	str	r2, [r4, #0]
 800aa56:	d504      	bpl.n	800aa62 <__sflush_r+0x76>
 800aa58:	1c42      	adds	r2, r0, #1
 800aa5a:	d101      	bne.n	800aa60 <__sflush_r+0x74>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b903      	cbnz	r3, 800aa62 <__sflush_r+0x76>
 800aa60:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa64:	602f      	str	r7, [r5, #0]
 800aa66:	b1b9      	cbz	r1, 800aa98 <__sflush_r+0xac>
 800aa68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa6c:	4299      	cmp	r1, r3
 800aa6e:	d002      	beq.n	800aa76 <__sflush_r+0x8a>
 800aa70:	4628      	mov	r0, r5
 800aa72:	f7ff fb3d 	bl	800a0f0 <_free_r>
 800aa76:	2300      	movs	r3, #0
 800aa78:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa7a:	e00d      	b.n	800aa98 <__sflush_r+0xac>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b0      	blx	r6
 800aa82:	4602      	mov	r2, r0
 800aa84:	1c50      	adds	r0, r2, #1
 800aa86:	d1c9      	bne.n	800aa1c <__sflush_r+0x30>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c6      	beq.n	800aa1c <__sflush_r+0x30>
 800aa8e:	2b1d      	cmp	r3, #29
 800aa90:	d001      	beq.n	800aa96 <__sflush_r+0xaa>
 800aa92:	2b16      	cmp	r3, #22
 800aa94:	d11d      	bne.n	800aad2 <__sflush_r+0xe6>
 800aa96:	602f      	str	r7, [r5, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e021      	b.n	800aae0 <__sflush_r+0xf4>
 800aa9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaa0:	b21b      	sxth	r3, r3
 800aaa2:	e01a      	b.n	800aada <__sflush_r+0xee>
 800aaa4:	690f      	ldr	r7, [r1, #16]
 800aaa6:	2f00      	cmp	r7, #0
 800aaa8:	d0f6      	beq.n	800aa98 <__sflush_r+0xac>
 800aaaa:	0793      	lsls	r3, r2, #30
 800aaac:	bf18      	it	ne
 800aaae:	2300      	movne	r3, #0
 800aab0:	680e      	ldr	r6, [r1, #0]
 800aab2:	bf08      	it	eq
 800aab4:	694b      	ldreq	r3, [r1, #20]
 800aab6:	1bf6      	subs	r6, r6, r7
 800aab8:	600f      	str	r7, [r1, #0]
 800aaba:	608b      	str	r3, [r1, #8]
 800aabc:	2e00      	cmp	r6, #0
 800aabe:	ddeb      	ble.n	800aa98 <__sflush_r+0xac>
 800aac0:	4633      	mov	r3, r6
 800aac2:	463a      	mov	r2, r7
 800aac4:	4628      	mov	r0, r5
 800aac6:	6a21      	ldr	r1, [r4, #32]
 800aac8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aacc:	47e0      	blx	ip
 800aace:	2800      	cmp	r0, #0
 800aad0:	dc07      	bgt.n	800aae2 <__sflush_r+0xf6>
 800aad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae2:	4407      	add	r7, r0
 800aae4:	1a36      	subs	r6, r6, r0
 800aae6:	e7e9      	b.n	800aabc <__sflush_r+0xd0>
 800aae8:	dfbffffe 	.word	0xdfbffffe

0800aaec <_fflush_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b913      	cbnz	r3, 800aafc <_fflush_r+0x10>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	b118      	cbz	r0, 800ab06 <_fflush_r+0x1a>
 800aafe:	6a03      	ldr	r3, [r0, #32]
 800ab00:	b90b      	cbnz	r3, 800ab06 <_fflush_r+0x1a>
 800ab02:	f7fe fb8f 	bl	8009224 <__sinit>
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f3      	beq.n	800aaf6 <_fflush_r+0xa>
 800ab0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab10:	07d0      	lsls	r0, r2, #31
 800ab12:	d404      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab14:	0599      	lsls	r1, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab1a:	f7fe fc7a 	bl	8009412 <__retarget_lock_acquire_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4621      	mov	r1, r4
 800ab22:	f7ff ff63 	bl	800a9ec <__sflush_r>
 800ab26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab28:	4605      	mov	r5, r0
 800ab2a:	07da      	lsls	r2, r3, #31
 800ab2c:	d4e4      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	d4e1      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab36:	f7fe fc6d 	bl	8009414 <__retarget_lock_release_recursive>
 800ab3a:	e7dd      	b.n	800aaf8 <_fflush_r+0xc>

0800ab3c <_sbrk_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4d05      	ldr	r5, [pc, #20]	@ (800ab58 <_sbrk_r+0x1c>)
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7f9 fbf8 	bl	800433c <_sbrk>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_sbrk_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_sbrk_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	2000082c 	.word	0x2000082c

0800ab5c <__assert_func>:
 800ab5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab5e:	4614      	mov	r4, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4b09      	ldr	r3, [pc, #36]	@ (800ab88 <__assert_func+0x2c>)
 800ab64:	4605      	mov	r5, r0
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68d8      	ldr	r0, [r3, #12]
 800ab6a:	b954      	cbnz	r4, 800ab82 <__assert_func+0x26>
 800ab6c:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <__assert_func+0x30>)
 800ab6e:	461c      	mov	r4, r3
 800ab70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab74:	9100      	str	r1, [sp, #0]
 800ab76:	462b      	mov	r3, r5
 800ab78:	4905      	ldr	r1, [pc, #20]	@ (800ab90 <__assert_func+0x34>)
 800ab7a:	f000 f841 	bl	800ac00 <fiprintf>
 800ab7e:	f000 f851 	bl	800ac24 <abort>
 800ab82:	4b04      	ldr	r3, [pc, #16]	@ (800ab94 <__assert_func+0x38>)
 800ab84:	e7f4      	b.n	800ab70 <__assert_func+0x14>
 800ab86:	bf00      	nop
 800ab88:	2000001c 	.word	0x2000001c
 800ab8c:	0800bb05 	.word	0x0800bb05
 800ab90:	0800bad7 	.word	0x0800bad7
 800ab94:	0800baca 	.word	0x0800baca

0800ab98 <_calloc_r>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	fba1 5402 	umull	r5, r4, r1, r2
 800ab9e:	b93c      	cbnz	r4, 800abb0 <_calloc_r+0x18>
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7ff fb17 	bl	800a1d4 <_malloc_r>
 800aba6:	4606      	mov	r6, r0
 800aba8:	b928      	cbnz	r0, 800abb6 <_calloc_r+0x1e>
 800abaa:	2600      	movs	r6, #0
 800abac:	4630      	mov	r0, r6
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	220c      	movs	r2, #12
 800abb2:	6002      	str	r2, [r0, #0]
 800abb4:	e7f9      	b.n	800abaa <_calloc_r+0x12>
 800abb6:	462a      	mov	r2, r5
 800abb8:	4621      	mov	r1, r4
 800abba:	f7fe fbac 	bl	8009316 <memset>
 800abbe:	e7f5      	b.n	800abac <_calloc_r+0x14>

0800abc0 <__ascii_mbtowc>:
 800abc0:	b082      	sub	sp, #8
 800abc2:	b901      	cbnz	r1, 800abc6 <__ascii_mbtowc+0x6>
 800abc4:	a901      	add	r1, sp, #4
 800abc6:	b142      	cbz	r2, 800abda <__ascii_mbtowc+0x1a>
 800abc8:	b14b      	cbz	r3, 800abde <__ascii_mbtowc+0x1e>
 800abca:	7813      	ldrb	r3, [r2, #0]
 800abcc:	600b      	str	r3, [r1, #0]
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	1e10      	subs	r0, r2, #0
 800abd2:	bf18      	it	ne
 800abd4:	2001      	movne	r0, #1
 800abd6:	b002      	add	sp, #8
 800abd8:	4770      	bx	lr
 800abda:	4610      	mov	r0, r2
 800abdc:	e7fb      	b.n	800abd6 <__ascii_mbtowc+0x16>
 800abde:	f06f 0001 	mvn.w	r0, #1
 800abe2:	e7f8      	b.n	800abd6 <__ascii_mbtowc+0x16>

0800abe4 <__ascii_wctomb>:
 800abe4:	4603      	mov	r3, r0
 800abe6:	4608      	mov	r0, r1
 800abe8:	b141      	cbz	r1, 800abfc <__ascii_wctomb+0x18>
 800abea:	2aff      	cmp	r2, #255	@ 0xff
 800abec:	d904      	bls.n	800abf8 <__ascii_wctomb+0x14>
 800abee:	228a      	movs	r2, #138	@ 0x8a
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	4770      	bx	lr
 800abf8:	2001      	movs	r0, #1
 800abfa:	700a      	strb	r2, [r1, #0]
 800abfc:	4770      	bx	lr
	...

0800ac00 <fiprintf>:
 800ac00:	b40e      	push	{r1, r2, r3}
 800ac02:	b503      	push	{r0, r1, lr}
 800ac04:	4601      	mov	r1, r0
 800ac06:	ab03      	add	r3, sp, #12
 800ac08:	4805      	ldr	r0, [pc, #20]	@ (800ac20 <fiprintf+0x20>)
 800ac0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0e:	6800      	ldr	r0, [r0, #0]
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	f000 f835 	bl	800ac80 <_vfiprintf_r>
 800ac16:	b002      	add	sp, #8
 800ac18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac1c:	b003      	add	sp, #12
 800ac1e:	4770      	bx	lr
 800ac20:	2000001c 	.word	0x2000001c

0800ac24 <abort>:
 800ac24:	2006      	movs	r0, #6
 800ac26:	b508      	push	{r3, lr}
 800ac28:	f000 f9fe 	bl	800b028 <raise>
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	f7f9 fb10 	bl	8004252 <_exit>

0800ac32 <__sfputc_r>:
 800ac32:	6893      	ldr	r3, [r2, #8]
 800ac34:	b410      	push	{r4}
 800ac36:	3b01      	subs	r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	6093      	str	r3, [r2, #8]
 800ac3c:	da07      	bge.n	800ac4e <__sfputc_r+0x1c>
 800ac3e:	6994      	ldr	r4, [r2, #24]
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	db01      	blt.n	800ac48 <__sfputc_r+0x16>
 800ac44:	290a      	cmp	r1, #10
 800ac46:	d102      	bne.n	800ac4e <__sfputc_r+0x1c>
 800ac48:	bc10      	pop	{r4}
 800ac4a:	f000 b931 	b.w	800aeb0 <__swbuf_r>
 800ac4e:	6813      	ldr	r3, [r2, #0]
 800ac50:	1c58      	adds	r0, r3, #1
 800ac52:	6010      	str	r0, [r2, #0]
 800ac54:	7019      	strb	r1, [r3, #0]
 800ac56:	4608      	mov	r0, r1
 800ac58:	bc10      	pop	{r4}
 800ac5a:	4770      	bx	lr

0800ac5c <__sfputs_r>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460f      	mov	r7, r1
 800ac62:	4614      	mov	r4, r2
 800ac64:	18d5      	adds	r5, r2, r3
 800ac66:	42ac      	cmp	r4, r5
 800ac68:	d101      	bne.n	800ac6e <__sfputs_r+0x12>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	e007      	b.n	800ac7e <__sfputs_r+0x22>
 800ac6e:	463a      	mov	r2, r7
 800ac70:	4630      	mov	r0, r6
 800ac72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac76:	f7ff ffdc 	bl	800ac32 <__sfputc_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	d1f3      	bne.n	800ac66 <__sfputs_r+0xa>
 800ac7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac80 <_vfiprintf_r>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	460d      	mov	r5, r1
 800ac86:	4614      	mov	r4, r2
 800ac88:	4698      	mov	r8, r3
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	b09d      	sub	sp, #116	@ 0x74
 800ac8e:	b118      	cbz	r0, 800ac98 <_vfiprintf_r+0x18>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <_vfiprintf_r+0x18>
 800ac94:	f7fe fac6 	bl	8009224 <__sinit>
 800ac98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac9a:	07d9      	lsls	r1, r3, #31
 800ac9c:	d405      	bmi.n	800acaa <_vfiprintf_r+0x2a>
 800ac9e:	89ab      	ldrh	r3, [r5, #12]
 800aca0:	059a      	lsls	r2, r3, #22
 800aca2:	d402      	bmi.n	800acaa <_vfiprintf_r+0x2a>
 800aca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aca6:	f7fe fbb4 	bl	8009412 <__retarget_lock_acquire_recursive>
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	071b      	lsls	r3, r3, #28
 800acae:	d501      	bpl.n	800acb4 <_vfiprintf_r+0x34>
 800acb0:	692b      	ldr	r3, [r5, #16]
 800acb2:	b99b      	cbnz	r3, 800acdc <_vfiprintf_r+0x5c>
 800acb4:	4629      	mov	r1, r5
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 f938 	bl	800af2c <__swsetup_r>
 800acbc:	b170      	cbz	r0, 800acdc <_vfiprintf_r+0x5c>
 800acbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acc0:	07dc      	lsls	r4, r3, #31
 800acc2:	d504      	bpl.n	800acce <_vfiprintf_r+0x4e>
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	b01d      	add	sp, #116	@ 0x74
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	89ab      	ldrh	r3, [r5, #12]
 800acd0:	0598      	lsls	r0, r3, #22
 800acd2:	d4f7      	bmi.n	800acc4 <_vfiprintf_r+0x44>
 800acd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acd6:	f7fe fb9d 	bl	8009414 <__retarget_lock_release_recursive>
 800acda:	e7f3      	b.n	800acc4 <_vfiprintf_r+0x44>
 800acdc:	2300      	movs	r3, #0
 800acde:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace0:	2320      	movs	r3, #32
 800ace2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ace6:	2330      	movs	r3, #48	@ 0x30
 800ace8:	f04f 0901 	mov.w	r9, #1
 800acec:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae9c <_vfiprintf_r+0x21c>
 800acf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acf8:	4623      	mov	r3, r4
 800acfa:	469a      	mov	sl, r3
 800acfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad00:	b10a      	cbz	r2, 800ad06 <_vfiprintf_r+0x86>
 800ad02:	2a25      	cmp	r2, #37	@ 0x25
 800ad04:	d1f9      	bne.n	800acfa <_vfiprintf_r+0x7a>
 800ad06:	ebba 0b04 	subs.w	fp, sl, r4
 800ad0a:	d00b      	beq.n	800ad24 <_vfiprintf_r+0xa4>
 800ad0c:	465b      	mov	r3, fp
 800ad0e:	4622      	mov	r2, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7ff ffa2 	bl	800ac5c <__sfputs_r>
 800ad18:	3001      	adds	r0, #1
 800ad1a:	f000 80a7 	beq.w	800ae6c <_vfiprintf_r+0x1ec>
 800ad1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad20:	445a      	add	r2, fp
 800ad22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad24:	f89a 3000 	ldrb.w	r3, [sl]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 809f 	beq.w	800ae6c <_vfiprintf_r+0x1ec>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f04f 32ff 	mov.w	r2, #4294967295
 800ad34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad38:	f10a 0a01 	add.w	sl, sl, #1
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	9307      	str	r3, [sp, #28]
 800ad40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad46:	4654      	mov	r4, sl
 800ad48:	2205      	movs	r2, #5
 800ad4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4e:	4853      	ldr	r0, [pc, #332]	@ (800ae9c <_vfiprintf_r+0x21c>)
 800ad50:	f7fe fb61 	bl	8009416 <memchr>
 800ad54:	9a04      	ldr	r2, [sp, #16]
 800ad56:	b9d8      	cbnz	r0, 800ad90 <_vfiprintf_r+0x110>
 800ad58:	06d1      	lsls	r1, r2, #27
 800ad5a:	bf44      	itt	mi
 800ad5c:	2320      	movmi	r3, #32
 800ad5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad62:	0713      	lsls	r3, r2, #28
 800ad64:	bf44      	itt	mi
 800ad66:	232b      	movmi	r3, #43	@ 0x2b
 800ad68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad72:	d015      	beq.n	800ada0 <_vfiprintf_r+0x120>
 800ad74:	4654      	mov	r4, sl
 800ad76:	2000      	movs	r0, #0
 800ad78:	f04f 0c0a 	mov.w	ip, #10
 800ad7c:	9a07      	ldr	r2, [sp, #28]
 800ad7e:	4621      	mov	r1, r4
 800ad80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad84:	3b30      	subs	r3, #48	@ 0x30
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	d94b      	bls.n	800ae22 <_vfiprintf_r+0x1a2>
 800ad8a:	b1b0      	cbz	r0, 800adba <_vfiprintf_r+0x13a>
 800ad8c:	9207      	str	r2, [sp, #28]
 800ad8e:	e014      	b.n	800adba <_vfiprintf_r+0x13a>
 800ad90:	eba0 0308 	sub.w	r3, r0, r8
 800ad94:	fa09 f303 	lsl.w	r3, r9, r3
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	46a2      	mov	sl, r4
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	e7d2      	b.n	800ad46 <_vfiprintf_r+0xc6>
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	1d19      	adds	r1, r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	9103      	str	r1, [sp, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bfbb      	ittet	lt
 800adac:	425b      	neglt	r3, r3
 800adae:	f042 0202 	orrlt.w	r2, r2, #2
 800adb2:	9307      	strge	r3, [sp, #28]
 800adb4:	9307      	strlt	r3, [sp, #28]
 800adb6:	bfb8      	it	lt
 800adb8:	9204      	strlt	r2, [sp, #16]
 800adba:	7823      	ldrb	r3, [r4, #0]
 800adbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800adbe:	d10a      	bne.n	800add6 <_vfiprintf_r+0x156>
 800adc0:	7863      	ldrb	r3, [r4, #1]
 800adc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc4:	d132      	bne.n	800ae2c <_vfiprintf_r+0x1ac>
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	3402      	adds	r4, #2
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	9203      	str	r2, [sp, #12]
 800add0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800aea0 <_vfiprintf_r+0x220>
 800adda:	2203      	movs	r2, #3
 800addc:	4650      	mov	r0, sl
 800adde:	7821      	ldrb	r1, [r4, #0]
 800ade0:	f7fe fb19 	bl	8009416 <memchr>
 800ade4:	b138      	cbz	r0, 800adf6 <_vfiprintf_r+0x176>
 800ade6:	2240      	movs	r2, #64	@ 0x40
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	eba0 000a 	sub.w	r0, r0, sl
 800adee:	4082      	lsls	r2, r0
 800adf0:	4313      	orrs	r3, r2
 800adf2:	3401      	adds	r4, #1
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfa:	2206      	movs	r2, #6
 800adfc:	4829      	ldr	r0, [pc, #164]	@ (800aea4 <_vfiprintf_r+0x224>)
 800adfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae02:	f7fe fb08 	bl	8009416 <memchr>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d03f      	beq.n	800ae8a <_vfiprintf_r+0x20a>
 800ae0a:	4b27      	ldr	r3, [pc, #156]	@ (800aea8 <_vfiprintf_r+0x228>)
 800ae0c:	bb1b      	cbnz	r3, 800ae56 <_vfiprintf_r+0x1d6>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	3307      	adds	r3, #7
 800ae12:	f023 0307 	bic.w	r3, r3, #7
 800ae16:	3308      	adds	r3, #8
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	443b      	add	r3, r7
 800ae1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae20:	e76a      	b.n	800acf8 <_vfiprintf_r+0x78>
 800ae22:	460c      	mov	r4, r1
 800ae24:	2001      	movs	r0, #1
 800ae26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae2a:	e7a8      	b.n	800ad7e <_vfiprintf_r+0xfe>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f04f 0c0a 	mov.w	ip, #10
 800ae32:	4619      	mov	r1, r3
 800ae34:	3401      	adds	r4, #1
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae3e:	3a30      	subs	r2, #48	@ 0x30
 800ae40:	2a09      	cmp	r2, #9
 800ae42:	d903      	bls.n	800ae4c <_vfiprintf_r+0x1cc>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d0c6      	beq.n	800add6 <_vfiprintf_r+0x156>
 800ae48:	9105      	str	r1, [sp, #20]
 800ae4a:	e7c4      	b.n	800add6 <_vfiprintf_r+0x156>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	2301      	movs	r3, #1
 800ae50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae54:	e7f0      	b.n	800ae38 <_vfiprintf_r+0x1b8>
 800ae56:	ab03      	add	r3, sp, #12
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4b13      	ldr	r3, [pc, #76]	@ (800aeac <_vfiprintf_r+0x22c>)
 800ae60:	a904      	add	r1, sp, #16
 800ae62:	f7fd fd95 	bl	8008990 <_printf_float>
 800ae66:	4607      	mov	r7, r0
 800ae68:	1c78      	adds	r0, r7, #1
 800ae6a:	d1d6      	bne.n	800ae1a <_vfiprintf_r+0x19a>
 800ae6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae6e:	07d9      	lsls	r1, r3, #31
 800ae70:	d405      	bmi.n	800ae7e <_vfiprintf_r+0x1fe>
 800ae72:	89ab      	ldrh	r3, [r5, #12]
 800ae74:	059a      	lsls	r2, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_vfiprintf_r+0x1fe>
 800ae78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae7a:	f7fe facb 	bl	8009414 <__retarget_lock_release_recursive>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	065b      	lsls	r3, r3, #25
 800ae82:	f53f af1f 	bmi.w	800acc4 <_vfiprintf_r+0x44>
 800ae86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae88:	e71e      	b.n	800acc8 <_vfiprintf_r+0x48>
 800ae8a:	ab03      	add	r3, sp, #12
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	462a      	mov	r2, r5
 800ae90:	4630      	mov	r0, r6
 800ae92:	4b06      	ldr	r3, [pc, #24]	@ (800aeac <_vfiprintf_r+0x22c>)
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	f7fe f819 	bl	8008ecc <_printf_i>
 800ae9a:	e7e4      	b.n	800ae66 <_vfiprintf_r+0x1e6>
 800ae9c:	0800bc07 	.word	0x0800bc07
 800aea0:	0800bc0d 	.word	0x0800bc0d
 800aea4:	0800bc11 	.word	0x0800bc11
 800aea8:	08008991 	.word	0x08008991
 800aeac:	0800ac5d 	.word	0x0800ac5d

0800aeb0 <__swbuf_r>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	460e      	mov	r6, r1
 800aeb4:	4614      	mov	r4, r2
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	b118      	cbz	r0, 800aec2 <__swbuf_r+0x12>
 800aeba:	6a03      	ldr	r3, [r0, #32]
 800aebc:	b90b      	cbnz	r3, 800aec2 <__swbuf_r+0x12>
 800aebe:	f7fe f9b1 	bl	8009224 <__sinit>
 800aec2:	69a3      	ldr	r3, [r4, #24]
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	071a      	lsls	r2, r3, #28
 800aeca:	d501      	bpl.n	800aed0 <__swbuf_r+0x20>
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	b943      	cbnz	r3, 800aee2 <__swbuf_r+0x32>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 f82a 	bl	800af2c <__swsetup_r>
 800aed8:	b118      	cbz	r0, 800aee2 <__swbuf_r+0x32>
 800aeda:	f04f 37ff 	mov.w	r7, #4294967295
 800aede:	4638      	mov	r0, r7
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	b2f6      	uxtb	r6, r6
 800aee8:	1a98      	subs	r0, r3, r2
 800aeea:	6963      	ldr	r3, [r4, #20]
 800aeec:	4637      	mov	r7, r6
 800aeee:	4283      	cmp	r3, r0
 800aef0:	dc05      	bgt.n	800aefe <__swbuf_r+0x4e>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	f7ff fdf9 	bl	800aaec <_fflush_r>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1ed      	bne.n	800aeda <__swbuf_r+0x2a>
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	3b01      	subs	r3, #1
 800af02:	60a3      	str	r3, [r4, #8]
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	6022      	str	r2, [r4, #0]
 800af0a:	701e      	strb	r6, [r3, #0]
 800af0c:	6962      	ldr	r2, [r4, #20]
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	429a      	cmp	r2, r3
 800af12:	d004      	beq.n	800af1e <__swbuf_r+0x6e>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	07db      	lsls	r3, r3, #31
 800af18:	d5e1      	bpl.n	800aede <__swbuf_r+0x2e>
 800af1a:	2e0a      	cmp	r6, #10
 800af1c:	d1df      	bne.n	800aede <__swbuf_r+0x2e>
 800af1e:	4621      	mov	r1, r4
 800af20:	4628      	mov	r0, r5
 800af22:	f7ff fde3 	bl	800aaec <_fflush_r>
 800af26:	2800      	cmp	r0, #0
 800af28:	d0d9      	beq.n	800aede <__swbuf_r+0x2e>
 800af2a:	e7d6      	b.n	800aeda <__swbuf_r+0x2a>

0800af2c <__swsetup_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4b29      	ldr	r3, [pc, #164]	@ (800afd4 <__swsetup_r+0xa8>)
 800af30:	4605      	mov	r5, r0
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	460c      	mov	r4, r1
 800af36:	b118      	cbz	r0, 800af40 <__swsetup_r+0x14>
 800af38:	6a03      	ldr	r3, [r0, #32]
 800af3a:	b90b      	cbnz	r3, 800af40 <__swsetup_r+0x14>
 800af3c:	f7fe f972 	bl	8009224 <__sinit>
 800af40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af44:	0719      	lsls	r1, r3, #28
 800af46:	d422      	bmi.n	800af8e <__swsetup_r+0x62>
 800af48:	06da      	lsls	r2, r3, #27
 800af4a:	d407      	bmi.n	800af5c <__swsetup_r+0x30>
 800af4c:	2209      	movs	r2, #9
 800af4e:	602a      	str	r2, [r5, #0]
 800af50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	e033      	b.n	800afc4 <__swsetup_r+0x98>
 800af5c:	0758      	lsls	r0, r3, #29
 800af5e:	d512      	bpl.n	800af86 <__swsetup_r+0x5a>
 800af60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af62:	b141      	cbz	r1, 800af76 <__swsetup_r+0x4a>
 800af64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af68:	4299      	cmp	r1, r3
 800af6a:	d002      	beq.n	800af72 <__swsetup_r+0x46>
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7ff f8bf 	bl	800a0f0 <_free_r>
 800af72:	2300      	movs	r3, #0
 800af74:	6363      	str	r3, [r4, #52]	@ 0x34
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	2300      	movs	r3, #0
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f043 0308 	orr.w	r3, r3, #8
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	b94b      	cbnz	r3, 800afa6 <__swsetup_r+0x7a>
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9c:	d003      	beq.n	800afa6 <__swsetup_r+0x7a>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4628      	mov	r0, r5
 800afa2:	f000 f882 	bl	800b0aa <__smakebuf_r>
 800afa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afaa:	f013 0201 	ands.w	r2, r3, #1
 800afae:	d00a      	beq.n	800afc6 <__swsetup_r+0x9a>
 800afb0:	2200      	movs	r2, #0
 800afb2:	60a2      	str	r2, [r4, #8]
 800afb4:	6962      	ldr	r2, [r4, #20]
 800afb6:	4252      	negs	r2, r2
 800afb8:	61a2      	str	r2, [r4, #24]
 800afba:	6922      	ldr	r2, [r4, #16]
 800afbc:	b942      	cbnz	r2, 800afd0 <__swsetup_r+0xa4>
 800afbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afc2:	d1c5      	bne.n	800af50 <__swsetup_r+0x24>
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
 800afc6:	0799      	lsls	r1, r3, #30
 800afc8:	bf58      	it	pl
 800afca:	6962      	ldrpl	r2, [r4, #20]
 800afcc:	60a2      	str	r2, [r4, #8]
 800afce:	e7f4      	b.n	800afba <__swsetup_r+0x8e>
 800afd0:	2000      	movs	r0, #0
 800afd2:	e7f7      	b.n	800afc4 <__swsetup_r+0x98>
 800afd4:	2000001c 	.word	0x2000001c

0800afd8 <_raise_r>:
 800afd8:	291f      	cmp	r1, #31
 800afda:	b538      	push	{r3, r4, r5, lr}
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	d904      	bls.n	800afec <_raise_r+0x14>
 800afe2:	2316      	movs	r3, #22
 800afe4:	6003      	str	r3, [r0, #0]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800afee:	b112      	cbz	r2, 800aff6 <_raise_r+0x1e>
 800aff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aff4:	b94b      	cbnz	r3, 800b00a <_raise_r+0x32>
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f830 	bl	800b05c <_getpid_r>
 800affc:	4622      	mov	r2, r4
 800affe:	4601      	mov	r1, r0
 800b000:	4628      	mov	r0, r5
 800b002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b006:	f000 b817 	b.w	800b038 <_kill_r>
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d00a      	beq.n	800b024 <_raise_r+0x4c>
 800b00e:	1c59      	adds	r1, r3, #1
 800b010:	d103      	bne.n	800b01a <_raise_r+0x42>
 800b012:	2316      	movs	r3, #22
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	2001      	movs	r0, #1
 800b018:	e7e7      	b.n	800afea <_raise_r+0x12>
 800b01a:	2100      	movs	r1, #0
 800b01c:	4620      	mov	r0, r4
 800b01e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b022:	4798      	blx	r3
 800b024:	2000      	movs	r0, #0
 800b026:	e7e0      	b.n	800afea <_raise_r+0x12>

0800b028 <raise>:
 800b028:	4b02      	ldr	r3, [pc, #8]	@ (800b034 <raise+0xc>)
 800b02a:	4601      	mov	r1, r0
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	f7ff bfd3 	b.w	800afd8 <_raise_r>
 800b032:	bf00      	nop
 800b034:	2000001c 	.word	0x2000001c

0800b038 <_kill_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	2300      	movs	r3, #0
 800b03c:	4d06      	ldr	r5, [pc, #24]	@ (800b058 <_kill_r+0x20>)
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	4611      	mov	r1, r2
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	f7f9 f8f4 	bl	8004232 <_kill>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	d102      	bne.n	800b054 <_kill_r+0x1c>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b103      	cbz	r3, 800b054 <_kill_r+0x1c>
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	bd38      	pop	{r3, r4, r5, pc}
 800b056:	bf00      	nop
 800b058:	2000082c 	.word	0x2000082c

0800b05c <_getpid_r>:
 800b05c:	f7f9 b8e2 	b.w	8004224 <_getpid>

0800b060 <__swhatbuf_r>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	460c      	mov	r4, r1
 800b064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b068:	4615      	mov	r5, r2
 800b06a:	2900      	cmp	r1, #0
 800b06c:	461e      	mov	r6, r3
 800b06e:	b096      	sub	sp, #88	@ 0x58
 800b070:	da0c      	bge.n	800b08c <__swhatbuf_r+0x2c>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	2100      	movs	r1, #0
 800b076:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b07a:	bf14      	ite	ne
 800b07c:	2340      	movne	r3, #64	@ 0x40
 800b07e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b082:	2000      	movs	r0, #0
 800b084:	6031      	str	r1, [r6, #0]
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	b016      	add	sp, #88	@ 0x58
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	466a      	mov	r2, sp
 800b08e:	f000 f849 	bl	800b124 <_fstat_r>
 800b092:	2800      	cmp	r0, #0
 800b094:	dbed      	blt.n	800b072 <__swhatbuf_r+0x12>
 800b096:	9901      	ldr	r1, [sp, #4]
 800b098:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b09c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0a0:	4259      	negs	r1, r3
 800b0a2:	4159      	adcs	r1, r3
 800b0a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0a8:	e7eb      	b.n	800b082 <__swhatbuf_r+0x22>

0800b0aa <__smakebuf_r>:
 800b0aa:	898b      	ldrh	r3, [r1, #12]
 800b0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ae:	079d      	lsls	r5, r3, #30
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	d507      	bpl.n	800b0c6 <__smakebuf_r+0x1c>
 800b0b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	6163      	str	r3, [r4, #20]
 800b0c2:	b003      	add	sp, #12
 800b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c6:	466a      	mov	r2, sp
 800b0c8:	ab01      	add	r3, sp, #4
 800b0ca:	f7ff ffc9 	bl	800b060 <__swhatbuf_r>
 800b0ce:	9f00      	ldr	r7, [sp, #0]
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff f87d 	bl	800a1d4 <_malloc_r>
 800b0da:	b948      	cbnz	r0, 800b0f0 <__smakebuf_r+0x46>
 800b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e0:	059a      	lsls	r2, r3, #22
 800b0e2:	d4ee      	bmi.n	800b0c2 <__smakebuf_r+0x18>
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	f043 0302 	orr.w	r3, r3, #2
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	e7e2      	b.n	800b0b6 <__smakebuf_r+0xc>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	9b01      	ldr	r3, [sp, #4]
 800b0fe:	6020      	str	r0, [r4, #0]
 800b100:	b15b      	cbz	r3, 800b11a <__smakebuf_r+0x70>
 800b102:	4630      	mov	r0, r6
 800b104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b108:	f000 f81e 	bl	800b148 <_isatty_r>
 800b10c:	b128      	cbz	r0, 800b11a <__smakebuf_r+0x70>
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	f023 0303 	bic.w	r3, r3, #3
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	431d      	orrs	r5, r3
 800b11e:	81a5      	strh	r5, [r4, #12]
 800b120:	e7cf      	b.n	800b0c2 <__smakebuf_r+0x18>
	...

0800b124 <_fstat_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	2300      	movs	r3, #0
 800b128:	4d06      	ldr	r5, [pc, #24]	@ (800b144 <_fstat_r+0x20>)
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f7f9 f8dd 	bl	80042f0 <_fstat>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d102      	bne.n	800b140 <_fstat_r+0x1c>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b103      	cbz	r3, 800b140 <_fstat_r+0x1c>
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	bd38      	pop	{r3, r4, r5, pc}
 800b142:	bf00      	nop
 800b144:	2000082c 	.word	0x2000082c

0800b148 <_isatty_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	2300      	movs	r3, #0
 800b14c:	4d05      	ldr	r5, [pc, #20]	@ (800b164 <_isatty_r+0x1c>)
 800b14e:	4604      	mov	r4, r0
 800b150:	4608      	mov	r0, r1
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f9 f8db 	bl	800430e <_isatty>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_isatty_r+0x1a>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_isatty_r+0x1a>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	2000082c 	.word	0x2000082c

0800b168 <asinf>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4604      	mov	r4, r0
 800b16c:	f000 f826 	bl	800b1bc <__ieee754_asinf>
 800b170:	4621      	mov	r1, r4
 800b172:	4605      	mov	r5, r0
 800b174:	4620      	mov	r0, r4
 800b176:	f7f5 ffab 	bl	80010d0 <__aeabi_fcmpun>
 800b17a:	b980      	cbnz	r0, 800b19e <asinf+0x36>
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 f815 	bl	800b1ac <fabsf>
 800b182:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b186:	f7f5 ff99 	bl	80010bc <__aeabi_fcmpgt>
 800b18a:	b140      	cbz	r0, 800b19e <asinf+0x36>
 800b18c:	f7fe f916 	bl	80093bc <__errno>
 800b190:	2321      	movs	r3, #33	@ 0x21
 800b192:	6003      	str	r3, [r0, #0]
 800b194:	4803      	ldr	r0, [pc, #12]	@ (800b1a4 <asinf+0x3c>)
 800b196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b19a:	f000 b80b 	b.w	800b1b4 <nanf>
 800b19e:	4628      	mov	r0, r5
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	0800bb05 	.word	0x0800bb05

0800b1a8 <atan2f>:
 800b1a8:	f000 b94a 	b.w	800b440 <__ieee754_atan2f>

0800b1ac <fabsf>:
 800b1ac:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b1b0:	4770      	bx	lr
	...

0800b1b4 <nanf>:
 800b1b4:	4800      	ldr	r0, [pc, #0]	@ (800b1b8 <nanf+0x4>)
 800b1b6:	4770      	bx	lr
 800b1b8:	7fc00000 	.word	0x7fc00000

0800b1bc <__ieee754_asinf>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b1c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	d10c      	bne.n	800b1e8 <__ieee754_asinf+0x2c>
 800b1ce:	498c      	ldr	r1, [pc, #560]	@ (800b400 <__ieee754_asinf+0x244>)
 800b1d0:	f7f5 fdb8 	bl	8000d44 <__aeabi_fmul>
 800b1d4:	498b      	ldr	r1, [pc, #556]	@ (800b404 <__ieee754_asinf+0x248>)
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f7f5 fdb3 	bl	8000d44 <__aeabi_fmul>
 800b1de:	4601      	mov	r1, r0
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f7f5 fca7 	bl	8000b34 <__addsf3>
 800b1e6:	e006      	b.n	800b1f6 <__ieee754_asinf+0x3a>
 800b1e8:	d909      	bls.n	800b1fe <__ieee754_asinf+0x42>
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	f7f5 fca0 	bl	8000b30 <__aeabi_fsub>
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	f7f5 fe5b 	bl	8000eac <__aeabi_fdiv>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	f1b8 5f7c 	cmp.w	r8, #1056964608	@ 0x3f000000
 800b202:	d20b      	bcs.n	800b21c <__ieee754_asinf+0x60>
 800b204:	f1b8 5f48 	cmp.w	r8, #838860800	@ 0x32000000
 800b208:	d273      	bcs.n	800b2f2 <__ieee754_asinf+0x136>
 800b20a:	497f      	ldr	r1, [pc, #508]	@ (800b408 <__ieee754_asinf+0x24c>)
 800b20c:	f7f5 fc92 	bl	8000b34 <__addsf3>
 800b210:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b214:	f7f5 ff52 	bl	80010bc <__aeabi_fcmpgt>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d1ed      	bne.n	800b1f8 <__ieee754_asinf+0x3c>
 800b21c:	4620      	mov	r0, r4
 800b21e:	f7ff ffc5 	bl	800b1ac <fabsf>
 800b222:	4601      	mov	r1, r0
 800b224:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b228:	f7f5 fc82 	bl	8000b30 <__aeabi_fsub>
 800b22c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800b230:	f7f5 fd88 	bl	8000d44 <__aeabi_fmul>
 800b234:	4606      	mov	r6, r0
 800b236:	4975      	ldr	r1, [pc, #468]	@ (800b40c <__ieee754_asinf+0x250>)
 800b238:	f7f5 fd84 	bl	8000d44 <__aeabi_fmul>
 800b23c:	4974      	ldr	r1, [pc, #464]	@ (800b410 <__ieee754_asinf+0x254>)
 800b23e:	f7f5 fc79 	bl	8000b34 <__addsf3>
 800b242:	4631      	mov	r1, r6
 800b244:	f7f5 fd7e 	bl	8000d44 <__aeabi_fmul>
 800b248:	4972      	ldr	r1, [pc, #456]	@ (800b414 <__ieee754_asinf+0x258>)
 800b24a:	f7f5 fc71 	bl	8000b30 <__aeabi_fsub>
 800b24e:	4631      	mov	r1, r6
 800b250:	f7f5 fd78 	bl	8000d44 <__aeabi_fmul>
 800b254:	4970      	ldr	r1, [pc, #448]	@ (800b418 <__ieee754_asinf+0x25c>)
 800b256:	f7f5 fc6d 	bl	8000b34 <__addsf3>
 800b25a:	4631      	mov	r1, r6
 800b25c:	f7f5 fd72 	bl	8000d44 <__aeabi_fmul>
 800b260:	496e      	ldr	r1, [pc, #440]	@ (800b41c <__ieee754_asinf+0x260>)
 800b262:	f7f5 fc65 	bl	8000b30 <__aeabi_fsub>
 800b266:	4631      	mov	r1, r6
 800b268:	f7f5 fd6c 	bl	8000d44 <__aeabi_fmul>
 800b26c:	496c      	ldr	r1, [pc, #432]	@ (800b420 <__ieee754_asinf+0x264>)
 800b26e:	f7f5 fc61 	bl	8000b34 <__addsf3>
 800b272:	4631      	mov	r1, r6
 800b274:	f7f5 fd66 	bl	8000d44 <__aeabi_fmul>
 800b278:	496a      	ldr	r1, [pc, #424]	@ (800b424 <__ieee754_asinf+0x268>)
 800b27a:	4681      	mov	r9, r0
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7f5 fd61 	bl	8000d44 <__aeabi_fmul>
 800b282:	4969      	ldr	r1, [pc, #420]	@ (800b428 <__ieee754_asinf+0x26c>)
 800b284:	f7f5 fc54 	bl	8000b30 <__aeabi_fsub>
 800b288:	4631      	mov	r1, r6
 800b28a:	f7f5 fd5b 	bl	8000d44 <__aeabi_fmul>
 800b28e:	4967      	ldr	r1, [pc, #412]	@ (800b42c <__ieee754_asinf+0x270>)
 800b290:	f7f5 fc50 	bl	8000b34 <__addsf3>
 800b294:	4631      	mov	r1, r6
 800b296:	f7f5 fd55 	bl	8000d44 <__aeabi_fmul>
 800b29a:	4965      	ldr	r1, [pc, #404]	@ (800b430 <__ieee754_asinf+0x274>)
 800b29c:	f7f5 fc48 	bl	8000b30 <__aeabi_fsub>
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	f7f5 fd4f 	bl	8000d44 <__aeabi_fmul>
 800b2a6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b2aa:	f7f5 fc43 	bl	8000b34 <__addsf3>
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f000 fa59 	bl	800b768 <__ieee754_sqrtf>
 800b2b6:	4b5f      	ldr	r3, [pc, #380]	@ (800b434 <__ieee754_asinf+0x278>)
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	4598      	cmp	r8, r3
 800b2bc:	d963      	bls.n	800b386 <__ieee754_asinf+0x1ca>
 800b2be:	4651      	mov	r1, sl
 800b2c0:	4648      	mov	r0, r9
 800b2c2:	f7f5 fdf3 	bl	8000eac <__aeabi_fdiv>
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	f7f5 fd3c 	bl	8000d44 <__aeabi_fmul>
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7f5 fc31 	bl	8000b34 <__addsf3>
 800b2d2:	4601      	mov	r1, r0
 800b2d4:	f7f5 fc2e 	bl	8000b34 <__addsf3>
 800b2d8:	4957      	ldr	r1, [pc, #348]	@ (800b438 <__ieee754_asinf+0x27c>)
 800b2da:	f7f5 fc2b 	bl	8000b34 <__addsf3>
 800b2de:	4601      	mov	r1, r0
 800b2e0:	4847      	ldr	r0, [pc, #284]	@ (800b400 <__ieee754_asinf+0x244>)
 800b2e2:	f7f5 fc25 	bl	8000b30 <__aeabi_fsub>
 800b2e6:	2d00      	cmp	r5, #0
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	bfd8      	it	le
 800b2ec:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800b2f0:	e782      	b.n	800b1f8 <__ieee754_asinf+0x3c>
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	f7f5 fd26 	bl	8000d44 <__aeabi_fmul>
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	4944      	ldr	r1, [pc, #272]	@ (800b40c <__ieee754_asinf+0x250>)
 800b2fc:	f7f5 fd22 	bl	8000d44 <__aeabi_fmul>
 800b300:	4943      	ldr	r1, [pc, #268]	@ (800b410 <__ieee754_asinf+0x254>)
 800b302:	f7f5 fc17 	bl	8000b34 <__addsf3>
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 fd1c 	bl	8000d44 <__aeabi_fmul>
 800b30c:	4941      	ldr	r1, [pc, #260]	@ (800b414 <__ieee754_asinf+0x258>)
 800b30e:	f7f5 fc0f 	bl	8000b30 <__aeabi_fsub>
 800b312:	4629      	mov	r1, r5
 800b314:	f7f5 fd16 	bl	8000d44 <__aeabi_fmul>
 800b318:	493f      	ldr	r1, [pc, #252]	@ (800b418 <__ieee754_asinf+0x25c>)
 800b31a:	f7f5 fc0b 	bl	8000b34 <__addsf3>
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fd10 	bl	8000d44 <__aeabi_fmul>
 800b324:	493d      	ldr	r1, [pc, #244]	@ (800b41c <__ieee754_asinf+0x260>)
 800b326:	f7f5 fc03 	bl	8000b30 <__aeabi_fsub>
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f5 fd0a 	bl	8000d44 <__aeabi_fmul>
 800b330:	493b      	ldr	r1, [pc, #236]	@ (800b420 <__ieee754_asinf+0x264>)
 800b332:	f7f5 fbff 	bl	8000b34 <__addsf3>
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 fd04 	bl	8000d44 <__aeabi_fmul>
 800b33c:	4939      	ldr	r1, [pc, #228]	@ (800b424 <__ieee754_asinf+0x268>)
 800b33e:	4606      	mov	r6, r0
 800b340:	4628      	mov	r0, r5
 800b342:	f7f5 fcff 	bl	8000d44 <__aeabi_fmul>
 800b346:	4938      	ldr	r1, [pc, #224]	@ (800b428 <__ieee754_asinf+0x26c>)
 800b348:	f7f5 fbf2 	bl	8000b30 <__aeabi_fsub>
 800b34c:	4629      	mov	r1, r5
 800b34e:	f7f5 fcf9 	bl	8000d44 <__aeabi_fmul>
 800b352:	4936      	ldr	r1, [pc, #216]	@ (800b42c <__ieee754_asinf+0x270>)
 800b354:	f7f5 fbee 	bl	8000b34 <__addsf3>
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 fcf3 	bl	8000d44 <__aeabi_fmul>
 800b35e:	4934      	ldr	r1, [pc, #208]	@ (800b430 <__ieee754_asinf+0x274>)
 800b360:	f7f5 fbe6 	bl	8000b30 <__aeabi_fsub>
 800b364:	4629      	mov	r1, r5
 800b366:	f7f5 fced 	bl	8000d44 <__aeabi_fmul>
 800b36a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b36e:	f7f5 fbe1 	bl	8000b34 <__addsf3>
 800b372:	4601      	mov	r1, r0
 800b374:	4630      	mov	r0, r6
 800b376:	f7f5 fd99 	bl	8000eac <__aeabi_fdiv>
 800b37a:	4621      	mov	r1, r4
 800b37c:	f7f5 fce2 	bl	8000d44 <__aeabi_fmul>
 800b380:	4601      	mov	r1, r0
 800b382:	4620      	mov	r0, r4
 800b384:	e72d      	b.n	800b1e2 <__ieee754_asinf+0x26>
 800b386:	4601      	mov	r1, r0
 800b388:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800b38c:	f7f5 fbd2 	bl	8000b34 <__addsf3>
 800b390:	4651      	mov	r1, sl
 800b392:	4604      	mov	r4, r0
 800b394:	4648      	mov	r0, r9
 800b396:	f7f5 fd89 	bl	8000eac <__aeabi_fdiv>
 800b39a:	4601      	mov	r1, r0
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7f5 fcd1 	bl	8000d44 <__aeabi_fmul>
 800b3a2:	f028 080f 	bic.w	r8, r8, #15
 800b3a6:	4681      	mov	r9, r0
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	f7f5 fcca 	bl	8000d44 <__aeabi_fmul>
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7f5 fbbc 	bl	8000b30 <__aeabi_fsub>
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7f5 fbb9 	bl	8000b34 <__addsf3>
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f7f5 fd71 	bl	8000eac <__aeabi_fdiv>
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	f7f5 fbb2 	bl	8000b34 <__addsf3>
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	480c      	ldr	r0, [pc, #48]	@ (800b404 <__ieee754_asinf+0x248>)
 800b3d4:	f7f5 fbac 	bl	8000b30 <__aeabi_fsub>
 800b3d8:	4601      	mov	r1, r0
 800b3da:	4648      	mov	r0, r9
 800b3dc:	f7f5 fba8 	bl	8000b30 <__aeabi_fsub>
 800b3e0:	4641      	mov	r1, r8
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	f7f5 fba5 	bl	8000b34 <__addsf3>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4813      	ldr	r0, [pc, #76]	@ (800b43c <__ieee754_asinf+0x280>)
 800b3ee:	f7f5 fb9f 	bl	8000b30 <__aeabi_fsub>
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7f5 fb9b 	bl	8000b30 <__aeabi_fsub>
 800b3fa:	4601      	mov	r1, r0
 800b3fc:	480f      	ldr	r0, [pc, #60]	@ (800b43c <__ieee754_asinf+0x280>)
 800b3fe:	e770      	b.n	800b2e2 <__ieee754_asinf+0x126>
 800b400:	3fc90fdb 	.word	0x3fc90fdb
 800b404:	b33bbd2e 	.word	0xb33bbd2e
 800b408:	7149f2ca 	.word	0x7149f2ca
 800b40c:	3811ef08 	.word	0x3811ef08
 800b410:	3a4f7f04 	.word	0x3a4f7f04
 800b414:	3d241146 	.word	0x3d241146
 800b418:	3e4e0aa8 	.word	0x3e4e0aa8
 800b41c:	3ea6b090 	.word	0x3ea6b090
 800b420:	3e2aaaab 	.word	0x3e2aaaab
 800b424:	3d9dc62e 	.word	0x3d9dc62e
 800b428:	3f303361 	.word	0x3f303361
 800b42c:	4001572d 	.word	0x4001572d
 800b430:	4019d139 	.word	0x4019d139
 800b434:	3f799999 	.word	0x3f799999
 800b438:	333bbd2e 	.word	0x333bbd2e
 800b43c:	3f490fdb 	.word	0x3f490fdb

0800b440 <__ieee754_atan2f>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b446:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b44a:	4603      	mov	r3, r0
 800b44c:	d805      	bhi.n	800b45a <__ieee754_atan2f+0x1a>
 800b44e:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b452:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b456:	4607      	mov	r7, r0
 800b458:	d904      	bls.n	800b464 <__ieee754_atan2f+0x24>
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f5 fb6a 	bl	8000b34 <__addsf3>
 800b460:	4603      	mov	r3, r0
 800b462:	e010      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b464:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800b468:	d103      	bne.n	800b472 <__ieee754_atan2f+0x32>
 800b46a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b46e:	f000 b86f 	b.w	800b550 <atanf>
 800b472:	178c      	asrs	r4, r1, #30
 800b474:	f004 0402 	and.w	r4, r4, #2
 800b478:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b47c:	b92a      	cbnz	r2, 800b48a <__ieee754_atan2f+0x4a>
 800b47e:	2c02      	cmp	r4, #2
 800b480:	d04b      	beq.n	800b51a <__ieee754_atan2f+0xda>
 800b482:	2c03      	cmp	r4, #3
 800b484:	d04b      	beq.n	800b51e <__ieee754_atan2f+0xde>
 800b486:	4618      	mov	r0, r3
 800b488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48a:	b91e      	cbnz	r6, 800b494 <__ieee754_atan2f+0x54>
 800b48c:	2f00      	cmp	r7, #0
 800b48e:	da4c      	bge.n	800b52a <__ieee754_atan2f+0xea>
 800b490:	4b27      	ldr	r3, [pc, #156]	@ (800b530 <__ieee754_atan2f+0xf0>)
 800b492:	e7f8      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b494:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b498:	d10e      	bne.n	800b4b8 <__ieee754_atan2f+0x78>
 800b49a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b49e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4a2:	d105      	bne.n	800b4b0 <__ieee754_atan2f+0x70>
 800b4a4:	2c02      	cmp	r4, #2
 800b4a6:	d83c      	bhi.n	800b522 <__ieee754_atan2f+0xe2>
 800b4a8:	4b22      	ldr	r3, [pc, #136]	@ (800b534 <__ieee754_atan2f+0xf4>)
 800b4aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b4ae:	e7ea      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b4b0:	2c02      	cmp	r4, #2
 800b4b2:	d838      	bhi.n	800b526 <__ieee754_atan2f+0xe6>
 800b4b4:	4b20      	ldr	r3, [pc, #128]	@ (800b538 <__ieee754_atan2f+0xf8>)
 800b4b6:	e7f8      	b.n	800b4aa <__ieee754_atan2f+0x6a>
 800b4b8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b4bc:	d0e6      	beq.n	800b48c <__ieee754_atan2f+0x4c>
 800b4be:	1b92      	subs	r2, r2, r6
 800b4c0:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800b4c4:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b4c8:	da17      	bge.n	800b4fa <__ieee754_atan2f+0xba>
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	da01      	bge.n	800b4d2 <__ieee754_atan2f+0x92>
 800b4ce:	303c      	adds	r0, #60	@ 0x3c
 800b4d0:	db15      	blt.n	800b4fe <__ieee754_atan2f+0xbe>
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f5 fcea 	bl	8000eac <__aeabi_fdiv>
 800b4d8:	f7ff fe68 	bl	800b1ac <fabsf>
 800b4dc:	f000 f838 	bl	800b550 <atanf>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2c01      	cmp	r4, #1
 800b4e4:	d00d      	beq.n	800b502 <__ieee754_atan2f+0xc2>
 800b4e6:	2c02      	cmp	r4, #2
 800b4e8:	d00e      	beq.n	800b508 <__ieee754_atan2f+0xc8>
 800b4ea:	2c00      	cmp	r4, #0
 800b4ec:	d0cb      	beq.n	800b486 <__ieee754_atan2f+0x46>
 800b4ee:	4913      	ldr	r1, [pc, #76]	@ (800b53c <__ieee754_atan2f+0xfc>)
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7f5 fb1f 	bl	8000b34 <__addsf3>
 800b4f6:	4912      	ldr	r1, [pc, #72]	@ (800b540 <__ieee754_atan2f+0x100>)
 800b4f8:	e00c      	b.n	800b514 <__ieee754_atan2f+0xd4>
 800b4fa:	4b12      	ldr	r3, [pc, #72]	@ (800b544 <__ieee754_atan2f+0x104>)
 800b4fc:	e7f1      	b.n	800b4e2 <__ieee754_atan2f+0xa2>
 800b4fe:	2300      	movs	r3, #0
 800b500:	e7ef      	b.n	800b4e2 <__ieee754_atan2f+0xa2>
 800b502:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b506:	e7be      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b508:	490c      	ldr	r1, [pc, #48]	@ (800b53c <__ieee754_atan2f+0xfc>)
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f5 fb12 	bl	8000b34 <__addsf3>
 800b510:	4601      	mov	r1, r0
 800b512:	480b      	ldr	r0, [pc, #44]	@ (800b540 <__ieee754_atan2f+0x100>)
 800b514:	f7f5 fb0c 	bl	8000b30 <__aeabi_fsub>
 800b518:	e7a2      	b.n	800b460 <__ieee754_atan2f+0x20>
 800b51a:	4b09      	ldr	r3, [pc, #36]	@ (800b540 <__ieee754_atan2f+0x100>)
 800b51c:	e7b3      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b51e:	4b0a      	ldr	r3, [pc, #40]	@ (800b548 <__ieee754_atan2f+0x108>)
 800b520:	e7b1      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b522:	4b0a      	ldr	r3, [pc, #40]	@ (800b54c <__ieee754_atan2f+0x10c>)
 800b524:	e7af      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b526:	2300      	movs	r3, #0
 800b528:	e7ad      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b52a:	4b06      	ldr	r3, [pc, #24]	@ (800b544 <__ieee754_atan2f+0x104>)
 800b52c:	e7ab      	b.n	800b486 <__ieee754_atan2f+0x46>
 800b52e:	bf00      	nop
 800b530:	bfc90fdb 	.word	0xbfc90fdb
 800b534:	0800bc24 	.word	0x0800bc24
 800b538:	0800bc18 	.word	0x0800bc18
 800b53c:	33bbbd2e 	.word	0x33bbbd2e
 800b540:	40490fdb 	.word	0x40490fdb
 800b544:	3fc90fdb 	.word	0x3fc90fdb
 800b548:	c0490fdb 	.word	0xc0490fdb
 800b54c:	3f490fdb 	.word	0x3f490fdb

0800b550 <atanf>:
 800b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b558:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800b55c:	4604      	mov	r4, r0
 800b55e:	4680      	mov	r8, r0
 800b560:	d30e      	bcc.n	800b580 <atanf+0x30>
 800b562:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b566:	d904      	bls.n	800b572 <atanf+0x22>
 800b568:	4601      	mov	r1, r0
 800b56a:	f7f5 fae3 	bl	8000b34 <__addsf3>
 800b56e:	4604      	mov	r4, r0
 800b570:	e003      	b.n	800b57a <atanf+0x2a>
 800b572:	2800      	cmp	r0, #0
 800b574:	f340 80ce 	ble.w	800b714 <atanf+0x1c4>
 800b578:	4c67      	ldr	r4, [pc, #412]	@ (800b718 <atanf+0x1c8>)
 800b57a:	4620      	mov	r0, r4
 800b57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b580:	4b66      	ldr	r3, [pc, #408]	@ (800b71c <atanf+0x1cc>)
 800b582:	429d      	cmp	r5, r3
 800b584:	d80e      	bhi.n	800b5a4 <atanf+0x54>
 800b586:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800b58a:	d208      	bcs.n	800b59e <atanf+0x4e>
 800b58c:	4964      	ldr	r1, [pc, #400]	@ (800b720 <atanf+0x1d0>)
 800b58e:	f7f5 fad1 	bl	8000b34 <__addsf3>
 800b592:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b596:	f7f5 fd91 	bl	80010bc <__aeabi_fcmpgt>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1ed      	bne.n	800b57a <atanf+0x2a>
 800b59e:	f04f 36ff 	mov.w	r6, #4294967295
 800b5a2:	e01c      	b.n	800b5de <atanf+0x8e>
 800b5a4:	f7ff fe02 	bl	800b1ac <fabsf>
 800b5a8:	4b5e      	ldr	r3, [pc, #376]	@ (800b724 <atanf+0x1d4>)
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	429d      	cmp	r5, r3
 800b5ae:	d87c      	bhi.n	800b6aa <atanf+0x15a>
 800b5b0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	d867      	bhi.n	800b688 <atanf+0x138>
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	f7f5 fabb 	bl	8000b34 <__addsf3>
 800b5be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b5c2:	f7f5 fab5 	bl	8000b30 <__aeabi_fsub>
 800b5c6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f7f5 fab1 	bl	8000b34 <__addsf3>
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7f5 fc69 	bl	8000eac <__aeabi_fdiv>
 800b5da:	2600      	movs	r6, #0
 800b5dc:	4604      	mov	r4, r0
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f7f5 fbaf 	bl	8000d44 <__aeabi_fmul>
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	f7f5 fbab 	bl	8000d44 <__aeabi_fmul>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	494d      	ldr	r1, [pc, #308]	@ (800b728 <atanf+0x1d8>)
 800b5f2:	f7f5 fba7 	bl	8000d44 <__aeabi_fmul>
 800b5f6:	494d      	ldr	r1, [pc, #308]	@ (800b72c <atanf+0x1dc>)
 800b5f8:	f7f5 fa9c 	bl	8000b34 <__addsf3>
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7f5 fba1 	bl	8000d44 <__aeabi_fmul>
 800b602:	494b      	ldr	r1, [pc, #300]	@ (800b730 <atanf+0x1e0>)
 800b604:	f7f5 fa96 	bl	8000b34 <__addsf3>
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 fb9b 	bl	8000d44 <__aeabi_fmul>
 800b60e:	4949      	ldr	r1, [pc, #292]	@ (800b734 <atanf+0x1e4>)
 800b610:	f7f5 fa90 	bl	8000b34 <__addsf3>
 800b614:	4629      	mov	r1, r5
 800b616:	f7f5 fb95 	bl	8000d44 <__aeabi_fmul>
 800b61a:	4947      	ldr	r1, [pc, #284]	@ (800b738 <atanf+0x1e8>)
 800b61c:	f7f5 fa8a 	bl	8000b34 <__addsf3>
 800b620:	4629      	mov	r1, r5
 800b622:	f7f5 fb8f 	bl	8000d44 <__aeabi_fmul>
 800b626:	4945      	ldr	r1, [pc, #276]	@ (800b73c <atanf+0x1ec>)
 800b628:	f7f5 fa84 	bl	8000b34 <__addsf3>
 800b62c:	4639      	mov	r1, r7
 800b62e:	f7f5 fb89 	bl	8000d44 <__aeabi_fmul>
 800b632:	4943      	ldr	r1, [pc, #268]	@ (800b740 <atanf+0x1f0>)
 800b634:	4607      	mov	r7, r0
 800b636:	4628      	mov	r0, r5
 800b638:	f7f5 fb84 	bl	8000d44 <__aeabi_fmul>
 800b63c:	4941      	ldr	r1, [pc, #260]	@ (800b744 <atanf+0x1f4>)
 800b63e:	f7f5 fa77 	bl	8000b30 <__aeabi_fsub>
 800b642:	4629      	mov	r1, r5
 800b644:	f7f5 fb7e 	bl	8000d44 <__aeabi_fmul>
 800b648:	493f      	ldr	r1, [pc, #252]	@ (800b748 <atanf+0x1f8>)
 800b64a:	f7f5 fa71 	bl	8000b30 <__aeabi_fsub>
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f5 fb78 	bl	8000d44 <__aeabi_fmul>
 800b654:	493d      	ldr	r1, [pc, #244]	@ (800b74c <atanf+0x1fc>)
 800b656:	f7f5 fa6b 	bl	8000b30 <__aeabi_fsub>
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f5 fb72 	bl	8000d44 <__aeabi_fmul>
 800b660:	493b      	ldr	r1, [pc, #236]	@ (800b750 <atanf+0x200>)
 800b662:	f7f5 fa65 	bl	8000b30 <__aeabi_fsub>
 800b666:	4629      	mov	r1, r5
 800b668:	f7f5 fb6c 	bl	8000d44 <__aeabi_fmul>
 800b66c:	4601      	mov	r1, r0
 800b66e:	4638      	mov	r0, r7
 800b670:	f7f5 fa60 	bl	8000b34 <__addsf3>
 800b674:	4621      	mov	r1, r4
 800b676:	f7f5 fb65 	bl	8000d44 <__aeabi_fmul>
 800b67a:	1c73      	adds	r3, r6, #1
 800b67c:	4601      	mov	r1, r0
 800b67e:	d133      	bne.n	800b6e8 <atanf+0x198>
 800b680:	4620      	mov	r0, r4
 800b682:	f7f5 fa55 	bl	8000b30 <__aeabi_fsub>
 800b686:	e772      	b.n	800b56e <atanf+0x1e>
 800b688:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b68c:	f7f5 fa50 	bl	8000b30 <__aeabi_fsub>
 800b690:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b694:	4605      	mov	r5, r0
 800b696:	4620      	mov	r0, r4
 800b698:	f7f5 fa4c 	bl	8000b34 <__addsf3>
 800b69c:	4601      	mov	r1, r0
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7f5 fc04 	bl	8000eac <__aeabi_fdiv>
 800b6a4:	2601      	movs	r6, #1
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	e799      	b.n	800b5de <atanf+0x8e>
 800b6aa:	4b2a      	ldr	r3, [pc, #168]	@ (800b754 <atanf+0x204>)
 800b6ac:	429d      	cmp	r5, r3
 800b6ae:	d814      	bhi.n	800b6da <atanf+0x18a>
 800b6b0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b6b4:	f7f5 fa3c 	bl	8000b30 <__aeabi_fsub>
 800b6b8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b6bc:	4605      	mov	r5, r0
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7f5 fb40 	bl	8000d44 <__aeabi_fmul>
 800b6c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b6c8:	f7f5 fa34 	bl	8000b34 <__addsf3>
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7f5 fbec 	bl	8000eac <__aeabi_fdiv>
 800b6d4:	2602      	movs	r6, #2
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	e781      	b.n	800b5de <atanf+0x8e>
 800b6da:	4601      	mov	r1, r0
 800b6dc:	481e      	ldr	r0, [pc, #120]	@ (800b758 <atanf+0x208>)
 800b6de:	f7f5 fbe5 	bl	8000eac <__aeabi_fdiv>
 800b6e2:	2603      	movs	r6, #3
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	e77a      	b.n	800b5de <atanf+0x8e>
 800b6e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b75c <atanf+0x20c>)
 800b6ea:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b6ee:	f7f5 fa1f 	bl	8000b30 <__aeabi_fsub>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f7f5 fa1c 	bl	8000b30 <__aeabi_fsub>
 800b6f8:	4b19      	ldr	r3, [pc, #100]	@ (800b760 <atanf+0x210>)
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b700:	f7f5 fa16 	bl	8000b30 <__aeabi_fsub>
 800b704:	f1b8 0f00 	cmp.w	r8, #0
 800b708:	4604      	mov	r4, r0
 800b70a:	f6bf af36 	bge.w	800b57a <atanf+0x2a>
 800b70e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b712:	e732      	b.n	800b57a <atanf+0x2a>
 800b714:	4c13      	ldr	r4, [pc, #76]	@ (800b764 <atanf+0x214>)
 800b716:	e730      	b.n	800b57a <atanf+0x2a>
 800b718:	3fc90fdb 	.word	0x3fc90fdb
 800b71c:	3edfffff 	.word	0x3edfffff
 800b720:	7149f2ca 	.word	0x7149f2ca
 800b724:	3f97ffff 	.word	0x3f97ffff
 800b728:	3c8569d7 	.word	0x3c8569d7
 800b72c:	3d4bda59 	.word	0x3d4bda59
 800b730:	3d886b35 	.word	0x3d886b35
 800b734:	3dba2e6e 	.word	0x3dba2e6e
 800b738:	3e124925 	.word	0x3e124925
 800b73c:	3eaaaaab 	.word	0x3eaaaaab
 800b740:	bd15a221 	.word	0xbd15a221
 800b744:	3d6ef16b 	.word	0x3d6ef16b
 800b748:	3d9d8795 	.word	0x3d9d8795
 800b74c:	3de38e38 	.word	0x3de38e38
 800b750:	3e4ccccd 	.word	0x3e4ccccd
 800b754:	401bffff 	.word	0x401bffff
 800b758:	bf800000 	.word	0xbf800000
 800b75c:	0800bc30 	.word	0x0800bc30
 800b760:	0800bc40 	.word	0x0800bc40
 800b764:	bfc90fdb 	.word	0xbfc90fdb

0800b768 <__ieee754_sqrtf>:
 800b768:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b76c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b774:	4603      	mov	r3, r0
 800b776:	4604      	mov	r4, r0
 800b778:	d30a      	bcc.n	800b790 <__ieee754_sqrtf+0x28>
 800b77a:	4601      	mov	r1, r0
 800b77c:	f7f5 fae2 	bl	8000d44 <__aeabi_fmul>
 800b780:	4601      	mov	r1, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f7f5 f9d6 	bl	8000b34 <__addsf3>
 800b788:	4604      	mov	r4, r0
 800b78a:	4620      	mov	r0, r4
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	2a00      	cmp	r2, #0
 800b792:	d0fa      	beq.n	800b78a <__ieee754_sqrtf+0x22>
 800b794:	2800      	cmp	r0, #0
 800b796:	da06      	bge.n	800b7a6 <__ieee754_sqrtf+0x3e>
 800b798:	4601      	mov	r1, r0
 800b79a:	f7f5 f9c9 	bl	8000b30 <__aeabi_fsub>
 800b79e:	4601      	mov	r1, r0
 800b7a0:	f7f5 fb84 	bl	8000eac <__aeabi_fdiv>
 800b7a4:	e7f0      	b.n	800b788 <__ieee754_sqrtf+0x20>
 800b7a6:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800b7aa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800b7ae:	d03e      	beq.n	800b82e <__ieee754_sqrtf+0xc6>
 800b7b0:	2400      	movs	r4, #0
 800b7b2:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800b7b6:	07ca      	lsls	r2, r1, #31
 800b7b8:	f04f 0019 	mov.w	r0, #25
 800b7bc:	4626      	mov	r6, r4
 800b7be:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800b7c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7ca:	bf58      	it	pl
 800b7cc:	005b      	lslpl	r3, r3, #1
 800b7ce:	106d      	asrs	r5, r5, #1
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	1872      	adds	r2, r6, r1
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	bfcf      	iteee	gt
 800b7d8:	461a      	movgt	r2, r3
 800b7da:	1856      	addle	r6, r2, r1
 800b7dc:	1864      	addle	r4, r4, r1
 800b7de:	1a9a      	suble	r2, r3, r2
 800b7e0:	3801      	subs	r0, #1
 800b7e2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800b7e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b7ea:	d1f2      	bne.n	800b7d2 <__ieee754_sqrtf+0x6a>
 800b7ec:	b1ba      	cbz	r2, 800b81e <__ieee754_sqrtf+0xb6>
 800b7ee:	4e14      	ldr	r6, [pc, #80]	@ (800b840 <__ieee754_sqrtf+0xd8>)
 800b7f0:	4f14      	ldr	r7, [pc, #80]	@ (800b844 <__ieee754_sqrtf+0xdc>)
 800b7f2:	6830      	ldr	r0, [r6, #0]
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	f7f5 f99b 	bl	8000b30 <__aeabi_fsub>
 800b7fa:	f8d6 8000 	ldr.w	r8, [r6]
 800b7fe:	4601      	mov	r1, r0
 800b800:	4640      	mov	r0, r8
 800b802:	f7f5 fc47 	bl	8001094 <__aeabi_fcmple>
 800b806:	b150      	cbz	r0, 800b81e <__ieee754_sqrtf+0xb6>
 800b808:	6830      	ldr	r0, [r6, #0]
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	f7f5 f992 	bl	8000b34 <__addsf3>
 800b810:	6836      	ldr	r6, [r6, #0]
 800b812:	4601      	mov	r1, r0
 800b814:	4630      	mov	r0, r6
 800b816:	f7f5 fc33 	bl	8001080 <__aeabi_fcmplt>
 800b81a:	b168      	cbz	r0, 800b838 <__ieee754_sqrtf+0xd0>
 800b81c:	3402      	adds	r4, #2
 800b81e:	1064      	asrs	r4, r4, #1
 800b820:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800b824:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800b828:	e7af      	b.n	800b78a <__ieee754_sqrtf+0x22>
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	3201      	adds	r2, #1
 800b82e:	0218      	lsls	r0, r3, #8
 800b830:	d5fb      	bpl.n	800b82a <__ieee754_sqrtf+0xc2>
 800b832:	3a01      	subs	r2, #1
 800b834:	1a89      	subs	r1, r1, r2
 800b836:	e7bb      	b.n	800b7b0 <__ieee754_sqrtf+0x48>
 800b838:	3401      	adds	r4, #1
 800b83a:	f024 0401 	bic.w	r4, r4, #1
 800b83e:	e7ee      	b.n	800b81e <__ieee754_sqrtf+0xb6>
 800b840:	200001dc 	.word	0x200001dc
 800b844:	200001d8 	.word	0x200001d8

0800b848 <_init>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	bf00      	nop
 800b84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84e:	bc08      	pop	{r3}
 800b850:	469e      	mov	lr, r3
 800b852:	4770      	bx	lr

0800b854 <_fini>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr
