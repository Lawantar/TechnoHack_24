
TechnoHack_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec74  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800ed88  0800ed88  0000fd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f370  0800f370  00011248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f370  0800f370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f378  0800f378  00011248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f378  0800f378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f37c  0800f37c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800f380  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  20000248  0800f5c8  00011248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  0800f5c8  00011c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149fb  00000000  00000000  00011271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca2  00000000  00000000  00025c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00028910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c6  00000000  00000000  00029e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a801  00000000  00000000  0002af2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017897  00000000  00000000  0004572f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009319a  00000000  00000000  0005cfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007788  00000000  00000000  000f01a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000248 	.word	0x20000248
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed6c 	.word	0x0800ed6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000024c 	.word	0x2000024c
 800014c:	0800ed6c 	.word	0x0800ed6c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_f2uiz>:
 8001150:	0042      	lsls	r2, r0, #1
 8001152:	d20e      	bcs.n	8001172 <__aeabi_f2uiz+0x22>
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001158:	d30b      	bcc.n	8001172 <__aeabi_f2uiz+0x22>
 800115a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d409      	bmi.n	8001178 <__aeabi_f2uiz+0x28>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	fa23 f002 	lsr.w	r0, r3, r2
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2uiz+0x32>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d102      	bne.n	8001188 <__aeabi_f2uiz+0x38>
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	4770      	bx	lr
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__aeabi_ldivmod>:
 8001190:	b97b      	cbnz	r3, 80011b2 <__aeabi_ldivmod+0x22>
 8001192:	b972      	cbnz	r2, 80011b2 <__aeabi_ldivmod+0x22>
 8001194:	2900      	cmp	r1, #0
 8001196:	bfbe      	ittt	lt
 8001198:	2000      	movlt	r0, #0
 800119a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800119e:	e006      	blt.n	80011ae <__aeabi_ldivmod+0x1e>
 80011a0:	bf08      	it	eq
 80011a2:	2800      	cmpeq	r0, #0
 80011a4:	bf1c      	itt	ne
 80011a6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011aa:	f04f 30ff 	movne.w	r0, #4294967295
 80011ae:	f000 b9e9 	b.w	8001584 <__aeabi_idiv0>
 80011b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ba:	2900      	cmp	r1, #0
 80011bc:	db09      	blt.n	80011d2 <__aeabi_ldivmod+0x42>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db1a      	blt.n	80011f8 <__aeabi_ldivmod+0x68>
 80011c2:	f000 f883 	bl	80012cc <__udivmoddi4>
 80011c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ce:	b004      	add	sp, #16
 80011d0:	4770      	bx	lr
 80011d2:	4240      	negs	r0, r0
 80011d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db1b      	blt.n	8001214 <__aeabi_ldivmod+0x84>
 80011dc:	f000 f876 	bl	80012cc <__udivmoddi4>
 80011e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e8:	b004      	add	sp, #16
 80011ea:	4240      	negs	r0, r0
 80011ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f0:	4252      	negs	r2, r2
 80011f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011f6:	4770      	bx	lr
 80011f8:	4252      	negs	r2, r2
 80011fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fe:	f000 f865 	bl	80012cc <__udivmoddi4>
 8001202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800120a:	b004      	add	sp, #16
 800120c:	4240      	negs	r0, r0
 800120e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001212:	4770      	bx	lr
 8001214:	4252      	negs	r2, r2
 8001216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121a:	f000 f857 	bl	80012cc <__udivmoddi4>
 800121e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001226:	b004      	add	sp, #16
 8001228:	4252      	negs	r2, r2
 800122a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_uldivmod>:
 8001230:	b953      	cbnz	r3, 8001248 <__aeabi_uldivmod+0x18>
 8001232:	b94a      	cbnz	r2, 8001248 <__aeabi_uldivmod+0x18>
 8001234:	2900      	cmp	r1, #0
 8001236:	bf08      	it	eq
 8001238:	2800      	cmpeq	r0, #0
 800123a:	bf1c      	itt	ne
 800123c:	f04f 31ff 	movne.w	r1, #4294967295
 8001240:	f04f 30ff 	movne.w	r0, #4294967295
 8001244:	f000 b99e 	b.w	8001584 <__aeabi_idiv0>
 8001248:	f1ad 0c08 	sub.w	ip, sp, #8
 800124c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001250:	f000 f83c 	bl	80012cc <__udivmoddi4>
 8001254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800125c:	b004      	add	sp, #16
 800125e:	4770      	bx	lr

08001260 <__aeabi_d2lz>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	2200      	movs	r2, #0
 8001264:	2300      	movs	r3, #0
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	f7ff fbb1 	bl	80009d0 <__aeabi_dcmplt>
 800126e:	b928      	cbnz	r0, 800127c <__aeabi_d2lz+0x1c>
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001278:	f000 b80a 	b.w	8001290 <__aeabi_d2ulz>
 800127c:	4620      	mov	r0, r4
 800127e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001282:	f000 f805 	bl	8001290 <__aeabi_d2ulz>
 8001286:	4240      	negs	r0, r0
 8001288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop

08001290 <__aeabi_d2ulz>:
 8001290:	b5d0      	push	{r4, r6, r7, lr}
 8001292:	2200      	movs	r2, #0
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <__aeabi_d2ulz+0x34>)
 8001296:	4606      	mov	r6, r0
 8001298:	460f      	mov	r7, r1
 800129a:	f7ff f927 	bl	80004ec <__aeabi_dmul>
 800129e:	f7ff fbfd 	bl	8000a9c <__aeabi_d2uiz>
 80012a2:	4604      	mov	r4, r0
 80012a4:	f7ff f8a8 	bl	80003f8 <__aeabi_ui2d>
 80012a8:	2200      	movs	r2, #0
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <__aeabi_d2ulz+0x38>)
 80012ac:	f7ff f91e 	bl	80004ec <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4630      	mov	r0, r6
 80012b6:	4639      	mov	r1, r7
 80012b8:	f7fe ff60 	bl	800017c <__aeabi_dsub>
 80012bc:	f7ff fbee 	bl	8000a9c <__aeabi_d2uiz>
 80012c0:	4621      	mov	r1, r4
 80012c2:	bdd0      	pop	{r4, r6, r7, pc}
 80012c4:	3df00000 	.word	0x3df00000
 80012c8:	41f00000 	.word	0x41f00000

080012cc <__udivmoddi4>:
 80012cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d0:	9d08      	ldr	r5, [sp, #32]
 80012d2:	460c      	mov	r4, r1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d14e      	bne.n	8001376 <__udivmoddi4+0xaa>
 80012d8:	4694      	mov	ip, r2
 80012da:	458c      	cmp	ip, r1
 80012dc:	4686      	mov	lr, r0
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	d962      	bls.n	80013aa <__udivmoddi4+0xde>
 80012e4:	b14a      	cbz	r2, 80012fa <__udivmoddi4+0x2e>
 80012e6:	f1c2 0320 	rsb	r3, r2, #32
 80012ea:	4091      	lsls	r1, r2
 80012ec:	fa20 f303 	lsr.w	r3, r0, r3
 80012f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012f4:	4319      	orrs	r1, r3
 80012f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80012fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001302:	fb07 1114 	mls	r1, r7, r4, r1
 8001306:	fa1f f68c 	uxth.w	r6, ip
 800130a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800130e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001312:	fb04 f106 	mul.w	r1, r4, r6
 8001316:	4299      	cmp	r1, r3
 8001318:	d90a      	bls.n	8001330 <__udivmoddi4+0x64>
 800131a:	eb1c 0303 	adds.w	r3, ip, r3
 800131e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001322:	f080 8110 	bcs.w	8001546 <__udivmoddi4+0x27a>
 8001326:	4299      	cmp	r1, r3
 8001328:	f240 810d 	bls.w	8001546 <__udivmoddi4+0x27a>
 800132c:	3c02      	subs	r4, #2
 800132e:	4463      	add	r3, ip
 8001330:	1a59      	subs	r1, r3, r1
 8001332:	fbb1 f0f7 	udiv	r0, r1, r7
 8001336:	fb07 1110 	mls	r1, r7, r0, r1
 800133a:	fb00 f606 	mul.w	r6, r0, r6
 800133e:	fa1f f38e 	uxth.w	r3, lr
 8001342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001346:	429e      	cmp	r6, r3
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x94>
 800134a:	eb1c 0303 	adds.w	r3, ip, r3
 800134e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001352:	f080 80fa 	bcs.w	800154a <__udivmoddi4+0x27e>
 8001356:	429e      	cmp	r6, r3
 8001358:	f240 80f7 	bls.w	800154a <__udivmoddi4+0x27e>
 800135c:	4463      	add	r3, ip
 800135e:	3802      	subs	r0, #2
 8001360:	2100      	movs	r1, #0
 8001362:	1b9b      	subs	r3, r3, r6
 8001364:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001368:	b11d      	cbz	r5, 8001372 <__udivmoddi4+0xa6>
 800136a:	40d3      	lsrs	r3, r2
 800136c:	2200      	movs	r2, #0
 800136e:	e9c5 3200 	strd	r3, r2, [r5]
 8001372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001376:	428b      	cmp	r3, r1
 8001378:	d905      	bls.n	8001386 <__udivmoddi4+0xba>
 800137a:	b10d      	cbz	r5, 8001380 <__udivmoddi4+0xb4>
 800137c:	e9c5 0100 	strd	r0, r1, [r5]
 8001380:	2100      	movs	r1, #0
 8001382:	4608      	mov	r0, r1
 8001384:	e7f5      	b.n	8001372 <__udivmoddi4+0xa6>
 8001386:	fab3 f183 	clz	r1, r3
 800138a:	2900      	cmp	r1, #0
 800138c:	d146      	bne.n	800141c <__udivmoddi4+0x150>
 800138e:	42a3      	cmp	r3, r4
 8001390:	d302      	bcc.n	8001398 <__udivmoddi4+0xcc>
 8001392:	4290      	cmp	r0, r2
 8001394:	f0c0 80ee 	bcc.w	8001574 <__udivmoddi4+0x2a8>
 8001398:	1a86      	subs	r6, r0, r2
 800139a:	eb64 0303 	sbc.w	r3, r4, r3
 800139e:	2001      	movs	r0, #1
 80013a0:	2d00      	cmp	r5, #0
 80013a2:	d0e6      	beq.n	8001372 <__udivmoddi4+0xa6>
 80013a4:	e9c5 6300 	strd	r6, r3, [r5]
 80013a8:	e7e3      	b.n	8001372 <__udivmoddi4+0xa6>
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	f040 808f 	bne.w	80014ce <__udivmoddi4+0x202>
 80013b0:	eba1 040c 	sub.w	r4, r1, ip
 80013b4:	2101      	movs	r1, #1
 80013b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013ba:	fa1f f78c 	uxth.w	r7, ip
 80013be:	fbb4 f6f8 	udiv	r6, r4, r8
 80013c2:	fb08 4416 	mls	r4, r8, r6, r4
 80013c6:	fb07 f006 	mul.w	r0, r7, r6
 80013ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80013ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013d2:	4298      	cmp	r0, r3
 80013d4:	d908      	bls.n	80013e8 <__udivmoddi4+0x11c>
 80013d6:	eb1c 0303 	adds.w	r3, ip, r3
 80013da:	f106 34ff 	add.w	r4, r6, #4294967295
 80013de:	d202      	bcs.n	80013e6 <__udivmoddi4+0x11a>
 80013e0:	4298      	cmp	r0, r3
 80013e2:	f200 80cb 	bhi.w	800157c <__udivmoddi4+0x2b0>
 80013e6:	4626      	mov	r6, r4
 80013e8:	1a1c      	subs	r4, r3, r0
 80013ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ee:	fb08 4410 	mls	r4, r8, r0, r4
 80013f2:	fb00 f707 	mul.w	r7, r0, r7
 80013f6:	fa1f f38e 	uxth.w	r3, lr
 80013fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013fe:	429f      	cmp	r7, r3
 8001400:	d908      	bls.n	8001414 <__udivmoddi4+0x148>
 8001402:	eb1c 0303 	adds.w	r3, ip, r3
 8001406:	f100 34ff 	add.w	r4, r0, #4294967295
 800140a:	d202      	bcs.n	8001412 <__udivmoddi4+0x146>
 800140c:	429f      	cmp	r7, r3
 800140e:	f200 80ae 	bhi.w	800156e <__udivmoddi4+0x2a2>
 8001412:	4620      	mov	r0, r4
 8001414:	1bdb      	subs	r3, r3, r7
 8001416:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800141a:	e7a5      	b.n	8001368 <__udivmoddi4+0x9c>
 800141c:	f1c1 0720 	rsb	r7, r1, #32
 8001420:	408b      	lsls	r3, r1
 8001422:	fa22 fc07 	lsr.w	ip, r2, r7
 8001426:	ea4c 0c03 	orr.w	ip, ip, r3
 800142a:	fa24 f607 	lsr.w	r6, r4, r7
 800142e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001432:	fbb6 f8f9 	udiv	r8, r6, r9
 8001436:	fa1f fe8c 	uxth.w	lr, ip
 800143a:	fb09 6618 	mls	r6, r9, r8, r6
 800143e:	fa20 f307 	lsr.w	r3, r0, r7
 8001442:	408c      	lsls	r4, r1
 8001444:	fa00 fa01 	lsl.w	sl, r0, r1
 8001448:	fb08 f00e 	mul.w	r0, r8, lr
 800144c:	431c      	orrs	r4, r3
 800144e:	0c23      	lsrs	r3, r4, #16
 8001450:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001454:	4298      	cmp	r0, r3
 8001456:	fa02 f201 	lsl.w	r2, r2, r1
 800145a:	d90a      	bls.n	8001472 <__udivmoddi4+0x1a6>
 800145c:	eb1c 0303 	adds.w	r3, ip, r3
 8001460:	f108 36ff 	add.w	r6, r8, #4294967295
 8001464:	f080 8081 	bcs.w	800156a <__udivmoddi4+0x29e>
 8001468:	4298      	cmp	r0, r3
 800146a:	d97e      	bls.n	800156a <__udivmoddi4+0x29e>
 800146c:	f1a8 0802 	sub.w	r8, r8, #2
 8001470:	4463      	add	r3, ip
 8001472:	1a1e      	subs	r6, r3, r0
 8001474:	fbb6 f3f9 	udiv	r3, r6, r9
 8001478:	fb09 6613 	mls	r6, r9, r3, r6
 800147c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001480:	b2a4      	uxth	r4, r4
 8001482:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001486:	45a6      	cmp	lr, r4
 8001488:	d908      	bls.n	800149c <__udivmoddi4+0x1d0>
 800148a:	eb1c 0404 	adds.w	r4, ip, r4
 800148e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001492:	d266      	bcs.n	8001562 <__udivmoddi4+0x296>
 8001494:	45a6      	cmp	lr, r4
 8001496:	d964      	bls.n	8001562 <__udivmoddi4+0x296>
 8001498:	3b02      	subs	r3, #2
 800149a:	4464      	add	r4, ip
 800149c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80014a0:	fba0 8302 	umull	r8, r3, r0, r2
 80014a4:	eba4 040e 	sub.w	r4, r4, lr
 80014a8:	429c      	cmp	r4, r3
 80014aa:	46c6      	mov	lr, r8
 80014ac:	461e      	mov	r6, r3
 80014ae:	d350      	bcc.n	8001552 <__udivmoddi4+0x286>
 80014b0:	d04d      	beq.n	800154e <__udivmoddi4+0x282>
 80014b2:	b155      	cbz	r5, 80014ca <__udivmoddi4+0x1fe>
 80014b4:	ebba 030e 	subs.w	r3, sl, lr
 80014b8:	eb64 0406 	sbc.w	r4, r4, r6
 80014bc:	fa04 f707 	lsl.w	r7, r4, r7
 80014c0:	40cb      	lsrs	r3, r1
 80014c2:	431f      	orrs	r7, r3
 80014c4:	40cc      	lsrs	r4, r1
 80014c6:	e9c5 7400 	strd	r7, r4, [r5]
 80014ca:	2100      	movs	r1, #0
 80014cc:	e751      	b.n	8001372 <__udivmoddi4+0xa6>
 80014ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80014d2:	f1c2 0320 	rsb	r3, r2, #32
 80014d6:	40d9      	lsrs	r1, r3
 80014d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014dc:	fa20 f303 	lsr.w	r3, r0, r3
 80014e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80014e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80014e8:	fb08 1110 	mls	r1, r8, r0, r1
 80014ec:	4094      	lsls	r4, r2
 80014ee:	431c      	orrs	r4, r3
 80014f0:	fa1f f78c 	uxth.w	r7, ip
 80014f4:	0c23      	lsrs	r3, r4, #16
 80014f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014fa:	fb00 f107 	mul.w	r1, r0, r7
 80014fe:	4299      	cmp	r1, r3
 8001500:	d908      	bls.n	8001514 <__udivmoddi4+0x248>
 8001502:	eb1c 0303 	adds.w	r3, ip, r3
 8001506:	f100 36ff 	add.w	r6, r0, #4294967295
 800150a:	d22c      	bcs.n	8001566 <__udivmoddi4+0x29a>
 800150c:	4299      	cmp	r1, r3
 800150e:	d92a      	bls.n	8001566 <__udivmoddi4+0x29a>
 8001510:	3802      	subs	r0, #2
 8001512:	4463      	add	r3, ip
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	fbb3 f1f8 	udiv	r1, r3, r8
 800151a:	fb08 3311 	mls	r3, r8, r1, r3
 800151e:	b2a4      	uxth	r4, r4
 8001520:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001524:	fb01 f307 	mul.w	r3, r1, r7
 8001528:	42a3      	cmp	r3, r4
 800152a:	d908      	bls.n	800153e <__udivmoddi4+0x272>
 800152c:	eb1c 0404 	adds.w	r4, ip, r4
 8001530:	f101 36ff 	add.w	r6, r1, #4294967295
 8001534:	d213      	bcs.n	800155e <__udivmoddi4+0x292>
 8001536:	42a3      	cmp	r3, r4
 8001538:	d911      	bls.n	800155e <__udivmoddi4+0x292>
 800153a:	3902      	subs	r1, #2
 800153c:	4464      	add	r4, ip
 800153e:	1ae4      	subs	r4, r4, r3
 8001540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001544:	e73b      	b.n	80013be <__udivmoddi4+0xf2>
 8001546:	4604      	mov	r4, r0
 8001548:	e6f2      	b.n	8001330 <__udivmoddi4+0x64>
 800154a:	4608      	mov	r0, r1
 800154c:	e708      	b.n	8001360 <__udivmoddi4+0x94>
 800154e:	45c2      	cmp	sl, r8
 8001550:	d2af      	bcs.n	80014b2 <__udivmoddi4+0x1e6>
 8001552:	ebb8 0e02 	subs.w	lr, r8, r2
 8001556:	eb63 060c 	sbc.w	r6, r3, ip
 800155a:	3801      	subs	r0, #1
 800155c:	e7a9      	b.n	80014b2 <__udivmoddi4+0x1e6>
 800155e:	4631      	mov	r1, r6
 8001560:	e7ed      	b.n	800153e <__udivmoddi4+0x272>
 8001562:	4603      	mov	r3, r0
 8001564:	e79a      	b.n	800149c <__udivmoddi4+0x1d0>
 8001566:	4630      	mov	r0, r6
 8001568:	e7d4      	b.n	8001514 <__udivmoddi4+0x248>
 800156a:	46b0      	mov	r8, r6
 800156c:	e781      	b.n	8001472 <__udivmoddi4+0x1a6>
 800156e:	4463      	add	r3, ip
 8001570:	3802      	subs	r0, #2
 8001572:	e74f      	b.n	8001414 <__udivmoddi4+0x148>
 8001574:	4606      	mov	r6, r0
 8001576:	4623      	mov	r3, r4
 8001578:	4608      	mov	r0, r1
 800157a:	e711      	b.n	80013a0 <__udivmoddi4+0xd4>
 800157c:	3e02      	subs	r6, #2
 800157e:	4463      	add	r3, ip
 8001580:	e732      	b.n	80013e8 <__udivmoddi4+0x11c>
 8001582:	bf00      	nop

08001584 <__aeabi_idiv0>:
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fae7 	bl	8001b70 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fb02 	bl	8001bb0 <SX1278_hw_SPIReadByte>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fa9f 	bl	8001afa <SX1278_hw_SetNSS>
	return tmp;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	4613      	mov	r3, r2
 80015d4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fa8c 	bl	8001afa <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f000 fabd 	bl	8001b70 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	78ba      	ldrb	r2, [r7, #2]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fab6 	bl	8001b70 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fa75 	bl	8001afa <SX1278_hw_SetNSS>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	461a      	mov	r2, r3
 8001624:	460b      	mov	r3, r1
 8001626:	72fb      	strb	r3, [r7, #11]
 8001628:	4613      	mov	r3, r2
 800162a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800162c:	7abb      	ldrb	r3, [r7, #10]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d929      	bls.n	8001686 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fa5e 	bl	8001afa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f000 fa8f 	bl	8001b70 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
 8001656:	e00b      	b.n	8001670 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f000 fa83 	bl	8001b70 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	3301      	adds	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]
 8001670:	7dfa      	ldrb	r2, [r7, #23]
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	429a      	cmp	r2, r3
 8001676:	d3ef      	bcc.n	8001658 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fa3b 	bl	8001afa <SX1278_hw_SetNSS>
 8001684:	e000      	b.n	8001688 <SX1278_SPIBurstWrite+0x70>
		return;
 8001686:	bf00      	nop
	}
}
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f90d 	bl	80018b8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 faac 	bl	8001bfc <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f917 	bl	80018d8 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	04d9      	lsls	r1, r3, #19
 80016ba:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80016be:	04d0      	lsls	r0, r2, #19
 80016c0:	4a6f      	ldr	r2, [pc, #444]	@ (8001880 <SX1278_config+0x1f0>)
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	f7ff fdb3 	bl	8001230 <__aeabi_uldivmod>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80016d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	0c02      	lsrs	r2, r0, #16
 80016e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016e4:	0c0b      	lsrs	r3, r1, #16
 80016e6:	b2d3      	uxtb	r3, r2
 80016e8:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80016ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	0a02      	lsrs	r2, r0, #8
 80016f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016fc:	0a0b      	lsrs	r3, r1, #8
 80016fe:	b2d3      	uxtb	r3, r2
 8001700:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	2303      	movs	r3, #3
 800170c:	2106      	movs	r1, #6
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ff82 	bl	8001618 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001714:	2234      	movs	r2, #52	@ 0x34
 8001716:	2139      	movs	r1, #57	@ 0x39
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff54 	bl	80015c6 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7c1b      	ldrb	r3, [r3, #16]
 8001722:	461a      	mov	r2, r3
 8001724:	4b57      	ldr	r3, [pc, #348]	@ (8001884 <SX1278_config+0x1f4>)
 8001726:	5c9b      	ldrb	r3, [r3, r2]
 8001728:	461a      	mov	r2, r3
 800172a:	2109      	movs	r1, #9
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff4a 	bl	80015c6 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001732:	220b      	movs	r2, #11
 8001734:	210b      	movs	r1, #11
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff45 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800173c:	2223      	movs	r2, #35	@ 0x23
 800173e:	210c      	movs	r1, #12
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff40 	bl	80015c6 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7c5b      	ldrb	r3, [r3, #17]
 800174a:	461a      	mov	r2, r3
 800174c:	4b4e      	ldr	r3, [pc, #312]	@ (8001888 <SX1278_config+0x1f8>)
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d147      	bne.n	80017e4 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7c9b      	ldrb	r3, [r3, #18]
 8001758:	461a      	mov	r2, r3
 800175a:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <SX1278_config+0x1fc>)
 800175c:	5c9b      	ldrb	r3, [r3, r2]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7cdb      	ldrb	r3, [r3, #19]
 8001766:	4619      	mov	r1, r3
 8001768:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <SX1278_config+0x200>)
 800176a:	5c5b      	ldrb	r3, [r3, r1]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001774:	3301      	adds	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	211d      	movs	r1, #29
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff22 	bl	80015c6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7c5b      	ldrb	r3, [r3, #17]
 8001786:	461a      	mov	r2, r3
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <SX1278_config+0x1f8>)
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7d1b      	ldrb	r3, [r3, #20]
 8001794:	4619      	mov	r1, r3
 8001796:	4b3f      	ldr	r3, [pc, #252]	@ (8001894 <SX1278_config+0x204>)
 8001798:	5c5b      	ldrb	r3, [r3, r1]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80017a2:	3303      	adds	r3, #3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	211e      	movs	r1, #30
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff0b 	bl	80015c6 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80017b0:	2131      	movs	r1, #49	@ 0x31
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fee8 	bl	8001588 <SX1278_SPIRead>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f023 0307 	bic.w	r3, r3, #7
 80017c2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	f043 0305 	orr.w	r3, r3, #5
 80017ca:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	461a      	mov	r2, r3
 80017d0:	2131      	movs	r1, #49	@ 0x31
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fef7 	bl	80015c6 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80017d8:	220c      	movs	r2, #12
 80017da:	2137      	movs	r1, #55	@ 0x37
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fef2 	bl	80015c6 <SX1278_SPIWrite>
 80017e2:	e029      	b.n	8001838 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7c9b      	ldrb	r3, [r3, #18]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <SX1278_config+0x1fc>)
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7cdb      	ldrb	r3, [r3, #19]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <SX1278_config+0x200>)
 80017fa:	5c5b      	ldrb	r3, [r3, r1]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001800:	4413      	add	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	211d      	movs	r1, #29
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fedc 	bl	80015c6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7c5b      	ldrb	r3, [r3, #17]
 8001812:	461a      	mov	r2, r3
 8001814:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <SX1278_config+0x1f8>)
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7d1b      	ldrb	r3, [r3, #20]
 8001820:	4619      	mov	r1, r3
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <SX1278_config+0x204>)
 8001824:	5c5b      	ldrb	r3, [r3, r1]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800182a:	4413      	add	r3, r2
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	211e      	movs	r1, #30
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fec7 	bl	80015c6 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001838:	2204      	movs	r2, #4
 800183a:	2126      	movs	r1, #38	@ 0x26
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fec2 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001842:	2208      	movs	r2, #8
 8001844:	211f      	movs	r1, #31
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff febd 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800184c:	2200      	movs	r2, #0
 800184e:	2120      	movs	r1, #32
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff feb8 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001856:	2208      	movs	r2, #8
 8001858:	2121      	movs	r1, #33	@ 0x21
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff feb3 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001860:	2201      	movs	r2, #1
 8001862:	2141      	movs	r1, #65	@ 0x41
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff feae 	bl	80015c6 <SX1278_SPIWrite>
	module->readBytes = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f810 	bl	8001898 <SX1278_standby>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	01e84800 	.word	0x01e84800
 8001884:	0800eda0 	.word	0x0800eda0
 8001888:	0800eda4 	.word	0x0800eda4
 800188c:	0800edac 	.word	0x0800edac
 8001890:	0800edb8 	.word	0x0800edb8
 8001894:	0800edbc 	.word	0x0800edbc

08001898 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80018a0:	2209      	movs	r2, #9
 80018a2:	2101      	movs	r1, #1
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe8e 	bl	80015c6 <SX1278_SPIWrite>
	module->status = STANDBY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	759a      	strb	r2, [r3, #22]
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80018c0:	2208      	movs	r2, #8
 80018c2:	2101      	movs	r1, #1
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fe7e 	bl	80015c6 <SX1278_SPIWrite>
	module->status = SLEEP;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	759a      	strb	r2, [r3, #22]
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80018e0:	2288      	movs	r2, #136	@ 0x88
 80018e2:	2101      	movs	r1, #1
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fe6e 	bl	80015c6 <SX1278_SPIWrite>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80018fa:	22ff      	movs	r2, #255	@ 0xff
 80018fc:	2112      	movs	r1, #18
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe61 	bl	80015c6 <SX1278_SPIWrite>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	7afa      	ldrb	r2, [r7, #11]
 800191e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff feb5 	bl	8001690 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001926:	2287      	movs	r2, #135	@ 0x87
 8001928:	214d      	movs	r1, #77	@ 0x4d
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fe4b 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001930:	2200      	movs	r2, #0
 8001932:	2124      	movs	r1, #36	@ 0x24
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fe46 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800193a:	2241      	movs	r2, #65	@ 0x41
 800193c:	2140      	movs	r1, #64	@ 0x40
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fe41 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff ffd4 	bl	80018f2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800194a:	22f7      	movs	r2, #247	@ 0xf7
 800194c:	2111      	movs	r1, #17
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f7ff fe39 	bl	80015c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	461a      	mov	r2, r3
 8001958:	2122      	movs	r1, #34	@ 0x22
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fe33 	bl	80015c6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001960:	210e      	movs	r1, #14
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fe10 	bl	8001588 <SX1278_SPIRead>
 8001968:	4603      	mov	r3, r0
 800196a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	461a      	mov	r2, r3
 8001970:	210d      	movs	r1, #13
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f7ff fe27 	bl	80015c6 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001978:	2122      	movs	r1, #34	@ 0x22
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe04 	bl	8001588 <SX1278_SPIRead>
 8001980:	4603      	mov	r3, r0
 8001982:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001984:	7dba      	ldrb	r2, [r7, #22]
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	429a      	cmp	r2, r3
 800198a:	d104      	bne.n	8001996 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2202      	movs	r2, #2
 8001990:	759a      	strb	r2, [r3, #22]
			return 1;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3b01      	subs	r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ea      	bne.n	8001978 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f8be 	bl	8001b28 <SX1278_hw_Reset>
			SX1278_config(module);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe6f 	bl	8001690 <SX1278_config>
			return 0;
 80019b2:	2300      	movs	r3, #0
		}
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	2100      	movs	r1, #0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fe20 	bl	8001618 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80019d8:	228b      	movs	r2, #139	@ 0x8b
 80019da:	2101      	movs	r1, #1
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff fdf2 	bl	80015c6 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f913 	bl	8001c12 <SX1278_hw_GetDIO0>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80019f2:	2112      	movs	r1, #18
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fdc7 	bl	8001588 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff ff79 	bl	80018f2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff ff49 	bl	8001898 <SX1278_standby>
			return 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e013      	b.n	8001a32 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f884 	bl	8001b28 <SX1278_hw_Reset>
			SX1278_config(module);
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7ff fe35 	bl	8001690 <SX1278_config>
			return 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e003      	b.n	8001a32 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 f8e6 	bl	8001bfc <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001a30:	e7d7      	b.n	80019e2 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f840 	bl	8001ad0 <SX1278_hw_init>
	module->frequency = frequency;
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a56:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	7e3a      	ldrb	r2, [r7, #24]
 8001a5e:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7f3a      	ldrb	r2, [r7, #28]
 8001a64:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a6c:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a74:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a7c:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001a84:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fe02 	bl	8001690 <SX1278_config>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ff2e 	bl	800190c <SX1278_LoRaEntryTx>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7ff ff7d 	bl	80019bc <SX1278_LoRaTxPacket>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	e000      	b.n	8001ac8 <SX1278_transmit+0x34>
	}
	return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f80d 	bl	8001afa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6858      	ldr	r0, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2201      	movs	r2, #1
 8001aec:	4619      	mov	r1, r3
 8001aee:	f003 fb38 	bl	8005162 <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6958      	ldr	r0, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f003 fb21 	bl	8005162 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffe1 	bl	8001afa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6858      	ldr	r0, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	f003 fb0c 	bl	8005162 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 f856 	bl	8001bfc <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6858      	ldr	r0, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f003 fb00 	bl	8005162 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001b62:	2064      	movs	r0, #100	@ 0x64
 8001b64:	f000 f84a 	bl	8001bfc <SX1278_hw_DelayMs>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffbb 	bl	8001afa <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6998      	ldr	r0, [r3, #24]
 8001b88:	1cf9      	adds	r1, r7, #3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f005 fca8 	bl	80074e4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001b94:	bf00      	nop
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 ff95 	bl	8007aca <HAL_SPI_GetState>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1f7      	bne.n	8001b96 <SX1278_hw_SPICommand+0x26>
		;
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff99 	bl	8001afa <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6998      	ldr	r0, [r3, #24]
 8001bcc:	f107 020e 	add.w	r2, r7, #14
 8001bd0:	f107 010f 	add.w	r1, r7, #15
 8001bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f005 fdc5 	bl	800776a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001be0:	bf00      	nop
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 ff6f 	bl	8007aca <HAL_SPI_GetState>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d1f7      	bne.n	8001be2 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f002 ffdf 	bl	8004bc8 <HAL_Delay>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f003 fa84 	bl	8005134 <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	715a      	strb	r2, [r3, #5]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08a      	sub	sp, #40	@ 0x28
 8001c7a:	af04      	add	r7, sp, #16
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	8af9      	ldrh	r1, [r7, #22]
 8001c96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f004 f81c 	bl	8005ce4 <HAL_I2C_Mem_Read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10b      	bne.n	8001cca <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001cb2:	7d7b      	ldrb	r3, [r7, #21]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	7d3b      	ldrb	r3, [r7, #20]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	801a      	strh	r2, [r3, #0]
		return true;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <read_register16+0x56>
	} else
		return false;
 8001cca:	2300      	movs	r3, #0

}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b08b      	sub	sp, #44	@ 0x2c
 8001cd8:	af04      	add	r7, sp, #16
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	72fb      	strb	r3, [r7, #11]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	7abb      	ldrb	r3, [r7, #10]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	8af9      	ldrh	r1, [r7, #22]
 8001cfe:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001d02:	9402      	str	r4, [sp, #8]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f003 ffea 	bl	8005ce4 <HAL_I2C_Mem_Read>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <read_data+0x46>
		return 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <read_data+0x48>
	else
		return 1;
 8001d1a:	2301      	movs	r3, #1

}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}

08001d24 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2188      	movs	r1, #136	@ 0x88
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff9f 	bl	8001c76 <read_register16>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06f      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3302      	adds	r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	218a      	movs	r1, #138	@ 0x8a
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff95 	bl	8001c76 <read_register16>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d065      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	461a      	mov	r2, r3
 8001d58:	218c      	movs	r1, #140	@ 0x8c
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ff8b 	bl	8001c76 <read_register16>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d05b      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3306      	adds	r3, #6
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	218e      	movs	r1, #142	@ 0x8e
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff81 	bl	8001c76 <read_register16>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d051      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2190      	movs	r1, #144	@ 0x90
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff77 	bl	8001c76 <read_register16>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d047      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	330a      	adds	r3, #10
 8001d92:	461a      	mov	r2, r3
 8001d94:	2192      	movs	r1, #146	@ 0x92
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff6d 	bl	8001c76 <read_register16>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03d      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	330c      	adds	r3, #12
 8001da6:	461a      	mov	r2, r3
 8001da8:	2194      	movs	r1, #148	@ 0x94
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff63 	bl	8001c76 <read_register16>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d033      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	330e      	adds	r3, #14
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2196      	movs	r1, #150	@ 0x96
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff59 	bl	8001c76 <read_register16>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d029      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3310      	adds	r3, #16
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2198      	movs	r1, #152	@ 0x98
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ff4f 	bl	8001c76 <read_register16>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01f      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3312      	adds	r3, #18
 8001de2:	461a      	mov	r2, r3
 8001de4:	219a      	movs	r1, #154	@ 0x9a
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff45 	bl	8001c76 <read_register16>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3314      	adds	r3, #20
 8001df6:	461a      	mov	r2, r3
 8001df8:	219c      	movs	r1, #156	@ 0x9c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff3b 	bl	8001c76 <read_register16>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	219e      	movs	r1, #158	@ 0x9e
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff31 	bl	8001c76 <read_register16>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <read_calibration_data+0xfa>

		return true;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <read_calibration_data+0xfc>
	}

	return false;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0218 	add.w	r2, r3, #24
 8001e36:	2301      	movs	r3, #1
 8001e38:	21a1      	movs	r1, #161	@ 0xa1
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff4a 	bl	8001cd4 <read_data>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d14b      	bne.n	8001ede <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	331a      	adds	r3, #26
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	21e1      	movs	r1, #225	@ 0xe1
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff11 	bl	8001c76 <read_register16>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d041      	beq.n	8001ede <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 021c 	add.w	r2, r3, #28
 8001e60:	2301      	movs	r3, #1
 8001e62:	21e3      	movs	r1, #227	@ 0xe3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff35 	bl	8001cd4 <read_data>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d136      	bne.n	8001ede <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001e70:	f107 030e 	add.w	r3, r7, #14
 8001e74:	461a      	mov	r2, r3
 8001e76:	21e4      	movs	r1, #228	@ 0xe4
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fefc 	bl	8001c76 <read_register16>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02c      	beq.n	8001ede <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	461a      	mov	r2, r3
 8001e8a:	21e5      	movs	r1, #229	@ 0xe5
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fef2 	bl	8001c76 <read_register16>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	21e7      	movs	r1, #231	@ 0xe7
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff16 	bl	8001cd4 <read_data>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d117      	bne.n	8001ede <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	121b      	asrs	r3, r3, #8
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001ece:	89bb      	ldrh	r3, [r7, #12]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	841a      	strh	r2, [r3, #32]

		return true;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	89f9      	ldrh	r1, [r7, #14]
 8001f0a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	1cbb      	adds	r3, r7, #2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f003 fde9 	bl	8005af0 <HAL_I2C_Mem_Write>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <write_register8+0x40>
		return false;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <write_register8+0x42>
	else
		return true;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <bmp280_init>:

uint8_t bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001f40:	2b76      	cmp	r3, #118	@ 0x76
 8001f42:	d005      	beq.n	8001f50 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001f48:	2b77      	cmp	r3, #119	@ 0x77
 8001f4a:	d001      	beq.n	8001f50 <bmp280_init+0x1e>

		return 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e099      	b.n	8002084 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f56:	2301      	movs	r3, #1
 8001f58:	21d0      	movs	r1, #208	@ 0xd0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff feba 	bl	8001cd4 <read_data>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <bmp280_init+0x38>
		return 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08c      	b.n	8002084 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f70:	2b58      	cmp	r3, #88	@ 0x58
 8001f72:	d006      	beq.n	8001f82 <bmp280_init+0x50>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f7a:	2b60      	cmp	r3, #96	@ 0x60
 8001f7c:	d001      	beq.n	8001f82 <bmp280_init+0x50>

		return 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e080      	b.n	8002084 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001f82:	22b6      	movs	r2, #182	@ 0xb6
 8001f84:	21e0      	movs	r1, #224	@ 0xe0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffae 	bl	8001ee8 <write_register8>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <bmp280_init+0x64>
		return 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e076      	b.n	8002084 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	21f3      	movs	r1, #243	@ 0xf3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fe98 	bl	8001cd4 <read_data>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f5      	bne.n	8001f96 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001faa:	7b3b      	ldrb	r3, [r7, #12]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff feb5 	bl	8001d24 <read_calibration_data>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d100      	bne.n	8001fc8 <bmp280_init+0x96>
 8001fc6:	e001      	b.n	8001fcc <bmp280_init+0x9a>
		return 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e05b      	b.n	8002084 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001fd2:	2b60      	cmp	r3, #96	@ 0x60
 8001fd4:	d10a      	bne.n	8001fec <bmp280_init+0xba>
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff26 	bl	8001e28 <read_hum_calibration_data>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <bmp280_init+0xba>
		return 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e04b      	b.n	8002084 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	795b      	ldrb	r3, [r3, #5]
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	b25a      	sxtb	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	785b      	ldrb	r3, [r3, #1]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	461a      	mov	r2, r3
 8002006:	21f5      	movs	r1, #245	@ 0xf5
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff6d 	bl	8001ee8 <write_register8>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <bmp280_init+0xe6>
		return 1;
 8002014:	2301      	movs	r3, #1
 8002016:	e035      	b.n	8002084 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	78db      	ldrb	r3, [r3, #3]
 800202a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800202c:	b25a      	sxtb	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	789b      	ldrb	r3, [r3, #2]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	b25b      	sxtb	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b25a      	sxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b25b      	sxtb	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002044:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800204c:	2b60      	cmp	r3, #96	@ 0x60
 800204e:	d10d      	bne.n	800206c <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002056:	7b7b      	ldrb	r3, [r7, #13]
 8002058:	461a      	mov	r2, r3
 800205a:	21f2      	movs	r1, #242	@ 0xf2
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff43 	bl	8001ee8 <write_register8>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <bmp280_init+0x13a>
			return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e00b      	b.n	8002084 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	461a      	mov	r2, r3
 8002070:	21f4      	movs	r1, #244	@ 0xf4
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff38 	bl	8001ee8 <write_register8>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <bmp280_init+0x150>
		return 1;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <bmp280_init+0x152>
	}

	return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	10da      	asrs	r2, r3, #3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80020ae:	12db      	asrs	r3, r3, #11
 80020b0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	111b      	asrs	r3, r3, #4
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	1112      	asrs	r2, r2, #4
 80020c0:	68f9      	ldr	r1, [r7, #12]
 80020c2:	8809      	ldrh	r1, [r1, #0]
 80020c4:	1a52      	subs	r2, r2, r1
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80020d6:	139b      	asrs	r3, r3, #14
 80020d8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3380      	adds	r3, #128	@ 0x80
 80020f0:	121b      	asrs	r3, r3, #8
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80020fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002100:	b0cc      	sub	sp, #304	@ 0x130
 8002102:	af00      	add	r7, sp, #0
 8002104:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002108:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800210c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002114:	17da      	asrs	r2, r3, #31
 8002116:	461c      	mov	r4, r3
 8002118:	4615      	mov	r5, r2
 800211a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800211e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002122:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002126:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800212a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800212e:	fb03 f102 	mul.w	r1, r3, r2
 8002132:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	18ca      	adds	r2, r1, r3
 8002140:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002144:	fba3 8903 	umull	r8, r9, r3, r3
 8002148:	eb02 0309 	add.w	r3, r2, r9
 800214c:	4699      	mov	r9, r3
 800214e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002152:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002156:	b21b      	sxth	r3, r3
 8002158:	17da      	asrs	r2, r3, #31
 800215a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800215e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002162:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002166:	4603      	mov	r3, r0
 8002168:	fb03 f209 	mul.w	r2, r3, r9
 800216c:	460b      	mov	r3, r1
 800216e:	fb08 f303 	mul.w	r3, r8, r3
 8002172:	4413      	add	r3, r2
 8002174:	4602      	mov	r2, r0
 8002176:	fba8 2102 	umull	r2, r1, r8, r2
 800217a:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800217e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8002182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002186:	4413      	add	r3, r2
 8002188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800218c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8002190:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8002194:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800219c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	17da      	asrs	r2, r3, #31
 80021a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021a8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80021ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021b0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80021b4:	462a      	mov	r2, r5
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
 80021ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021be:	4621      	mov	r1, r4
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	441a      	add	r2, r3
 80021c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021ca:	4621      	mov	r1, r4
 80021cc:	fba3 3101 	umull	r3, r1, r3, r1
 80021d0:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80021d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80021d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80021ee:	462b      	mov	r3, r5
 80021f0:	0459      	lsls	r1, r3, #17
 80021f2:	4622      	mov	r2, r4
 80021f4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80021f8:	4623      	mov	r3, r4
 80021fa:	0458      	lsls	r0, r3, #17
 80021fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002200:	1814      	adds	r4, r2, r0
 8002202:	643c      	str	r4, [r7, #64]	@ 0x40
 8002204:	414b      	adcs	r3, r1
 8002206:	647b      	str	r3, [r7, #68]	@ 0x44
 8002208:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800220c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002214:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002218:	b21b      	sxth	r3, r3
 800221a:	17da      	asrs	r2, r3, #31
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002224:	f04f 0000 	mov.w	r0, #0
 8002228:	f04f 0100 	mov.w	r1, #0
 800222c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002230:	00d9      	lsls	r1, r3, #3
 8002232:	2000      	movs	r0, #0
 8002234:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002238:	1814      	adds	r4, r2, r0
 800223a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800223c:	414b      	adcs	r3, r1
 800223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002240:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002244:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002248:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800224c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002250:	fb03 f102 	mul.w	r1, r3, r2
 8002254:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002258:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	18ca      	adds	r2, r1, r3
 8002262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002266:	fba3 3103 	umull	r3, r1, r3, r3
 800226a:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800226e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002276:	18d3      	adds	r3, r2, r3
 8002278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800227c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002280:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002284:	b21b      	sxth	r3, r3
 8002286:	17da      	asrs	r2, r3, #31
 8002288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800228c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002290:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8002294:	4622      	mov	r2, r4
 8002296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800229a:	4641      	mov	r1, r8
 800229c:	fb01 f202 	mul.w	r2, r1, r2
 80022a0:	464d      	mov	r5, r9
 80022a2:	4618      	mov	r0, r3
 80022a4:	4621      	mov	r1, r4
 80022a6:	4603      	mov	r3, r0
 80022a8:	fb03 f305 	mul.w	r3, r3, r5
 80022ac:	4413      	add	r3, r2
 80022ae:	4602      	mov	r2, r0
 80022b0:	4641      	mov	r1, r8
 80022b2:	fba2 2101 	umull	r2, r1, r2, r1
 80022b6:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80022ba:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80022be:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80022c2:	4413      	add	r3, r2
 80022c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80022d4:	4623      	mov	r3, r4
 80022d6:	0a18      	lsrs	r0, r3, #8
 80022d8:	462a      	mov	r2, r5
 80022da:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80022de:	462b      	mov	r3, r5
 80022e0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80022e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	17da      	asrs	r2, r3, #31
 80022ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022f2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022fa:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80022fe:	464a      	mov	r2, r9
 8002300:	fb02 f203 	mul.w	r2, r2, r3
 8002304:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002308:	4644      	mov	r4, r8
 800230a:	fb04 f303 	mul.w	r3, r4, r3
 800230e:	441a      	add	r2, r3
 8002310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002314:	4644      	mov	r4, r8
 8002316:	fba3 3404 	umull	r3, r4, r3, r4
 800231a:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 800231e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002326:	18d3      	adds	r3, r2, r3
 8002328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002338:	464c      	mov	r4, r9
 800233a:	0323      	lsls	r3, r4, #12
 800233c:	46c4      	mov	ip, r8
 800233e:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8002342:	4644      	mov	r4, r8
 8002344:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002346:	1884      	adds	r4, r0, r2
 8002348:	633c      	str	r4, [r7, #48]	@ 0x30
 800234a:	eb41 0303 	adc.w	r3, r1, r3
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002350:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002354:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002358:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800235c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002360:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8002364:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800236c:	88db      	ldrh	r3, [r3, #6]
 800236e:	b29b      	uxth	r3, r3
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002376:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800237a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800237e:	4622      	mov	r2, r4
 8002380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002384:	4641      	mov	r1, r8
 8002386:	fb01 f202 	mul.w	r2, r1, r2
 800238a:	464d      	mov	r5, r9
 800238c:	4618      	mov	r0, r3
 800238e:	4621      	mov	r1, r4
 8002390:	4603      	mov	r3, r0
 8002392:	fb03 f305 	mul.w	r3, r3, r5
 8002396:	4413      	add	r3, r2
 8002398:	4602      	mov	r2, r0
 800239a:	4641      	mov	r1, r8
 800239c:	fba2 2101 	umull	r2, r1, r2, r1
 80023a0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80023a4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80023a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80023ac:	4413      	add	r3, r2
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80023be:	4629      	mov	r1, r5
 80023c0:	104a      	asrs	r2, r1, #1
 80023c2:	4629      	mov	r1, r5
 80023c4:	17cb      	asrs	r3, r1, #31
 80023c6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80023ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80023ce:	4313      	orrs	r3, r2
 80023d0:	d101      	bne.n	80023d6 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 80023d2:	2300      	movs	r3, #0
 80023d4:	e146      	b.n	8002664 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 80023d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023da:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80023de:	17da      	asrs	r2, r3, #31
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80023e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80023ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023f0:	105b      	asrs	r3, r3, #1
 80023f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023fa:	07db      	lsls	r3, r3, #31
 80023fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002400:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002404:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002408:	4604      	mov	r4, r0
 800240a:	1aa4      	subs	r4, r4, r2
 800240c:	67bc      	str	r4, [r7, #120]	@ 0x78
 800240e:	eb61 0303 	sbc.w	r3, r1, r3
 8002412:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002414:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002418:	4622      	mov	r2, r4
 800241a:	462b      	mov	r3, r5
 800241c:	1891      	adds	r1, r2, r2
 800241e:	6239      	str	r1, [r7, #32]
 8002420:	415b      	adcs	r3, r3
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
 8002424:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002428:	4621      	mov	r1, r4
 800242a:	1851      	adds	r1, r2, r1
 800242c:	61b9      	str	r1, [r7, #24]
 800242e:	4629      	mov	r1, r5
 8002430:	414b      	adcs	r3, r1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002440:	4649      	mov	r1, r9
 8002442:	018b      	lsls	r3, r1, #6
 8002444:	4641      	mov	r1, r8
 8002446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800244a:	4641      	mov	r1, r8
 800244c:	018a      	lsls	r2, r1, #6
 800244e:	4641      	mov	r1, r8
 8002450:	1889      	adds	r1, r1, r2
 8002452:	6139      	str	r1, [r7, #16]
 8002454:	4649      	mov	r1, r9
 8002456:	eb43 0101 	adc.w	r1, r3, r1
 800245a:	6179      	str	r1, [r7, #20]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002468:	4649      	mov	r1, r9
 800246a:	008b      	lsls	r3, r1, #2
 800246c:	46c4      	mov	ip, r8
 800246e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002472:	4641      	mov	r1, r8
 8002474:	008a      	lsls	r2, r1, #2
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	4603      	mov	r3, r0
 800247c:	4622      	mov	r2, r4
 800247e:	189b      	adds	r3, r3, r2
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	460b      	mov	r3, r1
 8002484:	462a      	mov	r2, r5
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002498:	4649      	mov	r1, r9
 800249a:	008b      	lsls	r3, r1, #2
 800249c:	46c4      	mov	ip, r8
 800249e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80024a2:	4641      	mov	r1, r8
 80024a4:	008a      	lsls	r2, r1, #2
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	4622      	mov	r2, r4
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80024b2:	462b      	mov	r3, r5
 80024b4:	460a      	mov	r2, r1
 80024b6:	eb42 0303 	adc.w	r3, r2, r3
 80024ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80024bc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80024c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80024c4:	f7fe fe64 	bl	8001190 <__aeabi_ldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	17da      	asrs	r2, r3, #31
 80024dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80024e4:	f04f 0000 	mov.w	r0, #0
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	0b50      	lsrs	r0, r2, #13
 80024ee:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024f2:	1359      	asrs	r1, r3, #13
 80024f4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80024f8:	462b      	mov	r3, r5
 80024fa:	fb00 f203 	mul.w	r2, r0, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	fb03 f301 	mul.w	r3, r3, r1
 8002504:	4413      	add	r3, r2
 8002506:	4622      	mov	r2, r4
 8002508:	fba2 2100 	umull	r2, r1, r2, r0
 800250c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8002510:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8002514:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002518:	4413      	add	r3, r2
 800251a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800251e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0b50      	lsrs	r0, r2, #13
 800252c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002530:	1359      	asrs	r1, r3, #13
 8002532:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002536:	462b      	mov	r3, r5
 8002538:	fb00 f203 	mul.w	r2, r0, r3
 800253c:	4623      	mov	r3, r4
 800253e:	fb03 f301 	mul.w	r3, r3, r1
 8002542:	4413      	add	r3, r2
 8002544:	4622      	mov	r2, r4
 8002546:	fba2 2100 	umull	r2, r1, r2, r0
 800254a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 800254e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002552:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002556:	4413      	add	r3, r2
 8002558:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002568:	4621      	mov	r1, r4
 800256a:	0e4a      	lsrs	r2, r1, #25
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	460c      	mov	r4, r1
 8002572:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002576:	164b      	asrs	r3, r1, #25
 8002578:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800257c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002580:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002584:	b21b      	sxth	r3, r3
 8002586:	17da      	asrs	r2, r3, #31
 8002588:	663b      	str	r3, [r7, #96]	@ 0x60
 800258a:	667a      	str	r2, [r7, #100]	@ 0x64
 800258c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002590:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002594:	462a      	mov	r2, r5
 8002596:	fb02 f203 	mul.w	r2, r2, r3
 800259a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800259e:	4621      	mov	r1, r4
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025aa:	4621      	mov	r1, r4
 80025ac:	fba2 2101 	umull	r2, r1, r2, r1
 80025b0:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80025b4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80025b8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80025bc:	4413      	add	r3, r2
 80025be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80025ce:	4621      	mov	r1, r4
 80025d0:	0cca      	lsrs	r2, r1, #19
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	460c      	mov	r4, r1
 80025d8:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80025dc:	14cb      	asrs	r3, r1, #19
 80025de:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80025e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80025e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80025ea:	1884      	adds	r4, r0, r2
 80025ec:	65bc      	str	r4, [r7, #88]	@ 0x58
 80025ee:	eb41 0303 	adc.w	r3, r1, r3
 80025f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80025f8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80025fc:	4621      	mov	r1, r4
 80025fe:	1889      	adds	r1, r1, r2
 8002600:	6539      	str	r1, [r7, #80]	@ 0x50
 8002602:	4629      	mov	r1, r5
 8002604:	eb43 0101 	adc.w	r1, r3, r1
 8002608:	6579      	str	r1, [r7, #84]	@ 0x54
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002616:	4623      	mov	r3, r4
 8002618:	0a18      	lsrs	r0, r3, #8
 800261a:	462a      	mov	r2, r5
 800261c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002620:	462b      	mov	r3, r5
 8002622:	1219      	asrs	r1, r3, #8
 8002624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002628:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800262c:	b21b      	sxth	r3, r3
 800262e:	17da      	asrs	r2, r3, #31
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002632:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002640:	464c      	mov	r4, r9
 8002642:	0123      	lsls	r3, r4, #4
 8002644:	46c4      	mov	ip, r8
 8002646:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800264a:	4644      	mov	r4, r8
 800264c:	0122      	lsls	r2, r4, #4
 800264e:	1884      	adds	r4, r0, r2
 8002650:	603c      	str	r4, [r7, #0]
 8002652:	eb41 0303 	adc.w	r3, r1, r3
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	e9d7 3400 	ldrd	r3, r4, [r7]
 800265c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8002660:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8002664:	4618      	mov	r0, r3
 8002666:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800266a:	46bd      	mov	sp, r7
 800266c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002670 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002682:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	039a      	lsls	r2, r3, #14
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800268e:	051b      	lsls	r3, r3, #20
 8002690:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002698:	4619      	mov	r1, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80026a6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80026ae:	4611      	mov	r1, r2
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	fb01 f202 	mul.w	r2, r1, r2
 80026b6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	7f09      	ldrb	r1, [r1, #28]
 80026bc:	4608      	mov	r0, r1
 80026be:	6979      	ldr	r1, [r7, #20]
 80026c0:	fb00 f101 	mul.w	r1, r0, r1
 80026c4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80026c6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80026ca:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80026ce:	1292      	asrs	r2, r2, #10
 80026d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80026da:	fb01 f202 	mul.w	r2, r1, r2
 80026de:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80026e2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	13db      	asrs	r3, r3, #15
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	13d2      	asrs	r2, r2, #15
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	7e12      	ldrb	r2, [r2, #24]
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800270e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002716:	bfa8      	it	ge
 8002718:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800271c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	131b      	asrs	r3, r3, #12
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	@ 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002740:	2b60      	cmp	r3, #96	@ 0x60
 8002742:	d007      	beq.n	8002754 <bmp280_read_fixed+0x28>
		if (humidity)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002750:	2300      	movs	r3, #0
 8002752:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <bmp280_read_fixed+0x32>
 800275a:	2308      	movs	r3, #8
 800275c:	e000      	b.n	8002760 <bmp280_read_fixed+0x34>
 800275e:	2306      	movs	r3, #6
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f107 0218 	add.w	r2, r7, #24
 800276a:	21f7      	movs	r1, #247	@ 0xf7
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fab1 	bl	8001cd4 <read_data>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <bmp280_read_fixed+0x50>
		return false;
 8002778:	2300      	movs	r3, #0
 800277a:	e038      	b.n	80027ee <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800277c:	7e3b      	ldrb	r3, [r7, #24]
 800277e:	031a      	lsls	r2, r3, #12
 8002780:	7e7b      	ldrb	r3, [r7, #25]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4313      	orrs	r3, r2
 8002786:	7eba      	ldrb	r2, [r7, #26]
 8002788:	0912      	lsrs	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4313      	orrs	r3, r2
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002790:	7efb      	ldrb	r3, [r7, #27]
 8002792:	031a      	lsls	r2, r3, #12
 8002794:	7f3b      	ldrb	r3, [r7, #28]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4313      	orrs	r3, r2
 800279a:	7f7a      	ldrb	r2, [r7, #29]
 800279c:	0912      	lsrs	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4313      	orrs	r3, r2
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fc6d 	bl	800208c <compensate_temperature>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fc9c 	bl	80020fc <compensate_pressure>
 80027c4:	4602      	mov	r2, r0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80027d0:	7fbb      	ldrb	r3, [r7, #30]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	7ffa      	ldrb	r2, [r7, #31]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	461a      	mov	r2, r3
 80027de:	6a39      	ldr	r1, [r7, #32]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff ff45 	bl	8002670 <compensate_humidity>
 80027e6:	4602      	mov	r2, r0
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
	}

	return true;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3730      	adds	r7, #48	@ 0x30
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <bmp280_read_float>:

uint8_t bmp280_read_float(BMP280_HandleTypedef *dev, float *data) {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, &fixed_humidity)) {
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	f107 0210 	add.w	r2, r7, #16
 800280a:	f107 0114 	add.w	r1, r7, #20
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ff8c 	bl	800272c <bmp280_read_fixed>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d02b      	beq.n	8002872 <bmp280_read_float+0x7a>
		data[0] = (float) fixed_temperature / 100;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa67 	bl	8000cf0 <__aeabi_i2f>
 8002822:	4603      	mov	r3, r0
 8002824:	4915      	ldr	r1, [pc, #84]	@ (800287c <bmp280_read_float+0x84>)
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fb6a 	bl	8000f00 <__aeabi_fdiv>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	601a      	str	r2, [r3, #0]
		data[1] = (float) fixed_pressure / 256;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa56 	bl	8000ce8 <__aeabi_ui2f>
 800283c:	4602      	mov	r2, r0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	1d1c      	adds	r4, r3, #4
 8002842:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002846:	4610      	mov	r0, r2
 8002848:	f7fe fb5a 	bl	8000f00 <__aeabi_fdiv>
 800284c:	4603      	mov	r3, r0
 800284e:	6023      	str	r3, [r4, #0]
		data[2] = (float) fixed_humidity / 1024;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa48 	bl	8000ce8 <__aeabi_ui2f>
 8002858:	4602      	mov	r2, r0
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f103 0408 	add.w	r4, r3, #8
 8002860:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8002864:	4610      	mov	r0, r2
 8002866:	f7fe fb4b 	bl	8000f00 <__aeabi_fdiv>
 800286a:	4603      	mov	r3, r0
 800286c:	6023      	str	r3, [r4, #0]
		return 0;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <bmp280_read_float+0x7c>
	}

	return 1;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	42c80000 	.word	0x42c80000

08002880 <Crc16>:
uint16_t Crc16(uint8_t *pcBlock, uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Crc16(uint8_t *pcBlock, uint16_t len) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800288c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002890:	81fb      	strh	r3, [r7, #14]
    unsigned char i;
    while (len--) {
 8002892:	e025      	b.n	80028e0 <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	b21a      	sxth	r2, r3
 80028a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028a4:	4053      	eors	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	737b      	strb	r3, [r7, #13]
 80028ae:	e014      	b.n	80028da <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80028b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da09      	bge.n	80028cc <Crc16+0x4c>
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	b21b      	sxth	r3, r3
 80028be:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	e002      	b.n	80028d2 <Crc16+0x52>
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++) {
 80028d4:	7b7b      	ldrb	r3, [r7, #13]
 80028d6:	3301      	adds	r3, #1
 80028d8:	737b      	strb	r3, [r7, #13]
 80028da:	7b7b      	ldrb	r3, [r7, #13]
 80028dc:	2b07      	cmp	r3, #7
 80028de:	d9e7      	bls.n	80028b0 <Crc16+0x30>
    while (len--) {
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	807a      	strh	r2, [r7, #2]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d4      	bne.n	8002894 <Crc16+0x14>
        }
    }
    return crc;
 80028ea:	89fb      	ldrh	r3, [r7, #14]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <Get_MPU_Data>:

void Get_MPU_Data () {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	if (updateMPU(&mpu) == 0) {
 80028fc:	4819      	ldr	r0, [pc, #100]	@ (8002964 <Get_MPU_Data+0x6c>)
 80028fe:	f000 fcd6 	bl	80032ae <updateMPU>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <Get_MPU_Data+0x1e>
		ERROR_REG = ERROR_REG | MPU_READ_ERROR;
 8002908:	4b17      	ldr	r3, [pc, #92]	@ (8002968 <Get_MPU_Data+0x70>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <Get_MPU_Data+0x70>)
 8002914:	701a      	strb	r2, [r3, #0]
	}
	mpuData[0] = getAccX(&mpu);
 8002916:	4813      	ldr	r0, [pc, #76]	@ (8002964 <Get_MPU_Data+0x6c>)
 8002918:	f000 fcf1 	bl	80032fe <getAccX>
 800291c:	4603      	mov	r3, r0
 800291e:	4a13      	ldr	r2, [pc, #76]	@ (800296c <Get_MPU_Data+0x74>)
 8002920:	6013      	str	r3, [r2, #0]
	mpuData[1] = getAccY(&mpu);
 8002922:	4810      	ldr	r0, [pc, #64]	@ (8002964 <Get_MPU_Data+0x6c>)
 8002924:	f000 fcf6 	bl	8003314 <getAccY>
 8002928:	4603      	mov	r3, r0
 800292a:	4a10      	ldr	r2, [pc, #64]	@ (800296c <Get_MPU_Data+0x74>)
 800292c:	6053      	str	r3, [r2, #4]
	mpuData[2] = getAccZ(&mpu);
 800292e:	480d      	ldr	r0, [pc, #52]	@ (8002964 <Get_MPU_Data+0x6c>)
 8002930:	f000 fcfb 	bl	800332a <getAccZ>
 8002934:	4603      	mov	r3, r0
 8002936:	4a0d      	ldr	r2, [pc, #52]	@ (800296c <Get_MPU_Data+0x74>)
 8002938:	6093      	str	r3, [r2, #8]
	mpuData[3] = getGyroX(&mpu);
 800293a:	480a      	ldr	r0, [pc, #40]	@ (8002964 <Get_MPU_Data+0x6c>)
 800293c:	f000 fd00 	bl	8003340 <getGyroX>
 8002940:	4603      	mov	r3, r0
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <Get_MPU_Data+0x74>)
 8002944:	60d3      	str	r3, [r2, #12]
	mpuData[4] = getGyroY(&mpu);
 8002946:	4807      	ldr	r0, [pc, #28]	@ (8002964 <Get_MPU_Data+0x6c>)
 8002948:	f000 fd05 	bl	8003356 <getGyroY>
 800294c:	4603      	mov	r3, r0
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <Get_MPU_Data+0x74>)
 8002950:	6113      	str	r3, [r2, #16]
	mpuData[5] = getGyroZ(&mpu);
 8002952:	4804      	ldr	r0, [pc, #16]	@ (8002964 <Get_MPU_Data+0x6c>)
 8002954:	f000 fd0a 	bl	800336c <getGyroZ>
 8002958:	4603      	mov	r3, r0
 800295a:	4a04      	ldr	r2, [pc, #16]	@ (800296c <Get_MPU_Data+0x74>)
 800295c:	6153      	str	r3, [r2, #20]
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000041c 	.word	0x2000041c
 8002968:	2000061d 	.word	0x2000061d
 800296c:	2000062c 	.word	0x2000062c

08002970 <Make_Tx_Packet>:

void Make_Tx_Packet(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	tx_packet[0] = 0xFF; // PREAMB
 8002974:	4b17      	ldr	r3, [pc, #92]	@ (80029d4 <Make_Tx_Packet+0x64>)
 8002976:	22ff      	movs	r2, #255	@ 0xff
 8002978:	701a      	strb	r2, [r3, #0]
	tx_packet[1] = 0xFF; // PREAMB
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <Make_Tx_Packet+0x64>)
 800297c:	22ff      	movs	r2, #255	@ 0xff
 800297e:	705a      	strb	r2, [r3, #1]
	tx_packet[2] = 0x01; // ID
 8002980:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <Make_Tx_Packet+0x64>)
 8002982:	2201      	movs	r2, #1
 8002984:	709a      	strb	r2, [r3, #2]
	tx_packet[3] = 0x00; // ID
 8002986:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <Make_Tx_Packet+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	70da      	strb	r2, [r3, #3]
	memcpy(tx_packet + 4, mpuData, sizeof(mpuData)); // MPU DATA 24 BYTES
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <Make_Tx_Packet+0x68>)
 800298e:	2218      	movs	r2, #24
 8002990:	4912      	ldr	r1, [pc, #72]	@ (80029dc <Make_Tx_Packet+0x6c>)
 8002992:	4618      	mov	r0, r3
 8002994:	f008 feb1 	bl	800b6fa <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData)), meteo, sizeof(meteo)); // METEO DATA 16 BYTES
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <Make_Tx_Packet+0x70>)
 800299a:	2210      	movs	r2, #16
 800299c:	4911      	ldr	r1, [pc, #68]	@ (80029e4 <Make_Tx_Packet+0x74>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f008 feab 	bl	800b6fa <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo)), &gps, sizeof(gps)); // GPS DATA 12 BYTES
 80029a4:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <Make_Tx_Packet+0x78>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	4910      	ldr	r1, [pc, #64]	@ (80029ec <Make_Tx_Packet+0x7c>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f008 fea5 	bl	800b6fa <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps)), &ERROR_REG, sizeof(ERROR_REG)); // ERROR CODES 1 BYTE
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <Make_Tx_Packet+0x80>)
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <Make_Tx_Packet+0x84>)
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	701a      	strb	r2, [r3, #0]
	crc = Crc16((uint8_t*)tx_packet, 4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps) + sizeof(ERROR_REG));
 80029b8:	2139      	movs	r1, #57	@ 0x39
 80029ba:	4806      	ldr	r0, [pc, #24]	@ (80029d4 <Make_Tx_Packet+0x64>)
 80029bc:	f7ff ff60 	bl	8002880 <Crc16>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <Make_Tx_Packet+0x88>)
 80029c6:	801a      	strh	r2, [r3, #0]
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps) + sizeof(ERROR_REG)), &crc, sizeof(crc)); // CRC 2 BYTES
 80029c8:	4a0c      	ldr	r2, [pc, #48]	@ (80029fc <Make_Tx_Packet+0x8c>)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <Make_Tx_Packet+0x88>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	8013      	strh	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000654 	.word	0x20000654
 80029d8:	20000658 	.word	0x20000658
 80029dc:	2000062c 	.word	0x2000062c
 80029e0:	20000670 	.word	0x20000670
 80029e4:	20000644 	.word	0x20000644
 80029e8:	20000680 	.word	0x20000680
 80029ec:	20000610 	.word	0x20000610
 80029f0:	2000068c 	.word	0x2000068c
 80029f4:	2000061d 	.word	0x2000061d
 80029f8:	20000624 	.word	0x20000624
 80029fc:	2000068d 	.word	0x2000068d

08002a00 <Transmit_Packet>:

void Transmit_Packet(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	lora_status = SX1278_transmit(&SX1278, (uint8_t*) tx_packet, PACKET_LEN, 2000);
 8002a04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a08:	223b      	movs	r2, #59	@ 0x3b
 8002a0a:	490a      	ldr	r1, [pc, #40]	@ (8002a34 <Transmit_Packet+0x34>)
 8002a0c:	480a      	ldr	r0, [pc, #40]	@ (8002a38 <Transmit_Packet+0x38>)
 8002a0e:	f7ff f841 	bl	8001a94 <SX1278_transmit>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <Transmit_Packet+0x3c>)
 8002a16:	6013      	str	r3, [r2, #0]
	if(lora_status <= 0) {
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <Transmit_Packet+0x3c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dc06      	bgt.n	8002a2e <Transmit_Packet+0x2e>
		ERROR_REG = ERROR_REG | PACKET_TRANSMIT_ERROR;
 8002a20:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <Transmit_Packet+0x40>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <Transmit_Packet+0x40>)
 8002a2c:	701a      	strb	r2, [r3, #0]
	}
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000654 	.word	0x20000654
 8002a38:	200004f8 	.word	0x200004f8
 8002a3c:	20000620 	.word	0x20000620
 8002a40:	2000061d 	.word	0x2000061d

08002a44 <Get_BME_Data>:

void Get_BME_Data(void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	if(bmp_status == 0) {
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <Get_BME_Data+0x2c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <Get_BME_Data+0x28>
		if(bmp280_read_float(&bmp280, meteo) != 0) {
 8002a50:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <Get_BME_Data+0x30>)
 8002a52:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <Get_BME_Data+0x34>)
 8002a54:	f7ff fed0 	bl	80027f8 <bmp280_read_float>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <Get_BME_Data+0x28>
			ERROR_REG = ERROR_REG | BMP_READ_ERROR;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <Get_BME_Data+0x38>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <Get_BME_Data+0x38>)
 8002a6a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000061c 	.word	0x2000061c
 8002a74:	20000644 	.word	0x20000644
 8002a78:	200003e8 	.word	0x200003e8
 8002a7c:	2000061d 	.word	0x2000061d

08002a80 <Get_GPS_Data>:

void Get_GPS_Data()	{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, (uint8_t*)gps_input, 1024, 2000);
 8002a84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8c:	490a      	ldr	r1, [pc, #40]	@ (8002ab8 <Get_GPS_Data+0x38>)
 8002a8e:	480b      	ldr	r0, [pc, #44]	@ (8002abc <Get_GPS_Data+0x3c>)
 8002a90:	f006 fa57 	bl	8008f42 <HAL_UART_Receive>
	if (parser(gps_input, 1024, &gps) != 'A') {
 8002a94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac0 <Get_GPS_Data+0x40>)
 8002a96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a9a:	4807      	ldr	r0, [pc, #28]	@ (8002ab8 <Get_GPS_Data+0x38>)
 8002a9c:	f001 fb2e 	bl	80040fc <parser>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b41      	cmp	r3, #65	@ 0x41
 8002aa4:	d006      	beq.n	8002ab4 <Get_GPS_Data+0x34>
		ERROR_REG = ERROR_REG | GPS_NO_DATA;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <Get_GPS_Data+0x44>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <Get_GPS_Data+0x44>)
 8002ab2:	701a      	strb	r2, [r3, #0]
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200006d4 	.word	0x200006d4
 8002abc:	200003a0 	.word	0x200003a0
 8002ac0:	20000610 	.word	0x20000610
 8002ac4:	2000061d 	.word	0x2000061d

08002ac8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d14e      	bne.n	8002b78 <HAL_TIM_IC_CaptureCallback+0xb0>
		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002ada:	2100      	movs	r1, #0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f005 fdc9 	bl	8008674 <HAL_TIM_ReadCapturedValue>
 8002ae2:	6178      	str	r0, [r7, #20]
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f005 fdc4 	bl	8008674 <HAL_TIM_ReadCapturedValue>
 8002aec:	6138      	str	r0, [r7, #16]
		uint32_t duty = (float) 100 * ch / cl;
 8002aee:	6938      	ldr	r0, [r7, #16]
 8002af0:	f7fe f8fa 	bl	8000ce8 <__aeabi_ui2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4923      	ldr	r1, [pc, #140]	@ (8002b84 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f94d 	bl	8000d98 <__aeabi_fmul>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461c      	mov	r4, r3
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7fe f8f0 	bl	8000ce8 <__aeabi_ui2f>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7fe f9f7 	bl	8000f00 <__aeabi_fdiv>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fb1b 	bl	8001150 <__aeabi_f2uiz>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]
		meteo[3] = 2000 * (((float)duty * 10) + 2) / 1002;
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7fe f8e2 	bl	8000ce8 <__aeabi_ui2f>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4918      	ldr	r1, [pc, #96]	@ (8002b88 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe f935 	bl	8000d98 <__aeabi_fmul>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe f827 	bl	8000b88 <__addsf3>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4913      	ldr	r1, [pc, #76]	@ (8002b8c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f92a 	bl	8000d98 <__aeabi_fmul>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4912      	ldr	r1, [pc, #72]	@ (8002b90 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f9d9 	bl	8000f00 <__aeabi_fdiv>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002b54:	60da      	str	r2, [r3, #12]
		if(meteo[3] >= 5000.0){
 8002b56:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	490f      	ldr	r1, [pc, #60]	@ (8002b98 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe facd 	bl	80010fc <__aeabi_fcmpge>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d100      	bne.n	8002b6a <HAL_TIM_IC_CaptureCallback+0xa2>
			ERROR_REG = ERROR_REG | CO2_DATA_ERROR;
		}
	}
}
 8002b68:	e006      	b.n	8002b78 <HAL_TIM_IC_CaptureCallback+0xb0>
			ERROR_REG = ERROR_REG | CO2_DATA_ERROR;
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002b76:	701a      	strb	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	42c80000 	.word	0x42c80000
 8002b88:	41200000 	.word	0x41200000
 8002b8c:	44fa0000 	.word	0x44fa0000
 8002b90:	447a8000 	.word	0x447a8000
 8002b94:	20000644 	.word	0x20000644
 8002b98:	459c4000 	.word	0x459c4000
 8002b9c:	2000061d 	.word	0x2000061d

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ba6:	f001 ffad 	bl	8004b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002baa:	f000 f8bd 	bl	8002d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bae:	f000 fa51 	bl	8003054 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002bb2:	f000 f923 	bl	8002dfc <MX_SPI1_Init>
  MX_I2C1_Init();
 8002bb6:	f000 f8f3 	bl	8002da0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002bba:	f000 f9f5 	bl	8002fa8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002bbe:	f000 f953 	bl	8002e68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002bc2:	f000 fa1d 	bl	8003000 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4847      	ldr	r0, [pc, #284]	@ (8002ce8 <main+0x148>)
 8002bca:	f005 f999 	bl	8007f00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8002bce:	2104      	movs	r1, #4
 8002bd0:	4845      	ldr	r0, [pc, #276]	@ (8002ce8 <main+0x148>)
 8002bd2:	f005 f8d5 	bl	8007d80 <HAL_TIM_IC_Start>

  bmp280_init_default_params(&bmp280.params);
 8002bd6:	4845      	ldr	r0, [pc, #276]	@ (8002cec <main+0x14c>)
 8002bd8:	f7ff f832 	bl	8001c40 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <main+0x150>)
 8002bde:	2276      	movs	r2, #118	@ 0x76
 8002be0:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002be2:	4b43      	ldr	r3, [pc, #268]	@ (8002cf0 <main+0x150>)
 8002be4:	4a43      	ldr	r2, [pc, #268]	@ (8002cf4 <main+0x154>)
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp_status = bmp280_init(&bmp280, &bmp280.params);
 8002be8:	4940      	ldr	r1, [pc, #256]	@ (8002cec <main+0x14c>)
 8002bea:	4841      	ldr	r0, [pc, #260]	@ (8002cf0 <main+0x150>)
 8002bec:	f7ff f9a1 	bl	8001f32 <bmp280_init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <main+0x158>)
 8002bf6:	701a      	strb	r2, [r3, #0]
  if (bmp_status != 0) {
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <main+0x158>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <main+0x6e>
	 ERROR_REG = ERROR_REG | BMP_INIT_ERROR;
 8002c00:	4b3e      	ldr	r3, [pc, #248]	@ (8002cfc <main+0x15c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002cfc <main+0x15c>)
 8002c0c:	701a      	strb	r2, [r3, #0]
  }

  MPU9250SetDefault(&mpu);
 8002c0e:	483c      	ldr	r0, [pc, #240]	@ (8002d00 <main+0x160>)
 8002c10:	f001 f92a 	bl	8003e68 <MPU9250SetDefault>
  if (setupMPU(&mpu, MPU9250_ADDRESS) != 1) {
 8002c14:	21d0      	movs	r1, #208	@ 0xd0
 8002c16:	483a      	ldr	r0, [pc, #232]	@ (8002d00 <main+0x160>)
 8002c18:	f000 fab6 	bl	8003188 <setupMPU>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d006      	beq.n	8002c30 <main+0x90>
	  ERROR_REG = ERROR_REG | MPU_INIT_ERROR;
 8002c22:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <main+0x15c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b33      	ldr	r3, [pc, #204]	@ (8002cfc <main+0x15c>)
 8002c2e:	701a      	strb	r2, [r3, #0]
  }

  SX1278_hw.dio0.port = LORA_DI0_GPIO_Port;
 8002c30:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <main+0x164>)
 8002c32:	4a35      	ldr	r2, [pc, #212]	@ (8002d08 <main+0x168>)
 8002c34:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = LORA_DI0_Pin;
 8002c36:	4b33      	ldr	r3, [pc, #204]	@ (8002d04 <main+0x164>)
 8002c38:	2202      	movs	r2, #2
 8002c3a:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <main+0x164>)
 8002c3e:	4a32      	ldr	r2, [pc, #200]	@ (8002d08 <main+0x168>)
 8002c40:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8002c42:	4b30      	ldr	r3, [pc, #192]	@ (8002d04 <main+0x164>)
 8002c44:	2210      	movs	r2, #16
 8002c46:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8002c48:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <main+0x164>)
 8002c4a:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <main+0x16c>)
 8002c4c:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <main+0x164>)
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8002c54:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <main+0x164>)
 8002c56:	4a2e      	ldr	r2, [pc, #184]	@ (8002d10 <main+0x170>)
 8002c58:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d14 <main+0x174>)
 8002c5c:	4a29      	ldr	r2, [pc, #164]	@ (8002d04 <main+0x164>)
 8002c5e:	601a      	str	r2, [r3, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, PACKET_LEN);
 8002c60:	233b      	movs	r3, #59	@ 0x3b
 8002c62:	9305      	str	r3, [sp, #20]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9303      	str	r3, [sp, #12]
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	2301      	movs	r3, #1
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	2300      	movs	r3, #0
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	a319      	add	r3, pc, #100	@ (adr r3, 8002ce0 <main+0x140>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	4825      	ldr	r0, [pc, #148]	@ (8002d14 <main+0x174>)
 8002c80:	f7fe fedb 	bl	8001a3a <SX1278_init>
  lora_status = SX1278_LoRaEntryTx(&SX1278, PACKET_LEN, 2000);
 8002c84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002c88:	213b      	movs	r1, #59	@ 0x3b
 8002c8a:	4822      	ldr	r0, [pc, #136]	@ (8002d14 <main+0x174>)
 8002c8c:	f7fe fe3e 	bl	800190c <SX1278_LoRaEntryTx>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <main+0x178>)
 8002c94:	6013      	str	r3, [r2, #0]

  start_cycle_time = HAL_GetTick();
 8002c96:	f001 ff8d 	bl	8004bb4 <HAL_GetTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <main+0x17c>)
 8002c9e:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  Get_BME_Data();
 8002ca0:	f7ff fed0 	bl	8002a44 <Get_BME_Data>
	  Get_MPU_Data();
 8002ca4:	f7ff fe28 	bl	80028f8 <Get_MPU_Data>
	  Get_GPS_Data();
 8002ca8:	f7ff feea 	bl	8002a80 <Get_GPS_Data>

	  if(HAL_GetTick() - start_cycle_time >= CYCLE_TIME) {
 8002cac:	f001 ff82 	bl	8004bb4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <main+0x17c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cbc:	d3f0      	bcc.n	8002ca0 <main+0x100>
		  Make_Tx_Packet();
 8002cbe:	f7ff fe57 	bl	8002970 <Make_Tx_Packet>
		  Transmit_Packet();
 8002cc2:	f7ff fe9d 	bl	8002a00 <Transmit_Packet>

		  #ifdef _DEBUG
	  	  	  HAL_UART_Transmit(&huart1, (uint8_t*)tx_packet, PACKET_LEN, 1000);
 8002cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cca:	223b      	movs	r2, #59	@ 0x3b
 8002ccc:	4914      	ldr	r1, [pc, #80]	@ (8002d20 <main+0x180>)
 8002cce:	4815      	ldr	r0, [pc, #84]	@ (8002d24 <main+0x184>)
 8002cd0:	f006 f8b4 	bl	8008e3c <HAL_UART_Transmit>
	  	  #endif

		  start_cycle_time = HAL_GetTick();
 8002cd4:	f001 ff6e 	bl	8004bb4 <HAL_GetTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <main+0x17c>)
 8002cdc:	6013      	str	r3, [r2, #0]
	  Get_BME_Data();
 8002cde:	e7df      	b.n	8002ca0 <main+0x100>
 8002ce0:	19de5080 	.word	0x19de5080
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	20000310 	.word	0x20000310
 8002cec:	20000414 	.word	0x20000414
 8002cf0:	200003e8 	.word	0x200003e8
 8002cf4:	20000264 	.word	0x20000264
 8002cf8:	2000061c 	.word	0x2000061c
 8002cfc:	2000061d 	.word	0x2000061d
 8002d00:	2000041c 	.word	0x2000041c
 8002d04:	200004dc 	.word	0x200004dc
 8002d08:	40010800 	.word	0x40010800
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	200002b8 	.word	0x200002b8
 8002d14:	200004f8 	.word	0x200004f8
 8002d18:	20000620 	.word	0x20000620
 8002d1c:	20000628 	.word	0x20000628
 8002d20:	20000654 	.word	0x20000654
 8002d24:	20000358 	.word	0x20000358

08002d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b090      	sub	sp, #64	@ 0x40
 8002d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2e:	f107 0318 	add.w	r3, r7, #24
 8002d32:	2228      	movs	r2, #40	@ 0x28
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f007 fed3 	bl	800aae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d52:	2310      	movs	r3, #16
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5a:	f107 0318 	add.w	r3, r7, #24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 ff2c 	bl	8006bbc <HAL_RCC_OscConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002d6a:	f000 fa01 	bl	8003170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6e:	230f      	movs	r3, #15
 8002d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 f99a 	bl	80070c0 <HAL_RCC_ClockConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002d92:	f000 f9ed 	bl	8003170 <Error_Handler>
  }
}
 8002d96:	bf00      	nop
 8002d98:	3740      	adds	r7, #64	@ 0x40
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002da6:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <MX_I2C1_Init+0x54>)
 8002da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dac:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <MX_I2C1_Init+0x58>)
 8002dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ddc:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <MX_I2C1_Init+0x50>)
 8002dde:	f002 f9d9 	bl	8005194 <HAL_I2C_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002de8:	f000 f9c2 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000264 	.word	0x20000264
 8002df4:	40005400 	.word	0x40005400
 8002df8:	000186a0 	.word	0x000186a0

08002dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e00:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <MX_SPI1_Init+0x68>)
 8002e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e34:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e40:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e48:	220a      	movs	r2, #10
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e4c:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e4e:	f004 fac5 	bl	80073dc <HAL_SPI_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e58:	f000 f98a 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200002b8 	.word	0x200002b8
 8002e64:	40013000 	.word	0x40013000

08002e68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b090      	sub	sp, #64	@ 0x40
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa4 <MX_TIM1_Init+0x13c>)
 8002ea6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002eb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebc:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec8:	4b35      	ldr	r3, [pc, #212]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ece:	4834      	ldr	r0, [pc, #208]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002ed0:	f004 feae 	bl	8007c30 <HAL_TIM_Base_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002eda:	f000 f949 	bl	8003170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ee4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ee8:	4619      	mov	r1, r3
 8002eea:	482d      	ldr	r0, [pc, #180]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002eec:	f005 fab8 	bl	8008460 <HAL_TIM_ConfigClockSource>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002ef6:	f000 f93b 	bl	8003170 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002efa:	4829      	ldr	r0, [pc, #164]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002efc:	f004 fee7 	bl	8007cce <HAL_TIM_IC_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002f06:	f000 f933 	bl	8003170 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f0e:	2350      	movs	r3, #80	@ 0x50
 8002f10:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	481e      	ldr	r0, [pc, #120]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002f26:	f005 fb62 	bl	80085ee <HAL_TIM_SlaveConfigSynchro>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002f30:	f000 f91e 	bl	8003170 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4814      	ldr	r0, [pc, #80]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002f4e:	f005 f9eb 	bl	8008328 <HAL_TIM_IC_ConfigChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002f58:	f000 f90a 	bl	8003170 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f60:	2302      	movs	r3, #2
 8002f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	2204      	movs	r2, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480c      	ldr	r0, [pc, #48]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002f6e:	f005 f9db 	bl	8008328 <HAL_TIM_IC_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002f78:	f000 f8fa 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_TIM1_Init+0x138>)
 8002f8a:	f005 fe97 	bl	8008cbc <HAL_TIMEx_MasterConfigSynchronization>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002f94:	f000 f8ec 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	3740      	adds	r7, #64	@ 0x40
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000310 	.word	0x20000310
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fae:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <MX_USART1_UART_Init+0x54>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fb4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002fba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fc0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <MX_USART1_UART_Init+0x50>)
 8002fe4:	f005 feda 	bl	8008d9c <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002fee:	f000 f8bf 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000358 	.word	0x20000358
 8002ffc:	40013800 	.word	0x40013800

08003000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <MX_USART2_UART_Init+0x50>)
 8003008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 800300c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003012:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003018:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003024:	4b09      	ldr	r3, [pc, #36]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003026:	220c      	movs	r2, #12
 8003028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003036:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_USART2_UART_Init+0x4c>)
 8003038:	f005 feb0 	bl	8008d9c <HAL_UART_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003042:	f000 f895 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200003a0 	.word	0x200003a0
 8003050:	40004400 	.word	0x40004400

08003054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003068:	4b3d      	ldr	r3, [pc, #244]	@ (8003160 <MX_GPIO_Init+0x10c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a3c      	ldr	r2, [pc, #240]	@ (8003160 <MX_GPIO_Init+0x10c>)
 800306e:	f043 0310 	orr.w	r3, r3, #16
 8003072:	6193      	str	r3, [r2, #24]
 8003074:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <MX_GPIO_Init+0x10c>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003080:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <MX_GPIO_Init+0x10c>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a36      	ldr	r2, [pc, #216]	@ (8003160 <MX_GPIO_Init+0x10c>)
 8003086:	f043 0320 	orr.w	r3, r3, #32
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <MX_GPIO_Init+0x10c>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <MX_GPIO_Init+0x10c>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a30      	ldr	r2, [pc, #192]	@ (8003160 <MX_GPIO_Init+0x10c>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <MX_GPIO_Init+0x10c>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <MX_GPIO_Init+0x10c>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003160 <MX_GPIO_Init+0x10c>)
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b28      	ldr	r3, [pc, #160]	@ (8003160 <MX_GPIO_Init+0x10c>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ce:	4825      	ldr	r0, [pc, #148]	@ (8003164 <MX_GPIO_Init+0x110>)
 80030d0:	f002 f847 	bl	8005162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2110      	movs	r1, #16
 80030d8:	4823      	ldr	r0, [pc, #140]	@ (8003168 <MX_GPIO_Init+0x114>)
 80030da:	f002 f842 	bl	8005162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80030de:	2200      	movs	r2, #0
 80030e0:	2102      	movs	r1, #2
 80030e2:	4822      	ldr	r0, [pc, #136]	@ (800316c <MX_GPIO_Init+0x118>)
 80030e4:	f002 f83d 	bl	8005162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ee:	2301      	movs	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2302      	movs	r3, #2
 80030f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	4619      	mov	r1, r3
 8003100:	4818      	ldr	r0, [pc, #96]	@ (8003164 <MX_GPIO_Init+0x110>)
 8003102:	f001 fe93 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DI0_Pin */
  GPIO_InitStruct.Pin = LORA_DI0_Pin;
 8003106:	2302      	movs	r3, #2
 8003108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_DI0_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	4619      	mov	r1, r3
 8003118:	4813      	ldr	r0, [pc, #76]	@ (8003168 <MX_GPIO_Init+0x114>)
 800311a:	f001 fe87 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 800311e:	2310      	movs	r3, #16
 8003120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2302      	movs	r3, #2
 800312c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	4619      	mov	r1, r3
 8003134:	480c      	ldr	r0, [pc, #48]	@ (8003168 <MX_GPIO_Init+0x114>)
 8003136:	f001 fe79 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 800313a:	2302      	movs	r3, #2
 800313c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313e:	2301      	movs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	2302      	movs	r3, #2
 8003148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0310 	add.w	r3, r7, #16
 800314e:	4619      	mov	r1, r3
 8003150:	4806      	ldr	r0, [pc, #24]	@ (800316c <MX_GPIO_Init+0x118>)
 8003152:	f001 fe6b 	bl	8004e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003156:	bf00      	nop
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40011000 	.word	0x40011000
 8003168:	40010800 	.word	0x40010800
 800316c:	40010c00 	.word	0x40010c00

08003170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003174:	b672      	cpsid	i
}
 8003176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  ERROR_REG = SYSTEM_ERROR;
 8003178:	4b02      	ldr	r3, [pc, #8]	@ (8003184 <Error_Handler+0x14>)
 800317a:	22ff      	movs	r2, #255	@ 0xff
 800317c:	701a      	strb	r2, [r3, #0]
  while (1)
 800317e:	bf00      	nop
 8003180:	e7fd      	b.n	800317e <Error_Handler+0xe>
 8003182:	bf00      	nop
 8003184:	2000061d 	.word	0x2000061d

08003188 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b67      	cmp	r3, #103	@ 0x67
 800319c:	d904      	bls.n	80031a8 <setupMPU+0x20>
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b6f      	cmp	r3, #111	@ 0x6f
 80031a6:	d901      	bls.n	80031ac <setupMPU+0x24>
            return 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e022      	b.n	80031f2 <setupMPU+0x6a>
        }
        //mpu_i2c_addr = addr;


        if (isConnectedMPU9250(MPU9250)==1) {
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f824 	bl	80031fa <isConnectedMPU9250>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d117      	bne.n	80031e8 <setupMPU+0x60>
        	MPU9250_Init(MPU9250);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fcbb 	bl	8003b34 <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f848 	bl	8003254 <isConnectedAK8963>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <setupMPU+0x54>
                initAK8963(MPU9250);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fc36 	bl	8003a3c <initAK8963>
            }
        } else {
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        return 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	e00a      	b.n	80031f2 <setupMPU+0x6a>
            	MPU9250->has_connected = 0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                return 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e004      	b.n	80031f2 <setupMPU+0x6a>
        	MPU9250->has_connected = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            return 0;
 80031f0:	2300      	movs	r3, #0
    }
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 8003200:	2175      	movs	r1, #117	@ 0x75
 8003202:	20d0      	movs	r0, #208	@ 0xd0
 8003204:	f000 fdb0 	bl	8003d68 <readByte>
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2b71      	cmp	r3, #113	@ 0x71
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b73      	cmp	r3, #115	@ 0x73
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	b25a      	sxtb	r2, r3
 8003228:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800322c:	4313      	orrs	r3, r2
 800322e:	b25b      	sxtb	r3, r3
 8003230:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b70      	cmp	r3, #112	@ 0x70
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	b25a      	sxtb	r2, r3
 8003240:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003244:	4313      	orrs	r3, r2
 8003246:	b25b      	sxtb	r3, r3
 8003248:	71bb      	strb	r3, [r7, #6]
	return b;
 800324a:	79bb      	ldrb	r3, [r7, #6]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 800325a:	2100      	movs	r1, #0
 800325c:	2018      	movs	r0, #24
 800325e:	f000 fd83 	bl	8003d68 <readByte>
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b48      	cmp	r3, #72	@ 0x48
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <MPUavailable+0x28>
 800328c:	213a      	movs	r1, #58	@ 0x3a
 800328e:	20d0      	movs	r0, #208	@ 0xd0
 8003290:	f000 fd6a 	bl	8003d68 <readByte>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MPUavailable+0x28>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <MPUavailable+0x2a>
 80032a2:	2300      	movs	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	6078      	str	r0, [r7, #4]
	if (!MPUavailable(MPU9250)==1){
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffdf 	bl	800327a <MPUavailable>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <updateMPU+0x18>
		return 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e017      	b.n	80032f6 <updateMPU+0x48>
	}

	update_accel_gyro(MPU9250);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9ba 	bl	8003640 <update_accel_gyro>
	update_mag(MPU9250);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fa53 	bl	8003778 <update_mag>
    update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f84a 	bl	8003388 <update_rpy>

	return 1;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <getAccX>:
float getAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->a[i] : 0.f; }
float getGyro(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->g[i] : 0.f; }
float getMag(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->m[i] : 0.f; }
float getLinearAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->lin_acc[i] : 0.f; }

float getAccX(MPU9250_t *MPU9250) { return MPU9250->a[0]; }
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <getAccY>:
float getAccY(MPU9250_t *MPU9250) { return MPU9250->a[1]; }
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <getAccZ>:
float getAccZ(MPU9250_t *MPU9250) { return MPU9250->a[2]; }
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <getGyroX>:
float getGyroX(MPU9250_t *MPU9250) { return MPU9250->g[0]; }
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <getGyroY>:
float getGyroY(MPU9250_t *MPU9250) { return MPU9250->g[1]; }
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <getGyroZ>:
float getGyroZ(MPU9250_t *MPU9250) { return MPU9250->g[2]; }
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	0000      	movs	r0, r0
	...

08003388 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b08b      	sub	sp, #44	@ 0x2c
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fcfd 	bl	8000d98 <__aeabi_fmul>
 800339e:	4603      	mov	r3, r0
 80033a0:	461c      	mov	r4, r3
 80033a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f7fd fcf7 	bl	8000d98 <__aeabi_fmul>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4619      	mov	r1, r3
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7fd fbea 	bl	8000b88 <__addsf3>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4619      	mov	r1, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fbe5 	bl	8000b88 <__addsf3>
 80033be:	4603      	mov	r3, r0
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f7fd fce7 	bl	8000d98 <__aeabi_fmul>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461c      	mov	r4, r3
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fce1 	bl	8000d98 <__aeabi_fmul>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4619      	mov	r1, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f7fd fbd4 	bl	8000b88 <__addsf3>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461c      	mov	r4, r3
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6838      	ldr	r0, [r7, #0]
 80033e8:	f7fd fcd6 	bl	8000d98 <__aeabi_fmul>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4619      	mov	r1, r3
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7fd fbc7 	bl	8000b84 <__aeabi_fsub>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461c      	mov	r4, r3
 80033fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80033fe:	f7fd fccb 	bl	8000d98 <__aeabi_fmul>
 8003402:	4603      	mov	r3, r0
 8003404:	4619      	mov	r1, r3
 8003406:	4620      	mov	r0, r4
 8003408:	f7fd fbbc 	bl	8000b84 <__aeabi_fsub>
 800340c:	4603      	mov	r3, r0
 800340e:	623b      	str	r3, [r7, #32]
	        a31 = 2.0f * (qw * qx + qy * qz);
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68b8      	ldr	r0, [r7, #8]
 8003414:	f7fd fcc0 	bl	8000d98 <__aeabi_fmul>
 8003418:	4603      	mov	r3, r0
 800341a:	461c      	mov	r4, r3
 800341c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f7fd fcba 	bl	8000d98 <__aeabi_fmul>
 8003424:	4603      	mov	r3, r0
 8003426:	4619      	mov	r1, r3
 8003428:	4620      	mov	r0, r4
 800342a:	f7fd fbad 	bl	8000b88 <__addsf3>
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fba8 	bl	8000b88 <__addsf3>
 8003438:	4603      	mov	r3, r0
 800343a:	61fb      	str	r3, [r7, #28]
	        a32 = 2.0f * (qx * qz - qw * qy);
 800343c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fcaa 	bl	8000d98 <__aeabi_fmul>
 8003444:	4603      	mov	r3, r0
 8003446:	461c      	mov	r4, r3
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f7fd fca4 	bl	8000d98 <__aeabi_fmul>
 8003450:	4603      	mov	r3, r0
 8003452:	4619      	mov	r1, r3
 8003454:	4620      	mov	r0, r4
 8003456:	f7fd fb95 	bl	8000b84 <__aeabi_fsub>
 800345a:	4603      	mov	r3, r0
 800345c:	4619      	mov	r1, r3
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fb92 	bl	8000b88 <__addsf3>
 8003464:	4603      	mov	r3, r0
 8003466:	61bb      	str	r3, [r7, #24]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f7fd fc94 	bl	8000d98 <__aeabi_fmul>
 8003470:	4603      	mov	r3, r0
 8003472:	461c      	mov	r4, r3
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fc8e 	bl	8000d98 <__aeabi_fmul>
 800347c:	4603      	mov	r3, r0
 800347e:	4619      	mov	r1, r3
 8003480:	4620      	mov	r0, r4
 8003482:	f7fd fb7f 	bl	8000b84 <__aeabi_fsub>
 8003486:	4603      	mov	r3, r0
 8003488:	461c      	mov	r4, r3
 800348a:	6839      	ldr	r1, [r7, #0]
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	f7fd fc83 	bl	8000d98 <__aeabi_fmul>
 8003492:	4603      	mov	r3, r0
 8003494:	4619      	mov	r1, r3
 8003496:	4620      	mov	r0, r4
 8003498:	f7fd fb74 	bl	8000b84 <__aeabi_fsub>
 800349c:	4603      	mov	r3, r0
 800349e:	461c      	mov	r4, r3
 80034a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034a4:	f7fd fc78 	bl	8000d98 <__aeabi_fmul>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4619      	mov	r1, r3
 80034ac:	4620      	mov	r0, r4
 80034ae:	f7fd fb6b 	bl	8000b88 <__addsf3>
 80034b2:	4603      	mov	r3, r0
 80034b4:	617b      	str	r3, [r7, #20]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	69f8      	ldr	r0, [r7, #28]
 80034ba:	f00b f90b 	bl	800e6d4 <atan2f>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 80034c6:	69b8      	ldr	r0, [r7, #24]
 80034c8:	f00b f8e4 	bl	800e694 <asinf>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034dc:	f00b f8fa 	bl	800e6d4 <atan2f>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fc ffa4 	bl	800043c <__aeabi_f2d>
 80034f4:	a34c      	add	r3, pc, #304	@ (adr r3, 8003628 <update_rpy+0x2a0>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f7fc fff7 	bl	80004ec <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fae9 	bl	8000adc <__aeabi_d2f>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003518:	4618      	mov	r0, r3
 800351a:	f7fc ff8f 	bl	800043c <__aeabi_f2d>
 800351e:	a342      	add	r3, pc, #264	@ (adr r3, 8003628 <update_rpy+0x2a0>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fc ffe2 	bl	80004ec <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fad4 	bl	8000adc <__aeabi_d2f>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ff7a 	bl	800043c <__aeabi_f2d>
 8003548:	a337      	add	r3, pc, #220	@ (adr r3, 8003628 <update_rpy+0x2a0>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fc ffcd 	bl	80004ec <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fabf 	bl	8000adc <__aeabi_d2f>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7fd fb08 	bl	8000b88 <__addsf3>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003588:	4929      	ldr	r1, [pc, #164]	@ (8003630 <update_rpy+0x2a8>)
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fdb6 	bl	80010fc <__aeabi_fcmpge>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <update_rpy+0x228>
	        	MPU9250->rpy[2] -= 360.f;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800359c:	4925      	ldr	r1, [pc, #148]	@ (8003634 <update_rpy+0x2ac>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd faf0 	bl	8000b84 <__aeabi_fsub>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80035ae:	e015      	b.n	80035dc <update_rpy+0x254>
	        else if (MPU9250->rpy[2] < -180.f)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035b6:	4920      	ldr	r1, [pc, #128]	@ (8003638 <update_rpy+0x2b0>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fd8b 	bl	80010d4 <__aeabi_fcmplt>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <update_rpy+0x254>
	        	MPU9250->rpy[2] += 360.f;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035ca:	491a      	ldr	r1, [pc, #104]	@ (8003634 <update_rpy+0x2ac>)
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd fadb 	bl	8000b88 <__addsf3>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fad0 	bl	8000b88 <__addsf3>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	69b9      	ldr	r1, [r7, #24]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fac5 	bl	8000b88 <__addsf3>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360c:	6979      	ldr	r1, [r7, #20]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fab8 	bl	8000b84 <__aeabi_fsub>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
}
 800361e:	bf00      	nop
 8003620:	372c      	adds	r7, #44	@ 0x2c
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	1a63c1f8 	.word	0x1a63c1f8
 800362c:	404ca5dc 	.word	0x404ca5dc
 8003630:	43340000 	.word	0x43340000
 8003634:	43b40000 	.word	0x43b40000
 8003638:	c3340000 	.word	0xc3340000
 800363c:	00000000 	.word	0x00000000

08003640 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f94b 	bl	80038e8 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution;  // get actual g value, this depends on scale being set
 8003652:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fb4a 	bl	8000cf0 <__aeabi_i2f>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f7fd fb97 	bl	8000d98 <__aeabi_fmul>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	66da      	str	r2, [r3, #108]	@ 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution;
 8003672:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fb3a 	bl	8000cf0 <__aeabi_i2f>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fd fb87 	bl	8000d98 <__aeabi_fmul>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	671a      	str	r2, [r3, #112]	@ 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution;
 8003692:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fb2a 	bl	8000cf0 <__aeabi_i2f>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f7fd fb77 	bl	8000d98 <__aeabi_fmul>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	675a      	str	r2, [r3, #116]	@ 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 80036b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fb14 	bl	8000cf0 <__aeabi_i2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc feb6 	bl	800043c <__aeabi_f2d>
 80036d0:	a325      	add	r3, pc, #148	@ (adr r3, 8003768 <update_accel_gyro+0x128>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd f833 	bl	8000740 <__aeabi_ddiv>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <update_accel_gyro+0x130>)
 80036e8:	f7fc fd4a 	bl	8000180 <__adddf3>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7fd f9f2 	bl	8000adc <__aeabi_d2f>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	651a      	str	r2, [r3, #80]	@ 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution;  // get actual gyro value, this depends on scale being set
 80036fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd faf4 	bl	8000cf0 <__aeabi_i2f>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fd fb41 	bl	8000d98 <__aeabi_fmul>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	679a      	str	r2, [r3, #120]	@ 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution;
 800371e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fae4 	bl	8000cf0 <__aeabi_i2f>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fd fb31 	bl	8000d98 <__aeabi_fmul>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	67da      	str	r2, [r3, #124]	@ 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution;
 800373e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fad4 	bl	8000cf0 <__aeabi_i2f>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fd fb21 	bl	8000d98 <__aeabi_fmul>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	851eb852 	.word	0x851eb852
 800376c:	4074ddeb 	.word	0x4074ddeb
 8003770:	40350000 	.word	0x40350000
 8003774:	00000000 	.word	0x00000000

08003778 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 8003780:	2300      	movs	r3, #0
 8003782:	81bb      	strh	r3, [r7, #12]
 8003784:	2300      	movs	r3, #0
 8003786:	81fb      	strh	r3, [r7, #14]
 8003788:	2300      	movs	r3, #0
 800378a:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f8fd 	bl	8003990 <readMag>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 809c 	bne.w	80038d6 <update_mag+0x15e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe4a 	bl	800043c <__aeabi_f2d>
 80037a8:	a34d      	add	r3, pc, #308	@ (adr r3, 80038e0 <update_mag+0x168>)
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f7fc ffc7 	bl	8000740 <__aeabi_ddiv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f98f 	bl	8000adc <__aeabi_d2f>
 80037be:	4603      	mov	r3, r0
 80037c0:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 80037c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fa92 	bl	8000cf0 <__aeabi_i2f>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7fd fadf 	bl	8000d98 <__aeabi_fmul>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fd fad7 	bl	8000d98 <__aeabi_fmul>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461c      	mov	r4, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd facf 	bl	8000d98 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4619      	mov	r1, r3
 80037fe:	4620      	mov	r0, r4
 8003800:	f7fd f9c0 	bl	8000b84 <__aeabi_fsub>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7fd fac2 	bl	8000d98 <__aeabi_fmul>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 800381e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fa64 	bl	8000cf0 <__aeabi_i2f>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fd fab1 	bl	8000d98 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fd faa9 	bl	8000d98 <__aeabi_fmul>
 8003846:	4603      	mov	r3, r0
 8003848:	461c      	mov	r4, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd faa1 	bl	8000d98 <__aeabi_fmul>
 8003856:	4603      	mov	r3, r0
 8003858:	4619      	mov	r1, r3
 800385a:	4620      	mov	r0, r4
 800385c:	f7fd f992 	bl	8000b84 <__aeabi_fsub>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fd fa94 	bl	8000d98 <__aeabi_fmul>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 800387a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fa36 	bl	8000cf0 <__aeabi_i2f>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7fd fa83 	bl	8000d98 <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7fd fa7b 	bl	8000d98 <__aeabi_fmul>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461c      	mov	r4, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa73 	bl	8000d98 <__aeabi_fmul>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fd f964 	bl	8000b84 <__aeabi_fsub>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fd fa66 	bl	8000d98 <__aeabi_fmul>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
    }
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd90      	pop	{r4, r7, pc}
 80038de:	bf00      	nop
 80038e0:	d7fd7fd8 	.word	0xd7fd7fd8
 80038e4:	3ff7fd7f 	.word	0x3ff7fd7f

080038e8 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 80038f0:	f107 0308 	add.w	r3, r7, #8
 80038f4:	220e      	movs	r2, #14
 80038f6:	213b      	movs	r1, #59	@ 0x3b
 80038f8:	20d0      	movs	r0, #208	@ 0xd0
 80038fa:	f000 fa5b 	bl	8003db4 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 80038fe:	7a3b      	ldrb	r3, [r7, #8]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b21a      	sxth	r2, r3
 8003904:	7a7b      	ldrb	r3, [r7, #9]
 8003906:	b21b      	sxth	r3, r3
 8003908:	4313      	orrs	r3, r2
 800390a:	b21a      	sxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8003910:	7abb      	ldrb	r3, [r7, #10]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	b219      	sxth	r1, r3
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	b21a      	sxth	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3302      	adds	r3, #2
 800391e:	430a      	orrs	r2, r1
 8003920:	b212      	sxth	r2, r2
 8003922:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 8003924:	7b3b      	ldrb	r3, [r7, #12]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	b219      	sxth	r1, r3
 800392a:	7b7b      	ldrb	r3, [r7, #13]
 800392c:	b21a      	sxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	430a      	orrs	r2, r1
 8003934:	b212      	sxth	r2, r2
 8003936:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b219      	sxth	r1, r3
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	b21a      	sxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3306      	adds	r3, #6
 8003946:	430a      	orrs	r2, r1
 8003948:	b212      	sxth	r2, r2
 800394a:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 800394c:	7c3b      	ldrb	r3, [r7, #16]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	b219      	sxth	r1, r3
 8003952:	7c7b      	ldrb	r3, [r7, #17]
 8003954:	b21a      	sxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3308      	adds	r3, #8
 800395a:	430a      	orrs	r2, r1
 800395c:	b212      	sxth	r2, r2
 800395e:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 8003960:	7cbb      	ldrb	r3, [r7, #18]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	b219      	sxth	r1, r3
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	b21a      	sxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	330a      	adds	r3, #10
 800396e:	430a      	orrs	r2, r1
 8003970:	b212      	sxth	r2, r2
 8003972:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 8003974:	7d3b      	ldrb	r3, [r7, #20]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	b219      	sxth	r1, r3
 800397a:	7d7b      	ldrb	r3, [r7, #21]
 800397c:	b21a      	sxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	330c      	adds	r3, #12
 8003982:	430a      	orrs	r2, r1
 8003984:	b212      	sxth	r2, r2
 8003986:	801a      	strh	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <readMag>:


uint8_t readMag(int16_t* destination)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 8003998:	2102      	movs	r1, #2
 800399a:	2018      	movs	r0, #24
 800399c:	f000 f9e4 	bl	8003d68 <readByte>
 80039a0:	4603      	mov	r3, r0
 80039a2:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03f      	beq.n	8003a2e <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	2207      	movs	r2, #7
 80039b4:	2103      	movs	r1, #3
 80039b6:	2018      	movs	r0, #24
 80039b8:	f000 f9fc 	bl	8003db4 <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 80039bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a38 <readMag+0xa8>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <readMag+0x44>
 80039c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <readMag+0xa8>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d003      	beq.n	80039d4 <readMag+0x44>
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <readMag+0xa8>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d106      	bne.n	80039e2 <readMag+0x52>
	                if ((st1 & 0x02) != 0)                                       // check if data is not skipped
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 80039de:	2300      	movs	r3, #0
 80039e0:	e026      	b.n	8003a30 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 80039e2:	7cbb      	ldrb	r3, [r7, #18]
 80039e4:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 80039e6:	7dbb      	ldrb	r3, [r7, #22]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11e      	bne.n	8003a2e <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 80039f0:	7b7b      	ldrb	r3, [r7, #13]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	b21a      	sxth	r2, r3
 80039f6:	7b3b      	ldrb	r3, [r7, #12]
 80039f8:	b21b      	sxth	r3, r3
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	b219      	sxth	r1, r3
 8003a08:	7bbb      	ldrb	r3, [r7, #14]
 8003a0a:	b21a      	sxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	430a      	orrs	r2, r1
 8003a12:	b212      	sxth	r2, r2
 8003a14:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8003a16:	7c7b      	ldrb	r3, [r7, #17]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	b219      	sxth	r1, r3
 8003a1c:	7c3b      	ldrb	r3, [r7, #16]
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	430a      	orrs	r2, r1
 8003a26:	b212      	sxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]
	                return 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <readMag+0xa0>
	            }
	        }
	        return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000003 	.word	0x20000003

08003a3c <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003a44:	2200      	movs	r2, #0
 8003a46:	210a      	movs	r1, #10
 8003a48:	2018      	movs	r0, #24
 8003a4a:	f000 f9ef 	bl	8003e2c <writeByte>
  HAL_Delay(100);
 8003a4e:	2064      	movs	r0, #100	@ 0x64
 8003a50:	f001 f8ba 	bl	8004bc8 <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003a54:	220f      	movs	r2, #15
 8003a56:	210a      	movs	r1, #10
 8003a58:	2018      	movs	r0, #24
 8003a5a:	f000 f9e7 	bl	8003e2c <writeByte>
  HAL_Delay(100);
 8003a5e:	2064      	movs	r0, #100	@ 0x64
 8003a60:	f001 f8b2 	bl	8004bc8 <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2203      	movs	r2, #3
 8003a6a:	2110      	movs	r1, #16
 8003a6c:	2018      	movs	r0, #24
 8003a6e:	f000 f9a1 	bl	8003db4 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8003a72:	7b3b      	ldrb	r3, [r7, #12]
 8003a74:	3b80      	subs	r3, #128	@ 0x80
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd f93a 	bl	8000cf0 <__aeabi_i2f>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fa3c 	bl	8000f00 <__aeabi_fdiv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd f87a 	bl	8000b88 <__addsf3>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003a9c:	7b7b      	ldrb	r3, [r7, #13]
 8003a9e:	3b80      	subs	r3, #128	@ 0x80
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd f925 	bl	8000cf0 <__aeabi_i2f>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fa27 	bl	8000f00 <__aeabi_fdiv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd f865 	bl	8000b88 <__addsf3>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
 8003ac8:	3b80      	subs	r3, #128	@ 0x80
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd f910 	bl	8000cf0 <__aeabi_i2f>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fa12 	bl	8000f00 <__aeabi_fdiv>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd f850 	bl	8000b88 <__addsf3>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003af0:	2200      	movs	r2, #0
 8003af2:	210a      	movs	r1, #10
 8003af4:	2018      	movs	r0, #24
 8003af6:	f000 f999 	bl	8003e2c <writeByte>
  HAL_Delay(100);
 8003afa:	2064      	movs	r0, #100	@ 0x64
 8003afc:	f001 f864 	bl	8004bc8 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <initAK8963+0xf0>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	b25a      	sxtb	r2, r3
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <initAK8963+0xf4>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	210a      	movs	r1, #10
 8003b18:	2018      	movs	r0, #24
 8003b1a:	f000 f987 	bl	8003e2c <writeByte>
  HAL_Delay(100);
 8003b1e:	2064      	movs	r0, #100	@ 0x64
 8003b20:	f001 f852 	bl	8004bc8 <HAL_Delay>
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000002 	.word	0x20000002
 8003b30:	20000003 	.word	0x20000003

08003b34 <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8e3 	bl	8003d08 <getAres>
	getGres(MPU9250);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8ac 	bl	8003ca0 <getGres>
	getMres(MPU9250);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f88b 	bl	8003c64 <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003b4e:	2280      	movs	r2, #128	@ 0x80
 8003b50:	216b      	movs	r1, #107	@ 0x6b
 8003b52:	20d0      	movs	r0, #208	@ 0xd0
 8003b54:	f000 f96a 	bl	8003e2c <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8003b58:	2064      	movs	r0, #100	@ 0x64
 8003b5a:	f001 f835 	bl	8004bc8 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003b5e:	2200      	movs	r2, #0
 8003b60:	216b      	movs	r1, #107	@ 0x6b
 8003b62:	20d0      	movs	r0, #208	@ 0xd0
 8003b64:	f000 f962 	bl	8003e2c <writeByte>
	HAL_Delay(100);
 8003b68:	2064      	movs	r0, #100	@ 0x64
 8003b6a:	f001 f82d 	bl	8004bc8 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003b6e:	2201      	movs	r2, #1
 8003b70:	216b      	movs	r1, #107	@ 0x6b
 8003b72:	20d0      	movs	r0, #208	@ 0xd0
 8003b74:	f000 f95a 	bl	8003e2c <writeByte>
	HAL_Delay(100);
 8003b78:	2064      	movs	r0, #100	@ 0x64
 8003b7a:	f001 f825 	bl	8004bc8 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003b7e:	2203      	movs	r2, #3
 8003b80:	211a      	movs	r1, #26
 8003b82:	20d0      	movs	r0, #208	@ 0xd0
 8003b84:	f000 f952 	bl	8003e2c <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8003b88:	2204      	movs	r2, #4
 8003b8a:	2119      	movs	r1, #25
 8003b8c:	20d0      	movs	r0, #208	@ 0xd0
 8003b8e:	f000 f94d 	bl	8003e2c <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 8003b92:	211b      	movs	r1, #27
 8003b94:	20d0      	movs	r0, #208	@ 0xd0
 8003b96:	f000 f8e7 	bl	8003d68 <readByte>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	f023 0318 	bic.w	r3, r3, #24
 8003bb4:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 8003bb6:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <MPU9250_Init+0x128>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	b25a      	sxtb	r2, r3
 8003bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	73fb      	strb	r3, [r7, #15]
	  c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	f043 0303 	orr.w	r3, r3, #3
 8003bce:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	211b      	movs	r1, #27
 8003bd6:	20d0      	movs	r0, #208	@ 0xd0
 8003bd8:	f000 f928 	bl	8003e2c <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8003bdc:	211c      	movs	r1, #28
 8003bde:	20d0      	movs	r0, #208	@ 0xd0
 8003be0:	f000 f8c2 	bl	8003d68 <readByte>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	f023 0318 	bic.w	r3, r3, #24
 8003bf6:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <MPU9250_Init+0x12c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	b25a      	sxtb	r2, r3
 8003c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	211c      	movs	r1, #28
 8003c10:	20d0      	movs	r0, #208	@ 0xd0
 8003c12:	f000 f90b 	bl	8003e2c <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8003c16:	211d      	movs	r1, #29
 8003c18:	20d0      	movs	r0, #208	@ 0xd0
 8003c1a:	f000 f8a5 	bl	8003d68 <readByte>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	f043 0303 	orr.w	r3, r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	461a      	mov	r2, r3
 8003c36:	211d      	movs	r1, #29
 8003c38:	20d0      	movs	r0, #208	@ 0xd0
 8003c3a:	f000 f8f7 	bl	8003e2c <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8003c3e:	2222      	movs	r2, #34	@ 0x22
 8003c40:	2137      	movs	r1, #55	@ 0x37
 8003c42:	20d0      	movs	r0, #208	@ 0xd0
 8003c44:	f000 f8f2 	bl	8003e2c <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2138      	movs	r1, #56	@ 0x38
 8003c4c:	20d0      	movs	r0, #208	@ 0xd0
 8003c4e:	f000 f8ed 	bl	8003e2c <writeByte>

}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000001 	.word	0x20000001
 8003c60:	20000000 	.word	0x20000000

08003c64 <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8003c6c:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <getMres+0x30>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d002      	beq.n	8003c7a <getMres+0x16>
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d004      	beq.n	8003c82 <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8003c78:	e007      	b.n	8003c8a <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a06      	ldr	r2, [pc, #24]	@ (8003c98 <getMres+0x34>)
 8003c7e:	609a      	str	r2, [r3, #8]
          break;
 8003c80:	e003      	b.n	8003c8a <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a05      	ldr	r2, [pc, #20]	@ (8003c9c <getMres+0x38>)
 8003c86:	609a      	str	r2, [r3, #8]
          break;
 8003c88:	bf00      	nop
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	20000002 	.word	0x20000002
 8003c98:	40bfebff 	.word	0x40bfebff
 8003c9c:	3fbfebff 	.word	0x3fbfebff

08003ca0 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <getGres+0x54>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d81a      	bhi.n	8003ce8 <getGres+0x48>
 8003cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <getGres+0x18>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cd1 	.word	0x08003cd1
 8003cc0:	08003cd9 	.word	0x08003cd9
 8003cc4:	08003ce1 	.word	0x08003ce1
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf8 <getGres+0x58>)
 8003ccc:	605a      	str	r2, [r3, #4]
          break;
 8003cce:	e00b      	b.n	8003ce8 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <getGres+0x5c>)
 8003cd4:	605a      	str	r2, [r3, #4]
          break;
 8003cd6:	e007      	b.n	8003ce8 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a09      	ldr	r2, [pc, #36]	@ (8003d00 <getGres+0x60>)
 8003cdc:	605a      	str	r2, [r3, #4]
          break;
 8003cde:	e003      	b.n	8003ce8 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a08      	ldr	r2, [pc, #32]	@ (8003d04 <getGres+0x64>)
 8003ce4:	605a      	str	r2, [r3, #4]
          break;
 8003ce6:	bf00      	nop
  }
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000001 	.word	0x20000001
 8003cf8:	3bfa0000 	.word	0x3bfa0000
 8003cfc:	3c7a0000 	.word	0x3c7a0000
 8003d00:	3cfa0000 	.word	0x3cfa0000
 8003d04:	3d7a0000 	.word	0x3d7a0000

08003d08 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8003d10:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <getAres+0x5c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d81e      	bhi.n	8003d58 <getAres+0x50>
 8003d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <getAres+0x18>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	08003d4f 	.word	0x08003d4f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8003d36:	601a      	str	r2, [r3, #0]
          break;
 8003d38:	e00e      	b.n	8003d58 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8003d40:	601a      	str	r2, [r3, #0]
          break;
 8003d42:	e009      	b.n	8003d58 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8003d4a:	601a      	str	r2, [r3, #0]
          break;
 8003d4c:	e004      	b.n	8003d58 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8003d54:	601a      	str	r2, [r3, #0]
          break;
 8003d56:	bf00      	nop
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000000 	.word	0x20000000

08003d68 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460a      	mov	r2, r1
 8003d72:	71fb      	strb	r3, [r7, #7]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8003d78:	79bb      	ldrb	r3, [r7, #6]
 8003d7a:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	b299      	uxth	r1, r3
 8003d80:	f107 0208 	add.w	r2, r7, #8
 8003d84:	2364      	movs	r3, #100	@ 0x64
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4809      	ldr	r0, [pc, #36]	@ (8003db0 <readByte+0x48>)
 8003d8c:	f001 fb46 	bl	800541c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	b299      	uxth	r1, r3
 8003d94:	f107 020c 	add.w	r2, r7, #12
 8003d98:	2364      	movs	r3, #100	@ 0x64
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4804      	ldr	r0, [pc, #16]	@ (8003db0 <readByte+0x48>)
 8003da0:	f001 fc3a 	bl	8005618 <HAL_I2C_Master_Receive>

	return data[0];
 8003da4:	7b3b      	ldrb	r3, [r7, #12]

}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000264 	.word	0x20000264

08003db4 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	@ 0x28
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	71bb      	strb	r3, [r7, #6]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	f107 0208 	add.w	r2, r7, #8
 8003dd4:	2364      	movs	r3, #100	@ 0x64
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4813      	ldr	r0, [pc, #76]	@ (8003e28 <readBytes+0x74>)
 8003ddc:	f001 fb1e 	bl	800541c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	b299      	uxth	r1, r3
 8003de4:	797b      	ldrb	r3, [r7, #5]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f107 020c 	add.w	r2, r7, #12
 8003dec:	2064      	movs	r0, #100	@ 0x64
 8003dee:	9000      	str	r0, [sp, #0]
 8003df0:	480d      	ldr	r0, [pc, #52]	@ (8003e28 <readBytes+0x74>)
 8003df2:	f001 fc11 	bl	8005618 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e00b      	b.n	8003e14 <readBytes+0x60>
			dest[ii] = data[ii];
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4413      	add	r3, r2
 8003e02:	f107 010c 	add.w	r1, r7, #12
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	440a      	add	r2, r1
 8003e0a:	7812      	ldrb	r2, [r2, #0]
 8003e0c:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	797b      	ldrb	r3, [r7, #5]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	dbef      	blt.n	8003dfc <readBytes+0x48>
		}

}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000264 	.word	0x20000264

08003e2c <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
 8003e36:	460b      	mov	r3, r1
 8003e38:	71bb      	strb	r3, [r7, #6]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8003e3e:	79bb      	ldrb	r3, [r7, #6]
 8003e40:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8003e42:	797b      	ldrb	r3, [r7, #5]
 8003e44:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	b299      	uxth	r1, r3
 8003e4a:	f107 020c 	add.w	r2, r7, #12
 8003e4e:	2364      	movs	r3, #100	@ 0x64
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2302      	movs	r3, #2
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <writeByte+0x38>)
 8003e56:	f001 fae1 	bl	800541c <HAL_I2C_Master_Transmit>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000264 	.word	0x20000264

08003e68 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	@ 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	62da      	str	r2, [r3, #44]	@ 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	635a      	str	r2, [r3, #52]	@ 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003eee:	63da      	str	r2, [r3, #60]	@ 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a44      	ldr	r2, [pc, #272]	@ (8004014 <MPU9250SetDefault+0x1ac>)
 8003f04:	649a      	str	r2, [r3, #72]	@ 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	651a      	str	r2, [r3, #80]	@ 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	661a      	str	r2, [r3, #96]	@ 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	665a      	str	r2, [r3, #100]	@ 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	669a      	str	r2, [r3, #104]	@ 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	66da      	str	r2, [r3, #108]	@ 0x6c
	MPU9250 -> a[1] = 0.;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	671a      	str	r2, [r3, #112]	@ 0x70
	MPU9250 -> a[2] = 0.;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	675a      	str	r2, [r3, #116]	@ 0x74
	MPU9250 -> g[0] = 0.;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	679a      	str	r2, [r3, #120]	@ 0x78
	MPU9250 -> g[1] = 0.;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
	MPU9250 -> g[2] = 0.;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MPU9250 -> m[0] = 0.;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MPU9250 -> m[1] = 0.;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MPU9250 -> m[2] = 0.;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	MPU9250 -> q[1] = 0.;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	MPU9250 -> q[2] = 0.;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MPU9250 -> q[3] = 0.;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MPU9250 -> rpy[0] = 0.;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU9250 -> rpy[1] = 0.;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	MPU9250 -> rpy[2] = 0.;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	MPU9250 -> has_connected = 0;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	MPU9250 -> n_filter_iter = 1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	412e8f5c 	.word	0x412e8f5c

08004018 <converter_time>:
#include <stdlib.h>
#include <string.h>
#include <time.h>


uint32_t converter_time(char* TimeStamp, char* date) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b08e      	sub	sp, #56	@ 0x38
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
    struct tm tm_time = {0};  // Инициализируем структуру tm нулями
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	2224      	movs	r2, #36	@ 0x24
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f006 fd59 	bl	800aae2 <memset>
    char buff[3] = {0};  // Временный буфер для преобразования
 8004030:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <converter_time+0xe0>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	81bb      	strh	r3, [r7, #12]
 8004036:	2300      	movs	r3, #0
 8004038:	73bb      	strb	r3, [r7, #14]

    // Разбор даты (формат DDMMYY)
    buff[0] = date[0];
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	733b      	strb	r3, [r7, #12]
    buff[1] = date[1];
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	737b      	strb	r3, [r7, #13]
    tm_time.tm_mday = atoi(buff);  // День
 8004046:	f107 030c 	add.w	r3, r7, #12
 800404a:	4618      	mov	r0, r3
 800404c:	f005 f908 	bl	8009260 <atoi>
 8004050:	4603      	mov	r3, r0
 8004052:	61fb      	str	r3, [r7, #28]

    buff[0] = date[2];
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	789b      	ldrb	r3, [r3, #2]
 8004058:	733b      	strb	r3, [r7, #12]
    buff[1] = date[3];
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	78db      	ldrb	r3, [r3, #3]
 800405e:	737b      	strb	r3, [r7, #13]
    tm_time.tm_mon = atoi(buff) - 1;  // Месяц (0-11, поэтому нужно вычесть 1)
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4618      	mov	r0, r3
 8004066:	f005 f8fb 	bl	8009260 <atoi>
 800406a:	4603      	mov	r3, r0
 800406c:	3b01      	subs	r3, #1
 800406e:	623b      	str	r3, [r7, #32]

    buff[0] = date[4];
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	733b      	strb	r3, [r7, #12]
    buff[1] = date[5];
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	795b      	ldrb	r3, [r3, #5]
 800407a:	737b      	strb	r3, [r7, #13]
    tm_time.tm_year = atoi(buff) + 100;  // Год с учетом 1900, поэтому добавляем 100
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	4618      	mov	r0, r3
 8004082:	f005 f8ed 	bl	8009260 <atoi>
 8004086:	4603      	mov	r3, r0
 8004088:	3364      	adds	r3, #100	@ 0x64
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Разбор времени (формат HHMMSS)
    buff[0] = TimeStamp[0];
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[1];
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	737b      	strb	r3, [r7, #13]
    tm_time.tm_hour = atoi(buff);  // Часы
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	4618      	mov	r0, r3
 800409e:	f005 f8df 	bl	8009260 <atoi>
 80040a2:	4603      	mov	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]

    buff[0] = TimeStamp[2];
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	789b      	ldrb	r3, [r3, #2]
 80040aa:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[3];
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	78db      	ldrb	r3, [r3, #3]
 80040b0:	737b      	strb	r3, [r7, #13]
    tm_time.tm_min = atoi(buff);  // Минуты
 80040b2:	f107 030c 	add.w	r3, r7, #12
 80040b6:	4618      	mov	r0, r3
 80040b8:	f005 f8d2 	bl	8009260 <atoi>
 80040bc:	4603      	mov	r3, r0
 80040be:	617b      	str	r3, [r7, #20]

    buff[0] = TimeStamp[4];
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	791b      	ldrb	r3, [r3, #4]
 80040c4:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[5];
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	795b      	ldrb	r3, [r3, #5]
 80040ca:	737b      	strb	r3, [r7, #13]
    tm_time.tm_sec = atoi(buff);  // Секунды
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 f8c5 	bl	8009260 <atoi>
 80040d6:	4603      	mov	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]

    // Преобразуем tm в количество секунд с 1 января 1970 года
    uint32_t seconds = mktime(&tm_time);
 80040da:	f107 0310 	add.w	r3, r7, #16
 80040de:	4618      	mov	r0, r3
 80040e0:	f006 fdee 	bl	800acc0 <mktime>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4613      	mov	r3, r2
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34

    return seconds;
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3738      	adds	r7, #56	@ 0x38
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	0800ed88 	.word	0x0800ed88

080040fc <parser>:

uint8_t parser(char *inpString, uint16_t len, GPS* gps) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b0bc      	sub	sp, #240	@ 0xf0
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	460b      	mov	r3, r1
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	817b      	strh	r3, [r7, #10]
	
	char buff_for_init_data[6] = {0};  // Буфер для поиска строки "GNRMC"
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004110:	2300      	movs	r3, #0
 8004112:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    int start_index = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    char c;
	
	// Поиск строки "GNRMC"
    for (int k = 0; k < len; k++) {
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004122:	e03b      	b.n	800419c <parser+0xa0>
        for (int i = 0; i < 5 && k + i < len; i++) {
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800412a:	e014      	b.n	8004156 <parser+0x5a>
            buff_for_init_data[i] = inpString[k + i];
 800412c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	4413      	add	r3, r2
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	7819      	ldrb	r1, [r3, #0]
 800413e:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004146:	4413      	add	r3, r2
 8004148:	460a      	mov	r2, r1
 800414a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 5 && k + i < len; i++) {
 800414c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004150:	3301      	adds	r3, #1
 8004152:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415a:	2b04      	cmp	r3, #4
 800415c:	dc07      	bgt.n	800416e <parser+0x72>
 800415e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004166:	441a      	add	r2, r3
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	429a      	cmp	r2, r3
 800416c:	dbde      	blt.n	800412c <parser+0x30>
        }
        buff_for_init_data[5] = '\0';
 800416e:	2300      	movs	r3, #0
 8004170:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
        if (strcmp(buff_for_init_data, "GNRMC") == 0) {
 8004174:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004178:	49c6      	ldr	r1, [pc, #792]	@ (8004494 <parser+0x398>)
 800417a:	4618      	mov	r0, r3
 800417c:	f7fb ffe8 	bl	8000150 <strcmp>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <parser+0x96>
            start_index = k + 5;  // Начинаем после "GNRMC,"
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418a:	3305      	adds	r3, #5
 800418c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            break;
 8004190:	e009      	b.n	80041a6 <parser+0xaa>
    for (int k = 0; k < len; k++) {
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	3301      	adds	r3, #1
 8004198:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041a2:	429a      	cmp	r2, r3
 80041a4:	dbbe      	blt.n	8004124 <parser+0x28>
        }
    }
	
	if (start_index == 0) {
 80041a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <parser+0xb6>
        return 2;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e1c4      	b.n	800453c <parser+0x440>
    char for_tokens[128];
    if (for_tokens == NULL) {
        return 3;
    }
	
	int i = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (inpString[start_index] != '\n' && inpString[start_index] != '\r') {
 80041b8:	e011      	b.n	80041de <parser+0xe2>
        for_tokens[i++] = inpString[start_index++];
 80041ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041c4:	461a      	mov	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	441a      	add	r2, r3
 80041ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ce:	1c59      	adds	r1, r3, #1
 80041d0:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	33f0      	adds	r3, #240	@ 0xf0
 80041d8:	443b      	add	r3, r7
 80041da:	f803 2ca4 	strb.w	r2, [r3, #-164]
    while (inpString[start_index] != '\n' && inpString[start_index] != '\r') {
 80041de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b0a      	cmp	r3, #10
 80041ea:	d006      	beq.n	80041fa <parser+0xfe>
 80041ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b0d      	cmp	r3, #13
 80041f8:	d1df      	bne.n	80041ba <parser+0xbe>
    }
    for_tokens[i] = '\0';
 80041fa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004202:	4413      	add	r3, r2
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]

    // Парсинг строки для извлечения данных
    char timeStamp[11] = {0}, status[2] = {0}, latitude[12] = {0}, ns[2] = {0};
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	@ 0x40
 800420c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f8c3 2003 	str.w	r2, [r3, #3]
 8004218:	2300      	movs	r3, #0
 800421a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800421c:	2300      	movs	r3, #0
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004220:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    char longitude[13] = {0}, ew[2] = {0}, date[7] = {0};
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	f107 0320 	add.w	r3, r7, #32
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	721a      	strb	r2, [r3, #8]
 800423e:	2300      	movs	r3, #0
 8004240:	833b      	strh	r3, [r7, #24]
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	f107 0314 	add.w	r3, r7, #20
 800424a:	2100      	movs	r1, #0
 800424c:	460a      	mov	r2, r1
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	460a      	mov	r2, r1
 8004252:	709a      	strb	r2, [r3, #2]
	char ts = 0, lt = 0, lg = 0, dt = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 800425a:	2300      	movs	r3, #0
 800425c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004260:	2300      	movs	r3, #0
 8004262:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 8004266:	2300      	movs	r3, #0
 8004268:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
	
	
	i = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	int count = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    
    while((c = for_tokens[i]) != '\n' && c != '\r'){
 8004278:	e12e      	b.n	80044d8 <parser+0x3dc>

		if (c == ','){
 800427a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800427e:	2b2c      	cmp	r3, #44	@ 0x2c
 8004280:	d10a      	bne.n	8004298 <parser+0x19c>
			count++;
 8004282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004286:	3301      	adds	r3, #1
 8004288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			i++;
 800428c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004290:	3301      	adds	r3, #1
 8004292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 8004296:	e11f      	b.n	80044d8 <parser+0x3dc>
		}
		
		if (count == 1){
 8004298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429c:	2b01      	cmp	r3, #1
 800429e:	d12c      	bne.n	80042fa <parser+0x1fe>
			while(c != ',' && c != '\n' && c != '\r'){
 80042a0:	e017      	b.n	80042d2 <parser+0x1d6>
				timeStamp[ts++] = c;
 80042a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	f887 20db 	strb.w	r2, [r7, #219]	@ 0xdb
 80042ac:	33f0      	adds	r3, #240	@ 0xf0
 80042ae:	443b      	add	r3, r7
 80042b0:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 80042b4:	f803 2cb0 	strb.w	r2, [r3, #-176]
				c = for_tokens[++i];
 80042b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042bc:	3301      	adds	r3, #1
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042c2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80042c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 80042d2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042d6:	2b2c      	cmp	r3, #44	@ 0x2c
 80042d8:	d007      	beq.n	80042ea <parser+0x1ee>
 80042da:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042de:	2b0a      	cmp	r3, #10
 80042e0:	d003      	beq.n	80042ea <parser+0x1ee>
 80042e2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042e6:	2b0d      	cmp	r3, #13
 80042e8:	d1db      	bne.n	80042a2 <parser+0x1a6>
			}
			timeStamp[ts] = '\0';
 80042ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042ee:	33f0      	adds	r3, #240	@ 0xf0
 80042f0:	443b      	add	r3, r7
 80042f2:	2200      	movs	r2, #0
 80042f4:	f803 2cb0 	strb.w	r2, [r3, #-176]
 80042f8:	e0ee      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 2){
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d10c      	bne.n	800431c <parser+0x220>
			status[0] = c;
 8004302:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004306:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			status[1] = '\0';
 800430a:	2300      	movs	r3, #0
 800430c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			i++;
 8004310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800431a:	e0dd      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 3){
 800431c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004320:	2b03      	cmp	r3, #3
 8004322:	d12c      	bne.n	800437e <parser+0x282>
			while(c != ',' && c != '\n' && c != '\r'){
 8004324:	e017      	b.n	8004356 <parser+0x25a>
				latitude[lt++] = c;
 8004326:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	f887 20da 	strb.w	r2, [r7, #218]	@ 0xda
 8004330:	33f0      	adds	r3, #240	@ 0xf0
 8004332:	443b      	add	r3, r7
 8004334:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8004338:	f803 2cc0 	strb.w	r2, [r3, #-192]
				c = for_tokens[++i];
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004340:	3301      	adds	r3, #1
 8004342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004346:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 8004356:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800435a:	2b2c      	cmp	r3, #44	@ 0x2c
 800435c:	d007      	beq.n	800436e <parser+0x272>
 800435e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004362:	2b0a      	cmp	r3, #10
 8004364:	d003      	beq.n	800436e <parser+0x272>
 8004366:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800436a:	2b0d      	cmp	r3, #13
 800436c:	d1db      	bne.n	8004326 <parser+0x22a>
			}
			latitude[lt] = '\0';
 800436e:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8004372:	33f0      	adds	r3, #240	@ 0xf0
 8004374:	443b      	add	r3, r7
 8004376:	2200      	movs	r2, #0
 8004378:	f803 2cc0 	strb.w	r2, [r3, #-192]
 800437c:	e0ac      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 4){
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d10c      	bne.n	80043a0 <parser+0x2a4>
			ns[0] = c;
 8004386:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800438a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			ns[1] = '\0';
 800438e:	2300      	movs	r3, #0
 8004390:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			i++;
 8004394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004398:	3301      	adds	r3, #1
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800439e:	e09b      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 5){
 80043a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d12c      	bne.n	8004402 <parser+0x306>
			while(c != ',' && c != '\n' && c != '\r'){
 80043a8:	e017      	b.n	80043da <parser+0x2de>
				longitude[lg++] = c;
 80043aa:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	f887 20d9 	strb.w	r2, [r7, #217]	@ 0xd9
 80043b4:	33f0      	adds	r3, #240	@ 0xf0
 80043b6:	443b      	add	r3, r7
 80043b8:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 80043bc:	f803 2cd4 	strb.w	r2, [r3, #-212]
				c = for_tokens[++i];				
 80043c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043c4:	3301      	adds	r3, #1
 80043c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d2:	4413      	add	r3, r2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 80043da:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043de:	2b2c      	cmp	r3, #44	@ 0x2c
 80043e0:	d007      	beq.n	80043f2 <parser+0x2f6>
 80043e2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043e6:	2b0a      	cmp	r3, #10
 80043e8:	d003      	beq.n	80043f2 <parser+0x2f6>
 80043ea:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043ee:	2b0d      	cmp	r3, #13
 80043f0:	d1db      	bne.n	80043aa <parser+0x2ae>
			}
			longitude[lg] = '\0';
 80043f2:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80043f6:	33f0      	adds	r3, #240	@ 0xf0
 80043f8:	443b      	add	r3, r7
 80043fa:	2200      	movs	r2, #0
 80043fc:	f803 2cd4 	strb.w	r2, [r3, #-212]
 8004400:	e06a      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 6){
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004406:	2b06      	cmp	r3, #6
 8004408:	d10a      	bne.n	8004420 <parser+0x324>
			ew[0] = c;
 800440a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800440e:	763b      	strb	r3, [r7, #24]
			ew[1] = '\0';
 8004410:	2300      	movs	r3, #0
 8004412:	767b      	strb	r3, [r7, #25]
			i++;
 8004414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004418:	3301      	adds	r3, #1
 800441a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800441e:	e05b      	b.n	80044d8 <parser+0x3dc>
		}
		else if (count == 9){
 8004420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004424:	2b09      	cmp	r3, #9
 8004426:	d12c      	bne.n	8004482 <parser+0x386>
			while(c != ',' && c != '\n' && c != '\r'){
 8004428:	e017      	b.n	800445a <parser+0x35e>
				date[dt++] = c;
 800442a:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	f887 20d8 	strb.w	r2, [r7, #216]	@ 0xd8
 8004434:	33f0      	adds	r3, #240	@ 0xf0
 8004436:	443b      	add	r3, r7
 8004438:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 800443c:	f803 2ce0 	strb.w	r2, [r3, #-224]
				c = for_tokens[++i];
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004444:	3301      	adds	r3, #1
 8004446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800444a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 800445a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800445e:	2b2c      	cmp	r3, #44	@ 0x2c
 8004460:	d007      	beq.n	8004472 <parser+0x376>
 8004462:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004466:	2b0a      	cmp	r3, #10
 8004468:	d003      	beq.n	8004472 <parser+0x376>
 800446a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800446e:	2b0d      	cmp	r3, #13
 8004470:	d1db      	bne.n	800442a <parser+0x32e>
			}
			date[dt] = '\0';
 8004472:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8004476:	33f0      	adds	r3, #240	@ 0xf0
 8004478:	443b      	add	r3, r7
 800447a:	2200      	movs	r2, #0
 800447c:	f803 2ce0 	strb.w	r2, [r3, #-224]
 8004480:	e02a      	b.n	80044d8 <parser+0x3dc>
		}
		else if ( count > 6 && count < 9){
 8004482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004486:	2b06      	cmp	r3, #6
 8004488:	dd20      	ble.n	80044cc <parser+0x3d0>
 800448a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448e:	2b08      	cmp	r3, #8
 8004490:	dc1c      	bgt.n	80044cc <parser+0x3d0>
			while(c != ',' && c != '\n' && c != '\r'){
 8004492:	e00e      	b.n	80044b2 <parser+0x3b6>
 8004494:	0800ed8c 	.word	0x0800ed8c
				c = for_tokens[++i];
 8004498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449c:	3301      	adds	r3, #1
 800449e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80044a2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80044a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044aa:	4413      	add	r3, r2
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 80044b2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80044b6:	2b2c      	cmp	r3, #44	@ 0x2c
 80044b8:	d00d      	beq.n	80044d6 <parser+0x3da>
 80044ba:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80044be:	2b0a      	cmp	r3, #10
 80044c0:	d009      	beq.n	80044d6 <parser+0x3da>
 80044c2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80044c6:	2b0d      	cmp	r3, #13
 80044c8:	d1e6      	bne.n	8004498 <parser+0x39c>
			}
			continue;
 80044ca:	e004      	b.n	80044d6 <parser+0x3da>
		}
		else if (count > 9){
 80044cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	dc13      	bgt.n	80044fc <parser+0x400>
 80044d4:	e000      	b.n	80044d8 <parser+0x3dc>
			continue;
 80044d6:	bf00      	nop
    while((c = for_tokens[i]) != '\n' && c != '\r'){
 80044d8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80044dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e0:	4413      	add	r3, r2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80044e8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80044ec:	2b0a      	cmp	r3, #10
 80044ee:	d006      	beq.n	80044fe <parser+0x402>
 80044f0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80044f4:	2b0d      	cmp	r3, #13
 80044f6:	f47f aec0 	bne.w	800427a <parser+0x17e>
 80044fa:	e000      	b.n	80044fe <parser+0x402>
			break;
 80044fc:	bf00      	nop
		}
		
	}
	
	gps->lat = strtof(latitude, NULL); // Готовые данные
 80044fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f005 fcab 	bl	8009e60 <strtof>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
	gps->lon = strtof(longitude, NULL); // Готовые данные
 8004510:	f107 031c 	add.w	r3, r7, #28
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f005 fca2 	bl	8009e60 <strtof>
 800451c:	4602      	mov	r2, r0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	605a      	str	r2, [r3, #4]
	gps->secs = converter_time(timeStamp, date); // Время
 8004522:	f107 0210 	add.w	r2, r7, #16
 8004526:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fd73 	bl	8004018 <converter_time>
 8004532:	4602      	mov	r2, r0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]

	return (uint8_t)status[0];
 8004538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c

	
}
 800453c:	4618      	mov	r0, r3
 800453e:	37f0      	adds	r7, #240	@ 0xf0
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <HAL_MspInit+0x5c>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	4a14      	ldr	r2, [pc, #80]	@ (80045a0 <HAL_MspInit+0x5c>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6193      	str	r3, [r2, #24]
 8004556:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_MspInit+0x5c>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	4b0f      	ldr	r3, [pc, #60]	@ (80045a0 <HAL_MspInit+0x5c>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4a0e      	ldr	r2, [pc, #56]	@ (80045a0 <HAL_MspInit+0x5c>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456c:	61d3      	str	r3, [r2, #28]
 800456e:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_MspInit+0x5c>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <HAL_MspInit+0x60>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	4a04      	ldr	r2, [pc, #16]	@ (80045a4 <HAL_MspInit+0x60>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40010000 	.word	0x40010000

080045a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 0310 	add.w	r3, r7, #16
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <HAL_I2C_MspInit+0x70>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d123      	bne.n	8004610 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c8:	4b14      	ldr	r3, [pc, #80]	@ (800461c <HAL_I2C_MspInit+0x74>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	4a13      	ldr	r2, [pc, #76]	@ (800461c <HAL_I2C_MspInit+0x74>)
 80045ce:	f043 0308 	orr.w	r3, r3, #8
 80045d2:	6193      	str	r3, [r2, #24]
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <HAL_I2C_MspInit+0x74>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045e0:	23c0      	movs	r3, #192	@ 0xc0
 80045e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e4:	2312      	movs	r3, #18
 80045e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045e8:	2303      	movs	r3, #3
 80045ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	4619      	mov	r1, r3
 80045f2:	480b      	ldr	r0, [pc, #44]	@ (8004620 <HAL_I2C_MspInit+0x78>)
 80045f4:	f000 fc1a 	bl	8004e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045f8:	4b08      	ldr	r3, [pc, #32]	@ (800461c <HAL_I2C_MspInit+0x74>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4a07      	ldr	r2, [pc, #28]	@ (800461c <HAL_I2C_MspInit+0x74>)
 80045fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004602:	61d3      	str	r3, [r2, #28]
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_I2C_MspInit+0x74>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40005400 	.word	0x40005400
 800461c:	40021000 	.word	0x40021000
 8004620:	40010c00 	.word	0x40010c00

08004624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <HAL_SPI_MspInit+0x88>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d12f      	bne.n	80046a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	4a19      	ldr	r2, [pc, #100]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 800464a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800464e:	6193      	str	r3, [r2, #24]
 8004650:	4b17      	ldr	r3, [pc, #92]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465c:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4a13      	ldr	r2, [pc, #76]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6193      	str	r3, [r2, #24]
 8004668:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <HAL_SPI_MspInit+0x8c>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004674:	23a0      	movs	r3, #160	@ 0xa0
 8004676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800467c:	2303      	movs	r3, #3
 800467e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	4619      	mov	r1, r3
 8004686:	480b      	ldr	r0, [pc, #44]	@ (80046b4 <HAL_SPI_MspInit+0x90>)
 8004688:	f000 fbd0 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800468c:	2340      	movs	r3, #64	@ 0x40
 800468e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	4619      	mov	r1, r3
 800469e:	4805      	ldr	r0, [pc, #20]	@ (80046b4 <HAL_SPI_MspInit+0x90>)
 80046a0:	f000 fbc4 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80046a4:	bf00      	nop
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013000 	.word	0x40013000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40010800 	.word	0x40010800

080046b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_TIM_Base_MspInit+0xb4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d144      	bne.n	8004762 <HAL_TIM_Base_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046d8:	4b25      	ldr	r3, [pc, #148]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4a24      	ldr	r2, [pc, #144]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046e2:	6193      	str	r3, [r2, #24]
 80046e4:	4b22      	ldr	r3, [pc, #136]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	6193      	str	r3, [r2, #24]
 80046fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004770 <HAL_TIM_Base_MspInit+0xb8>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800470c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	4619      	mov	r1, r3
 800471c:	4815      	ldr	r0, [pc, #84]	@ (8004774 <HAL_TIM_Base_MspInit+0xbc>)
 800471e:	f000 fb85 	bl	8004e2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	2018      	movs	r0, #24
 8004728:	f000 fb49 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800472c:	2018      	movs	r0, #24
 800472e:	f000 fb62 	bl	8004df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	2019      	movs	r0, #25
 8004738:	f000 fb41 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800473c:	2019      	movs	r0, #25
 800473e:	f000 fb5a 	bl	8004df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	201a      	movs	r0, #26
 8004748:	f000 fb39 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800474c:	201a      	movs	r0, #26
 800474e:	f000 fb52 	bl	8004df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	2100      	movs	r1, #0
 8004756:	201b      	movs	r0, #27
 8004758:	f000 fb31 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800475c:	201b      	movs	r0, #27
 800475e:	f000 fb4a 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004762:	bf00      	nop
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40021000 	.word	0x40021000
 8004774:	40010800 	.word	0x40010800

08004778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	@ 0x28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 0318 	add.w	r3, r7, #24
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a37      	ldr	r2, [pc, #220]	@ (8004870 <HAL_UART_MspInit+0xf8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d132      	bne.n	80047fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004798:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4a35      	ldr	r2, [pc, #212]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 800479e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047a2:	6193      	str	r3, [r2, #24]
 80047a4:	4b33      	ldr	r3, [pc, #204]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b0:	4b30      	ldr	r3, [pc, #192]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6193      	str	r3, [r2, #24]
 80047bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047d2:	2303      	movs	r3, #3
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d6:	f107 0318 	add.w	r3, r7, #24
 80047da:	4619      	mov	r1, r3
 80047dc:	4826      	ldr	r0, [pc, #152]	@ (8004878 <HAL_UART_MspInit+0x100>)
 80047de:	f000 fb25 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f0:	f107 0318 	add.w	r3, r7, #24
 80047f4:	4619      	mov	r1, r3
 80047f6:	4820      	ldr	r0, [pc, #128]	@ (8004878 <HAL_UART_MspInit+0x100>)
 80047f8:	f000 fb18 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047fc:	e034      	b.n	8004868 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <HAL_UART_MspInit+0x104>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d12f      	bne.n	8004868 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004808:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	61d3      	str	r3, [r2, #28]
 8004814:	4b17      	ldr	r3, [pc, #92]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004820:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4a13      	ldr	r2, [pc, #76]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	6193      	str	r3, [r2, #24]
 800482c:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <HAL_UART_MspInit+0xfc>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004838:	2304      	movs	r3, #4
 800483a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004844:	f107 0318 	add.w	r3, r7, #24
 8004848:	4619      	mov	r1, r3
 800484a:	480b      	ldr	r0, [pc, #44]	@ (8004878 <HAL_UART_MspInit+0x100>)
 800484c:	f000 faee 	bl	8004e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004850:	2308      	movs	r3, #8
 8004852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485c:	f107 0318 	add.w	r3, r7, #24
 8004860:	4619      	mov	r1, r3
 8004862:	4805      	ldr	r0, [pc, #20]	@ (8004878 <HAL_UART_MspInit+0x100>)
 8004864:	f000 fae2 	bl	8004e2c <HAL_GPIO_Init>
}
 8004868:	bf00      	nop
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40013800 	.word	0x40013800
 8004874:	40021000 	.word	0x40021000
 8004878:	40010800 	.word	0x40010800
 800487c:	40004400 	.word	0x40004400

08004880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <NMI_Handler+0x4>

08004888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <HardFault_Handler+0x4>

08004890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <MemManage_Handler+0x4>

08004898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <BusFault_Handler+0x4>

080048a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <UsageFault_Handler+0x4>

080048a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048d0:	f000 f95e 	bl	8004b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048dc:	4802      	ldr	r0, [pc, #8]	@ (80048e8 <TIM1_BRK_IRQHandler+0x10>)
 80048de:	f003 fc1b 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000310 	.word	0x20000310

080048ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048f0:	4802      	ldr	r0, [pc, #8]	@ (80048fc <TIM1_UP_IRQHandler+0x10>)
 80048f2:	f003 fc11 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000310 	.word	0x20000310

08004900 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004904:	4802      	ldr	r0, [pc, #8]	@ (8004910 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004906:	f003 fc07 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000310 	.word	0x20000310

08004914 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004918:	4802      	ldr	r0, [pc, #8]	@ (8004924 <TIM1_CC_IRQHandler+0x10>)
 800491a:	f003 fbfd 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000310 	.word	0x20000310

08004928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return 1;
 800492c:	2301      	movs	r3, #1
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <_kill>:

int _kill(int pid, int sig)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004940:	f006 fe96 	bl	800b670 <__errno>
 8004944:	4603      	mov	r3, r0
 8004946:	2216      	movs	r2, #22
 8004948:	601a      	str	r2, [r3, #0]
  return -1;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_exit>:

void _exit (int status)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800495e:	f04f 31ff 	mov.w	r1, #4294967295
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ffe7 	bl	8004936 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <_exit+0x12>

0800496c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e00a      	b.n	8004994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800497e:	f3af 8000 	nop.w
 8004982:	4601      	mov	r1, r0
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	60ba      	str	r2, [r7, #8]
 800498a:	b2ca      	uxtb	r2, r1
 800498c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	dbf0      	blt.n	800497e <_read+0x12>
  }

  return len;
 800499c:	687b      	ldr	r3, [r7, #4]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e009      	b.n	80049cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	60ba      	str	r2, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	dbf1      	blt.n	80049b8 <_write+0x12>
  }
  return len;
 80049d4:	687b      	ldr	r3, [r7, #4]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <_close>:

int _close(int file)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a04:	605a      	str	r2, [r3, #4]
  return 0;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <_isatty>:

int _isatty(int file)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a1a:	2301      	movs	r3, #1
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
	...

08004a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a48:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <_sbrk+0x5c>)
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <_sbrk+0x60>)
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <_sbrk+0x64>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <_sbrk+0x64>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <_sbrk+0x68>)
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <_sbrk+0x64>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a70:	f006 fdfe 	bl	800b670 <__errno>
 8004a74:	4603      	mov	r3, r0
 8004a76:	220c      	movs	r2, #12
 8004a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7e:	e009      	b.n	8004a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a80:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a86:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <_sbrk+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4a05      	ldr	r2, [pc, #20]	@ (8004aa4 <_sbrk+0x64>)
 8004a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20005000 	.word	0x20005000
 8004aa0:	00000400 	.word	0x00000400
 8004aa4:	20000ad8 	.word	0x20000ad8
 8004aa8:	20000c50 	.word	0x20000c50

08004aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ab8:	f7ff fff8 	bl	8004aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004abc:	480b      	ldr	r0, [pc, #44]	@ (8004aec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004abe:	490c      	ldr	r1, [pc, #48]	@ (8004af0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8004af4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ac4:	e002      	b.n	8004acc <LoopCopyDataInit>

08004ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aca:	3304      	adds	r3, #4

08004acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad0:	d3f9      	bcc.n	8004ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad2:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004ad4:	4c09      	ldr	r4, [pc, #36]	@ (8004afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ad8:	e001      	b.n	8004ade <LoopFillZerobss>

08004ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004adc:	3204      	adds	r2, #4

08004ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae0:	d3fb      	bcc.n	8004ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ae2:	f006 fdcb 	bl	800b67c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ae6:	f7fe f85b 	bl	8002ba0 <main>
  bx lr
 8004aea:	4770      	bx	lr
  ldr r0, =_sdata
 8004aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004af0:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004af4:	0800f380 	.word	0x0800f380
  ldr r2, =_sbss
 8004af8:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004afc:	20000c50 	.word	0x20000c50

08004b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b00:	e7fe      	b.n	8004b00 <ADC1_2_IRQHandler>
	...

08004b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b08:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <HAL_Init+0x28>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <HAL_Init+0x28>)
 8004b0e:	f043 0310 	orr.w	r3, r3, #16
 8004b12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b14:	2003      	movs	r0, #3
 8004b16:	f000 f947 	bl	8004da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b1a:	200f      	movs	r0, #15
 8004b1c:	f000 f808 	bl	8004b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b20:	f7ff fd10 	bl	8004544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000

08004b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b38:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <HAL_InitTick+0x54>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <HAL_InitTick+0x58>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f95f 	bl	8004e12 <HAL_SYSTICK_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00e      	b.n	8004b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d80a      	bhi.n	8004b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b64:	2200      	movs	r2, #0
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	f000 f927 	bl	8004dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b70:	4a06      	ldr	r2, [pc, #24]	@ (8004b8c <HAL_InitTick+0x5c>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000008 	.word	0x20000008
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <HAL_IncTick+0x1c>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_IncTick+0x20>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a03      	ldr	r2, [pc, #12]	@ (8004bb0 <HAL_IncTick+0x20>)
 8004ba2:	6013      	str	r3, [r2, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	20000adc 	.word	0x20000adc

08004bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004bb8:	4b02      	ldr	r3, [pc, #8]	@ (8004bc4 <HAL_GetTick+0x10>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20000adc 	.word	0x20000adc

08004bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_GetTick>
 8004bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d005      	beq.n	8004bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004be2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <HAL_Delay+0x44>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bee:	bf00      	nop
 8004bf0:	f7ff ffe0 	bl	8004bb4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d8f7      	bhi.n	8004bf0 <HAL_Delay+0x28>
  {
  }
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000010 	.word	0x20000010

08004c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c42:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	60d3      	str	r3, [r2, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c5c:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <__NVIC_GetPriorityGrouping+0x18>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 0307 	and.w	r3, r3, #7
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	db0b      	blt.n	8004c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	4906      	ldr	r1, [pc, #24]	@ (8004ca8 <__NVIC_EnableIRQ+0x34>)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2001      	movs	r0, #1
 8004c96:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d74:	d301      	bcc.n	8004d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00f      	b.n	8004d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <SysTick_Config+0x40>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d82:	210f      	movs	r1, #15
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f7ff ff90 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <SysTick_Config+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <SysTick_Config+0x40>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000e010 	.word	0xe000e010

08004da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff2d 	bl	8004c10 <__NVIC_SetPriorityGrouping>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd0:	f7ff ff42 	bl	8004c58 <__NVIC_GetPriorityGrouping>
 8004dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff90 	bl	8004d00 <NVIC_EncodePriority>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff5f 	bl	8004cac <__NVIC_SetPriority>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff35 	bl	8004c74 <__NVIC_EnableIRQ>
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ffa2 	bl	8004d64 <SysTick_Config>
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b08b      	sub	sp, #44	@ 0x2c
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e3e:	e169      	b.n	8005114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e40:	2201      	movs	r2, #1
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	f040 8158 	bne.w	800510e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a9a      	ldr	r2, [pc, #616]	@ (80050cc <HAL_GPIO_Init+0x2a0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d05e      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e68:	4a98      	ldr	r2, [pc, #608]	@ (80050cc <HAL_GPIO_Init+0x2a0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d875      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e6e:	4a98      	ldr	r2, [pc, #608]	@ (80050d0 <HAL_GPIO_Init+0x2a4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d058      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e74:	4a96      	ldr	r2, [pc, #600]	@ (80050d0 <HAL_GPIO_Init+0x2a4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d86f      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e7a:	4a96      	ldr	r2, [pc, #600]	@ (80050d4 <HAL_GPIO_Init+0x2a8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d052      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e80:	4a94      	ldr	r2, [pc, #592]	@ (80050d4 <HAL_GPIO_Init+0x2a8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d869      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e86:	4a94      	ldr	r2, [pc, #592]	@ (80050d8 <HAL_GPIO_Init+0x2ac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04c      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e8c:	4a92      	ldr	r2, [pc, #584]	@ (80050d8 <HAL_GPIO_Init+0x2ac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d863      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e92:	4a92      	ldr	r2, [pc, #584]	@ (80050dc <HAL_GPIO_Init+0x2b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d046      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e98:	4a90      	ldr	r2, [pc, #576]	@ (80050dc <HAL_GPIO_Init+0x2b0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d85d      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e9e:	2b12      	cmp	r3, #18
 8004ea0:	d82a      	bhi.n	8004ef8 <HAL_GPIO_Init+0xcc>
 8004ea2:	2b12      	cmp	r3, #18
 8004ea4:	d859      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <HAL_GPIO_Init+0x80>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004f13 	.word	0x08004f13
 8004eb8:	08004f55 	.word	0x08004f55
 8004ebc:	08004f5b 	.word	0x08004f5b
 8004ec0:	08004f5b 	.word	0x08004f5b
 8004ec4:	08004f5b 	.word	0x08004f5b
 8004ec8:	08004f5b 	.word	0x08004f5b
 8004ecc:	08004f5b 	.word	0x08004f5b
 8004ed0:	08004f5b 	.word	0x08004f5b
 8004ed4:	08004f5b 	.word	0x08004f5b
 8004ed8:	08004f5b 	.word	0x08004f5b
 8004edc:	08004f5b 	.word	0x08004f5b
 8004ee0:	08004f5b 	.word	0x08004f5b
 8004ee4:	08004f5b 	.word	0x08004f5b
 8004ee8:	08004f5b 	.word	0x08004f5b
 8004eec:	08004f5b 	.word	0x08004f5b
 8004ef0:	08004f09 	.word	0x08004f09
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <HAL_GPIO_Init+0x2b4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004efe:	e02c      	b.n	8004f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	623b      	str	r3, [r7, #32]
          break;
 8004f06:	e029      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	623b      	str	r3, [r7, #32]
          break;
 8004f10:	e024      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	3308      	adds	r3, #8
 8004f18:	623b      	str	r3, [r7, #32]
          break;
 8004f1a:	e01f      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	330c      	adds	r3, #12
 8004f22:	623b      	str	r3, [r7, #32]
          break;
 8004f24:	e01a      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f2e:	2304      	movs	r3, #4
 8004f30:	623b      	str	r3, [r7, #32]
          break;
 8004f32:	e013      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	611a      	str	r2, [r3, #16]
          break;
 8004f46:	e009      	b.n	8004f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f48:	2308      	movs	r3, #8
 8004f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	615a      	str	r2, [r3, #20]
          break;
 8004f52:	e003      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
          break;
 8004f58:	e000      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          break;
 8004f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2bff      	cmp	r3, #255	@ 0xff
 8004f60:	d801      	bhi.n	8004f66 <HAL_GPIO_Init+0x13a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e001      	b.n	8004f6a <HAL_GPIO_Init+0x13e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2bff      	cmp	r3, #255	@ 0xff
 8004f70:	d802      	bhi.n	8004f78 <HAL_GPIO_Init+0x14c>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	e002      	b.n	8004f7e <HAL_GPIO_Init+0x152>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	3b08      	subs	r3, #8
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	210f      	movs	r1, #15
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80b1 	beq.w	800510e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004fac:	4b4d      	ldr	r3, [pc, #308]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6193      	str	r3, [r2, #24]
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004fc4:	4a48      	ldr	r2, [pc, #288]	@ (80050e8 <HAL_GPIO_Init+0x2bc>)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a40      	ldr	r2, [pc, #256]	@ (80050ec <HAL_GPIO_Init+0x2c0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_GPIO_Init+0x1ec>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80050f0 <HAL_GPIO_Init+0x2c4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00d      	beq.n	8005014 <HAL_GPIO_Init+0x1e8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80050f4 <HAL_GPIO_Init+0x2c8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <HAL_GPIO_Init+0x1e4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3d      	ldr	r2, [pc, #244]	@ (80050f8 <HAL_GPIO_Init+0x2cc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_GPIO_Init+0x1e0>
 8005008:	2303      	movs	r3, #3
 800500a:	e006      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 800500c:	2304      	movs	r3, #4
 800500e:	e004      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005010:	2302      	movs	r3, #2
 8005012:	e002      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005018:	2300      	movs	r3, #0
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	f002 0203 	and.w	r2, r2, #3
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	4093      	lsls	r3, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800502a:	492f      	ldr	r1, [pc, #188]	@ (80050e8 <HAL_GPIO_Init+0x2bc>)
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	3302      	adds	r3, #2
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005044:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	492c      	ldr	r1, [pc, #176]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
 8005050:	e006      	b.n	8005060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005052:	4b2a      	ldr	r3, [pc, #168]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	43db      	mvns	r3, r3
 800505a:	4928      	ldr	r1, [pc, #160]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800505c:	4013      	ands	r3, r2
 800505e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	4922      	ldr	r1, [pc, #136]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
 8005078:	e006      	b.n	8005088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800507a:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	43db      	mvns	r3, r3
 8005082:	491e      	ldr	r1, [pc, #120]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005084:	4013      	ands	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d006      	beq.n	80050a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005094:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	4918      	ldr	r1, [pc, #96]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	e006      	b.n	80050b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050a2:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	4914      	ldr	r1, [pc, #80]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d021      	beq.n	8005100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	490e      	ldr	r1, [pc, #56]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
 80050c8:	e021      	b.n	800510e <HAL_GPIO_Init+0x2e2>
 80050ca:	bf00      	nop
 80050cc:	10320000 	.word	0x10320000
 80050d0:	10310000 	.word	0x10310000
 80050d4:	10220000 	.word	0x10220000
 80050d8:	10210000 	.word	0x10210000
 80050dc:	10120000 	.word	0x10120000
 80050e0:	10110000 	.word	0x10110000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010800 	.word	0x40010800
 80050f0:	40010c00 	.word	0x40010c00
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_GPIO_Init+0x304>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	43db      	mvns	r3, r3
 8005108:	4909      	ldr	r1, [pc, #36]	@ (8005130 <HAL_GPIO_Init+0x304>)
 800510a:	4013      	ands	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	3301      	adds	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f ae8e 	bne.w	8004e40 <HAL_GPIO_Init+0x14>
  }
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	372c      	adds	r7, #44	@ 0x2c
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	40010400 	.word	0x40010400

08005134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e001      	b.n	8005156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	807b      	strh	r3, [r7, #2]
 800516e:	4613      	mov	r3, r2
 8005170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005172:	787b      	ldrb	r3, [r7, #1]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800517e:	e003      	b.n	8005188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005180:	887b      	ldrh	r3, [r7, #2]
 8005182:	041a      	lsls	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
	...

08005194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e12b      	b.n	80053fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff f9f4 	bl	80045a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	@ 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051f8:	f002 f8aa 	bl	8007350 <HAL_RCC_GetPCLK1Freq>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a81      	ldr	r2, [pc, #516]	@ (8005408 <HAL_I2C_Init+0x274>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d807      	bhi.n	8005218 <HAL_I2C_Init+0x84>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a80      	ldr	r2, [pc, #512]	@ (800540c <HAL_I2C_Init+0x278>)
 800520c:	4293      	cmp	r3, r2
 800520e:	bf94      	ite	ls
 8005210:	2301      	movls	r3, #1
 8005212:	2300      	movhi	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e006      	b.n	8005226 <HAL_I2C_Init+0x92>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a7d      	ldr	r2, [pc, #500]	@ (8005410 <HAL_I2C_Init+0x27c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	bf94      	ite	ls
 8005220:	2301      	movls	r3, #1
 8005222:	2300      	movhi	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0e7      	b.n	80053fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a78      	ldr	r2, [pc, #480]	@ (8005414 <HAL_I2C_Init+0x280>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0c9b      	lsrs	r3, r3, #18
 8005238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a6a      	ldr	r2, [pc, #424]	@ (8005408 <HAL_I2C_Init+0x274>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <HAL_I2C_Init+0xd4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3301      	adds	r3, #1
 8005266:	e009      	b.n	800527c <HAL_I2C_Init+0xe8>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	4a69      	ldr	r2, [pc, #420]	@ (8005418 <HAL_I2C_Init+0x284>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	3301      	adds	r3, #1
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800528e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	495c      	ldr	r1, [pc, #368]	@ (8005408 <HAL_I2C_Init+0x274>)
 8005298:	428b      	cmp	r3, r1
 800529a:	d819      	bhi.n	80052d0 <HAL_I2C_Init+0x13c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1e59      	subs	r1, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052b0:	400b      	ands	r3, r1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_I2C_Init+0x138>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1e59      	subs	r1, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c4:	3301      	adds	r3, #1
 80052c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ca:	e051      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052cc:	2304      	movs	r3, #4
 80052ce:	e04f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <HAL_I2C_Init+0x168>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1e58      	subs	r0, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	440b      	add	r3, r1
 80052e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e012      	b.n	8005322 <HAL_I2C_Init+0x18e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1e58      	subs	r0, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	0099      	lsls	r1, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005312:	3301      	adds	r3, #1
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Init+0x196>
 8005326:	2301      	movs	r3, #1
 8005328:	e022      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <HAL_I2C_Init+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e58      	subs	r0, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	440b      	add	r3, r1
 8005340:	fbb0 f3f3 	udiv	r3, r0, r3
 8005344:	3301      	adds	r3, #1
 8005346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534e:	e00f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e58      	subs	r0, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	0099      	lsls	r1, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	fbb0 f3f3 	udiv	r3, r0, r3
 8005366:	3301      	adds	r3, #1
 8005368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	6809      	ldr	r1, [r1, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800539e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6911      	ldr	r1, [r2, #16]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68d2      	ldr	r2, [r2, #12]
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	000186a0 	.word	0x000186a0
 800540c:	001e847f 	.word	0x001e847f
 8005410:	003d08ff 	.word	0x003d08ff
 8005414:	431bde83 	.word	0x431bde83
 8005418:	10624dd3 	.word	0x10624dd3

0800541c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	460b      	mov	r3, r1
 800542a:	817b      	strh	r3, [r7, #10]
 800542c:	4613      	mov	r3, r2
 800542e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005430:	f7ff fbc0 	bl	8004bb4 <HAL_GetTick>
 8005434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	f040 80e0 	bne.w	8005604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2319      	movs	r3, #25
 800544a:	2201      	movs	r2, #1
 800544c:	4970      	ldr	r1, [pc, #448]	@ (8005610 <HAL_I2C_Master_Transmit+0x1f4>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f001 f97e 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	e0d3      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_I2C_Master_Transmit+0x50>
 8005468:	2302      	movs	r3, #2
 800546a:	e0cc      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d007      	beq.n	8005492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2221      	movs	r2, #33	@ 0x21
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2210      	movs	r2, #16
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	893a      	ldrh	r2, [r7, #8]
 80054c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a50      	ldr	r2, [pc, #320]	@ (8005614 <HAL_I2C_Master_Transmit+0x1f8>)
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054d4:	8979      	ldrh	r1, [r7, #10]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fe6a 	bl	80061b4 <I2C_MasterRequestWrite>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e08d      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005500:	e066      	b.n	80055d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fa3c 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	2b04      	cmp	r3, #4
 8005518:	d107      	bne.n	800552a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e06b      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d11b      	bne.n	80055a4 <HAL_I2C_Master_Transmit+0x188>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	6a39      	ldr	r1, [r7, #32]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f001 fa33 	bl	8006a14 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d107      	bne.n	80055cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e01a      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d194      	bne.n	8005502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	00100002 	.word	0x00100002
 8005614:	ffff0000 	.word	0xffff0000

08005618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	@ 0x30
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	461a      	mov	r2, r3
 8005624:	460b      	mov	r3, r1
 8005626:	817b      	strh	r3, [r7, #10]
 8005628:	4613      	mov	r3, r2
 800562a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005630:	f7ff fac0 	bl	8004bb4 <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 824b 	bne.w	8005ada <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	2319      	movs	r3, #25
 800564a:	2201      	movs	r2, #1
 800564c:	497f      	ldr	r1, [pc, #508]	@ (800584c <HAL_I2C_Master_Receive+0x234>)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f001 f87e 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
 800565c:	e23e      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_I2C_Master_Receive+0x54>
 8005668:	2302      	movs	r3, #2
 800566a:	e237      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d007      	beq.n	8005692 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2222      	movs	r2, #34	@ 0x22
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2210      	movs	r2, #16
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	893a      	ldrh	r2, [r7, #8]
 80056c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005850 <HAL_I2C_Master_Receive+0x238>)
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056d4:	8979      	ldrh	r1, [r7, #10]
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fdec 	bl	80062b8 <I2C_MasterRequestRead>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e1f8      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d113      	bne.n	800571a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e1cc      	b.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	2b01      	cmp	r3, #1
 8005720:	d11e      	bne.n	8005760 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005732:	b672      	cpsid	i
}
 8005734:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800575a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800575c:	b662      	cpsie	i
}
 800575e:	e035      	b.n	80057cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005764:	2b02      	cmp	r3, #2
 8005766:	d11e      	bne.n	80057a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005778:	b672      	cpsid	i
}
 800577a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80057a2:	b662      	cpsie	i
}
 80057a4:	e012      	b.n	80057cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80057cc:	e172      	b.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	f200 811f 	bhi.w	8005a16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d123      	bne.n	8005828 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 f95d 	bl	8006aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e173      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005826:	e145      	b.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582c:	2b02      	cmp	r3, #2
 800582e:	d152      	bne.n	80058d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	4906      	ldr	r1, [pc, #24]	@ (8005854 <HAL_I2C_Master_Receive+0x23c>)
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 ff88 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e148      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
 800584a:	bf00      	nop
 800584c:	00100002 	.word	0x00100002
 8005850:	ffff0000 	.word	0xffff0000
 8005854:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005858:	b672      	cpsid	i
}
 800585a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800589e:	b662      	cpsie	i
}
 80058a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058d4:	e0ee      	b.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	2200      	movs	r2, #0
 80058de:	4981      	ldr	r1, [pc, #516]	@ (8005ae4 <HAL_I2C_Master_Receive+0x4cc>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 ff35 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0f5      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005900:	b672      	cpsid	i
}
 8005902:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005936:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae8 <HAL_I2C_Master_Receive+0x4d0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	4a6b      	ldr	r2, [pc, #428]	@ (8005aec <HAL_I2C_Master_Receive+0x4d4>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0a1a      	lsrs	r2, r3, #8
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00da      	lsls	r2, r3, #3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	3b01      	subs	r3, #1
 8005954:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d118      	bne.n	800598e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800597e:	b662      	cpsie	i
}
 8005980:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e0a6      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d1d9      	bne.n	8005950 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059de:	b662      	cpsie	i
}
 80059e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a14:	e04e      	b.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 f842 	bl	8006aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e058      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d124      	bne.n	8005ab4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d107      	bne.n	8005a82 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f ae88 	bne.w	80057ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3728      	adds	r7, #40	@ 0x28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	00010004 	.word	0x00010004
 8005ae8:	20000008 	.word	0x20000008
 8005aec:	14f8b589 	.word	0x14f8b589

08005af0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	817b      	strh	r3, [r7, #10]
 8005b02:	460b      	mov	r3, r1
 8005b04:	813b      	strh	r3, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b0a:	f7ff f853 	bl	8004bb4 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	f040 80d9 	bne.w	8005cd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	2319      	movs	r3, #25
 8005b24:	2201      	movs	r2, #1
 8005b26:	496d      	ldr	r1, [pc, #436]	@ (8005cdc <HAL_I2C_Mem_Write+0x1ec>)
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fe11 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
 8005b36:	e0cc      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Mem_Write+0x56>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e0c5      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d007      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2221      	movs	r2, #33	@ 0x21
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2240      	movs	r2, #64	@ 0x40
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce0 <HAL_I2C_Mem_Write+0x1f0>)
 8005bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bae:	88f8      	ldrh	r0, [r7, #6]
 8005bb0:	893a      	ldrh	r2, [r7, #8]
 8005bb2:	8979      	ldrh	r1, [r7, #10]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fc48 	bl	8006454 <I2C_RequestMemoryWrite>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d052      	beq.n	8005c70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e081      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fed6 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d107      	bne.n	8005bf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d11b      	bne.n	8005c70 <HAL_I2C_Mem_Write+0x180>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1aa      	bne.n	8005bce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fec9 	bl	8006a14 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d107      	bne.n	8005ca0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e016      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	00100002 	.word	0x00100002
 8005ce0:	ffff0000 	.word	0xffff0000

08005ce4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	@ 0x30
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	813b      	strh	r3, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d02:	f7fe ff57 	bl	8004bb4 <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	f040 8244 	bne.w	800619e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2319      	movs	r3, #25
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	4982      	ldr	r1, [pc, #520]	@ (8005f28 <HAL_I2C_Mem_Read+0x244>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fd15 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e237      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_I2C_Mem_Read+0x5a>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e230      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d007      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2222      	movs	r2, #34	@ 0x22
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2240      	movs	r2, #64	@ 0x40
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a62      	ldr	r2, [pc, #392]	@ (8005f2c <HAL_I2C_Mem_Read+0x248>)
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005da6:	88f8      	ldrh	r0, [r7, #6]
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	8979      	ldrh	r1, [r7, #10]
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4603      	mov	r3, r0
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fbe2 	bl	8006580 <I2C_RequestMemoryRead>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e1ec      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d113      	bne.n	8005df6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e1c0      	b.n	8006178 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d11e      	bne.n	8005e3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e0e:	b672      	cpsid	i
}
 8005e10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e38:	b662      	cpsie	i
}
 8005e3a:	e035      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d11e      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e54:	b672      	cpsid	i
}
 8005e56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e7e:	b662      	cpsie	i
}
 8005e80:	e012      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ea8:	e166      	b.n	8006178 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	f200 811f 	bhi.w	80060f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d123      	bne.n	8005f04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ebe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fdef 	bl	8006aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e167      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f02:	e139      	b.n	8006178 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d152      	bne.n	8005fb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	2200      	movs	r2, #0
 8005f14:	4906      	ldr	r1, [pc, #24]	@ (8005f30 <HAL_I2C_Mem_Read+0x24c>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fc1a 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e13c      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
 8005f26:	bf00      	nop
 8005f28:	00100002 	.word	0x00100002
 8005f2c:	ffff0000 	.word	0xffff0000
 8005f30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005f34:	b672      	cpsid	i
}
 8005f36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f7a:	b662      	cpsie	i
}
 8005f7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fb0:	e0e2      	b.n	8006178 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	2200      	movs	r2, #0
 8005fba:	497b      	ldr	r1, [pc, #492]	@ (80061a8 <HAL_I2C_Mem_Read+0x4c4>)
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fbc7 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0e9      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fdc:	b672      	cpsid	i
}
 8005fde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006012:	4b66      	ldr	r3, [pc, #408]	@ (80061ac <HAL_I2C_Mem_Read+0x4c8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	4a65      	ldr	r2, [pc, #404]	@ (80061b0 <HAL_I2C_Mem_Read+0x4cc>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0a1a      	lsrs	r2, r3, #8
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	00da      	lsls	r2, r3, #3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	3b01      	subs	r3, #1
 8006030:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d118      	bne.n	800606a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800605a:	b662      	cpsie	i
}
 800605c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e09a      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b04      	cmp	r3, #4
 8006076:	d1d9      	bne.n	800602c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80060ba:	b662      	cpsie	i
}
 80060bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060f0:	e042      	b.n	8006178 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fcd4 	bl	8006aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e04c      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d118      	bne.n	8006178 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f ae94 	bne.w	8005eaa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	@ 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	00010004 	.word	0x00010004
 80061ac:	20000008 	.word	0x20000008
 80061b0:	14f8b589 	.word	0x14f8b589

080061b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	460b      	mov	r3, r1
 80061c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d006      	beq.n	80061de <I2C_MasterRequestWrite+0x2a>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d003      	beq.n	80061de <I2C_MasterRequestWrite+0x2a>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061dc:	d108      	bne.n	80061f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e00b      	b.n	8006208 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f4:	2b12      	cmp	r3, #18
 80061f6:	d107      	bne.n	8006208 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006206:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fa9b 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800622e:	d103      	bne.n	8006238 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e035      	b.n	80062a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006244:	d108      	bne.n	8006258 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006246:	897b      	ldrh	r3, [r7, #10]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006254:	611a      	str	r2, [r3, #16]
 8006256:	e01b      	b.n	8006290 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006258:	897b      	ldrh	r3, [r7, #10]
 800625a:	11db      	asrs	r3, r3, #7
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0306 	and.w	r3, r3, #6
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f063 030f 	orn	r3, r3, #15
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	490e      	ldr	r1, [pc, #56]	@ (80062b0 <I2C_MasterRequestWrite+0xfc>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fae4 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e010      	b.n	80062a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006286:	897b      	ldrh	r3, [r7, #10]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4907      	ldr	r1, [pc, #28]	@ (80062b4 <I2C_MasterRequestWrite+0x100>)
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fad4 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	00010008 	.word	0x00010008
 80062b4:	00010002 	.word	0x00010002

080062b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	460b      	mov	r3, r1
 80062c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d006      	beq.n	80062f2 <I2C_MasterRequestRead+0x3a>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d003      	beq.n	80062f2 <I2C_MasterRequestRead+0x3a>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062f0:	d108      	bne.n	8006304 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e00b      	b.n	800631c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006308:	2b11      	cmp	r3, #17
 800630a:	d107      	bne.n	800631c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800631a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fa11 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006342:	d103      	bne.n	800634c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e079      	b.n	8006444 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006358:	d108      	bne.n	800636c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800635a:	897b      	ldrh	r3, [r7, #10]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	611a      	str	r2, [r3, #16]
 800636a:	e05f      	b.n	800642c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	11db      	asrs	r3, r3, #7
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0306 	and.w	r3, r3, #6
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f063 030f 	orn	r3, r3, #15
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4930      	ldr	r1, [pc, #192]	@ (800644c <I2C_MasterRequestRead+0x194>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa5a 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e054      	b.n	8006444 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800639a:	897b      	ldrh	r3, [r7, #10]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4929      	ldr	r1, [pc, #164]	@ (8006450 <I2C_MasterRequestRead+0x198>)
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fa4a 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e044      	b.n	8006444 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f9af 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006406:	d103      	bne.n	8006410 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e017      	b.n	8006444 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006414:	897b      	ldrh	r3, [r7, #10]
 8006416:	11db      	asrs	r3, r3, #7
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0306 	and.w	r3, r3, #6
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f063 030e 	orn	r3, r3, #14
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4907      	ldr	r1, [pc, #28]	@ (8006450 <I2C_MasterRequestRead+0x198>)
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fa06 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	00010008 	.word	0x00010008
 8006450:	00010002 	.word	0x00010002

08006454 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	460b      	mov	r3, r1
 8006468:	813b      	strh	r3, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800647c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	2200      	movs	r2, #0
 8006486:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f960 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a4:	d103      	bne.n	80064ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e05f      	b.n	8006572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064b2:	897b      	ldrh	r3, [r7, #10]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	492d      	ldr	r1, [pc, #180]	@ (800657c <I2C_RequestMemoryWrite+0x128>)
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f9bb 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e04c      	b.n	8006572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f0:	6a39      	ldr	r1, [r7, #32]
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa46 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	2b04      	cmp	r3, #4
 8006504:	d107      	bne.n	8006516 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e02b      	b.n	8006572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d105      	bne.n	800652c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	e021      	b.n	8006570 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800652c:	893b      	ldrh	r3, [r7, #8]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	b29b      	uxth	r3, r3
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653c:	6a39      	ldr	r1, [r7, #32]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fa20 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	2b04      	cmp	r3, #4
 8006550:	d107      	bne.n	8006562 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e005      	b.n	8006572 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	00010002 	.word	0x00010002

08006580 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4603      	mov	r3, r0
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	460b      	mov	r3, r1
 8006594:	813b      	strh	r3, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f8c2 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e0:	d103      	bne.n	80065ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e0aa      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ee:	897b      	ldrh	r3, [r7, #10]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	4952      	ldr	r1, [pc, #328]	@ (800674c <I2C_RequestMemoryRead+0x1cc>)
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f91d 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e097      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800662a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662c:	6a39      	ldr	r1, [r7, #32]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f9a8 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	2b04      	cmp	r3, #4
 8006640:	d107      	bne.n	8006652 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e076      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d105      	bne.n	8006668 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]
 8006666:	e021      	b.n	80066ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006668:	893b      	ldrh	r3, [r7, #8]
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	b29b      	uxth	r3, r3
 800666e:	b2da      	uxtb	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006678:	6a39      	ldr	r1, [r7, #32]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f982 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	2b04      	cmp	r3, #4
 800668c:	d107      	bne.n	800669e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800669c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e050      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066a2:	893b      	ldrh	r3, [r7, #8]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ae:	6a39      	ldr	r1, [r7, #32]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f967 	bl	8006984 <I2C_WaitOnTXEFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00d      	beq.n	80066d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d107      	bne.n	80066d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e035      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f82b 	bl	8006750 <I2C_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00d      	beq.n	800671c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670e:	d103      	bne.n	8006718 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006716:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e013      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800671c:	897b      	ldrh	r3, [r7, #10]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	6a3a      	ldr	r2, [r7, #32]
 8006730:	4906      	ldr	r1, [pc, #24]	@ (800674c <I2C_RequestMemoryRead+0x1cc>)
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f886 	bl	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	00010002 	.word	0x00010002

08006750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	4613      	mov	r3, r2
 800675e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006760:	e048      	b.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d044      	beq.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676a:	f7fe fa23 	bl	8004bb4 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d302      	bcc.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d139      	bne.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10d      	bne.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	43da      	mvns	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	e00c      	b.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	43da      	mvns	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d116      	bne.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e023      	b.n	800683c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d10d      	bne.n	800681a <I2C_WaitOnFlagUntilTimeout+0xca>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	43da      	mvns	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4013      	ands	r3, r2
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	e00c      	b.n	8006834 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	43da      	mvns	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	429a      	cmp	r2, r3
 8006838:	d093      	beq.n	8006762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006852:	e071      	b.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d123      	bne.n	80068ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006872:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800687c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	f043 0204 	orr.w	r2, r3, #4
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e067      	b.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d041      	beq.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b4:	f7fe f97e 	bl	8004bb4 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d136      	bne.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10c      	bne.n	80068ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	43da      	mvns	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4013      	ands	r3, r2
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e00b      	b.n	8006906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	43da      	mvns	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e021      	b.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	0c1b      	lsrs	r3, r3, #16
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b01      	cmp	r3, #1
 8006940:	d10c      	bne.n	800695c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	43da      	mvns	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e00b      	b.n	8006974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf14      	ite	ne
 800696e:	2301      	movne	r3, #1
 8006970:	2300      	moveq	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	f47f af6d 	bne.w	8006854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006990:	e034      	b.n	80069fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f8e3 	bl	8006b5e <I2C_IsAcknowledgeFailed>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e034      	b.n	8006a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d028      	beq.n	80069fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069aa:	f7fe f903 	bl	8004bb4 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d302      	bcc.n	80069c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11d      	bne.n	80069fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ca:	2b80      	cmp	r3, #128	@ 0x80
 80069cc:	d016      	beq.n	80069fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e007      	b.n	8006a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b80      	cmp	r3, #128	@ 0x80
 8006a08:	d1c3      	bne.n	8006992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a20:	e034      	b.n	8006a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f89b 	bl	8006b5e <I2C_IsAcknowledgeFailed>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e034      	b.n	8006a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d028      	beq.n	8006a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fe f8bb 	bl	8004bb4 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11d      	bne.n	8006a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d016      	beq.n	8006a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e007      	b.n	8006a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d1c3      	bne.n	8006a22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ab0:	e049      	b.n	8006b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	d119      	bne.n	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0210 	mvn.w	r2, #16
 8006ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e030      	b.n	8006b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af4:	f7fe f85e 	bl	8004bb4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11d      	bne.n	8006b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b40      	cmp	r3, #64	@ 0x40
 8006b16:	d016      	beq.n	8006b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	f043 0220 	orr.w	r2, r3, #32
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e007      	b.n	8006b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b40      	cmp	r3, #64	@ 0x40
 8006b52:	d1ae      	bne.n	8006ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b74:	d11b      	bne.n	8006bae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	f043 0204 	orr.w	r2, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e272      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8087 	beq.w	8006cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bdc:	4b92      	ldr	r3, [pc, #584]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d00c      	beq.n	8006c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006be8:	4b8f      	ldr	r3, [pc, #572]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d112      	bne.n	8006c1a <HAL_RCC_OscConfig+0x5e>
 8006bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c00:	d10b      	bne.n	8006c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c02:	4b89      	ldr	r3, [pc, #548]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d06c      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x12c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d168      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e24c      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c22:	d106      	bne.n	8006c32 <HAL_RCC_OscConfig+0x76>
 8006c24:	4b80      	ldr	r3, [pc, #512]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7f      	ldr	r2, [pc, #508]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e02e      	b.n	8006c90 <HAL_RCC_OscConfig+0xd4>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0x98>
 8006c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7a      	ldr	r2, [pc, #488]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4b78      	ldr	r3, [pc, #480]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a77      	ldr	r2, [pc, #476]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e01d      	b.n	8006c90 <HAL_RCC_OscConfig+0xd4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c5c:	d10c      	bne.n	8006c78 <HAL_RCC_OscConfig+0xbc>
 8006c5e:	4b72      	ldr	r3, [pc, #456]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a71      	ldr	r2, [pc, #452]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e00b      	b.n	8006c90 <HAL_RCC_OscConfig+0xd4>
 8006c78:	4b6b      	ldr	r3, [pc, #428]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	4b68      	ldr	r3, [pc, #416]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a67      	ldr	r2, [pc, #412]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d013      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c98:	f7fd ff8c 	bl	8004bb4 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ca0:	f7fd ff88 	bl	8004bb4 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b64      	cmp	r3, #100	@ 0x64
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e200      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0xe4>
 8006cbe:	e014      	b.n	8006cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc0:	f7fd ff78 	bl	8004bb4 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc8:	f7fd ff74 	bl	8004bb4 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b64      	cmp	r3, #100	@ 0x64
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e1ec      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cda:	4b53      	ldr	r3, [pc, #332]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x10c>
 8006ce6:	e000      	b.n	8006cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d063      	beq.n	8006dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d02:	4b49      	ldr	r3, [pc, #292]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 030c 	and.w	r3, r3, #12
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d11c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x18c>
 8006d0e:	4b46      	ldr	r3, [pc, #280]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d116      	bne.n	8006d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d1a:	4b43      	ldr	r3, [pc, #268]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_RCC_OscConfig+0x176>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d001      	beq.n	8006d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e1c0      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d32:	4b3d      	ldr	r3, [pc, #244]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	4939      	ldr	r1, [pc, #228]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d46:	e03a      	b.n	8006dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d020      	beq.n	8006d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d50:	4b36      	ldr	r3, [pc, #216]	@ (8006e2c <HAL_RCC_OscConfig+0x270>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d56:	f7fd ff2d 	bl	8004bb4 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d5e:	f7fd ff29 	bl	8004bb4 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e1a1      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d70:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4927      	ldr	r1, [pc, #156]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]
 8006d90:	e015      	b.n	8006dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d92:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <HAL_RCC_OscConfig+0x270>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fd ff0c 	bl	8004bb4 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da0:	f7fd ff08 	bl	8004bb4 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e180      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d03a      	beq.n	8006e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dd2:	4b17      	ldr	r3, [pc, #92]	@ (8006e30 <HAL_RCC_OscConfig+0x274>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd8:	f7fd feec 	bl	8004bb4 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006de0:	f7fd fee8 	bl	8004bb4 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e160      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <HAL_RCC_OscConfig+0x26c>)
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006dfe:	2001      	movs	r0, #1
 8006e00:	f000 face 	bl	80073a0 <RCC_Delay>
 8006e04:	e01c      	b.n	8006e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <HAL_RCC_OscConfig+0x274>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e0c:	f7fd fed2 	bl	8004bb4 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e12:	e00f      	b.n	8006e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e14:	f7fd fece 	bl	8004bb4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d908      	bls.n	8006e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e146      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
 8006e26:	bf00      	nop
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	42420000 	.word	0x42420000
 8006e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e34:	4b92      	ldr	r3, [pc, #584]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e9      	bne.n	8006e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80a6 	beq.w	8006f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e52:	4b8b      	ldr	r3, [pc, #556]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10d      	bne.n	8006e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e5e:	4b88      	ldr	r3, [pc, #544]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4a87      	ldr	r2, [pc, #540]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	61d3      	str	r3, [r2, #28]
 8006e6a:	4b85      	ldr	r3, [pc, #532]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7a:	4b82      	ldr	r3, [pc, #520]	@ (8007084 <HAL_RCC_OscConfig+0x4c8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d118      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e86:	4b7f      	ldr	r3, [pc, #508]	@ (8007084 <HAL_RCC_OscConfig+0x4c8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8007084 <HAL_RCC_OscConfig+0x4c8>)
 8006e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e92:	f7fd fe8f 	bl	8004bb4 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e9a:	f7fd fe8b 	bl	8004bb4 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b64      	cmp	r3, #100	@ 0x64
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e103      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eac:	4b75      	ldr	r3, [pc, #468]	@ (8007084 <HAL_RCC_OscConfig+0x4c8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d106      	bne.n	8006ece <HAL_RCC_OscConfig+0x312>
 8006ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	6213      	str	r3, [r2, #32]
 8006ecc:	e02d      	b.n	8006f2a <HAL_RCC_OscConfig+0x36e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x334>
 8006ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4a69      	ldr	r2, [pc, #420]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	6213      	str	r3, [r2, #32]
 8006ee2:	4b67      	ldr	r3, [pc, #412]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	4a66      	ldr	r2, [pc, #408]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ee8:	f023 0304 	bic.w	r3, r3, #4
 8006eec:	6213      	str	r3, [r2, #32]
 8006eee:	e01c      	b.n	8006f2a <HAL_RCC_OscConfig+0x36e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d10c      	bne.n	8006f12 <HAL_RCC_OscConfig+0x356>
 8006ef8:	4b61      	ldr	r3, [pc, #388]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	4a60      	ldr	r2, [pc, #384]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	f043 0304 	orr.w	r3, r3, #4
 8006f02:	6213      	str	r3, [r2, #32]
 8006f04:	4b5e      	ldr	r3, [pc, #376]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	4a5d      	ldr	r2, [pc, #372]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f0a:	f043 0301 	orr.w	r3, r3, #1
 8006f0e:	6213      	str	r3, [r2, #32]
 8006f10:	e00b      	b.n	8006f2a <HAL_RCC_OscConfig+0x36e>
 8006f12:	4b5b      	ldr	r3, [pc, #364]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	4a5a      	ldr	r2, [pc, #360]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	6213      	str	r3, [r2, #32]
 8006f1e:	4b58      	ldr	r3, [pc, #352]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4a57      	ldr	r2, [pc, #348]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	f023 0304 	bic.w	r3, r3, #4
 8006f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d015      	beq.n	8006f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f32:	f7fd fe3f 	bl	8004bb4 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f38:	e00a      	b.n	8006f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3a:	f7fd fe3b 	bl	8004bb4 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e0b1      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f50:	4b4b      	ldr	r3, [pc, #300]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0ee      	beq.n	8006f3a <HAL_RCC_OscConfig+0x37e>
 8006f5c:	e014      	b.n	8006f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f5e:	f7fd fe29 	bl	8004bb4 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f64:	e00a      	b.n	8006f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f66:	f7fd fe25 	bl	8004bb4 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e09b      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f7c:	4b40      	ldr	r3, [pc, #256]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1ee      	bne.n	8006f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d105      	bne.n	8006f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4a3b      	ldr	r2, [pc, #236]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 8087 	beq.w	80070b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fa4:	4b36      	ldr	r3, [pc, #216]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d061      	beq.n	8007074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d146      	bne.n	8007046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb8:	4b33      	ldr	r3, [pc, #204]	@ (8007088 <HAL_RCC_OscConfig+0x4cc>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fbe:	f7fd fdf9 	bl	8004bb4 <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc6:	f7fd fdf5 	bl	8004bb4 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e06d      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd8:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f0      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fec:	d108      	bne.n	8007000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fee:	4b24      	ldr	r3, [pc, #144]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4921      	ldr	r1, [pc, #132]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007000:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a19      	ldr	r1, [r3, #32]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	430b      	orrs	r3, r1
 8007012:	491b      	ldr	r1, [pc, #108]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8007014:	4313      	orrs	r3, r2
 8007016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007018:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <HAL_RCC_OscConfig+0x4cc>)
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701e:	f7fd fdc9 	bl	8004bb4 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007026:	f7fd fdc5 	bl	8004bb4 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e03d      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007038:	4b11      	ldr	r3, [pc, #68]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCC_OscConfig+0x46a>
 8007044:	e035      	b.n	80070b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007046:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <HAL_RCC_OscConfig+0x4cc>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704c:	f7fd fdb2 	bl	8004bb4 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007054:	f7fd fdae 	bl	8004bb4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e026      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007066:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <HAL_RCC_OscConfig+0x4c4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x498>
 8007072:	e01e      	b.n	80070b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d107      	bne.n	800708c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e019      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
 8007080:	40021000 	.word	0x40021000
 8007084:	40007000 	.word	0x40007000
 8007088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800708c:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <HAL_RCC_OscConfig+0x500>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	429a      	cmp	r2, r3
 800709e:	d106      	bne.n	80070ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d001      	beq.n	80070b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40021000 	.word	0x40021000

080070c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0d0      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d910      	bls.n	8007104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b67      	ldr	r3, [pc, #412]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 0207 	bic.w	r2, r3, #7
 80070ea:	4965      	ldr	r1, [pc, #404]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f2:	4b63      	ldr	r3, [pc, #396]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d001      	beq.n	8007104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0b8      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d020      	beq.n	8007152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800711c:	4b59      	ldr	r3, [pc, #356]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a58      	ldr	r2, [pc, #352]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007134:	4b53      	ldr	r3, [pc, #332]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a52      	ldr	r2, [pc, #328]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800713a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800713e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007140:	4b50      	ldr	r3, [pc, #320]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	494d      	ldr	r1, [pc, #308]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d040      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d107      	bne.n	8007176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007166:	4b47      	ldr	r3, [pc, #284]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d115      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e07f      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d107      	bne.n	800718e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717e:	4b41      	ldr	r3, [pc, #260]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e073      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718e:	4b3d      	ldr	r3, [pc, #244]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e06b      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719e:	4b39      	ldr	r3, [pc, #228]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f023 0203 	bic.w	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4936      	ldr	r1, [pc, #216]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071b0:	f7fd fd00 	bl	8004bb4 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	e00a      	b.n	80071ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b8:	f7fd fcfc 	bl	8004bb4 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e053      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f003 020c 	and.w	r2, r3, #12
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	429a      	cmp	r2, r3
 80071de:	d1eb      	bne.n	80071b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071e0:	4b27      	ldr	r3, [pc, #156]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d210      	bcs.n	8007210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b24      	ldr	r3, [pc, #144]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 0207 	bic.w	r2, r3, #7
 80071f6:	4922      	ldr	r1, [pc, #136]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fe:	4b20      	ldr	r3, [pc, #128]	@ (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d001      	beq.n	8007210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e032      	b.n	8007276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800721c:	4b19      	ldr	r3, [pc, #100]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4916      	ldr	r1, [pc, #88]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800723a:	4b12      	ldr	r3, [pc, #72]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	490e      	ldr	r1, [pc, #56]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 800724a:	4313      	orrs	r3, r2
 800724c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800724e:	f000 f821 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8007252:	4602      	mov	r2, r0
 8007254:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	490a      	ldr	r1, [pc, #40]	@ (8007288 <HAL_RCC_ClockConfig+0x1c8>)
 8007260:	5ccb      	ldrb	r3, [r1, r3]
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	4a09      	ldr	r2, [pc, #36]	@ (800728c <HAL_RCC_ClockConfig+0x1cc>)
 8007268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800726a:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <HAL_RCC_ClockConfig+0x1d0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7fd fc5e 	bl	8004b30 <HAL_InitTick>

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40022000 	.word	0x40022000
 8007284:	40021000 	.word	0x40021000
 8007288:	0800edc0 	.word	0x0800edc0
 800728c:	20000008 	.word	0x20000008
 8007290:	2000000c 	.word	0x2000000c

08007294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x94>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d002      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x30>
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d003      	beq.n	80072ca <HAL_RCC_GetSysClockFreq+0x36>
 80072c2:	e027      	b.n	8007314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072c4:	4b19      	ldr	r3, [pc, #100]	@ (800732c <HAL_RCC_GetSysClockFreq+0x98>)
 80072c6:	613b      	str	r3, [r7, #16]
      break;
 80072c8:	e027      	b.n	800731a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	0c9b      	lsrs	r3, r3, #18
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80072d4:	5cd3      	ldrb	r3, [r2, r3]
 80072d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d010      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072e2:	4b11      	ldr	r3, [pc, #68]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x94>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	0c5b      	lsrs	r3, r3, #17
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a0d      	ldr	r2, [pc, #52]	@ (800732c <HAL_RCC_GetSysClockFreq+0x98>)
 80072f6:	fb03 f202 	mul.w	r2, r3, r2
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e004      	b.n	800730e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007308:	fb02 f303 	mul.w	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	613b      	str	r3, [r7, #16]
      break;
 8007312:	e002      	b.n	800731a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007314:	4b05      	ldr	r3, [pc, #20]	@ (800732c <HAL_RCC_GetSysClockFreq+0x98>)
 8007316:	613b      	str	r3, [r7, #16]
      break;
 8007318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800731a:	693b      	ldr	r3, [r7, #16]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	007a1200 	.word	0x007a1200
 8007330:	0800edd8 	.word	0x0800edd8
 8007334:	0800ede8 	.word	0x0800ede8
 8007338:	003d0900 	.word	0x003d0900

0800733c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b02      	ldr	r3, [pc, #8]	@ (800734c <HAL_RCC_GetHCLKFreq+0x10>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	20000008 	.word	0x20000008

08007350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007354:	f7ff fff2 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	4903      	ldr	r1, [pc, #12]	@ (8007374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000
 8007374:	0800edd0 	.word	0x0800edd0

08007378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800737c:	f7ff ffde 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	0adb      	lsrs	r3, r3, #11
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4903      	ldr	r1, [pc, #12]	@ (800739c <HAL_RCC_GetPCLK2Freq+0x24>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40021000 	.word	0x40021000
 800739c:	0800edd0 	.word	0x0800edd0

080073a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073a8:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <RCC_Delay+0x34>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a0a      	ldr	r2, [pc, #40]	@ (80073d8 <RCC_Delay+0x38>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	0a5b      	lsrs	r3, r3, #9
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073bc:	bf00      	nop
  }
  while (Delay --);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	60fa      	str	r2, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f9      	bne.n	80073bc <RCC_Delay+0x1c>
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr
 80073d4:	20000008 	.word	0x20000008
 80073d8:	10624dd3 	.word	0x10624dd3

080073dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e076      	b.n	80074dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fe:	d009      	beq.n	8007414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	61da      	str	r2, [r3, #28]
 8007406:	e005      	b.n	8007414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fd f8f8 	bl	8004624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800744a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007498:	ea42 0103 	orr.w	r1, r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	0c1a      	lsrs	r2, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f002 0204 	and.w	r2, r2, #4
 80074ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_SPI_Transmit+0x22>
 8007502:	2302      	movs	r3, #2
 8007504:	e12d      	b.n	8007762 <HAL_SPI_Transmit+0x27e>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800750e:	f7fd fb51 	bl	8004bb4 <HAL_GetTick>
 8007512:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d002      	beq.n	800752a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007528:	e116      	b.n	8007758 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Transmit+0x52>
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800753a:	e10d      	b.n	8007758 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2203      	movs	r2, #3
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	88fa      	ldrh	r2, [r7, #6]
 800755a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007582:	d10f      	bne.n	80075a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ae:	2b40      	cmp	r3, #64	@ 0x40
 80075b0:	d007      	beq.n	80075c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ca:	d14f      	bne.n	800766c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_SPI_Transmit+0xf6>
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d142      	bne.n	8007660 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ea:	1c9a      	adds	r2, r3, #2
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075fe:	e02f      	b.n	8007660 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d112      	bne.n	8007634 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	881a      	ldrh	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	1c9a      	adds	r2, r3, #2
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007632:	e015      	b.n	8007660 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007634:	f7fd fabe 	bl	8004bb4 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d803      	bhi.n	800764c <HAL_SPI_Transmit+0x168>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d102      	bne.n	8007652 <HAL_SPI_Transmit+0x16e>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800765e:	e07b      	b.n	8007758 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1ca      	bne.n	8007600 <HAL_SPI_Transmit+0x11c>
 800766a:	e050      	b.n	800770e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x196>
 8007674:	8afb      	ldrh	r3, [r7, #22]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d144      	bne.n	8007704 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076a0:	e030      	b.n	8007704 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d113      	bne.n	80076d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076d6:	e015      	b.n	8007704 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d8:	f7fd fa6c 	bl	8004bb4 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d803      	bhi.n	80076f0 <HAL_SPI_Transmit+0x20c>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d102      	bne.n	80076f6 <HAL_SPI_Transmit+0x212>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007702:	e029      	b.n	8007758 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1c9      	bne.n	80076a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fa6e 	bl	8007bf4 <SPI_EndRxTxTransaction>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e003      	b.n	8007758 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007760:	7ffb      	ldrb	r3, [r7, #31]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b08c      	sub	sp, #48	@ 0x30
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007778:	2301      	movs	r3, #1
 800777a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x26>
 800778c:	2302      	movs	r3, #2
 800778e:	e198      	b.n	8007ac2 <HAL_SPI_TransmitReceive+0x358>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007798:	f7fd fa0c 	bl	8004bb4 <HAL_GetTick>
 800779c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d00f      	beq.n	80077da <HAL_SPI_TransmitReceive+0x70>
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077c0:	d107      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x68>
 80077ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d003      	beq.n	80077da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
 80077d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077d8:	e16d      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x82>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x82>
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077f2:	e160      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d003      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2205      	movs	r2, #5
 8007804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	887a      	ldrh	r2, [r7, #2]
 8007818:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	887a      	ldrh	r2, [r7, #2]
 800781e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	887a      	ldrh	r2, [r7, #2]
 8007830:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007848:	2b40      	cmp	r3, #64	@ 0x40
 800784a:	d007      	beq.n	800785c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800785a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007864:	d17c      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x10a>
 800786e:	8b7b      	ldrh	r3, [r7, #26]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d16a      	bne.n	800794a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007878:	881a      	ldrh	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007884:	1c9a      	adds	r2, r3, #2
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007898:	e057      	b.n	800794a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d11b      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x176>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x176>
 80078b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d113      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d119      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x1b8>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d014      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	b292      	uxth	r2, r2
 8007904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800791e:	2301      	movs	r3, #1
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007922:	f7fd f947 	bl	8004bb4 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800792e:	429a      	cmp	r2, r3
 8007930:	d80b      	bhi.n	800794a <HAL_SPI_TransmitReceive+0x1e0>
 8007932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007938:	d007      	beq.n	800794a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007948:	e0b5      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1a2      	bne.n	800789a <HAL_SPI_TransmitReceive+0x130>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d19d      	bne.n	800789a <HAL_SPI_TransmitReceive+0x130>
 800795e:	e080      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_SPI_TransmitReceive+0x204>
 8007968:	8b7b      	ldrh	r3, [r7, #26]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d16f      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	7812      	ldrb	r2, [r2, #0]
 800797a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007994:	e05b      	b.n	8007a4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d11c      	bne.n	80079de <HAL_SPI_TransmitReceive+0x274>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d017      	beq.n	80079de <HAL_SPI_TransmitReceive+0x274>
 80079ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d114      	bne.n	80079de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d119      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0x2b6>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d014      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a20:	f7fd f8c8 	bl	8004bb4 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d803      	bhi.n	8007a38 <HAL_SPI_TransmitReceive+0x2ce>
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d102      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x2d4>
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007a4c:	e033      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d19e      	bne.n	8007996 <HAL_SPI_TransmitReceive+0x22c>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d199      	bne.n	8007996 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f8c4 	bl	8007bf4 <SPI_EndRxTxTransaction>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d006      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007a7e:	e01a      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aac:	e003      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007abe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3730      	adds	r7, #48	@ 0x30
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ad8:	b2db      	uxtb	r3, r3
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007af4:	f7fd f85e 	bl	8004bb4 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4413      	add	r3, r2
 8007b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b04:	f7fd f856 	bl	8004bb4 <HAL_GetTick>
 8007b08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b0a:	4b39      	ldr	r3, [pc, #228]	@ (8007bf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	015b      	lsls	r3, r3, #5
 8007b10:	0d1b      	lsrs	r3, r3, #20
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b1a:	e054      	b.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d050      	beq.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b24:	f7fd f846 	bl	8004bb4 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d902      	bls.n	8007b3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d13d      	bne.n	8007bb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b52:	d111      	bne.n	8007b78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b5c:	d004      	beq.n	8007b68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b66:	d107      	bne.n	8007b78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b80:	d10f      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e017      	b.n	8007be6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d19b      	bne.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000008 	.word	0x20000008

08007bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff ff6a 	bl	8007ae4 <SPI_WaitFlagStateUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1a:	f043 0220 	orr.w	r2, r3, #32
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e000      	b.n	8007c28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e041      	b.n	8007cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fc fd2e 	bl	80046b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f000 fd68 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e041      	b.n	8007d64 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f839 	bl	8007d6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f000 fd19 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start+0x1a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e013      	b.n	8007dc2 <HAL_TIM_IC_Start+0x42>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start+0x2a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	e00b      	b.n	8007dc2 <HAL_TIM_IC_Start+0x42>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_IC_Start+0x3a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	e003      	b.n	8007dc2 <HAL_TIM_IC_Start+0x42>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <HAL_TIM_IC_Start+0x54>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e013      	b.n	8007dfc <HAL_TIM_IC_Start+0x7c>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d104      	bne.n	8007de4 <HAL_TIM_IC_Start+0x64>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e00b      	b.n	8007dfc <HAL_TIM_IC_Start+0x7c>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d104      	bne.n	8007df4 <HAL_TIM_IC_Start+0x74>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e003      	b.n	8007dfc <HAL_TIM_IC_Start+0x7c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d102      	bne.n	8007e0a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d001      	beq.n	8007e0e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e06d      	b.n	8007eea <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start+0x9e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_IC_Start+0xc6>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start+0xae>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_IC_Start+0xc6>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start+0xbe>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_IC_Start+0xc6>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_IC_Start+0xd6>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_IC_Start+0xfe>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_IC_Start+0xe6>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_IC_Start+0xfe>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_IC_Start+0xf6>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_IC_Start+0xfe>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2201      	movs	r2, #1
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fef3 	bl	8008c72 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a18      	ldr	r2, [pc, #96]	@ (8007ef4 <HAL_TIM_IC_Start+0x174>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_TIM_IC_Start+0x134>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9e:	d009      	beq.n	8007eb4 <HAL_TIM_IC_Start+0x134>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a14      	ldr	r2, [pc, #80]	@ (8007ef8 <HAL_TIM_IC_Start+0x178>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIM_IC_Start+0x134>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <HAL_TIM_IC_Start+0x17c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d111      	bne.n	8007ed8 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d010      	beq.n	8007ee8 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0201 	orr.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	e007      	b.n	8007ee8 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40012c00 	.word	0x40012c00
 8007ef8:	40000400 	.word	0x40000400
 8007efc:	40000800 	.word	0x40000800

08007f00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_IC_Start_IT+0x1e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e013      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x46>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_IC_Start_IT+0x2e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	e00b      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x46>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_IC_Start_IT+0x3e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	e003      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x46>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <HAL_TIM_IC_Start_IT+0x58>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e013      	b.n	8007f80 <HAL_TIM_IC_Start_IT+0x80>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d104      	bne.n	8007f68 <HAL_TIM_IC_Start_IT+0x68>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	e00b      	b.n	8007f80 <HAL_TIM_IC_Start_IT+0x80>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d104      	bne.n	8007f78 <HAL_TIM_IC_Start_IT+0x78>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	e003      	b.n	8007f80 <HAL_TIM_IC_Start_IT+0x80>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f88:	7b7b      	ldrb	r3, [r7, #13]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e0b8      	b.n	8008104 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_IC_Start_IT+0xa2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fa0:	e013      	b.n	8007fca <HAL_TIM_IC_Start_IT+0xca>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_IC_Start_IT+0xb2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fb0:	e00b      	b.n	8007fca <HAL_TIM_IC_Start_IT+0xca>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_IC_Start_IT+0xc2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fc0:	e003      	b.n	8007fca <HAL_TIM_IC_Start_IT+0xca>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_IC_Start_IT+0xda>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd8:	e013      	b.n	8008002 <HAL_TIM_IC_Start_IT+0x102>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_IC_Start_IT+0xea>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe8:	e00b      	b.n	8008002 <HAL_TIM_IC_Start_IT+0x102>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d104      	bne.n	8007ffa <HAL_TIM_IC_Start_IT+0xfa>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff8:	e003      	b.n	8008002 <HAL_TIM_IC_Start_IT+0x102>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b0c      	cmp	r3, #12
 8008006:	d841      	bhi.n	800808c <HAL_TIM_IC_Start_IT+0x18c>
 8008008:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <HAL_TIM_IC_Start_IT+0x110>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008045 	.word	0x08008045
 8008014:	0800808d 	.word	0x0800808d
 8008018:	0800808d 	.word	0x0800808d
 800801c:	0800808d 	.word	0x0800808d
 8008020:	08008057 	.word	0x08008057
 8008024:	0800808d 	.word	0x0800808d
 8008028:	0800808d 	.word	0x0800808d
 800802c:	0800808d 	.word	0x0800808d
 8008030:	08008069 	.word	0x08008069
 8008034:	0800808d 	.word	0x0800808d
 8008038:	0800808d 	.word	0x0800808d
 800803c:	0800808d 	.word	0x0800808d
 8008040:	0800807b 	.word	0x0800807b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0202 	orr.w	r2, r2, #2
 8008052:	60da      	str	r2, [r3, #12]
      break;
 8008054:	e01d      	b.n	8008092 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0204 	orr.w	r2, r2, #4
 8008064:	60da      	str	r2, [r3, #12]
      break;
 8008066:	e014      	b.n	8008092 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0208 	orr.w	r2, r2, #8
 8008076:	60da      	str	r2, [r3, #12]
      break;
 8008078:	e00b      	b.n	8008092 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0210 	orr.w	r2, r2, #16
 8008088:	60da      	str	r2, [r3, #12]
      break;
 800808a:	e002      	b.n	8008092 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	bf00      	nop
  }

  if (status == HAL_OK)
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d134      	bne.n	8008102 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2201      	movs	r2, #1
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fde6 	bl	8008c72 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <HAL_TIM_IC_Start_IT+0x20c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00e      	beq.n	80080ce <HAL_TIM_IC_Start_IT+0x1ce>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_IC_Start_IT+0x1ce>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a14      	ldr	r2, [pc, #80]	@ (8008110 <HAL_TIM_IC_Start_IT+0x210>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_IC_Start_IT+0x1ce>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a12      	ldr	r2, [pc, #72]	@ (8008114 <HAL_TIM_IC_Start_IT+0x214>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d111      	bne.n	80080f2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b06      	cmp	r3, #6
 80080de:	d010      	beq.n	8008102 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0201 	orr.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f0:	e007      	b.n	8008102 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800

08008118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d122      	bne.n	8008174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b02      	cmp	r3, #2
 800813a:	d11b      	bne.n	8008174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0202 	mvn.w	r2, #2
 8008144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fa fcb4 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8008160:	e005      	b.n	800816e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fad3 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fad9 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b04      	cmp	r3, #4
 8008180:	d122      	bne.n	80081c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d11b      	bne.n	80081c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0204 	mvn.w	r2, #4
 8008198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fa fc8a 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 faa9 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 faaf 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d122      	bne.n	800821c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d11b      	bne.n	800821c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0208 	mvn.w	r2, #8
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fa fc60 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa7f 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa85 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b10      	cmp	r3, #16
 8008228:	d122      	bne.n	8008270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b10      	cmp	r3, #16
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0210 	mvn.w	r2, #16
 8008240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2208      	movs	r2, #8
 8008246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fa fc36 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa55 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa5b 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d10e      	bne.n	800829c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d107      	bne.n	800829c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0201 	mvn.w	r2, #1
 8008294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa30 	bl	80086fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b80      	cmp	r3, #128	@ 0x80
 80082a8:	d10e      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b4:	2b80      	cmp	r3, #128	@ 0x80
 80082b6:	d107      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fd61 	bl	8008d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d2:	2b40      	cmp	r3, #64	@ 0x40
 80082d4:	d10e      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e0:	2b40      	cmp	r3, #64	@ 0x40
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa1f 	bl	8008732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b20      	cmp	r3, #32
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0220 	mvn.w	r2, #32
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fd2c 	bl	8008d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008342:	2302      	movs	r3, #2
 8008344:	e088      	b.n	8008458 <HAL_TIM_IC_ConfigChannel+0x130>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008364:	f000 fae2 	bl	800892c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 020c 	bic.w	r2, r2, #12
 8008376:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6999      	ldr	r1, [r3, #24]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	619a      	str	r2, [r3, #24]
 800838a:	e060      	b.n	800844e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d11c      	bne.n	80083cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80083a2:	f000 fb4b 	bl	8008a3c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80083b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6999      	ldr	r1, [r3, #24]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	021a      	lsls	r2, r3, #8
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	619a      	str	r2, [r3, #24]
 80083ca:	e040      	b.n	800844e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	d11b      	bne.n	800840a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80083e2:	f000 fb96 	bl	8008b12 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69da      	ldr	r2, [r3, #28]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 020c 	bic.w	r2, r2, #12
 80083f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69d9      	ldr	r1, [r3, #28]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	61da      	str	r2, [r3, #28]
 8008408:	e021      	b.n	800844e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b0c      	cmp	r3, #12
 800840e:	d11c      	bne.n	800844a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008420:	f000 fbb2 	bl	8008b88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69da      	ldr	r2, [r3, #28]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008432:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69d9      	ldr	r1, [r3, #28]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	021a      	lsls	r2, r3, #8
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	61da      	str	r2, [r3, #28]
 8008448:	e001      	b.n	800844e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_TIM_ConfigClockSource+0x1c>
 8008478:	2302      	movs	r3, #2
 800847a:	e0b4      	b.n	80085e6 <HAL_TIM_ConfigClockSource+0x186>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800849a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b4:	d03e      	beq.n	8008534 <HAL_TIM_ConfigClockSource+0xd4>
 80084b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ba:	f200 8087 	bhi.w	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	f000 8086 	beq.w	80085d2 <HAL_TIM_ConfigClockSource+0x172>
 80084c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ca:	d87f      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b70      	cmp	r3, #112	@ 0x70
 80084ce:	d01a      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0xa6>
 80084d0:	2b70      	cmp	r3, #112	@ 0x70
 80084d2:	d87b      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b60      	cmp	r3, #96	@ 0x60
 80084d6:	d050      	beq.n	800857a <HAL_TIM_ConfigClockSource+0x11a>
 80084d8:	2b60      	cmp	r3, #96	@ 0x60
 80084da:	d877      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b50      	cmp	r3, #80	@ 0x50
 80084de:	d03c      	beq.n	800855a <HAL_TIM_ConfigClockSource+0xfa>
 80084e0:	2b50      	cmp	r3, #80	@ 0x50
 80084e2:	d873      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b40      	cmp	r3, #64	@ 0x40
 80084e6:	d058      	beq.n	800859a <HAL_TIM_ConfigClockSource+0x13a>
 80084e8:	2b40      	cmp	r3, #64	@ 0x40
 80084ea:	d86f      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b30      	cmp	r3, #48	@ 0x30
 80084ee:	d064      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 80084f0:	2b30      	cmp	r3, #48	@ 0x30
 80084f2:	d86b      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d060      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d867      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d05c      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 8008500:	2b10      	cmp	r3, #16
 8008502:	d05a      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 8008504:	e062      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008516:	f000 fb8d 	bl	8008c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	609a      	str	r2, [r3, #8]
      break;
 8008532:	e04f      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008544:	f000 fb76 	bl	8008c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008556:	609a      	str	r2, [r3, #8]
      break;
 8008558:	e03c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008566:	461a      	mov	r2, r3
 8008568:	f000 fa3a 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2150      	movs	r1, #80	@ 0x50
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fb44 	bl	8008c00 <TIM_ITRx_SetConfig>
      break;
 8008578:	e02c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008586:	461a      	mov	r2, r3
 8008588:	f000 fa94 	bl	8008ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2160      	movs	r1, #96	@ 0x60
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fb34 	bl	8008c00 <TIM_ITRx_SetConfig>
      break;
 8008598:	e01c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a6:	461a      	mov	r2, r3
 80085a8:	f000 fa1a 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2140      	movs	r1, #64	@ 0x40
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fb24 	bl	8008c00 <TIM_ITRx_SetConfig>
      break;
 80085b8:	e00c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f000 fb1b 	bl	8008c00 <TIM_ITRx_SetConfig>
      break;
 80085ca:	e003      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
      break;
 80085d0:	e000      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008602:	2302      	movs	r3, #2
 8008604:	e031      	b.n	800866a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8f5 	bl	8008808 <TIM_SlaveTimer_SetConfig>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e018      	b.n	800866a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008646:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008656:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b0c      	cmp	r3, #12
 8008686:	d831      	bhi.n	80086ec <HAL_TIM_ReadCapturedValue+0x78>
 8008688:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_TIM_ReadCapturedValue+0x1c>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086c5 	.word	0x080086c5
 8008694:	080086ed 	.word	0x080086ed
 8008698:	080086ed 	.word	0x080086ed
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	080086cf 	.word	0x080086cf
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086ed 	.word	0x080086ed
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086ed 	.word	0x080086ed
 80086b8:	080086ed 	.word	0x080086ed
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	080086e3 	.word	0x080086e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ca:	60fb      	str	r3, [r7, #12]

      break;
 80086cc:	e00f      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	60fb      	str	r3, [r7, #12]

      break;
 80086d6:	e00a      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086de:	60fb      	str	r3, [r7, #12]

      break;
 80086e0:	e005      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	60fb      	str	r3, [r7, #12]

      break;
 80086ea:	e000      	b.n	80086ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80086ec:	bf00      	nop
  }

  return tmpreg;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop

080086fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a29      	ldr	r2, [pc, #164]	@ (80087fc <TIM_Base_SetConfig+0xb8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0x30>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0x30>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a26      	ldr	r2, [pc, #152]	@ (8008800 <TIM_Base_SetConfig+0xbc>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0x30>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a25      	ldr	r2, [pc, #148]	@ (8008804 <TIM_Base_SetConfig+0xc0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d108      	bne.n	8008786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a1c      	ldr	r2, [pc, #112]	@ (80087fc <TIM_Base_SetConfig+0xb8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00b      	beq.n	80087a6 <TIM_Base_SetConfig+0x62>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008794:	d007      	beq.n	80087a6 <TIM_Base_SetConfig+0x62>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a19      	ldr	r2, [pc, #100]	@ (8008800 <TIM_Base_SetConfig+0xbc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_Base_SetConfig+0x62>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a18      	ldr	r2, [pc, #96]	@ (8008804 <TIM_Base_SetConfig+0xc0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d108      	bne.n	80087b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a07      	ldr	r2, [pc, #28]	@ (80087fc <TIM_Base_SetConfig+0xb8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d103      	bne.n	80087ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	615a      	str	r2, [r3, #20]
}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800

08008808 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008824:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f023 0307 	bic.w	r3, r3, #7
 8008836:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b70      	cmp	r3, #112	@ 0x70
 8008850:	d01a      	beq.n	8008888 <TIM_SlaveTimer_SetConfig+0x80>
 8008852:	2b70      	cmp	r3, #112	@ 0x70
 8008854:	d860      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 8008856:	2b60      	cmp	r3, #96	@ 0x60
 8008858:	d054      	beq.n	8008904 <TIM_SlaveTimer_SetConfig+0xfc>
 800885a:	2b60      	cmp	r3, #96	@ 0x60
 800885c:	d85c      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 800885e:	2b50      	cmp	r3, #80	@ 0x50
 8008860:	d046      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8008862:	2b50      	cmp	r3, #80	@ 0x50
 8008864:	d858      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d019      	beq.n	800889e <TIM_SlaveTimer_SetConfig+0x96>
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	d854      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 800886e:	2b30      	cmp	r3, #48	@ 0x30
 8008870:	d055      	beq.n	800891e <TIM_SlaveTimer_SetConfig+0x116>
 8008872:	2b30      	cmp	r3, #48	@ 0x30
 8008874:	d850      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 8008876:	2b20      	cmp	r3, #32
 8008878:	d051      	beq.n	800891e <TIM_SlaveTimer_SetConfig+0x116>
 800887a:	2b20      	cmp	r3, #32
 800887c:	d84c      	bhi.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d04d      	beq.n	800891e <TIM_SlaveTimer_SetConfig+0x116>
 8008882:	2b10      	cmp	r3, #16
 8008884:	d04b      	beq.n	800891e <TIM_SlaveTimer_SetConfig+0x116>
 8008886:	e047      	b.n	8008918 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008898:	f000 f9cc 	bl	8008c34 <TIM_ETR_SetConfig>
      break;
 800889c:	e040      	b.n	8008920 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d101      	bne.n	80088aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e03b      	b.n	8008922 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6a1a      	ldr	r2, [r3, #32]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0201 	bic.w	r2, r2, #1
 80088c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	621a      	str	r2, [r3, #32]
      break;
 80088ee:	e017      	b.n	8008920 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088fc:	461a      	mov	r2, r3
 80088fe:	f000 f86f 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      break;
 8008902:	e00d      	b.n	8008920 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008910:	461a      	mov	r2, r3
 8008912:	f000 f8cf 	bl	8008ab4 <TIM_TI2_ConfigInputStage>
      break;
 8008916:	e003      	b.n	8008920 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	75fb      	strb	r3, [r7, #23]
      break;
 800891c:	e000      	b.n	8008920 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800891e:	bf00      	nop
  }

  return status;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f023 0201 	bic.w	r2, r3, #1
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	4a1f      	ldr	r2, [pc, #124]	@ (80089d4 <TIM_TI1_SetConfig+0xa8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_TI1_SetConfig+0x46>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008960:	d007      	beq.n	8008972 <TIM_TI1_SetConfig+0x46>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4a1c      	ldr	r2, [pc, #112]	@ (80089d8 <TIM_TI1_SetConfig+0xac>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_TI1_SetConfig+0x46>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4a1b      	ldr	r2, [pc, #108]	@ (80089dc <TIM_TI1_SetConfig+0xb0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d101      	bne.n	8008976 <TIM_TI1_SetConfig+0x4a>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <TIM_TI1_SetConfig+0x4c>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d008      	beq.n	800898e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4313      	orrs	r3, r2
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e003      	b.n	8008996 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800899c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f023 030a 	bic.w	r3, r3, #10
 80089b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f003 030a 	and.w	r3, r3, #10
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800

080089e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f023 0210 	bic.w	r2, r3, #16
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	031b      	lsls	r3, r3, #12
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0210 	bic.w	r2, r3, #16
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	031b      	lsls	r3, r3, #12
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008af0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	621a      	str	r2, [r3, #32]
}
 8008b08:	bf00      	nop
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	621a      	str	r2, [r3, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	031b      	lsls	r3, r3, #12
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	031b      	lsls	r3, r3, #12
 8008be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr

08008c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f043 0307 	orr.w	r3, r3, #7
 8008c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	609a      	str	r2, [r3, #8]
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr

08008c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	021a      	lsls	r2, r3, #8
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	609a      	str	r2, [r3, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b087      	sub	sp, #28
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	2201      	movs	r2, #1
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1a      	ldr	r2, [r3, #32]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	401a      	ands	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1a      	ldr	r2, [r3, #32]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8008caa:	431a      	orrs	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	621a      	str	r2, [r3, #32]
}
 8008cb0:	bf00      	nop
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr
	...

08008cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e046      	b.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a16      	ldr	r2, [pc, #88]	@ (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00e      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d20:	d009      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a12      	ldr	r2, [pc, #72]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d004      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a10      	ldr	r2, [pc, #64]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d10c      	bne.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr
 8008d6c:	40012c00 	.word	0x40012c00
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800

08008d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bc80      	pop	{r7}
 8008d88:	4770      	bx	lr

08008d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e042      	b.n	8008e34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7fb fcd8 	bl	8004778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2224      	movs	r2, #36	@ 0x24
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9af 	bl	8009144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d16d      	bne.n	8008f38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Transmit+0x2c>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e066      	b.n	8008f3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2221      	movs	r2, #33	@ 0x21
 8008e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e7a:	f7fb fe9b 	bl	8004bb4 <HAL_GetTick>
 8008e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e94:	d108      	bne.n	8008ea8 <HAL_UART_Transmit+0x6c>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d104      	bne.n	8008ea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	e003      	b.n	8008eb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008eb0:	e02a      	b.n	8008f08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2180      	movs	r1, #128	@ 0x80
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 f8d2 	bl	8009066 <UART_WaitOnFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e036      	b.n	8008f3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	e007      	b.n	8008efa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1cf      	bne.n	8008eb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2140      	movs	r1, #64	@ 0x40
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f8a2 	bl	8009066 <UART_WaitOnFlagUntilTimeout>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e006      	b.n	8008f3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f38:	2302      	movs	r3, #2
  }
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b08a      	sub	sp, #40	@ 0x28
 8008f46:	af02      	add	r7, sp, #8
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	603b      	str	r3, [r7, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d17c      	bne.n	800905c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <HAL_UART_Receive+0x2c>
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e075      	b.n	800905e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2222      	movs	r2, #34	@ 0x22
 8008f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f86:	f7fb fe15 	bl	8004bb4 <HAL_GetTick>
 8008f8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88fa      	ldrh	r2, [r7, #6]
 8008f90:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	88fa      	ldrh	r2, [r7, #6]
 8008f96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fa0:	d108      	bne.n	8008fb4 <HAL_UART_Receive+0x72>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	e003      	b.n	8008fbc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008fbc:	e043      	b.n	8009046 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2120      	movs	r1, #32
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f84c 	bl	8009066 <UART_WaitOnFlagUntilTimeout>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e042      	b.n	800905e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10c      	bne.n	8008ff8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e01f      	b.n	8009038 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009000:	d007      	beq.n	8009012 <HAL_UART_Receive+0xd0>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <HAL_UART_Receive+0xde>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e008      	b.n	8009032 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800902c:	b2da      	uxtb	r2, r3
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3301      	adds	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29a      	uxth	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1b6      	bne.n	8008fbe <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	e000      	b.n	800905e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800905c:	2302      	movs	r3, #2
  }
}
 800905e:	4618      	mov	r0, r3
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b090      	sub	sp, #64	@ 0x40
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009076:	e050      	b.n	800911a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d04c      	beq.n	800911a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <UART_WaitOnFlagUntilTimeout+0x30>
 8009086:	f7fb fd95 	bl	8004bb4 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009092:	429a      	cmp	r2, r3
 8009094:	d241      	bcs.n	800911a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	330c      	adds	r3, #12
 800909c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	330c      	adds	r3, #12
 80090b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80090b8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80090c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	613b      	str	r3, [r7, #16]
   return(result);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3314      	adds	r3, #20
 80090e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090ea:	623a      	str	r2, [r7, #32]
 80090ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	69f9      	ldr	r1, [r7, #28]
 80090f0:	6a3a      	ldr	r2, [r7, #32]
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2220      	movs	r2, #32
 8009102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e00f      	b.n	800913a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4013      	ands	r3, r2
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	bf0c      	ite	eq
 800912a:	2301      	moveq	r3, #1
 800912c:	2300      	movne	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	429a      	cmp	r2, r3
 8009136:	d09f      	beq.n	8009078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3740      	adds	r7, #64	@ 0x40
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800917e:	f023 030c 	bic.w	r3, r3, #12
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	430b      	orrs	r3, r1
 800918a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009258 <UART_SetConfig+0x114>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d103      	bne.n	80091b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80091ac:	f7fe f8e4 	bl	8007378 <HAL_RCC_GetPCLK2Freq>
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	e002      	b.n	80091ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80091b4:	f7fe f8cc 	bl	8007350 <HAL_RCC_GetPCLK1Freq>
 80091b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009a      	lsls	r2, r3, #2
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	4a22      	ldr	r2, [pc, #136]	@ (800925c <UART_SetConfig+0x118>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	0119      	lsls	r1, r3, #4
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009a      	lsls	r2, r3, #2
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80091f0:	4b1a      	ldr	r3, [pc, #104]	@ (800925c <UART_SetConfig+0x118>)
 80091f2:	fba3 0302 	umull	r0, r3, r3, r2
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	2064      	movs	r0, #100	@ 0x64
 80091fa:	fb00 f303 	mul.w	r3, r0, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	3332      	adds	r3, #50	@ 0x32
 8009204:	4a15      	ldr	r2, [pc, #84]	@ (800925c <UART_SetConfig+0x118>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009210:	4419      	add	r1, r3
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	009a      	lsls	r2, r3, #2
 800921c:	441a      	add	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	fbb2 f2f3 	udiv	r2, r2, r3
 8009228:	4b0c      	ldr	r3, [pc, #48]	@ (800925c <UART_SetConfig+0x118>)
 800922a:	fba3 0302 	umull	r0, r3, r3, r2
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	2064      	movs	r0, #100	@ 0x64
 8009232:	fb00 f303 	mul.w	r3, r0, r3
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	3332      	adds	r3, #50	@ 0x32
 800923c:	4a07      	ldr	r2, [pc, #28]	@ (800925c <UART_SetConfig+0x118>)
 800923e:	fba2 2303 	umull	r2, r3, r2, r3
 8009242:	095b      	lsrs	r3, r3, #5
 8009244:	f003 020f 	and.w	r2, r3, #15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	440a      	add	r2, r1
 800924e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40013800 	.word	0x40013800
 800925c:	51eb851f 	.word	0x51eb851f

08009260 <atoi>:
 8009260:	220a      	movs	r2, #10
 8009262:	2100      	movs	r1, #0
 8009264:	f000 bed0 	b.w	800a008 <strtol>

08009268 <sulp>:
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	460f      	mov	r7, r1
 800926e:	4690      	mov	r8, r2
 8009270:	f004 f8be 	bl	800d3f0 <__ulp>
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	f1b8 0f00 	cmp.w	r8, #0
 800927c:	d011      	beq.n	80092a2 <sulp+0x3a>
 800927e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009282:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd0b      	ble.n	80092a2 <sulp+0x3a>
 800928a:	2400      	movs	r4, #0
 800928c:	051b      	lsls	r3, r3, #20
 800928e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009292:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f7f7 f927 	bl	80004ec <__aeabi_dmul>
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092aa:	0000      	movs	r0, r0
 80092ac:	0000      	movs	r0, r0
	...

080092b0 <_strtod_l>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b09f      	sub	sp, #124	@ 0x7c
 80092b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092b8:	2200      	movs	r2, #0
 80092ba:	460c      	mov	r4, r1
 80092bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80092be:	f04f 0a00 	mov.w	sl, #0
 80092c2:	f04f 0b00 	mov.w	fp, #0
 80092c6:	460a      	mov	r2, r1
 80092c8:	9005      	str	r0, [sp, #20]
 80092ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80092cc:	7811      	ldrb	r1, [r2, #0]
 80092ce:	292b      	cmp	r1, #43	@ 0x2b
 80092d0:	d048      	beq.n	8009364 <_strtod_l+0xb4>
 80092d2:	d836      	bhi.n	8009342 <_strtod_l+0x92>
 80092d4:	290d      	cmp	r1, #13
 80092d6:	d830      	bhi.n	800933a <_strtod_l+0x8a>
 80092d8:	2908      	cmp	r1, #8
 80092da:	d830      	bhi.n	800933e <_strtod_l+0x8e>
 80092dc:	2900      	cmp	r1, #0
 80092de:	d039      	beq.n	8009354 <_strtod_l+0xa4>
 80092e0:	2200      	movs	r2, #0
 80092e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80092e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80092e6:	782a      	ldrb	r2, [r5, #0]
 80092e8:	2a30      	cmp	r2, #48	@ 0x30
 80092ea:	f040 80b1 	bne.w	8009450 <_strtod_l+0x1a0>
 80092ee:	786a      	ldrb	r2, [r5, #1]
 80092f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092f4:	2a58      	cmp	r2, #88	@ 0x58
 80092f6:	d16c      	bne.n	80093d2 <_strtod_l+0x122>
 80092f8:	9302      	str	r3, [sp, #8]
 80092fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009538 <_strtod_l+0x288>)
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	ab1a      	add	r3, sp, #104	@ 0x68
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009308:	a919      	add	r1, sp, #100	@ 0x64
 800930a:	f003 f919 	bl	800c540 <__gethex>
 800930e:	f010 060f 	ands.w	r6, r0, #15
 8009312:	4604      	mov	r4, r0
 8009314:	d005      	beq.n	8009322 <_strtod_l+0x72>
 8009316:	2e06      	cmp	r6, #6
 8009318:	d126      	bne.n	8009368 <_strtod_l+0xb8>
 800931a:	2300      	movs	r3, #0
 800931c:	3501      	adds	r5, #1
 800931e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 8584 	bne.w	8009e32 <_strtod_l+0xb82>
 800932a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800932c:	b1bb      	cbz	r3, 800935e <_strtod_l+0xae>
 800932e:	4650      	mov	r0, sl
 8009330:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009334:	b01f      	add	sp, #124	@ 0x7c
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933a:	2920      	cmp	r1, #32
 800933c:	d1d0      	bne.n	80092e0 <_strtod_l+0x30>
 800933e:	3201      	adds	r2, #1
 8009340:	e7c3      	b.n	80092ca <_strtod_l+0x1a>
 8009342:	292d      	cmp	r1, #45	@ 0x2d
 8009344:	d1cc      	bne.n	80092e0 <_strtod_l+0x30>
 8009346:	2101      	movs	r1, #1
 8009348:	910b      	str	r1, [sp, #44]	@ 0x2c
 800934a:	1c51      	adds	r1, r2, #1
 800934c:	9119      	str	r1, [sp, #100]	@ 0x64
 800934e:	7852      	ldrb	r2, [r2, #1]
 8009350:	2a00      	cmp	r2, #0
 8009352:	d1c7      	bne.n	80092e4 <_strtod_l+0x34>
 8009354:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009356:	9419      	str	r4, [sp, #100]	@ 0x64
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 8568 	bne.w	8009e2e <_strtod_l+0xb7e>
 800935e:	4650      	mov	r0, sl
 8009360:	4659      	mov	r1, fp
 8009362:	e7e7      	b.n	8009334 <_strtod_l+0x84>
 8009364:	2100      	movs	r1, #0
 8009366:	e7ef      	b.n	8009348 <_strtod_l+0x98>
 8009368:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800936a:	b13a      	cbz	r2, 800937c <_strtod_l+0xcc>
 800936c:	2135      	movs	r1, #53	@ 0x35
 800936e:	a81c      	add	r0, sp, #112	@ 0x70
 8009370:	f004 f92e 	bl	800d5d0 <__copybits>
 8009374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009376:	9805      	ldr	r0, [sp, #20]
 8009378:	f003 fd08 	bl	800cd8c <_Bfree>
 800937c:	3e01      	subs	r6, #1
 800937e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009380:	2e04      	cmp	r6, #4
 8009382:	d806      	bhi.n	8009392 <_strtod_l+0xe2>
 8009384:	e8df f006 	tbb	[pc, r6]
 8009388:	201d0314 	.word	0x201d0314
 800938c:	14          	.byte	0x14
 800938d:	00          	.byte	0x00
 800938e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009392:	05e1      	lsls	r1, r4, #23
 8009394:	bf48      	it	mi
 8009396:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800939a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800939e:	0d1b      	lsrs	r3, r3, #20
 80093a0:	051b      	lsls	r3, r3, #20
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1bd      	bne.n	8009322 <_strtod_l+0x72>
 80093a6:	f002 f963 	bl	800b670 <__errno>
 80093aa:	2322      	movs	r3, #34	@ 0x22
 80093ac:	6003      	str	r3, [r0, #0]
 80093ae:	e7b8      	b.n	8009322 <_strtod_l+0x72>
 80093b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093c0:	e7e7      	b.n	8009392 <_strtod_l+0xe2>
 80093c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800953c <_strtod_l+0x28c>
 80093c6:	e7e4      	b.n	8009392 <_strtod_l+0xe2>
 80093c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80093cc:	f04f 3aff 	mov.w	sl, #4294967295
 80093d0:	e7df      	b.n	8009392 <_strtod_l+0xe2>
 80093d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b30      	cmp	r3, #48	@ 0x30
 80093dc:	d0f9      	beq.n	80093d2 <_strtod_l+0x122>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d09f      	beq.n	8009322 <_strtod_l+0x72>
 80093e2:	2301      	movs	r3, #1
 80093e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e8:	220a      	movs	r2, #10
 80093ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80093ec:	2300      	movs	r3, #0
 80093ee:	461f      	mov	r7, r3
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80093f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80093f6:	7805      	ldrb	r5, [r0, #0]
 80093f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80093fc:	b2d9      	uxtb	r1, r3
 80093fe:	2909      	cmp	r1, #9
 8009400:	d928      	bls.n	8009454 <_strtod_l+0x1a4>
 8009402:	2201      	movs	r2, #1
 8009404:	494e      	ldr	r1, [pc, #312]	@ (8009540 <_strtod_l+0x290>)
 8009406:	f001 fb74 	bl	800aaf2 <strncmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	d032      	beq.n	8009474 <_strtod_l+0x1c4>
 800940e:	2000      	movs	r0, #0
 8009410:	462a      	mov	r2, r5
 8009412:	4681      	mov	r9, r0
 8009414:	463d      	mov	r5, r7
 8009416:	4603      	mov	r3, r0
 8009418:	2a65      	cmp	r2, #101	@ 0x65
 800941a:	d001      	beq.n	8009420 <_strtod_l+0x170>
 800941c:	2a45      	cmp	r2, #69	@ 0x45
 800941e:	d114      	bne.n	800944a <_strtod_l+0x19a>
 8009420:	b91d      	cbnz	r5, 800942a <_strtod_l+0x17a>
 8009422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009424:	4302      	orrs	r2, r0
 8009426:	d095      	beq.n	8009354 <_strtod_l+0xa4>
 8009428:	2500      	movs	r5, #0
 800942a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800942c:	1c62      	adds	r2, r4, #1
 800942e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009430:	7862      	ldrb	r2, [r4, #1]
 8009432:	2a2b      	cmp	r2, #43	@ 0x2b
 8009434:	d077      	beq.n	8009526 <_strtod_l+0x276>
 8009436:	2a2d      	cmp	r2, #45	@ 0x2d
 8009438:	d07b      	beq.n	8009532 <_strtod_l+0x282>
 800943a:	f04f 0c00 	mov.w	ip, #0
 800943e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009442:	2909      	cmp	r1, #9
 8009444:	f240 8082 	bls.w	800954c <_strtod_l+0x29c>
 8009448:	9419      	str	r4, [sp, #100]	@ 0x64
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	e0a2      	b.n	8009596 <_strtod_l+0x2e6>
 8009450:	2300      	movs	r3, #0
 8009452:	e7c7      	b.n	80093e4 <_strtod_l+0x134>
 8009454:	2f08      	cmp	r7, #8
 8009456:	bfd5      	itete	le
 8009458:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800945a:	9908      	ldrgt	r1, [sp, #32]
 800945c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009460:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009464:	f100 0001 	add.w	r0, r0, #1
 8009468:	bfd4      	ite	le
 800946a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800946c:	9308      	strgt	r3, [sp, #32]
 800946e:	3701      	adds	r7, #1
 8009470:	9019      	str	r0, [sp, #100]	@ 0x64
 8009472:	e7bf      	b.n	80093f4 <_strtod_l+0x144>
 8009474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	9219      	str	r2, [sp, #100]	@ 0x64
 800947a:	785a      	ldrb	r2, [r3, #1]
 800947c:	b37f      	cbz	r7, 80094de <_strtod_l+0x22e>
 800947e:	4681      	mov	r9, r0
 8009480:	463d      	mov	r5, r7
 8009482:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009486:	2b09      	cmp	r3, #9
 8009488:	d912      	bls.n	80094b0 <_strtod_l+0x200>
 800948a:	2301      	movs	r3, #1
 800948c:	e7c4      	b.n	8009418 <_strtod_l+0x168>
 800948e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009490:	3001      	adds	r0, #1
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	9219      	str	r2, [sp, #100]	@ 0x64
 8009496:	785a      	ldrb	r2, [r3, #1]
 8009498:	2a30      	cmp	r2, #48	@ 0x30
 800949a:	d0f8      	beq.n	800948e <_strtod_l+0x1de>
 800949c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	f200 84cb 	bhi.w	8009e3c <_strtod_l+0xb8c>
 80094a6:	4681      	mov	r9, r0
 80094a8:	2000      	movs	r0, #0
 80094aa:	4605      	mov	r5, r0
 80094ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80094b0:	3a30      	subs	r2, #48	@ 0x30
 80094b2:	f100 0301 	add.w	r3, r0, #1
 80094b6:	d02a      	beq.n	800950e <_strtod_l+0x25e>
 80094b8:	4499      	add	r9, r3
 80094ba:	210a      	movs	r1, #10
 80094bc:	462b      	mov	r3, r5
 80094be:	eb00 0c05 	add.w	ip, r0, r5
 80094c2:	4563      	cmp	r3, ip
 80094c4:	d10d      	bne.n	80094e2 <_strtod_l+0x232>
 80094c6:	1c69      	adds	r1, r5, #1
 80094c8:	4401      	add	r1, r0
 80094ca:	4428      	add	r0, r5
 80094cc:	2808      	cmp	r0, #8
 80094ce:	dc16      	bgt.n	80094fe <_strtod_l+0x24e>
 80094d0:	230a      	movs	r3, #10
 80094d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094d4:	fb03 2300 	mla	r3, r3, r0, r2
 80094d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094da:	2300      	movs	r3, #0
 80094dc:	e018      	b.n	8009510 <_strtod_l+0x260>
 80094de:	4638      	mov	r0, r7
 80094e0:	e7da      	b.n	8009498 <_strtod_l+0x1e8>
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	f103 0301 	add.w	r3, r3, #1
 80094e8:	dc03      	bgt.n	80094f2 <_strtod_l+0x242>
 80094ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80094ec:	434e      	muls	r6, r1
 80094ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80094f0:	e7e7      	b.n	80094c2 <_strtod_l+0x212>
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	bfde      	ittt	le
 80094f6:	9e08      	ldrle	r6, [sp, #32]
 80094f8:	434e      	mulle	r6, r1
 80094fa:	9608      	strle	r6, [sp, #32]
 80094fc:	e7e1      	b.n	80094c2 <_strtod_l+0x212>
 80094fe:	280f      	cmp	r0, #15
 8009500:	dceb      	bgt.n	80094da <_strtod_l+0x22a>
 8009502:	230a      	movs	r3, #10
 8009504:	9808      	ldr	r0, [sp, #32]
 8009506:	fb03 2300 	mla	r3, r3, r0, r2
 800950a:	9308      	str	r3, [sp, #32]
 800950c:	e7e5      	b.n	80094da <_strtod_l+0x22a>
 800950e:	4629      	mov	r1, r5
 8009510:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009512:	460d      	mov	r5, r1
 8009514:	1c50      	adds	r0, r2, #1
 8009516:	9019      	str	r0, [sp, #100]	@ 0x64
 8009518:	7852      	ldrb	r2, [r2, #1]
 800951a:	4618      	mov	r0, r3
 800951c:	e7b1      	b.n	8009482 <_strtod_l+0x1d2>
 800951e:	f04f 0900 	mov.w	r9, #0
 8009522:	2301      	movs	r3, #1
 8009524:	e77d      	b.n	8009422 <_strtod_l+0x172>
 8009526:	f04f 0c00 	mov.w	ip, #0
 800952a:	1ca2      	adds	r2, r4, #2
 800952c:	9219      	str	r2, [sp, #100]	@ 0x64
 800952e:	78a2      	ldrb	r2, [r4, #2]
 8009530:	e785      	b.n	800943e <_strtod_l+0x18e>
 8009532:	f04f 0c01 	mov.w	ip, #1
 8009536:	e7f8      	b.n	800952a <_strtod_l+0x27a>
 8009538:	0800ee00 	.word	0x0800ee00
 800953c:	7ff00000 	.word	0x7ff00000
 8009540:	0800edea 	.word	0x0800edea
 8009544:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009546:	1c51      	adds	r1, r2, #1
 8009548:	9119      	str	r1, [sp, #100]	@ 0x64
 800954a:	7852      	ldrb	r2, [r2, #1]
 800954c:	2a30      	cmp	r2, #48	@ 0x30
 800954e:	d0f9      	beq.n	8009544 <_strtod_l+0x294>
 8009550:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009554:	2908      	cmp	r1, #8
 8009556:	f63f af78 	bhi.w	800944a <_strtod_l+0x19a>
 800955a:	f04f 080a 	mov.w	r8, #10
 800955e:	3a30      	subs	r2, #48	@ 0x30
 8009560:	920e      	str	r2, [sp, #56]	@ 0x38
 8009562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009564:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009566:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009568:	1c56      	adds	r6, r2, #1
 800956a:	9619      	str	r6, [sp, #100]	@ 0x64
 800956c:	7852      	ldrb	r2, [r2, #1]
 800956e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009572:	f1be 0f09 	cmp.w	lr, #9
 8009576:	d939      	bls.n	80095ec <_strtod_l+0x33c>
 8009578:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800957a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800957e:	1a76      	subs	r6, r6, r1
 8009580:	2e08      	cmp	r6, #8
 8009582:	dc03      	bgt.n	800958c <_strtod_l+0x2dc>
 8009584:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009586:	4588      	cmp	r8, r1
 8009588:	bfa8      	it	ge
 800958a:	4688      	movge	r8, r1
 800958c:	f1bc 0f00 	cmp.w	ip, #0
 8009590:	d001      	beq.n	8009596 <_strtod_l+0x2e6>
 8009592:	f1c8 0800 	rsb	r8, r8, #0
 8009596:	2d00      	cmp	r5, #0
 8009598:	d14e      	bne.n	8009638 <_strtod_l+0x388>
 800959a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800959c:	4308      	orrs	r0, r1
 800959e:	f47f aec0 	bne.w	8009322 <_strtod_l+0x72>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f aed6 	bne.w	8009354 <_strtod_l+0xa4>
 80095a8:	2a69      	cmp	r2, #105	@ 0x69
 80095aa:	d028      	beq.n	80095fe <_strtod_l+0x34e>
 80095ac:	dc25      	bgt.n	80095fa <_strtod_l+0x34a>
 80095ae:	2a49      	cmp	r2, #73	@ 0x49
 80095b0:	d025      	beq.n	80095fe <_strtod_l+0x34e>
 80095b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80095b4:	f47f aece 	bne.w	8009354 <_strtod_l+0xa4>
 80095b8:	499a      	ldr	r1, [pc, #616]	@ (8009824 <_strtod_l+0x574>)
 80095ba:	a819      	add	r0, sp, #100	@ 0x64
 80095bc:	f003 f9e2 	bl	800c984 <__match>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f43f aec7 	beq.w	8009354 <_strtod_l+0xa4>
 80095c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b28      	cmp	r3, #40	@ 0x28
 80095cc:	d12e      	bne.n	800962c <_strtod_l+0x37c>
 80095ce:	4996      	ldr	r1, [pc, #600]	@ (8009828 <_strtod_l+0x578>)
 80095d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80095d2:	a819      	add	r0, sp, #100	@ 0x64
 80095d4:	f003 f9ea 	bl	800c9ac <__hexnan>
 80095d8:	2805      	cmp	r0, #5
 80095da:	d127      	bne.n	800962c <_strtod_l+0x37c>
 80095dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80095e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80095e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80095ea:	e69a      	b.n	8009322 <_strtod_l+0x72>
 80095ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095ee:	fb08 2101 	mla	r1, r8, r1, r2
 80095f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80095f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80095f8:	e7b5      	b.n	8009566 <_strtod_l+0x2b6>
 80095fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80095fc:	e7da      	b.n	80095b4 <_strtod_l+0x304>
 80095fe:	498b      	ldr	r1, [pc, #556]	@ (800982c <_strtod_l+0x57c>)
 8009600:	a819      	add	r0, sp, #100	@ 0x64
 8009602:	f003 f9bf 	bl	800c984 <__match>
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f aea4 	beq.w	8009354 <_strtod_l+0xa4>
 800960c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800960e:	4988      	ldr	r1, [pc, #544]	@ (8009830 <_strtod_l+0x580>)
 8009610:	3b01      	subs	r3, #1
 8009612:	a819      	add	r0, sp, #100	@ 0x64
 8009614:	9319      	str	r3, [sp, #100]	@ 0x64
 8009616:	f003 f9b5 	bl	800c984 <__match>
 800961a:	b910      	cbnz	r0, 8009622 <_strtod_l+0x372>
 800961c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800961e:	3301      	adds	r3, #1
 8009620:	9319      	str	r3, [sp, #100]	@ 0x64
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009834 <_strtod_l+0x584>
 800962a:	e67a      	b.n	8009322 <_strtod_l+0x72>
 800962c:	4882      	ldr	r0, [pc, #520]	@ (8009838 <_strtod_l+0x588>)
 800962e:	f002 f873 	bl	800b718 <nan>
 8009632:	4682      	mov	sl, r0
 8009634:	468b      	mov	fp, r1
 8009636:	e674      	b.n	8009322 <_strtod_l+0x72>
 8009638:	eba8 0309 	sub.w	r3, r8, r9
 800963c:	2f00      	cmp	r7, #0
 800963e:	bf08      	it	eq
 8009640:	462f      	moveq	r7, r5
 8009642:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009644:	2d10      	cmp	r5, #16
 8009646:	462c      	mov	r4, r5
 8009648:	9309      	str	r3, [sp, #36]	@ 0x24
 800964a:	bfa8      	it	ge
 800964c:	2410      	movge	r4, #16
 800964e:	f7f6 fed3 	bl	80003f8 <__aeabi_ui2d>
 8009652:	2d09      	cmp	r5, #9
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	dc11      	bgt.n	800967e <_strtod_l+0x3ce>
 800965a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965c:	2b00      	cmp	r3, #0
 800965e:	f43f ae60 	beq.w	8009322 <_strtod_l+0x72>
 8009662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009664:	dd76      	ble.n	8009754 <_strtod_l+0x4a4>
 8009666:	2b16      	cmp	r3, #22
 8009668:	dc5d      	bgt.n	8009726 <_strtod_l+0x476>
 800966a:	4974      	ldr	r1, [pc, #464]	@ (800983c <_strtod_l+0x58c>)
 800966c:	4652      	mov	r2, sl
 800966e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009672:	465b      	mov	r3, fp
 8009674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009678:	f7f6 ff38 	bl	80004ec <__aeabi_dmul>
 800967c:	e7d9      	b.n	8009632 <_strtod_l+0x382>
 800967e:	4b6f      	ldr	r3, [pc, #444]	@ (800983c <_strtod_l+0x58c>)
 8009680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009684:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009688:	f7f6 ff30 	bl	80004ec <__aeabi_dmul>
 800968c:	4682      	mov	sl, r0
 800968e:	9808      	ldr	r0, [sp, #32]
 8009690:	468b      	mov	fp, r1
 8009692:	f7f6 feb1 	bl	80003f8 <__aeabi_ui2d>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4650      	mov	r0, sl
 800969c:	4659      	mov	r1, fp
 800969e:	f7f6 fd6f 	bl	8000180 <__adddf3>
 80096a2:	2d0f      	cmp	r5, #15
 80096a4:	4682      	mov	sl, r0
 80096a6:	468b      	mov	fp, r1
 80096a8:	ddd7      	ble.n	800965a <_strtod_l+0x3aa>
 80096aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ac:	1b2c      	subs	r4, r5, r4
 80096ae:	441c      	add	r4, r3
 80096b0:	2c00      	cmp	r4, #0
 80096b2:	f340 8096 	ble.w	80097e2 <_strtod_l+0x532>
 80096b6:	f014 030f 	ands.w	r3, r4, #15
 80096ba:	d00a      	beq.n	80096d2 <_strtod_l+0x422>
 80096bc:	495f      	ldr	r1, [pc, #380]	@ (800983c <_strtod_l+0x58c>)
 80096be:	4652      	mov	r2, sl
 80096c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c8:	465b      	mov	r3, fp
 80096ca:	f7f6 ff0f 	bl	80004ec <__aeabi_dmul>
 80096ce:	4682      	mov	sl, r0
 80096d0:	468b      	mov	fp, r1
 80096d2:	f034 040f 	bics.w	r4, r4, #15
 80096d6:	d073      	beq.n	80097c0 <_strtod_l+0x510>
 80096d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80096dc:	dd48      	ble.n	8009770 <_strtod_l+0x4c0>
 80096de:	2400      	movs	r4, #0
 80096e0:	46a0      	mov	r8, r4
 80096e2:	46a1      	mov	r9, r4
 80096e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80096e6:	2322      	movs	r3, #34	@ 0x22
 80096e8:	f04f 0a00 	mov.w	sl, #0
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009834 <_strtod_l+0x584>
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f43f ae13 	beq.w	8009322 <_strtod_l+0x72>
 80096fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	f003 fb44 	bl	800cd8c <_Bfree>
 8009704:	4649      	mov	r1, r9
 8009706:	9805      	ldr	r0, [sp, #20]
 8009708:	f003 fb40 	bl	800cd8c <_Bfree>
 800970c:	4641      	mov	r1, r8
 800970e:	9805      	ldr	r0, [sp, #20]
 8009710:	f003 fb3c 	bl	800cd8c <_Bfree>
 8009714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009716:	9805      	ldr	r0, [sp, #20]
 8009718:	f003 fb38 	bl	800cd8c <_Bfree>
 800971c:	4621      	mov	r1, r4
 800971e:	9805      	ldr	r0, [sp, #20]
 8009720:	f003 fb34 	bl	800cd8c <_Bfree>
 8009724:	e5fd      	b.n	8009322 <_strtod_l+0x72>
 8009726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009728:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800972c:	4293      	cmp	r3, r2
 800972e:	dbbc      	blt.n	80096aa <_strtod_l+0x3fa>
 8009730:	4c42      	ldr	r4, [pc, #264]	@ (800983c <_strtod_l+0x58c>)
 8009732:	f1c5 050f 	rsb	r5, r5, #15
 8009736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800973a:	4652      	mov	r2, sl
 800973c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009740:	465b      	mov	r3, fp
 8009742:	f7f6 fed3 	bl	80004ec <__aeabi_dmul>
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	1b5d      	subs	r5, r3, r5
 800974a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800974e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009752:	e791      	b.n	8009678 <_strtod_l+0x3c8>
 8009754:	3316      	adds	r3, #22
 8009756:	dba8      	blt.n	80096aa <_strtod_l+0x3fa>
 8009758:	4b38      	ldr	r3, [pc, #224]	@ (800983c <_strtod_l+0x58c>)
 800975a:	eba9 0808 	sub.w	r8, r9, r8
 800975e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009762:	4650      	mov	r0, sl
 8009764:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009768:	4659      	mov	r1, fp
 800976a:	f7f6 ffe9 	bl	8000740 <__aeabi_ddiv>
 800976e:	e760      	b.n	8009632 <_strtod_l+0x382>
 8009770:	4b33      	ldr	r3, [pc, #204]	@ (8009840 <_strtod_l+0x590>)
 8009772:	4650      	mov	r0, sl
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	2300      	movs	r3, #0
 8009778:	4659      	mov	r1, fp
 800977a:	461e      	mov	r6, r3
 800977c:	1124      	asrs	r4, r4, #4
 800977e:	2c01      	cmp	r4, #1
 8009780:	dc21      	bgt.n	80097c6 <_strtod_l+0x516>
 8009782:	b10b      	cbz	r3, 8009788 <_strtod_l+0x4d8>
 8009784:	4682      	mov	sl, r0
 8009786:	468b      	mov	fp, r1
 8009788:	492d      	ldr	r1, [pc, #180]	@ (8009840 <_strtod_l+0x590>)
 800978a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800978e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009792:	4652      	mov	r2, sl
 8009794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009798:	465b      	mov	r3, fp
 800979a:	f7f6 fea7 	bl	80004ec <__aeabi_dmul>
 800979e:	4b25      	ldr	r3, [pc, #148]	@ (8009834 <_strtod_l+0x584>)
 80097a0:	460a      	mov	r2, r1
 80097a2:	400b      	ands	r3, r1
 80097a4:	4927      	ldr	r1, [pc, #156]	@ (8009844 <_strtod_l+0x594>)
 80097a6:	4682      	mov	sl, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	d898      	bhi.n	80096de <_strtod_l+0x42e>
 80097ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf86      	itte	hi
 80097b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80097b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009848 <_strtod_l+0x598>
 80097bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097c0:	2300      	movs	r3, #0
 80097c2:	9308      	str	r3, [sp, #32]
 80097c4:	e07a      	b.n	80098bc <_strtod_l+0x60c>
 80097c6:	07e2      	lsls	r2, r4, #31
 80097c8:	d505      	bpl.n	80097d6 <_strtod_l+0x526>
 80097ca:	9b08      	ldr	r3, [sp, #32]
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fe8c 	bl	80004ec <__aeabi_dmul>
 80097d4:	2301      	movs	r3, #1
 80097d6:	9a08      	ldr	r2, [sp, #32]
 80097d8:	3601      	adds	r6, #1
 80097da:	3208      	adds	r2, #8
 80097dc:	1064      	asrs	r4, r4, #1
 80097de:	9208      	str	r2, [sp, #32]
 80097e0:	e7cd      	b.n	800977e <_strtod_l+0x4ce>
 80097e2:	d0ed      	beq.n	80097c0 <_strtod_l+0x510>
 80097e4:	4264      	negs	r4, r4
 80097e6:	f014 020f 	ands.w	r2, r4, #15
 80097ea:	d00a      	beq.n	8009802 <_strtod_l+0x552>
 80097ec:	4b13      	ldr	r3, [pc, #76]	@ (800983c <_strtod_l+0x58c>)
 80097ee:	4650      	mov	r0, sl
 80097f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f4:	4659      	mov	r1, fp
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f7f6 ffa1 	bl	8000740 <__aeabi_ddiv>
 80097fe:	4682      	mov	sl, r0
 8009800:	468b      	mov	fp, r1
 8009802:	1124      	asrs	r4, r4, #4
 8009804:	d0dc      	beq.n	80097c0 <_strtod_l+0x510>
 8009806:	2c1f      	cmp	r4, #31
 8009808:	dd20      	ble.n	800984c <_strtod_l+0x59c>
 800980a:	2400      	movs	r4, #0
 800980c:	46a0      	mov	r8, r4
 800980e:	46a1      	mov	r9, r4
 8009810:	940a      	str	r4, [sp, #40]	@ 0x28
 8009812:	2322      	movs	r3, #34	@ 0x22
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	f04f 0a00 	mov.w	sl, #0
 800981a:	f04f 0b00 	mov.w	fp, #0
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	e768      	b.n	80096f4 <_strtod_l+0x444>
 8009822:	bf00      	nop
 8009824:	0800ef4e 	.word	0x0800ef4e
 8009828:	0800edec 	.word	0x0800edec
 800982c:	0800ef46 	.word	0x0800ef46
 8009830:	0800f02d 	.word	0x0800f02d
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	0800f30b 	.word	0x0800f30b
 800983c:	0800f1a8 	.word	0x0800f1a8
 8009840:	0800f180 	.word	0x0800f180
 8009844:	7ca00000 	.word	0x7ca00000
 8009848:	7fefffff 	.word	0x7fefffff
 800984c:	f014 0310 	ands.w	r3, r4, #16
 8009850:	bf18      	it	ne
 8009852:	236a      	movne	r3, #106	@ 0x6a
 8009854:	4650      	mov	r0, sl
 8009856:	9308      	str	r3, [sp, #32]
 8009858:	4659      	mov	r1, fp
 800985a:	2300      	movs	r3, #0
 800985c:	4ea9      	ldr	r6, [pc, #676]	@ (8009b04 <_strtod_l+0x854>)
 800985e:	07e2      	lsls	r2, r4, #31
 8009860:	d504      	bpl.n	800986c <_strtod_l+0x5bc>
 8009862:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009866:	f7f6 fe41 	bl	80004ec <__aeabi_dmul>
 800986a:	2301      	movs	r3, #1
 800986c:	1064      	asrs	r4, r4, #1
 800986e:	f106 0608 	add.w	r6, r6, #8
 8009872:	d1f4      	bne.n	800985e <_strtod_l+0x5ae>
 8009874:	b10b      	cbz	r3, 800987a <_strtod_l+0x5ca>
 8009876:	4682      	mov	sl, r0
 8009878:	468b      	mov	fp, r1
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	b1b3      	cbz	r3, 80098ac <_strtod_l+0x5fc>
 800987e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009882:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009886:	2b00      	cmp	r3, #0
 8009888:	4659      	mov	r1, fp
 800988a:	dd0f      	ble.n	80098ac <_strtod_l+0x5fc>
 800988c:	2b1f      	cmp	r3, #31
 800988e:	dd57      	ble.n	8009940 <_strtod_l+0x690>
 8009890:	2b34      	cmp	r3, #52	@ 0x34
 8009892:	bfd8      	it	le
 8009894:	f04f 33ff 	movle.w	r3, #4294967295
 8009898:	f04f 0a00 	mov.w	sl, #0
 800989c:	bfcf      	iteee	gt
 800989e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098a6:	4093      	lslle	r3, r2
 80098a8:	ea03 0b01 	andle.w	fp, r3, r1
 80098ac:	2200      	movs	r2, #0
 80098ae:	2300      	movs	r3, #0
 80098b0:	4650      	mov	r0, sl
 80098b2:	4659      	mov	r1, fp
 80098b4:	f7f7 f882 	bl	80009bc <__aeabi_dcmpeq>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d1a6      	bne.n	800980a <_strtod_l+0x55a>
 80098bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098be:	463a      	mov	r2, r7
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098c4:	462b      	mov	r3, r5
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	f003 fac8 	bl	800ce5c <__s2b>
 80098cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f af05 	beq.w	80096de <_strtod_l+0x42e>
 80098d4:	2400      	movs	r4, #0
 80098d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d8:	eba9 0308 	sub.w	r3, r9, r8
 80098dc:	2a00      	cmp	r2, #0
 80098de:	bfa8      	it	ge
 80098e0:	2300      	movge	r3, #0
 80098e2:	46a0      	mov	r8, r4
 80098e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80098e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80098ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ee:	9805      	ldr	r0, [sp, #20]
 80098f0:	6859      	ldr	r1, [r3, #4]
 80098f2:	f003 fa0b 	bl	800cd0c <_Balloc>
 80098f6:	4681      	mov	r9, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f43f aef4 	beq.w	80096e6 <_strtod_l+0x436>
 80098fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009900:	300c      	adds	r0, #12
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	f103 010c 	add.w	r1, r3, #12
 8009908:	3202      	adds	r2, #2
 800990a:	0092      	lsls	r2, r2, #2
 800990c:	f001 fef5 	bl	800b6fa <memcpy>
 8009910:	ab1c      	add	r3, sp, #112	@ 0x70
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4652      	mov	r2, sl
 800991a:	465b      	mov	r3, fp
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009922:	f003 fdcd 	bl	800d4c0 <__d2b>
 8009926:	901a      	str	r0, [sp, #104]	@ 0x68
 8009928:	2800      	cmp	r0, #0
 800992a:	f43f aedc 	beq.w	80096e6 <_strtod_l+0x436>
 800992e:	2101      	movs	r1, #1
 8009930:	9805      	ldr	r0, [sp, #20]
 8009932:	f003 fb29 	bl	800cf88 <__i2b>
 8009936:	4680      	mov	r8, r0
 8009938:	b948      	cbnz	r0, 800994e <_strtod_l+0x69e>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	e6d2      	b.n	80096e6 <_strtod_l+0x436>
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	ea03 0a0a 	and.w	sl, r3, sl
 800994c:	e7ae      	b.n	80098ac <_strtod_l+0x5fc>
 800994e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009950:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009952:	2d00      	cmp	r5, #0
 8009954:	bfab      	itete	ge
 8009956:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009958:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800995a:	18ef      	addge	r7, r5, r3
 800995c:	1b5e      	sublt	r6, r3, r5
 800995e:	9b08      	ldr	r3, [sp, #32]
 8009960:	bfa8      	it	ge
 8009962:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009964:	eba5 0503 	sub.w	r5, r5, r3
 8009968:	4415      	add	r5, r2
 800996a:	4b67      	ldr	r3, [pc, #412]	@ (8009b08 <_strtod_l+0x858>)
 800996c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009970:	bfb8      	it	lt
 8009972:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009974:	429d      	cmp	r5, r3
 8009976:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800997a:	da50      	bge.n	8009a1e <_strtod_l+0x76e>
 800997c:	1b5b      	subs	r3, r3, r5
 800997e:	2b1f      	cmp	r3, #31
 8009980:	f04f 0101 	mov.w	r1, #1
 8009984:	eba2 0203 	sub.w	r2, r2, r3
 8009988:	dc3d      	bgt.n	8009a06 <_strtod_l+0x756>
 800998a:	fa01 f303 	lsl.w	r3, r1, r3
 800998e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009990:	2300      	movs	r3, #0
 8009992:	9310      	str	r3, [sp, #64]	@ 0x40
 8009994:	18bd      	adds	r5, r7, r2
 8009996:	9b08      	ldr	r3, [sp, #32]
 8009998:	42af      	cmp	r7, r5
 800999a:	4416      	add	r6, r2
 800999c:	441e      	add	r6, r3
 800999e:	463b      	mov	r3, r7
 80099a0:	bfa8      	it	ge
 80099a2:	462b      	movge	r3, r5
 80099a4:	42b3      	cmp	r3, r6
 80099a6:	bfa8      	it	ge
 80099a8:	4633      	movge	r3, r6
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bfc2      	ittt	gt
 80099ae:	1aed      	subgt	r5, r5, r3
 80099b0:	1af6      	subgt	r6, r6, r3
 80099b2:	1aff      	subgt	r7, r7, r3
 80099b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd16      	ble.n	80099e8 <_strtod_l+0x738>
 80099ba:	4641      	mov	r1, r8
 80099bc:	461a      	mov	r2, r3
 80099be:	9805      	ldr	r0, [sp, #20]
 80099c0:	f003 fba0 	bl	800d104 <__pow5mult>
 80099c4:	4680      	mov	r8, r0
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d0b7      	beq.n	800993a <_strtod_l+0x68a>
 80099ca:	4601      	mov	r1, r0
 80099cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f003 faf0 	bl	800cfb4 <__multiply>
 80099d4:	900e      	str	r0, [sp, #56]	@ 0x38
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f43f ae85 	beq.w	80096e6 <_strtod_l+0x436>
 80099dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f003 f9d4 	bl	800cd8c <_Bfree>
 80099e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	dc1d      	bgt.n	8009a28 <_strtod_l+0x778>
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dd23      	ble.n	8009a3a <_strtod_l+0x78a>
 80099f2:	4649      	mov	r1, r9
 80099f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	f003 fb84 	bl	800d104 <__pow5mult>
 80099fc:	4681      	mov	r9, r0
 80099fe:	b9e0      	cbnz	r0, 8009a3a <_strtod_l+0x78a>
 8009a00:	f04f 0900 	mov.w	r9, #0
 8009a04:	e66f      	b.n	80096e6 <_strtod_l+0x436>
 8009a06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a12:	35e2      	adds	r5, #226	@ 0xe2
 8009a14:	fa01 f305 	lsl.w	r3, r1, r5
 8009a18:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a1c:	e7ba      	b.n	8009994 <_strtod_l+0x6e4>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a22:	2301      	movs	r3, #1
 8009a24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a26:	e7b5      	b.n	8009994 <_strtod_l+0x6e4>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a2c:	9805      	ldr	r0, [sp, #20]
 8009a2e:	f003 fbc3 	bl	800d1b8 <__lshift>
 8009a32:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d1d9      	bne.n	80099ec <_strtod_l+0x73c>
 8009a38:	e655      	b.n	80096e6 <_strtod_l+0x436>
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	dd07      	ble.n	8009a4e <_strtod_l+0x79e>
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4632      	mov	r2, r6
 8009a42:	9805      	ldr	r0, [sp, #20]
 8009a44:	f003 fbb8 	bl	800d1b8 <__lshift>
 8009a48:	4681      	mov	r9, r0
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d0d8      	beq.n	8009a00 <_strtod_l+0x750>
 8009a4e:	2f00      	cmp	r7, #0
 8009a50:	dd08      	ble.n	8009a64 <_strtod_l+0x7b4>
 8009a52:	4641      	mov	r1, r8
 8009a54:	463a      	mov	r2, r7
 8009a56:	9805      	ldr	r0, [sp, #20]
 8009a58:	f003 fbae 	bl	800d1b8 <__lshift>
 8009a5c:	4680      	mov	r8, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f43f ae41 	beq.w	80096e6 <_strtod_l+0x436>
 8009a64:	464a      	mov	r2, r9
 8009a66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a68:	9805      	ldr	r0, [sp, #20]
 8009a6a:	f003 fc2d 	bl	800d2c8 <__mdiff>
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	f43f ae38 	beq.w	80096e6 <_strtod_l+0x436>
 8009a76:	68c3      	ldr	r3, [r0, #12]
 8009a78:	4641      	mov	r1, r8
 8009a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60c3      	str	r3, [r0, #12]
 8009a80:	f003 fc06 	bl	800d290 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	da45      	bge.n	8009b14 <_strtod_l+0x864>
 8009a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a8e:	d16b      	bne.n	8009b68 <_strtod_l+0x8b8>
 8009a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d167      	bne.n	8009b68 <_strtod_l+0x8b8>
 8009a98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a9c:	0d1b      	lsrs	r3, r3, #20
 8009a9e:	051b      	lsls	r3, r3, #20
 8009aa0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009aa4:	d960      	bls.n	8009b68 <_strtod_l+0x8b8>
 8009aa6:	6963      	ldr	r3, [r4, #20]
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_strtod_l+0x800>
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	dd5b      	ble.n	8009b68 <_strtod_l+0x8b8>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	9805      	ldr	r0, [sp, #20]
 8009ab6:	f003 fb7f 	bl	800d1b8 <__lshift>
 8009aba:	4641      	mov	r1, r8
 8009abc:	4604      	mov	r4, r0
 8009abe:	f003 fbe7 	bl	800d290 <__mcmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	dd50      	ble.n	8009b68 <_strtod_l+0x8b8>
 8009ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009aca:	9a08      	ldr	r2, [sp, #32]
 8009acc:	0d1b      	lsrs	r3, r3, #20
 8009ace:	051b      	lsls	r3, r3, #20
 8009ad0:	2a00      	cmp	r2, #0
 8009ad2:	d06a      	beq.n	8009baa <_strtod_l+0x8fa>
 8009ad4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ad8:	d867      	bhi.n	8009baa <_strtod_l+0x8fa>
 8009ada:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009ade:	f67f ae98 	bls.w	8009812 <_strtod_l+0x562>
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <_strtod_l+0x85c>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7f6 fcff 	bl	80004ec <__aeabi_dmul>
 8009aee:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <_strtod_l+0x860>)
 8009af0:	4682      	mov	sl, r0
 8009af2:	400b      	ands	r3, r1
 8009af4:	468b      	mov	fp, r1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f47f ae00 	bne.w	80096fc <_strtod_l+0x44c>
 8009afc:	2322      	movs	r3, #34	@ 0x22
 8009afe:	9a05      	ldr	r2, [sp, #20]
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	e5fb      	b.n	80096fc <_strtod_l+0x44c>
 8009b04:	0800ee18 	.word	0x0800ee18
 8009b08:	fffffc02 	.word	0xfffffc02
 8009b0c:	39500000 	.word	0x39500000
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b18:	d165      	bne.n	8009be6 <_strtod_l+0x936>
 8009b1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b20:	b35a      	cbz	r2, 8009b7a <_strtod_l+0x8ca>
 8009b22:	4a99      	ldr	r2, [pc, #612]	@ (8009d88 <_strtod_l+0xad8>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d12b      	bne.n	8009b80 <_strtod_l+0x8d0>
 8009b28:	9b08      	ldr	r3, [sp, #32]
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	b303      	cbz	r3, 8009b70 <_strtod_l+0x8c0>
 8009b2e:	465a      	mov	r2, fp
 8009b30:	4b96      	ldr	r3, [pc, #600]	@ (8009d8c <_strtod_l+0xadc>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b38:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3c:	d81b      	bhi.n	8009b76 <_strtod_l+0x8c6>
 8009b3e:	0d1b      	lsrs	r3, r3, #20
 8009b40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	4299      	cmp	r1, r3
 8009b4a:	d119      	bne.n	8009b80 <_strtod_l+0x8d0>
 8009b4c:	4b90      	ldr	r3, [pc, #576]	@ (8009d90 <_strtod_l+0xae0>)
 8009b4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d102      	bne.n	8009b5a <_strtod_l+0x8aa>
 8009b54:	3101      	adds	r1, #1
 8009b56:	f43f adc6 	beq.w	80096e6 <_strtod_l+0x436>
 8009b5a:	f04f 0a00 	mov.w	sl, #0
 8009b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d8c <_strtod_l+0xadc>)
 8009b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b62:	401a      	ands	r2, r3
 8009b64:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b68:	9b08      	ldr	r3, [sp, #32]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1b9      	bne.n	8009ae2 <_strtod_l+0x832>
 8009b6e:	e5c5      	b.n	80096fc <_strtod_l+0x44c>
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	e7e8      	b.n	8009b48 <_strtod_l+0x898>
 8009b76:	4613      	mov	r3, r2
 8009b78:	e7e6      	b.n	8009b48 <_strtod_l+0x898>
 8009b7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b7e:	d0a2      	beq.n	8009ac6 <_strtod_l+0x816>
 8009b80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b82:	b1db      	cbz	r3, 8009bbc <_strtod_l+0x90c>
 8009b84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b86:	4213      	tst	r3, r2
 8009b88:	d0ee      	beq.n	8009b68 <_strtod_l+0x8b8>
 8009b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8c:	4650      	mov	r0, sl
 8009b8e:	4659      	mov	r1, fp
 8009b90:	9a08      	ldr	r2, [sp, #32]
 8009b92:	b1bb      	cbz	r3, 8009bc4 <_strtod_l+0x914>
 8009b94:	f7ff fb68 	bl	8009268 <sulp>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ba0:	f7f6 faee 	bl	8000180 <__adddf3>
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	468b      	mov	fp, r1
 8009ba8:	e7de      	b.n	8009b68 <_strtod_l+0x8b8>
 8009baa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bb6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bba:	e7d5      	b.n	8009b68 <_strtod_l+0x8b8>
 8009bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bbe:	ea13 0f0a 	tst.w	r3, sl
 8009bc2:	e7e1      	b.n	8009b88 <_strtod_l+0x8d8>
 8009bc4:	f7ff fb50 	bl	8009268 <sulp>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bd0:	f7f6 fad4 	bl	800017c <__aeabi_dsub>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4682      	mov	sl, r0
 8009bda:	468b      	mov	fp, r1
 8009bdc:	f7f6 feee 	bl	80009bc <__aeabi_dcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d0c1      	beq.n	8009b68 <_strtod_l+0x8b8>
 8009be4:	e615      	b.n	8009812 <_strtod_l+0x562>
 8009be6:	4641      	mov	r1, r8
 8009be8:	4620      	mov	r0, r4
 8009bea:	f003 fcc1 	bl	800d570 <__ratio>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	460f      	mov	r7, r1
 8009bf8:	f7f6 fef4 	bl	80009e4 <__aeabi_dcmple>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d06d      	beq.n	8009cdc <_strtod_l+0xa2c>
 8009c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d178      	bne.n	8009cf8 <_strtod_l+0xa48>
 8009c06:	f1ba 0f00 	cmp.w	sl, #0
 8009c0a:	d156      	bne.n	8009cba <_strtod_l+0xa0a>
 8009c0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d158      	bne.n	8009cc8 <_strtod_l+0xa18>
 8009c16:	2200      	movs	r2, #0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8009d94 <_strtod_l+0xae4>)
 8009c1e:	f7f6 fed7 	bl	80009d0 <__aeabi_dcmplt>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d157      	bne.n	8009cd6 <_strtod_l+0xa26>
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8009d98 <_strtod_l+0xae8>)
 8009c2e:	f7f6 fc5d 	bl	80004ec <__aeabi_dmul>
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c3a:	9606      	str	r6, [sp, #24]
 8009c3c:	9307      	str	r3, [sp, #28]
 8009c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c42:	4d52      	ldr	r5, [pc, #328]	@ (8009d8c <_strtod_l+0xadc>)
 8009c44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4a:	401d      	ands	r5, r3
 8009c4c:	4b53      	ldr	r3, [pc, #332]	@ (8009d9c <_strtod_l+0xaec>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	f040 80aa 	bne.w	8009da8 <_strtod_l+0xaf8>
 8009c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c56:	4650      	mov	r0, sl
 8009c58:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c5c:	4659      	mov	r1, fp
 8009c5e:	f003 fbc7 	bl	800d3f0 <__ulp>
 8009c62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c66:	f7f6 fc41 	bl	80004ec <__aeabi_dmul>
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	465b      	mov	r3, fp
 8009c6e:	f7f6 fa87 	bl	8000180 <__adddf3>
 8009c72:	460b      	mov	r3, r1
 8009c74:	4945      	ldr	r1, [pc, #276]	@ (8009d8c <_strtod_l+0xadc>)
 8009c76:	4a4a      	ldr	r2, [pc, #296]	@ (8009da0 <_strtod_l+0xaf0>)
 8009c78:	4019      	ands	r1, r3
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	d942      	bls.n	8009d06 <_strtod_l+0xa56>
 8009c80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c82:	4b43      	ldr	r3, [pc, #268]	@ (8009d90 <_strtod_l+0xae0>)
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d103      	bne.n	8009c90 <_strtod_l+0x9e0>
 8009c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	f43f ad2b 	beq.w	80096e6 <_strtod_l+0x436>
 8009c90:	f04f 3aff 	mov.w	sl, #4294967295
 8009c94:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009d90 <_strtod_l+0xae0>
 8009c98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c9a:	9805      	ldr	r0, [sp, #20]
 8009c9c:	f003 f876 	bl	800cd8c <_Bfree>
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	9805      	ldr	r0, [sp, #20]
 8009ca4:	f003 f872 	bl	800cd8c <_Bfree>
 8009ca8:	4641      	mov	r1, r8
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	f003 f86e 	bl	800cd8c <_Bfree>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	9805      	ldr	r0, [sp, #20]
 8009cb4:	f003 f86a 	bl	800cd8c <_Bfree>
 8009cb8:	e618      	b.n	80098ec <_strtod_l+0x63c>
 8009cba:	f1ba 0f01 	cmp.w	sl, #1
 8009cbe:	d103      	bne.n	8009cc8 <_strtod_l+0xa18>
 8009cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f43f ada5 	beq.w	8009812 <_strtod_l+0x562>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4b36      	ldr	r3, [pc, #216]	@ (8009da4 <_strtod_l+0xaf4>)
 8009ccc:	2600      	movs	r6, #0
 8009cce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cd2:	4f30      	ldr	r7, [pc, #192]	@ (8009d94 <_strtod_l+0xae4>)
 8009cd4:	e7b3      	b.n	8009c3e <_strtod_l+0x98e>
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	4f2f      	ldr	r7, [pc, #188]	@ (8009d98 <_strtod_l+0xae8>)
 8009cda:	e7ac      	b.n	8009c36 <_strtod_l+0x986>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8009d98 <_strtod_l+0xae8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f7f6 fc02 	bl	80004ec <__aeabi_dmul>
 8009ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0a1      	beq.n	8009c36 <_strtod_l+0x986>
 8009cf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009cf6:	e7a2      	b.n	8009c3e <_strtod_l+0x98e>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b26      	ldr	r3, [pc, #152]	@ (8009d94 <_strtod_l+0xae4>)
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	461f      	mov	r7, r3
 8009d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d04:	e79b      	b.n	8009c3e <_strtod_l+0x98e>
 8009d06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1c1      	bne.n	8009c98 <_strtod_l+0x9e8>
 8009d14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d18:	0d1b      	lsrs	r3, r3, #20
 8009d1a:	051b      	lsls	r3, r3, #20
 8009d1c:	429d      	cmp	r5, r3
 8009d1e:	d1bb      	bne.n	8009c98 <_strtod_l+0x9e8>
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f7 fa9c 	bl	8001260 <__aeabi_d2lz>
 8009d28:	f7f6 fbb2 	bl	8000490 <__aeabi_l2d>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fa22 	bl	800017c <__aeabi_dsub>
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d40:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d46:	ea46 060a 	orr.w	r6, r6, sl
 8009d4a:	431e      	orrs	r6, r3
 8009d4c:	d069      	beq.n	8009e22 <_strtod_l+0xb72>
 8009d4e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009d78 <_strtod_l+0xac8>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f7f6 fe3c 	bl	80009d0 <__aeabi_dcmplt>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	f47f accf 	bne.w	80096fc <_strtod_l+0x44c>
 8009d5e:	a308      	add	r3, pc, #32	@ (adr r3, 8009d80 <_strtod_l+0xad0>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d68:	f7f6 fe50 	bl	8000a0c <__aeabi_dcmpgt>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d093      	beq.n	8009c98 <_strtod_l+0x9e8>
 8009d70:	e4c4      	b.n	80096fc <_strtod_l+0x44c>
 8009d72:	bf00      	nop
 8009d74:	f3af 8000 	nop.w
 8009d78:	94a03595 	.word	0x94a03595
 8009d7c:	3fdfffff 	.word	0x3fdfffff
 8009d80:	35afe535 	.word	0x35afe535
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	000fffff 	.word	0x000fffff
 8009d8c:	7ff00000 	.word	0x7ff00000
 8009d90:	7fefffff 	.word	0x7fefffff
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	3fe00000 	.word	0x3fe00000
 8009d9c:	7fe00000 	.word	0x7fe00000
 8009da0:	7c9fffff 	.word	0x7c9fffff
 8009da4:	bff00000 	.word	0xbff00000
 8009da8:	9b08      	ldr	r3, [sp, #32]
 8009daa:	b323      	cbz	r3, 8009df6 <_strtod_l+0xb46>
 8009dac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009db0:	d821      	bhi.n	8009df6 <_strtod_l+0xb46>
 8009db2:	a327      	add	r3, pc, #156	@ (adr r3, 8009e50 <_strtod_l+0xba0>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fe12 	bl	80009e4 <__aeabi_dcmple>
 8009dc0:	b1a0      	cbz	r0, 8009dec <_strtod_l+0xb3c>
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7f6 fe69 	bl	8000a9c <__aeabi_d2uiz>
 8009dca:	2801      	cmp	r0, #1
 8009dcc:	bf38      	it	cc
 8009dce:	2001      	movcc	r0, #1
 8009dd0:	f7f6 fb12 	bl	80003f8 <__aeabi_ui2d>
 8009dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	460f      	mov	r7, r1
 8009dda:	b9fb      	cbnz	r3, 8009e1c <_strtod_l+0xb6c>
 8009ddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009de0:	9014      	str	r0, [sp, #80]	@ 0x50
 8009de2:	9315      	str	r3, [sp, #84]	@ 0x54
 8009de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009df2:	1b5b      	subs	r3, r3, r5
 8009df4:	9311      	str	r3, [sp, #68]	@ 0x44
 8009df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dfa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009dfe:	f003 faf7 	bl	800d3f0 <__ulp>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4650      	mov	r0, sl
 8009e08:	4659      	mov	r1, fp
 8009e0a:	f7f6 fb6f 	bl	80004ec <__aeabi_dmul>
 8009e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e12:	f7f6 f9b5 	bl	8000180 <__adddf3>
 8009e16:	4682      	mov	sl, r0
 8009e18:	468b      	mov	fp, r1
 8009e1a:	e776      	b.n	8009d0a <_strtod_l+0xa5a>
 8009e1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e20:	e7e0      	b.n	8009de4 <_strtod_l+0xb34>
 8009e22:	a30d      	add	r3, pc, #52	@ (adr r3, 8009e58 <_strtod_l+0xba8>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 fdd2 	bl	80009d0 <__aeabi_dcmplt>
 8009e2c:	e79e      	b.n	8009d6c <_strtod_l+0xabc>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e34:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	f7ff ba77 	b.w	800932a <_strtod_l+0x7a>
 8009e3c:	2a65      	cmp	r2, #101	@ 0x65
 8009e3e:	f43f ab6e 	beq.w	800951e <_strtod_l+0x26e>
 8009e42:	2a45      	cmp	r2, #69	@ 0x45
 8009e44:	f43f ab6b 	beq.w	800951e <_strtod_l+0x26e>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f7ff bba6 	b.w	800959a <_strtod_l+0x2ea>
 8009e4e:	bf00      	nop
 8009e50:	ffc00000 	.word	0xffc00000
 8009e54:	41dfffff 	.word	0x41dfffff
 8009e58:	94a03595 	.word	0x94a03595
 8009e5c:	3fcfffff 	.word	0x3fcfffff

08009e60 <strtof>:
 8009e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	4d24      	ldr	r5, [pc, #144]	@ (8009ef8 <strtof+0x98>)
 8009e66:	460a      	mov	r2, r1
 8009e68:	4b24      	ldr	r3, [pc, #144]	@ (8009efc <strtof+0x9c>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6828      	ldr	r0, [r5, #0]
 8009e6e:	f7ff fa1f 	bl	80092b0 <_strtod_l>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4606      	mov	r6, r0
 8009e78:	460f      	mov	r7, r1
 8009e7a:	f7f6 fdd1 	bl	8000a20 <__aeabi_dcmpun>
 8009e7e:	b168      	cbz	r0, 8009e9c <strtof+0x3c>
 8009e80:	2f00      	cmp	r7, #0
 8009e82:	481f      	ldr	r0, [pc, #124]	@ (8009f00 <strtof+0xa0>)
 8009e84:	da06      	bge.n	8009e94 <strtof+0x34>
 8009e86:	f001 fc4d 	bl	800b724 <nanf>
 8009e8a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009e8e:	4620      	mov	r0, r4
 8009e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	f001 bc44 	b.w	800b724 <nanf>
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_d2f>
 8009ea4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	4916      	ldr	r1, [pc, #88]	@ (8009f04 <strtof+0xa4>)
 8009eac:	4640      	mov	r0, r8
 8009eae:	f7f7 f939 	bl	8001124 <__aeabi_fcmpun>
 8009eb2:	b9b0      	cbnz	r0, 8009ee2 <strtof+0x82>
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	4913      	ldr	r1, [pc, #76]	@ (8009f04 <strtof+0xa4>)
 8009eb8:	f7f7 f916 	bl	80010e8 <__aeabi_fcmple>
 8009ebc:	b988      	cbnz	r0, 8009ee2 <strtof+0x82>
 8009ebe:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8009ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4b0f      	ldr	r3, [pc, #60]	@ (8009f08 <strtof+0xa8>)
 8009ecc:	f7f6 fda8 	bl	8000a20 <__aeabi_dcmpun>
 8009ed0:	b970      	cbnz	r0, 8009ef0 <strtof+0x90>
 8009ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <strtof+0xa8>)
 8009edc:	f7f6 fd82 	bl	80009e4 <__aeabi_dcmple>
 8009ee0:	b930      	cbnz	r0, 8009ef0 <strtof+0x90>
 8009ee2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8009ee6:	d1d2      	bne.n	8009e8e <strtof+0x2e>
 8009ee8:	4b08      	ldr	r3, [pc, #32]	@ (8009f0c <strtof+0xac>)
 8009eea:	403b      	ands	r3, r7
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0ce      	beq.n	8009e8e <strtof+0x2e>
 8009ef0:	2222      	movs	r2, #34	@ 0x22
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e7ca      	b.n	8009e8e <strtof+0x2e>
 8009ef8:	20000194 	.word	0x20000194
 8009efc:	20000028 	.word	0x20000028
 8009f00:	0800f30b 	.word	0x0800f30b
 8009f04:	7f7fffff 	.word	0x7f7fffff
 8009f08:	7fefffff 	.word	0x7fefffff
 8009f0c:	7ff00000 	.word	0x7ff00000

08009f10 <_strtol_l.constprop.0>:
 8009f10:	2b24      	cmp	r3, #36	@ 0x24
 8009f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f16:	4686      	mov	lr, r0
 8009f18:	4690      	mov	r8, r2
 8009f1a:	d801      	bhi.n	8009f20 <_strtol_l.constprop.0+0x10>
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d106      	bne.n	8009f2e <_strtol_l.constprop.0+0x1e>
 8009f20:	f001 fba6 	bl	800b670 <__errno>
 8009f24:	2316      	movs	r3, #22
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2e:	460d      	mov	r5, r1
 8009f30:	4833      	ldr	r0, [pc, #204]	@ (800a000 <_strtol_l.constprop.0+0xf0>)
 8009f32:	462a      	mov	r2, r5
 8009f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f38:	5d06      	ldrb	r6, [r0, r4]
 8009f3a:	f016 0608 	ands.w	r6, r6, #8
 8009f3e:	d1f8      	bne.n	8009f32 <_strtol_l.constprop.0+0x22>
 8009f40:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f42:	d12d      	bne.n	8009fa0 <_strtol_l.constprop.0+0x90>
 8009f44:	2601      	movs	r6, #1
 8009f46:	782c      	ldrb	r4, [r5, #0]
 8009f48:	1c95      	adds	r5, r2, #2
 8009f4a:	f033 0210 	bics.w	r2, r3, #16
 8009f4e:	d109      	bne.n	8009f64 <_strtol_l.constprop.0+0x54>
 8009f50:	2c30      	cmp	r4, #48	@ 0x30
 8009f52:	d12a      	bne.n	8009faa <_strtol_l.constprop.0+0x9a>
 8009f54:	782a      	ldrb	r2, [r5, #0]
 8009f56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f5a:	2a58      	cmp	r2, #88	@ 0x58
 8009f5c:	d125      	bne.n	8009faa <_strtol_l.constprop.0+0x9a>
 8009f5e:	2310      	movs	r3, #16
 8009f60:	786c      	ldrb	r4, [r5, #1]
 8009f62:	3502      	adds	r5, #2
 8009f64:	2200      	movs	r2, #0
 8009f66:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f6e:	fbbc f9f3 	udiv	r9, ip, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f7c:	2f09      	cmp	r7, #9
 8009f7e:	d81b      	bhi.n	8009fb8 <_strtol_l.constprop.0+0xa8>
 8009f80:	463c      	mov	r4, r7
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	dd27      	ble.n	8009fd6 <_strtol_l.constprop.0+0xc6>
 8009f86:	1c57      	adds	r7, r2, #1
 8009f88:	d007      	beq.n	8009f9a <_strtol_l.constprop.0+0x8a>
 8009f8a:	4581      	cmp	r9, r0
 8009f8c:	d320      	bcc.n	8009fd0 <_strtol_l.constprop.0+0xc0>
 8009f8e:	d101      	bne.n	8009f94 <_strtol_l.constprop.0+0x84>
 8009f90:	45a2      	cmp	sl, r4
 8009f92:	db1d      	blt.n	8009fd0 <_strtol_l.constprop.0+0xc0>
 8009f94:	2201      	movs	r2, #1
 8009f96:	fb00 4003 	mla	r0, r0, r3, r4
 8009f9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f9e:	e7eb      	b.n	8009f78 <_strtol_l.constprop.0+0x68>
 8009fa0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fa2:	bf04      	itt	eq
 8009fa4:	782c      	ldrbeq	r4, [r5, #0]
 8009fa6:	1c95      	addeq	r5, r2, #2
 8009fa8:	e7cf      	b.n	8009f4a <_strtol_l.constprop.0+0x3a>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1da      	bne.n	8009f64 <_strtol_l.constprop.0+0x54>
 8009fae:	2c30      	cmp	r4, #48	@ 0x30
 8009fb0:	bf0c      	ite	eq
 8009fb2:	2308      	moveq	r3, #8
 8009fb4:	230a      	movne	r3, #10
 8009fb6:	e7d5      	b.n	8009f64 <_strtol_l.constprop.0+0x54>
 8009fb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009fbc:	2f19      	cmp	r7, #25
 8009fbe:	d801      	bhi.n	8009fc4 <_strtol_l.constprop.0+0xb4>
 8009fc0:	3c37      	subs	r4, #55	@ 0x37
 8009fc2:	e7de      	b.n	8009f82 <_strtol_l.constprop.0+0x72>
 8009fc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009fc8:	2f19      	cmp	r7, #25
 8009fca:	d804      	bhi.n	8009fd6 <_strtol_l.constprop.0+0xc6>
 8009fcc:	3c57      	subs	r4, #87	@ 0x57
 8009fce:	e7d8      	b.n	8009f82 <_strtol_l.constprop.0+0x72>
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd4:	e7e1      	b.n	8009f9a <_strtol_l.constprop.0+0x8a>
 8009fd6:	1c53      	adds	r3, r2, #1
 8009fd8:	d108      	bne.n	8009fec <_strtol_l.constprop.0+0xdc>
 8009fda:	2322      	movs	r3, #34	@ 0x22
 8009fdc:	4660      	mov	r0, ip
 8009fde:	f8ce 3000 	str.w	r3, [lr]
 8009fe2:	f1b8 0f00 	cmp.w	r8, #0
 8009fe6:	d0a0      	beq.n	8009f2a <_strtol_l.constprop.0+0x1a>
 8009fe8:	1e69      	subs	r1, r5, #1
 8009fea:	e006      	b.n	8009ffa <_strtol_l.constprop.0+0xea>
 8009fec:	b106      	cbz	r6, 8009ff0 <_strtol_l.constprop.0+0xe0>
 8009fee:	4240      	negs	r0, r0
 8009ff0:	f1b8 0f00 	cmp.w	r8, #0
 8009ff4:	d099      	beq.n	8009f2a <_strtol_l.constprop.0+0x1a>
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	d1f6      	bne.n	8009fe8 <_strtol_l.constprop.0+0xd8>
 8009ffa:	f8c8 1000 	str.w	r1, [r8]
 8009ffe:	e794      	b.n	8009f2a <_strtol_l.constprop.0+0x1a>
 800a000:	0800ee41 	.word	0x0800ee41

0800a004 <_strtol_r>:
 800a004:	f7ff bf84 	b.w	8009f10 <_strtol_l.constprop.0>

0800a008 <strtol>:
 800a008:	4613      	mov	r3, r2
 800a00a:	460a      	mov	r2, r1
 800a00c:	4601      	mov	r1, r0
 800a00e:	4802      	ldr	r0, [pc, #8]	@ (800a018 <strtol+0x10>)
 800a010:	6800      	ldr	r0, [r0, #0]
 800a012:	f7ff bf7d 	b.w	8009f10 <_strtol_l.constprop.0>
 800a016:	bf00      	nop
 800a018:	20000194 	.word	0x20000194

0800a01c <__cvt>:
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a022:	461d      	mov	r5, r3
 800a024:	bfbb      	ittet	lt
 800a026:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a02a:	461d      	movlt	r5, r3
 800a02c:	2300      	movge	r3, #0
 800a02e:	232d      	movlt	r3, #45	@ 0x2d
 800a030:	b088      	sub	sp, #32
 800a032:	4614      	mov	r4, r2
 800a034:	bfb8      	it	lt
 800a036:	4614      	movlt	r4, r2
 800a038:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a03a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a03c:	7013      	strb	r3, [r2, #0]
 800a03e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a040:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a044:	f023 0820 	bic.w	r8, r3, #32
 800a048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a04c:	d005      	beq.n	800a05a <__cvt+0x3e>
 800a04e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a052:	d100      	bne.n	800a056 <__cvt+0x3a>
 800a054:	3601      	adds	r6, #1
 800a056:	2302      	movs	r3, #2
 800a058:	e000      	b.n	800a05c <__cvt+0x40>
 800a05a:	2303      	movs	r3, #3
 800a05c:	aa07      	add	r2, sp, #28
 800a05e:	9204      	str	r2, [sp, #16]
 800a060:	aa06      	add	r2, sp, #24
 800a062:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a066:	e9cd 3600 	strd	r3, r6, [sp]
 800a06a:	4622      	mov	r2, r4
 800a06c:	462b      	mov	r3, r5
 800a06e:	f001 fbef 	bl	800b850 <_dtoa_r>
 800a072:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a076:	4607      	mov	r7, r0
 800a078:	d119      	bne.n	800a0ae <__cvt+0x92>
 800a07a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a07c:	07db      	lsls	r3, r3, #31
 800a07e:	d50e      	bpl.n	800a09e <__cvt+0x82>
 800a080:	eb00 0906 	add.w	r9, r0, r6
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fc96 	bl	80009bc <__aeabi_dcmpeq>
 800a090:	b108      	cbz	r0, 800a096 <__cvt+0x7a>
 800a092:	f8cd 901c 	str.w	r9, [sp, #28]
 800a096:	2230      	movs	r2, #48	@ 0x30
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	454b      	cmp	r3, r9
 800a09c:	d31e      	bcc.n	800a0dc <__cvt+0xc0>
 800a09e:	4638      	mov	r0, r7
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a0a4:	1bdb      	subs	r3, r3, r7
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	b008      	add	sp, #32
 800a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0b2:	eb00 0906 	add.w	r9, r0, r6
 800a0b6:	d1e5      	bne.n	800a084 <__cvt+0x68>
 800a0b8:	7803      	ldrb	r3, [r0, #0]
 800a0ba:	2b30      	cmp	r3, #48	@ 0x30
 800a0bc:	d10a      	bne.n	800a0d4 <__cvt+0xb8>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 fc79 	bl	80009bc <__aeabi_dcmpeq>
 800a0ca:	b918      	cbnz	r0, 800a0d4 <__cvt+0xb8>
 800a0cc:	f1c6 0601 	rsb	r6, r6, #1
 800a0d0:	f8ca 6000 	str.w	r6, [sl]
 800a0d4:	f8da 3000 	ldr.w	r3, [sl]
 800a0d8:	4499      	add	r9, r3
 800a0da:	e7d3      	b.n	800a084 <__cvt+0x68>
 800a0dc:	1c59      	adds	r1, r3, #1
 800a0de:	9107      	str	r1, [sp, #28]
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e7d9      	b.n	800a098 <__cvt+0x7c>

0800a0e4 <__exponent>:
 800a0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	bfb6      	itet	lt
 800a0ea:	232d      	movlt	r3, #45	@ 0x2d
 800a0ec:	232b      	movge	r3, #43	@ 0x2b
 800a0ee:	4249      	neglt	r1, r1
 800a0f0:	2909      	cmp	r1, #9
 800a0f2:	7002      	strb	r2, [r0, #0]
 800a0f4:	7043      	strb	r3, [r0, #1]
 800a0f6:	dd29      	ble.n	800a14c <__exponent+0x68>
 800a0f8:	f10d 0307 	add.w	r3, sp, #7
 800a0fc:	461d      	mov	r5, r3
 800a0fe:	270a      	movs	r7, #10
 800a100:	fbb1 f6f7 	udiv	r6, r1, r7
 800a104:	461a      	mov	r2, r3
 800a106:	fb07 1416 	mls	r4, r7, r6, r1
 800a10a:	3430      	adds	r4, #48	@ 0x30
 800a10c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a110:	460c      	mov	r4, r1
 800a112:	2c63      	cmp	r4, #99	@ 0x63
 800a114:	4631      	mov	r1, r6
 800a116:	f103 33ff 	add.w	r3, r3, #4294967295
 800a11a:	dcf1      	bgt.n	800a100 <__exponent+0x1c>
 800a11c:	3130      	adds	r1, #48	@ 0x30
 800a11e:	1e94      	subs	r4, r2, #2
 800a120:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a124:	4623      	mov	r3, r4
 800a126:	1c41      	adds	r1, r0, #1
 800a128:	42ab      	cmp	r3, r5
 800a12a:	d30a      	bcc.n	800a142 <__exponent+0x5e>
 800a12c:	f10d 0309 	add.w	r3, sp, #9
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	42ac      	cmp	r4, r5
 800a134:	bf88      	it	hi
 800a136:	2300      	movhi	r3, #0
 800a138:	3302      	adds	r3, #2
 800a13a:	4403      	add	r3, r0
 800a13c:	1a18      	subs	r0, r3, r0
 800a13e:	b003      	add	sp, #12
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a146:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a14a:	e7ed      	b.n	800a128 <__exponent+0x44>
 800a14c:	2330      	movs	r3, #48	@ 0x30
 800a14e:	3130      	adds	r1, #48	@ 0x30
 800a150:	7083      	strb	r3, [r0, #2]
 800a152:	70c1      	strb	r1, [r0, #3]
 800a154:	1d03      	adds	r3, r0, #4
 800a156:	e7f1      	b.n	800a13c <__exponent+0x58>

0800a158 <_printf_float>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	b091      	sub	sp, #68	@ 0x44
 800a15e:	460c      	mov	r4, r1
 800a160:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a164:	4616      	mov	r6, r2
 800a166:	461f      	mov	r7, r3
 800a168:	4605      	mov	r5, r0
 800a16a:	f001 fa37 	bl	800b5dc <_localeconv_r>
 800a16e:	6803      	ldr	r3, [r0, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	9308      	str	r3, [sp, #32]
 800a174:	f7f5 fff6 	bl	8000164 <strlen>
 800a178:	2300      	movs	r3, #0
 800a17a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a17c:	f8d8 3000 	ldr.w	r3, [r8]
 800a180:	9009      	str	r0, [sp, #36]	@ 0x24
 800a182:	3307      	adds	r3, #7
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	f103 0208 	add.w	r2, r3, #8
 800a18c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a190:	f8d4 b000 	ldr.w	fp, [r4]
 800a194:	f8c8 2000 	str.w	r2, [r8]
 800a198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a19c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a1b2:	4b9c      	ldr	r3, [pc, #624]	@ (800a424 <_printf_float+0x2cc>)
 800a1b4:	f7f6 fc34 	bl	8000a20 <__aeabi_dcmpun>
 800a1b8:	bb70      	cbnz	r0, 800a218 <_printf_float+0xc0>
 800a1ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	4b98      	ldr	r3, [pc, #608]	@ (800a424 <_printf_float+0x2cc>)
 800a1c4:	f7f6 fc0e 	bl	80009e4 <__aeabi_dcmple>
 800a1c8:	bb30      	cbnz	r0, 800a218 <_printf_float+0xc0>
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	f7f6 fbfd 	bl	80009d0 <__aeabi_dcmplt>
 800a1d6:	b110      	cbz	r0, 800a1de <_printf_float+0x86>
 800a1d8:	232d      	movs	r3, #45	@ 0x2d
 800a1da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1de:	4a92      	ldr	r2, [pc, #584]	@ (800a428 <_printf_float+0x2d0>)
 800a1e0:	4b92      	ldr	r3, [pc, #584]	@ (800a42c <_printf_float+0x2d4>)
 800a1e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a1e6:	bf94      	ite	ls
 800a1e8:	4690      	movls	r8, r2
 800a1ea:	4698      	movhi	r8, r3
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	f02b 0304 	bic.w	r3, fp, #4
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	4633      	mov	r3, r6
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4628      	mov	r0, r5
 800a200:	9700      	str	r7, [sp, #0]
 800a202:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a204:	f000 f9d4 	bl	800a5b0 <_printf_common>
 800a208:	3001      	adds	r0, #1
 800a20a:	f040 8090 	bne.w	800a32e <_printf_float+0x1d6>
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295
 800a212:	b011      	add	sp, #68	@ 0x44
 800a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	4642      	mov	r2, r8
 800a21a:	464b      	mov	r3, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 fbfe 	bl	8000a20 <__aeabi_dcmpun>
 800a224:	b148      	cbz	r0, 800a23a <_printf_float+0xe2>
 800a226:	464b      	mov	r3, r9
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfb8      	it	lt
 800a22c:	232d      	movlt	r3, #45	@ 0x2d
 800a22e:	4a80      	ldr	r2, [pc, #512]	@ (800a430 <_printf_float+0x2d8>)
 800a230:	bfb8      	it	lt
 800a232:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a236:	4b7f      	ldr	r3, [pc, #508]	@ (800a434 <_printf_float+0x2dc>)
 800a238:	e7d3      	b.n	800a1e2 <_printf_float+0x8a>
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	d13f      	bne.n	800a2c4 <_printf_float+0x16c>
 800a244:	2306      	movs	r3, #6
 800a246:	6063      	str	r3, [r4, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	9206      	str	r2, [sp, #24]
 800a252:	aa0e      	add	r2, sp, #56	@ 0x38
 800a254:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a258:	aa0d      	add	r2, sp, #52	@ 0x34
 800a25a:	9203      	str	r2, [sp, #12]
 800a25c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a260:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a264:	6863      	ldr	r3, [r4, #4]
 800a266:	4642      	mov	r2, r8
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	4628      	mov	r0, r5
 800a26c:	464b      	mov	r3, r9
 800a26e:	910a      	str	r1, [sp, #40]	@ 0x28
 800a270:	f7ff fed4 	bl	800a01c <__cvt>
 800a274:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a276:	4680      	mov	r8, r0
 800a278:	2947      	cmp	r1, #71	@ 0x47
 800a27a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a27c:	d128      	bne.n	800a2d0 <_printf_float+0x178>
 800a27e:	1cc8      	adds	r0, r1, #3
 800a280:	db02      	blt.n	800a288 <_printf_float+0x130>
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	4299      	cmp	r1, r3
 800a286:	dd40      	ble.n	800a30a <_printf_float+0x1b2>
 800a288:	f1aa 0a02 	sub.w	sl, sl, #2
 800a28c:	fa5f fa8a 	uxtb.w	sl, sl
 800a290:	4652      	mov	r2, sl
 800a292:	3901      	subs	r1, #1
 800a294:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a298:	910d      	str	r1, [sp, #52]	@ 0x34
 800a29a:	f7ff ff23 	bl	800a0e4 <__exponent>
 800a29e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2a0:	4681      	mov	r9, r0
 800a2a2:	1813      	adds	r3, r2, r0
 800a2a4:	2a01      	cmp	r2, #1
 800a2a6:	6123      	str	r3, [r4, #16]
 800a2a8:	dc02      	bgt.n	800a2b0 <_printf_float+0x158>
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	07d2      	lsls	r2, r2, #31
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_float+0x15c>
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	6123      	str	r3, [r4, #16]
 800a2b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d09e      	beq.n	800a1fa <_printf_float+0xa2>
 800a2bc:	232d      	movs	r3, #45	@ 0x2d
 800a2be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2c2:	e79a      	b.n	800a1fa <_printf_float+0xa2>
 800a2c4:	2947      	cmp	r1, #71	@ 0x47
 800a2c6:	d1bf      	bne.n	800a248 <_printf_float+0xf0>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1bd      	bne.n	800a248 <_printf_float+0xf0>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e7ba      	b.n	800a246 <_printf_float+0xee>
 800a2d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2d4:	d9dc      	bls.n	800a290 <_printf_float+0x138>
 800a2d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a2da:	d118      	bne.n	800a30e <_printf_float+0x1b6>
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	6863      	ldr	r3, [r4, #4]
 800a2e0:	dd0b      	ble.n	800a2fa <_printf_float+0x1a2>
 800a2e2:	6121      	str	r1, [r4, #16]
 800a2e4:	b913      	cbnz	r3, 800a2ec <_printf_float+0x194>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	07d0      	lsls	r0, r2, #31
 800a2ea:	d502      	bpl.n	800a2f2 <_printf_float+0x19a>
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	440b      	add	r3, r1
 800a2f0:	6123      	str	r3, [r4, #16]
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a2f8:	e7dc      	b.n	800a2b4 <_printf_float+0x15c>
 800a2fa:	b913      	cbnz	r3, 800a302 <_printf_float+0x1aa>
 800a2fc:	6822      	ldr	r2, [r4, #0]
 800a2fe:	07d2      	lsls	r2, r2, #31
 800a300:	d501      	bpl.n	800a306 <_printf_float+0x1ae>
 800a302:	3302      	adds	r3, #2
 800a304:	e7f4      	b.n	800a2f0 <_printf_float+0x198>
 800a306:	2301      	movs	r3, #1
 800a308:	e7f2      	b.n	800a2f0 <_printf_float+0x198>
 800a30a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a30e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a310:	4299      	cmp	r1, r3
 800a312:	db05      	blt.n	800a320 <_printf_float+0x1c8>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	6121      	str	r1, [r4, #16]
 800a318:	07d8      	lsls	r0, r3, #31
 800a31a:	d5ea      	bpl.n	800a2f2 <_printf_float+0x19a>
 800a31c:	1c4b      	adds	r3, r1, #1
 800a31e:	e7e7      	b.n	800a2f0 <_printf_float+0x198>
 800a320:	2900      	cmp	r1, #0
 800a322:	bfcc      	ite	gt
 800a324:	2201      	movgt	r2, #1
 800a326:	f1c1 0202 	rsble	r2, r1, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	e7e0      	b.n	800a2f0 <_printf_float+0x198>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	055a      	lsls	r2, r3, #21
 800a332:	d407      	bmi.n	800a344 <_printf_float+0x1ec>
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	4642      	mov	r2, r8
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	d12b      	bne.n	800a39a <_printf_float+0x242>
 800a342:	e764      	b.n	800a20e <_printf_float+0xb6>
 800a344:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a348:	f240 80dc 	bls.w	800a504 <_printf_float+0x3ac>
 800a34c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a350:	2200      	movs	r2, #0
 800a352:	2300      	movs	r3, #0
 800a354:	f7f6 fb32 	bl	80009bc <__aeabi_dcmpeq>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d033      	beq.n	800a3c4 <_printf_float+0x26c>
 800a35c:	2301      	movs	r3, #1
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	4a35      	ldr	r2, [pc, #212]	@ (800a438 <_printf_float+0x2e0>)
 800a364:	47b8      	blx	r7
 800a366:	3001      	adds	r0, #1
 800a368:	f43f af51 	beq.w	800a20e <_printf_float+0xb6>
 800a36c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a370:	4543      	cmp	r3, r8
 800a372:	db02      	blt.n	800a37a <_printf_float+0x222>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	07d8      	lsls	r0, r3, #31
 800a378:	d50f      	bpl.n	800a39a <_printf_float+0x242>
 800a37a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a37e:	4631      	mov	r1, r6
 800a380:	4628      	mov	r0, r5
 800a382:	47b8      	blx	r7
 800a384:	3001      	adds	r0, #1
 800a386:	f43f af42 	beq.w	800a20e <_printf_float+0xb6>
 800a38a:	f04f 0900 	mov.w	r9, #0
 800a38e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a392:	f104 0a1a 	add.w	sl, r4, #26
 800a396:	45c8      	cmp	r8, r9
 800a398:	dc09      	bgt.n	800a3ae <_printf_float+0x256>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	079b      	lsls	r3, r3, #30
 800a39e:	f100 8102 	bmi.w	800a5a6 <_printf_float+0x44e>
 800a3a2:	68e0      	ldr	r0, [r4, #12]
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	4298      	cmp	r0, r3
 800a3a8:	bfb8      	it	lt
 800a3aa:	4618      	movlt	r0, r3
 800a3ac:	e731      	b.n	800a212 <_printf_float+0xba>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	4652      	mov	r2, sl
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f43f af28 	beq.w	800a20e <_printf_float+0xb6>
 800a3be:	f109 0901 	add.w	r9, r9, #1
 800a3c2:	e7e8      	b.n	800a396 <_printf_float+0x23e>
 800a3c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dc38      	bgt.n	800a43c <_printf_float+0x2e4>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <_printf_float+0x2e0>)
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f af1a 	beq.w	800a20e <_printf_float+0xb6>
 800a3da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a3de:	ea59 0303 	orrs.w	r3, r9, r3
 800a3e2:	d102      	bne.n	800a3ea <_printf_float+0x292>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	07d9      	lsls	r1, r3, #31
 800a3e8:	d5d7      	bpl.n	800a39a <_printf_float+0x242>
 800a3ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f43f af0a 	beq.w	800a20e <_printf_float+0xb6>
 800a3fa:	f04f 0a00 	mov.w	sl, #0
 800a3fe:	f104 0b1a 	add.w	fp, r4, #26
 800a402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a404:	425b      	negs	r3, r3
 800a406:	4553      	cmp	r3, sl
 800a408:	dc01      	bgt.n	800a40e <_printf_float+0x2b6>
 800a40a:	464b      	mov	r3, r9
 800a40c:	e793      	b.n	800a336 <_printf_float+0x1de>
 800a40e:	2301      	movs	r3, #1
 800a410:	465a      	mov	r2, fp
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f aef8 	beq.w	800a20e <_printf_float+0xb6>
 800a41e:	f10a 0a01 	add.w	sl, sl, #1
 800a422:	e7ee      	b.n	800a402 <_printf_float+0x2aa>
 800a424:	7fefffff 	.word	0x7fefffff
 800a428:	0800ef41 	.word	0x0800ef41
 800a42c:	0800ef45 	.word	0x0800ef45
 800a430:	0800ef49 	.word	0x0800ef49
 800a434:	0800ef4d 	.word	0x0800ef4d
 800a438:	0800f326 	.word	0x0800f326
 800a43c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a43e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a442:	4553      	cmp	r3, sl
 800a444:	bfa8      	it	ge
 800a446:	4653      	movge	r3, sl
 800a448:	2b00      	cmp	r3, #0
 800a44a:	4699      	mov	r9, r3
 800a44c:	dc36      	bgt.n	800a4bc <_printf_float+0x364>
 800a44e:	f04f 0b00 	mov.w	fp, #0
 800a452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a456:	f104 021a 	add.w	r2, r4, #26
 800a45a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a45c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a45e:	eba3 0309 	sub.w	r3, r3, r9
 800a462:	455b      	cmp	r3, fp
 800a464:	dc31      	bgt.n	800a4ca <_printf_float+0x372>
 800a466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a468:	459a      	cmp	sl, r3
 800a46a:	dc3a      	bgt.n	800a4e2 <_printf_float+0x38a>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	07da      	lsls	r2, r3, #31
 800a470:	d437      	bmi.n	800a4e2 <_printf_float+0x38a>
 800a472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a474:	ebaa 0903 	sub.w	r9, sl, r3
 800a478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a47a:	ebaa 0303 	sub.w	r3, sl, r3
 800a47e:	4599      	cmp	r9, r3
 800a480:	bfa8      	it	ge
 800a482:	4699      	movge	r9, r3
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	dc33      	bgt.n	800a4f2 <_printf_float+0x39a>
 800a48a:	f04f 0800 	mov.w	r8, #0
 800a48e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a492:	f104 0b1a 	add.w	fp, r4, #26
 800a496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a498:	ebaa 0303 	sub.w	r3, sl, r3
 800a49c:	eba3 0309 	sub.w	r3, r3, r9
 800a4a0:	4543      	cmp	r3, r8
 800a4a2:	f77f af7a 	ble.w	800a39a <_printf_float+0x242>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	465a      	mov	r2, fp
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f43f aeac 	beq.w	800a20e <_printf_float+0xb6>
 800a4b6:	f108 0801 	add.w	r8, r8, #1
 800a4ba:	e7ec      	b.n	800a496 <_printf_float+0x33e>
 800a4bc:	4642      	mov	r2, r8
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b8      	blx	r7
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d1c2      	bne.n	800a44e <_printf_float+0x2f6>
 800a4c8:	e6a1      	b.n	800a20e <_printf_float+0xb6>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f43f ae9a 	beq.w	800a20e <_printf_float+0xb6>
 800a4da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4dc:	f10b 0b01 	add.w	fp, fp, #1
 800a4e0:	e7bb      	b.n	800a45a <_printf_float+0x302>
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b8      	blx	r7
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d1c0      	bne.n	800a472 <_printf_float+0x31a>
 800a4f0:	e68d      	b.n	800a20e <_printf_float+0xb6>
 800a4f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	4442      	add	r2, r8
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	d1c3      	bne.n	800a48a <_printf_float+0x332>
 800a502:	e684      	b.n	800a20e <_printf_float+0xb6>
 800a504:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a508:	f1ba 0f01 	cmp.w	sl, #1
 800a50c:	dc01      	bgt.n	800a512 <_printf_float+0x3ba>
 800a50e:	07db      	lsls	r3, r3, #31
 800a510:	d536      	bpl.n	800a580 <_printf_float+0x428>
 800a512:	2301      	movs	r3, #1
 800a514:	4642      	mov	r2, r8
 800a516:	4631      	mov	r1, r6
 800a518:	4628      	mov	r0, r5
 800a51a:	47b8      	blx	r7
 800a51c:	3001      	adds	r0, #1
 800a51e:	f43f ae76 	beq.w	800a20e <_printf_float+0xb6>
 800a522:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	f43f ae6e 	beq.w	800a20e <_printf_float+0xb6>
 800a532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a53e:	f7f6 fa3d 	bl	80009bc <__aeabi_dcmpeq>
 800a542:	b9c0      	cbnz	r0, 800a576 <_printf_float+0x41e>
 800a544:	4653      	mov	r3, sl
 800a546:	f108 0201 	add.w	r2, r8, #1
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	d10c      	bne.n	800a56e <_printf_float+0x416>
 800a554:	e65b      	b.n	800a20e <_printf_float+0xb6>
 800a556:	2301      	movs	r3, #1
 800a558:	465a      	mov	r2, fp
 800a55a:	4631      	mov	r1, r6
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b8      	blx	r7
 800a560:	3001      	adds	r0, #1
 800a562:	f43f ae54 	beq.w	800a20e <_printf_float+0xb6>
 800a566:	f108 0801 	add.w	r8, r8, #1
 800a56a:	45d0      	cmp	r8, sl
 800a56c:	dbf3      	blt.n	800a556 <_printf_float+0x3fe>
 800a56e:	464b      	mov	r3, r9
 800a570:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a574:	e6e0      	b.n	800a338 <_printf_float+0x1e0>
 800a576:	f04f 0800 	mov.w	r8, #0
 800a57a:	f104 0b1a 	add.w	fp, r4, #26
 800a57e:	e7f4      	b.n	800a56a <_printf_float+0x412>
 800a580:	2301      	movs	r3, #1
 800a582:	4642      	mov	r2, r8
 800a584:	e7e1      	b.n	800a54a <_printf_float+0x3f2>
 800a586:	2301      	movs	r3, #1
 800a588:	464a      	mov	r2, r9
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	f43f ae3c 	beq.w	800a20e <_printf_float+0xb6>
 800a596:	f108 0801 	add.w	r8, r8, #1
 800a59a:	68e3      	ldr	r3, [r4, #12]
 800a59c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a59e:	1a5b      	subs	r3, r3, r1
 800a5a0:	4543      	cmp	r3, r8
 800a5a2:	dcf0      	bgt.n	800a586 <_printf_float+0x42e>
 800a5a4:	e6fd      	b.n	800a3a2 <_printf_float+0x24a>
 800a5a6:	f04f 0800 	mov.w	r8, #0
 800a5aa:	f104 0919 	add.w	r9, r4, #25
 800a5ae:	e7f4      	b.n	800a59a <_printf_float+0x442>

0800a5b0 <_printf_common>:
 800a5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	4698      	mov	r8, r3
 800a5b8:	688a      	ldr	r2, [r1, #8]
 800a5ba:	690b      	ldr	r3, [r1, #16]
 800a5bc:	4607      	mov	r7, r0
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	bfb8      	it	lt
 800a5c2:	4613      	movlt	r3, r2
 800a5c4:	6033      	str	r3, [r6, #0]
 800a5c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5d0:	b10a      	cbz	r2, 800a5d6 <_printf_common+0x26>
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	6033      	str	r3, [r6, #0]
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	0699      	lsls	r1, r3, #26
 800a5da:	bf42      	ittt	mi
 800a5dc:	6833      	ldrmi	r3, [r6, #0]
 800a5de:	3302      	addmi	r3, #2
 800a5e0:	6033      	strmi	r3, [r6, #0]
 800a5e2:	6825      	ldr	r5, [r4, #0]
 800a5e4:	f015 0506 	ands.w	r5, r5, #6
 800a5e8:	d106      	bne.n	800a5f8 <_printf_common+0x48>
 800a5ea:	f104 0a19 	add.w	sl, r4, #25
 800a5ee:	68e3      	ldr	r3, [r4, #12]
 800a5f0:	6832      	ldr	r2, [r6, #0]
 800a5f2:	1a9b      	subs	r3, r3, r2
 800a5f4:	42ab      	cmp	r3, r5
 800a5f6:	dc2b      	bgt.n	800a650 <_printf_common+0xa0>
 800a5f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	3b00      	subs	r3, #0
 800a600:	bf18      	it	ne
 800a602:	2301      	movne	r3, #1
 800a604:	0692      	lsls	r2, r2, #26
 800a606:	d430      	bmi.n	800a66a <_printf_common+0xba>
 800a608:	4641      	mov	r1, r8
 800a60a:	4638      	mov	r0, r7
 800a60c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a610:	47c8      	blx	r9
 800a612:	3001      	adds	r0, #1
 800a614:	d023      	beq.n	800a65e <_printf_common+0xae>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	6922      	ldr	r2, [r4, #16]
 800a61a:	f003 0306 	and.w	r3, r3, #6
 800a61e:	2b04      	cmp	r3, #4
 800a620:	bf14      	ite	ne
 800a622:	2500      	movne	r5, #0
 800a624:	6833      	ldreq	r3, [r6, #0]
 800a626:	f04f 0600 	mov.w	r6, #0
 800a62a:	bf08      	it	eq
 800a62c:	68e5      	ldreq	r5, [r4, #12]
 800a62e:	f104 041a 	add.w	r4, r4, #26
 800a632:	bf08      	it	eq
 800a634:	1aed      	subeq	r5, r5, r3
 800a636:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a63a:	bf08      	it	eq
 800a63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a640:	4293      	cmp	r3, r2
 800a642:	bfc4      	itt	gt
 800a644:	1a9b      	subgt	r3, r3, r2
 800a646:	18ed      	addgt	r5, r5, r3
 800a648:	42b5      	cmp	r5, r6
 800a64a:	d11a      	bne.n	800a682 <_printf_common+0xd2>
 800a64c:	2000      	movs	r0, #0
 800a64e:	e008      	b.n	800a662 <_printf_common+0xb2>
 800a650:	2301      	movs	r3, #1
 800a652:	4652      	mov	r2, sl
 800a654:	4641      	mov	r1, r8
 800a656:	4638      	mov	r0, r7
 800a658:	47c8      	blx	r9
 800a65a:	3001      	adds	r0, #1
 800a65c:	d103      	bne.n	800a666 <_printf_common+0xb6>
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a666:	3501      	adds	r5, #1
 800a668:	e7c1      	b.n	800a5ee <_printf_common+0x3e>
 800a66a:	2030      	movs	r0, #48	@ 0x30
 800a66c:	18e1      	adds	r1, r4, r3
 800a66e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a678:	4422      	add	r2, r4
 800a67a:	3302      	adds	r3, #2
 800a67c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a680:	e7c2      	b.n	800a608 <_printf_common+0x58>
 800a682:	2301      	movs	r3, #1
 800a684:	4622      	mov	r2, r4
 800a686:	4641      	mov	r1, r8
 800a688:	4638      	mov	r0, r7
 800a68a:	47c8      	blx	r9
 800a68c:	3001      	adds	r0, #1
 800a68e:	d0e6      	beq.n	800a65e <_printf_common+0xae>
 800a690:	3601      	adds	r6, #1
 800a692:	e7d9      	b.n	800a648 <_printf_common+0x98>

0800a694 <_printf_i>:
 800a694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	7e0f      	ldrb	r7, [r1, #24]
 800a69a:	4691      	mov	r9, r2
 800a69c:	2f78      	cmp	r7, #120	@ 0x78
 800a69e:	4680      	mov	r8, r0
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	469a      	mov	sl, r3
 800a6a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6aa:	d807      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ac:	2f62      	cmp	r7, #98	@ 0x62
 800a6ae:	d80a      	bhi.n	800a6c6 <_printf_i+0x32>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	f000 80d3 	beq.w	800a85c <_printf_i+0x1c8>
 800a6b6:	2f58      	cmp	r7, #88	@ 0x58
 800a6b8:	f000 80ba 	beq.w	800a830 <_printf_i+0x19c>
 800a6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6c4:	e03a      	b.n	800a73c <_printf_i+0xa8>
 800a6c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6ca:	2b15      	cmp	r3, #21
 800a6cc:	d8f6      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a6d4 <_printf_i+0x40>)
 800a6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6d4:	0800a72d 	.word	0x0800a72d
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a6bd 	.word	0x0800a6bd
 800a6e0:	0800a6bd 	.word	0x0800a6bd
 800a6e4:	0800a6bd 	.word	0x0800a6bd
 800a6e8:	0800a6bd 	.word	0x0800a6bd
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a6bd 	.word	0x0800a6bd
 800a6f4:	0800a6bd 	.word	0x0800a6bd
 800a6f8:	0800a6bd 	.word	0x0800a6bd
 800a6fc:	0800a6bd 	.word	0x0800a6bd
 800a700:	0800a843 	.word	0x0800a843
 800a704:	0800a76b 	.word	0x0800a76b
 800a708:	0800a7fd 	.word	0x0800a7fd
 800a70c:	0800a6bd 	.word	0x0800a6bd
 800a710:	0800a6bd 	.word	0x0800a6bd
 800a714:	0800a865 	.word	0x0800a865
 800a718:	0800a6bd 	.word	0x0800a6bd
 800a71c:	0800a76b 	.word	0x0800a76b
 800a720:	0800a6bd 	.word	0x0800a6bd
 800a724:	0800a6bd 	.word	0x0800a6bd
 800a728:	0800a805 	.word	0x0800a805
 800a72c:	6833      	ldr	r3, [r6, #0]
 800a72e:	1d1a      	adds	r2, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6032      	str	r2, [r6, #0]
 800a734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a73c:	2301      	movs	r3, #1
 800a73e:	e09e      	b.n	800a87e <_printf_i+0x1ea>
 800a740:	6833      	ldr	r3, [r6, #0]
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	1d19      	adds	r1, r3, #4
 800a746:	6031      	str	r1, [r6, #0]
 800a748:	0606      	lsls	r6, r0, #24
 800a74a:	d501      	bpl.n	800a750 <_printf_i+0xbc>
 800a74c:	681d      	ldr	r5, [r3, #0]
 800a74e:	e003      	b.n	800a758 <_printf_i+0xc4>
 800a750:	0645      	lsls	r5, r0, #25
 800a752:	d5fb      	bpl.n	800a74c <_printf_i+0xb8>
 800a754:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a758:	2d00      	cmp	r5, #0
 800a75a:	da03      	bge.n	800a764 <_printf_i+0xd0>
 800a75c:	232d      	movs	r3, #45	@ 0x2d
 800a75e:	426d      	negs	r5, r5
 800a760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a764:	230a      	movs	r3, #10
 800a766:	4859      	ldr	r0, [pc, #356]	@ (800a8cc <_printf_i+0x238>)
 800a768:	e011      	b.n	800a78e <_printf_i+0xfa>
 800a76a:	6821      	ldr	r1, [r4, #0]
 800a76c:	6833      	ldr	r3, [r6, #0]
 800a76e:	0608      	lsls	r0, r1, #24
 800a770:	f853 5b04 	ldr.w	r5, [r3], #4
 800a774:	d402      	bmi.n	800a77c <_printf_i+0xe8>
 800a776:	0649      	lsls	r1, r1, #25
 800a778:	bf48      	it	mi
 800a77a:	b2ad      	uxthmi	r5, r5
 800a77c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a77e:	6033      	str	r3, [r6, #0]
 800a780:	bf14      	ite	ne
 800a782:	230a      	movne	r3, #10
 800a784:	2308      	moveq	r3, #8
 800a786:	4851      	ldr	r0, [pc, #324]	@ (800a8cc <_printf_i+0x238>)
 800a788:	2100      	movs	r1, #0
 800a78a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a78e:	6866      	ldr	r6, [r4, #4]
 800a790:	2e00      	cmp	r6, #0
 800a792:	bfa8      	it	ge
 800a794:	6821      	ldrge	r1, [r4, #0]
 800a796:	60a6      	str	r6, [r4, #8]
 800a798:	bfa4      	itt	ge
 800a79a:	f021 0104 	bicge.w	r1, r1, #4
 800a79e:	6021      	strge	r1, [r4, #0]
 800a7a0:	b90d      	cbnz	r5, 800a7a6 <_printf_i+0x112>
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	d04b      	beq.n	800a83e <_printf_i+0x1aa>
 800a7a6:	4616      	mov	r6, r2
 800a7a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a7b0:	5dc7      	ldrb	r7, [r0, r7]
 800a7b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7b6:	462f      	mov	r7, r5
 800a7b8:	42bb      	cmp	r3, r7
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	d9f4      	bls.n	800a7a8 <_printf_i+0x114>
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d10b      	bne.n	800a7da <_printf_i+0x146>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	07df      	lsls	r7, r3, #31
 800a7c6:	d508      	bpl.n	800a7da <_printf_i+0x146>
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	6861      	ldr	r1, [r4, #4]
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	bfde      	ittt	le
 800a7d0:	2330      	movle	r3, #48	@ 0x30
 800a7d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7da:	1b92      	subs	r2, r2, r6
 800a7dc:	6122      	str	r2, [r4, #16]
 800a7de:	464b      	mov	r3, r9
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	f8cd a000 	str.w	sl, [sp]
 800a7e8:	aa03      	add	r2, sp, #12
 800a7ea:	f7ff fee1 	bl	800a5b0 <_printf_common>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d14a      	bne.n	800a888 <_printf_i+0x1f4>
 800a7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f6:	b004      	add	sp, #16
 800a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	f043 0320 	orr.w	r3, r3, #32
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	2778      	movs	r7, #120	@ 0x78
 800a806:	4832      	ldr	r0, [pc, #200]	@ (800a8d0 <_printf_i+0x23c>)
 800a808:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	6831      	ldr	r1, [r6, #0]
 800a810:	061f      	lsls	r7, r3, #24
 800a812:	f851 5b04 	ldr.w	r5, [r1], #4
 800a816:	d402      	bmi.n	800a81e <_printf_i+0x18a>
 800a818:	065f      	lsls	r7, r3, #25
 800a81a:	bf48      	it	mi
 800a81c:	b2ad      	uxthmi	r5, r5
 800a81e:	6031      	str	r1, [r6, #0]
 800a820:	07d9      	lsls	r1, r3, #31
 800a822:	bf44      	itt	mi
 800a824:	f043 0320 	orrmi.w	r3, r3, #32
 800a828:	6023      	strmi	r3, [r4, #0]
 800a82a:	b11d      	cbz	r5, 800a834 <_printf_i+0x1a0>
 800a82c:	2310      	movs	r3, #16
 800a82e:	e7ab      	b.n	800a788 <_printf_i+0xf4>
 800a830:	4826      	ldr	r0, [pc, #152]	@ (800a8cc <_printf_i+0x238>)
 800a832:	e7e9      	b.n	800a808 <_printf_i+0x174>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	f023 0320 	bic.w	r3, r3, #32
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	e7f6      	b.n	800a82c <_printf_i+0x198>
 800a83e:	4616      	mov	r6, r2
 800a840:	e7bd      	b.n	800a7be <_printf_i+0x12a>
 800a842:	6833      	ldr	r3, [r6, #0]
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	1d18      	adds	r0, r3, #4
 800a848:	6961      	ldr	r1, [r4, #20]
 800a84a:	6030      	str	r0, [r6, #0]
 800a84c:	062e      	lsls	r6, r5, #24
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	d501      	bpl.n	800a856 <_printf_i+0x1c2>
 800a852:	6019      	str	r1, [r3, #0]
 800a854:	e002      	b.n	800a85c <_printf_i+0x1c8>
 800a856:	0668      	lsls	r0, r5, #25
 800a858:	d5fb      	bpl.n	800a852 <_printf_i+0x1be>
 800a85a:	8019      	strh	r1, [r3, #0]
 800a85c:	2300      	movs	r3, #0
 800a85e:	4616      	mov	r6, r2
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	e7bc      	b.n	800a7de <_printf_i+0x14a>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	2100      	movs	r1, #0
 800a868:	1d1a      	adds	r2, r3, #4
 800a86a:	6032      	str	r2, [r6, #0]
 800a86c:	681e      	ldr	r6, [r3, #0]
 800a86e:	6862      	ldr	r2, [r4, #4]
 800a870:	4630      	mov	r0, r6
 800a872:	f000 ff34 	bl	800b6de <memchr>
 800a876:	b108      	cbz	r0, 800a87c <_printf_i+0x1e8>
 800a878:	1b80      	subs	r0, r0, r6
 800a87a:	6060      	str	r0, [r4, #4]
 800a87c:	6863      	ldr	r3, [r4, #4]
 800a87e:	6123      	str	r3, [r4, #16]
 800a880:	2300      	movs	r3, #0
 800a882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a886:	e7aa      	b.n	800a7de <_printf_i+0x14a>
 800a888:	4632      	mov	r2, r6
 800a88a:	4649      	mov	r1, r9
 800a88c:	4640      	mov	r0, r8
 800a88e:	6923      	ldr	r3, [r4, #16]
 800a890:	47d0      	blx	sl
 800a892:	3001      	adds	r0, #1
 800a894:	d0ad      	beq.n	800a7f2 <_printf_i+0x15e>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	079b      	lsls	r3, r3, #30
 800a89a:	d413      	bmi.n	800a8c4 <_printf_i+0x230>
 800a89c:	68e0      	ldr	r0, [r4, #12]
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	bfb8      	it	lt
 800a8a4:	4618      	movlt	r0, r3
 800a8a6:	e7a6      	b.n	800a7f6 <_printf_i+0x162>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	47d0      	blx	sl
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	d09d      	beq.n	800a7f2 <_printf_i+0x15e>
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	68e3      	ldr	r3, [r4, #12]
 800a8ba:	9903      	ldr	r1, [sp, #12]
 800a8bc:	1a5b      	subs	r3, r3, r1
 800a8be:	42ab      	cmp	r3, r5
 800a8c0:	dcf2      	bgt.n	800a8a8 <_printf_i+0x214>
 800a8c2:	e7eb      	b.n	800a89c <_printf_i+0x208>
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	f104 0619 	add.w	r6, r4, #25
 800a8ca:	e7f5      	b.n	800a8b8 <_printf_i+0x224>
 800a8cc:	0800ef51 	.word	0x0800ef51
 800a8d0:	0800ef62 	.word	0x0800ef62

0800a8d4 <std>:
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	4604      	mov	r4, r0
 800a8da:	e9c0 3300 	strd	r3, r3, [r0]
 800a8de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8e2:	6083      	str	r3, [r0, #8]
 800a8e4:	8181      	strh	r1, [r0, #12]
 800a8e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8e8:	81c2      	strh	r2, [r0, #14]
 800a8ea:	6183      	str	r3, [r0, #24]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	2208      	movs	r2, #8
 800a8f0:	305c      	adds	r0, #92	@ 0x5c
 800a8f2:	f000 f8f6 	bl	800aae2 <memset>
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <std+0x58>)
 800a8f8:	6224      	str	r4, [r4, #32]
 800a8fa:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <std+0x5c>)
 800a8fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a900:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <std+0x60>)
 800a902:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a904:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <std+0x64>)
 800a906:	6323      	str	r3, [r4, #48]	@ 0x30
 800a908:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <std+0x68>)
 800a90a:	429c      	cmp	r4, r3
 800a90c:	d006      	beq.n	800a91c <std+0x48>
 800a90e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a912:	4294      	cmp	r4, r2
 800a914:	d002      	beq.n	800a91c <std+0x48>
 800a916:	33d0      	adds	r3, #208	@ 0xd0
 800a918:	429c      	cmp	r4, r3
 800a91a:	d105      	bne.n	800a928 <std+0x54>
 800a91c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a924:	f000 bece 	b.w	800b6c4 <__retarget_lock_init_recursive>
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	bf00      	nop
 800a92c:	0800aa59 	.word	0x0800aa59
 800a930:	0800aa7f 	.word	0x0800aa7f
 800a934:	0800aab7 	.word	0x0800aab7
 800a938:	0800aadb 	.word	0x0800aadb
 800a93c:	20000ae0 	.word	0x20000ae0

0800a940 <stdio_exit_handler>:
 800a940:	4a02      	ldr	r2, [pc, #8]	@ (800a94c <stdio_exit_handler+0xc>)
 800a942:	4903      	ldr	r1, [pc, #12]	@ (800a950 <stdio_exit_handler+0x10>)
 800a944:	4803      	ldr	r0, [pc, #12]	@ (800a954 <stdio_exit_handler+0x14>)
 800a946:	f000 b869 	b.w	800aa1c <_fwalk_sglue>
 800a94a:	bf00      	nop
 800a94c:	20000014 	.word	0x20000014
 800a950:	0800d869 	.word	0x0800d869
 800a954:	20000198 	.word	0x20000198

0800a958 <cleanup_stdio>:
 800a958:	6841      	ldr	r1, [r0, #4]
 800a95a:	4b0c      	ldr	r3, [pc, #48]	@ (800a98c <cleanup_stdio+0x34>)
 800a95c:	b510      	push	{r4, lr}
 800a95e:	4299      	cmp	r1, r3
 800a960:	4604      	mov	r4, r0
 800a962:	d001      	beq.n	800a968 <cleanup_stdio+0x10>
 800a964:	f002 ff80 	bl	800d868 <_fflush_r>
 800a968:	68a1      	ldr	r1, [r4, #8]
 800a96a:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <cleanup_stdio+0x38>)
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d002      	beq.n	800a976 <cleanup_stdio+0x1e>
 800a970:	4620      	mov	r0, r4
 800a972:	f002 ff79 	bl	800d868 <_fflush_r>
 800a976:	68e1      	ldr	r1, [r4, #12]
 800a978:	4b06      	ldr	r3, [pc, #24]	@ (800a994 <cleanup_stdio+0x3c>)
 800a97a:	4299      	cmp	r1, r3
 800a97c:	d004      	beq.n	800a988 <cleanup_stdio+0x30>
 800a97e:	4620      	mov	r0, r4
 800a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a984:	f002 bf70 	b.w	800d868 <_fflush_r>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	bf00      	nop
 800a98c:	20000ae0 	.word	0x20000ae0
 800a990:	20000b48 	.word	0x20000b48
 800a994:	20000bb0 	.word	0x20000bb0

0800a998 <global_stdio_init.part.0>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c8 <global_stdio_init.part.0+0x30>)
 800a99c:	4c0b      	ldr	r4, [pc, #44]	@ (800a9cc <global_stdio_init.part.0+0x34>)
 800a99e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <global_stdio_init.part.0+0x38>)
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	2104      	movs	r1, #4
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7ff ff94 	bl	800a8d4 <std>
 800a9ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	2109      	movs	r1, #9
 800a9b4:	f7ff ff8e 	bl	800a8d4 <std>
 800a9b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9bc:	2202      	movs	r2, #2
 800a9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c2:	2112      	movs	r1, #18
 800a9c4:	f7ff bf86 	b.w	800a8d4 <std>
 800a9c8:	20000c18 	.word	0x20000c18
 800a9cc:	20000ae0 	.word	0x20000ae0
 800a9d0:	0800a941 	.word	0x0800a941

0800a9d4 <__sfp_lock_acquire>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__sfp_lock_acquire+0x8>)
 800a9d6:	f000 be77 	b.w	800b6c8 <__retarget_lock_acquire_recursive>
 800a9da:	bf00      	nop
 800a9dc:	20000c47 	.word	0x20000c47

0800a9e0 <__sfp_lock_release>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__sfp_lock_release+0x8>)
 800a9e2:	f000 be73 	b.w	800b6cc <__retarget_lock_release_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	20000c47 	.word	0x20000c47

0800a9ec <__sinit>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	f7ff fff0 	bl	800a9d4 <__sfp_lock_acquire>
 800a9f4:	6a23      	ldr	r3, [r4, #32]
 800a9f6:	b11b      	cbz	r3, 800aa00 <__sinit+0x14>
 800a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9fc:	f7ff bff0 	b.w	800a9e0 <__sfp_lock_release>
 800aa00:	4b04      	ldr	r3, [pc, #16]	@ (800aa14 <__sinit+0x28>)
 800aa02:	6223      	str	r3, [r4, #32]
 800aa04:	4b04      	ldr	r3, [pc, #16]	@ (800aa18 <__sinit+0x2c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f5      	bne.n	800a9f8 <__sinit+0xc>
 800aa0c:	f7ff ffc4 	bl	800a998 <global_stdio_init.part.0>
 800aa10:	e7f2      	b.n	800a9f8 <__sinit+0xc>
 800aa12:	bf00      	nop
 800aa14:	0800a959 	.word	0x0800a959
 800aa18:	20000c18 	.word	0x20000c18

0800aa1c <_fwalk_sglue>:
 800aa1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa20:	4607      	mov	r7, r0
 800aa22:	4688      	mov	r8, r1
 800aa24:	4614      	mov	r4, r2
 800aa26:	2600      	movs	r6, #0
 800aa28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa2c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa30:	d505      	bpl.n	800aa3e <_fwalk_sglue+0x22>
 800aa32:	6824      	ldr	r4, [r4, #0]
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	d1f7      	bne.n	800aa28 <_fwalk_sglue+0xc>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d907      	bls.n	800aa54 <_fwalk_sglue+0x38>
 800aa44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	d003      	beq.n	800aa54 <_fwalk_sglue+0x38>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4638      	mov	r0, r7
 800aa50:	47c0      	blx	r8
 800aa52:	4306      	orrs	r6, r0
 800aa54:	3568      	adds	r5, #104	@ 0x68
 800aa56:	e7e9      	b.n	800aa2c <_fwalk_sglue+0x10>

0800aa58 <__sread>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	f000 fde2 	bl	800b628 <_read_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	bfab      	itete	ge
 800aa68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa6a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa6c:	181b      	addge	r3, r3, r0
 800aa6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa72:	bfac      	ite	ge
 800aa74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa76:	81a3      	strhlt	r3, [r4, #12]
 800aa78:	bd10      	pop	{r4, pc}

0800aa7a <__seofread>:
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	4770      	bx	lr

0800aa7e <__swrite>:
 800aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa82:	461f      	mov	r7, r3
 800aa84:	898b      	ldrh	r3, [r1, #12]
 800aa86:	4605      	mov	r5, r0
 800aa88:	05db      	lsls	r3, r3, #23
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4616      	mov	r6, r2
 800aa8e:	d505      	bpl.n	800aa9c <__swrite+0x1e>
 800aa90:	2302      	movs	r3, #2
 800aa92:	2200      	movs	r2, #0
 800aa94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa98:	f000 fdb4 	bl	800b604 <_lseek_r>
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	f000 bdcb 	b.w	800b64c <_write_r>

0800aab6 <__sseek>:
 800aab6:	b510      	push	{r4, lr}
 800aab8:	460c      	mov	r4, r1
 800aaba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aabe:	f000 fda1 	bl	800b604 <_lseek_r>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	bf15      	itete	ne
 800aac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aaca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aad2:	81a3      	strheq	r3, [r4, #12]
 800aad4:	bf18      	it	ne
 800aad6:	81a3      	strhne	r3, [r4, #12]
 800aad8:	bd10      	pop	{r4, pc}

0800aada <__sclose>:
 800aada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aade:	f000 bd81 	b.w	800b5e4 <_close_r>

0800aae2 <memset>:
 800aae2:	4603      	mov	r3, r0
 800aae4:	4402      	add	r2, r0
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d100      	bne.n	800aaec <memset+0xa>
 800aaea:	4770      	bx	lr
 800aaec:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf0:	e7f9      	b.n	800aae6 <memset+0x4>

0800aaf2 <strncmp>:
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	b16a      	cbz	r2, 800ab12 <strncmp+0x20>
 800aaf6:	3901      	subs	r1, #1
 800aaf8:	1884      	adds	r4, r0, r2
 800aafa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d103      	bne.n	800ab0e <strncmp+0x1c>
 800ab06:	42a0      	cmp	r0, r4
 800ab08:	d001      	beq.n	800ab0e <strncmp+0x1c>
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d1f5      	bne.n	800aafa <strncmp+0x8>
 800ab0e:	1ad0      	subs	r0, r2, r3
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	4610      	mov	r0, r2
 800ab14:	e7fc      	b.n	800ab10 <strncmp+0x1e>
	...

0800ab18 <validate_structure>:
 800ab18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab1a:	6801      	ldr	r1, [r0, #0]
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	293b      	cmp	r1, #59	@ 0x3b
 800ab20:	d911      	bls.n	800ab46 <validate_structure+0x2e>
 800ab22:	223c      	movs	r2, #60	@ 0x3c
 800ab24:	4668      	mov	r0, sp
 800ab26:	f000 fe01 	bl	800b72c <div>
 800ab2a:	9a01      	ldr	r2, [sp, #4]
 800ab2c:	6863      	ldr	r3, [r4, #4]
 800ab2e:	9900      	ldr	r1, [sp, #0]
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	440b      	add	r3, r1
 800ab34:	6063      	str	r3, [r4, #4]
 800ab36:	bfbb      	ittet	lt
 800ab38:	323c      	addlt	r2, #60	@ 0x3c
 800ab3a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ab3e:	6022      	strge	r2, [r4, #0]
 800ab40:	6022      	strlt	r2, [r4, #0]
 800ab42:	bfb8      	it	lt
 800ab44:	6063      	strlt	r3, [r4, #4]
 800ab46:	6861      	ldr	r1, [r4, #4]
 800ab48:	293b      	cmp	r1, #59	@ 0x3b
 800ab4a:	d911      	bls.n	800ab70 <validate_structure+0x58>
 800ab4c:	223c      	movs	r2, #60	@ 0x3c
 800ab4e:	4668      	mov	r0, sp
 800ab50:	f000 fdec 	bl	800b72c <div>
 800ab54:	9a01      	ldr	r2, [sp, #4]
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	9900      	ldr	r1, [sp, #0]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	440b      	add	r3, r1
 800ab5e:	60a3      	str	r3, [r4, #8]
 800ab60:	bfbb      	ittet	lt
 800ab62:	323c      	addlt	r2, #60	@ 0x3c
 800ab64:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ab68:	6062      	strge	r2, [r4, #4]
 800ab6a:	6062      	strlt	r2, [r4, #4]
 800ab6c:	bfb8      	it	lt
 800ab6e:	60a3      	strlt	r3, [r4, #8]
 800ab70:	68a1      	ldr	r1, [r4, #8]
 800ab72:	2917      	cmp	r1, #23
 800ab74:	d911      	bls.n	800ab9a <validate_structure+0x82>
 800ab76:	2218      	movs	r2, #24
 800ab78:	4668      	mov	r0, sp
 800ab7a:	f000 fdd7 	bl	800b72c <div>
 800ab7e:	9a01      	ldr	r2, [sp, #4]
 800ab80:	68e3      	ldr	r3, [r4, #12]
 800ab82:	9900      	ldr	r1, [sp, #0]
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	440b      	add	r3, r1
 800ab88:	60e3      	str	r3, [r4, #12]
 800ab8a:	bfbb      	ittet	lt
 800ab8c:	3218      	addlt	r2, #24
 800ab8e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ab92:	60a2      	strge	r2, [r4, #8]
 800ab94:	60a2      	strlt	r2, [r4, #8]
 800ab96:	bfb8      	it	lt
 800ab98:	60e3      	strlt	r3, [r4, #12]
 800ab9a:	6921      	ldr	r1, [r4, #16]
 800ab9c:	290b      	cmp	r1, #11
 800ab9e:	d911      	bls.n	800abc4 <validate_structure+0xac>
 800aba0:	220c      	movs	r2, #12
 800aba2:	4668      	mov	r0, sp
 800aba4:	f000 fdc2 	bl	800b72c <div>
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	6963      	ldr	r3, [r4, #20]
 800abac:	9900      	ldr	r1, [sp, #0]
 800abae:	2a00      	cmp	r2, #0
 800abb0:	440b      	add	r3, r1
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	bfbb      	ittet	lt
 800abb6:	320c      	addlt	r2, #12
 800abb8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800abbc:	6122      	strge	r2, [r4, #16]
 800abbe:	6122      	strlt	r2, [r4, #16]
 800abc0:	bfb8      	it	lt
 800abc2:	6163      	strlt	r3, [r4, #20]
 800abc4:	6963      	ldr	r3, [r4, #20]
 800abc6:	079a      	lsls	r2, r3, #30
 800abc8:	d11c      	bne.n	800ac04 <validate_structure+0xec>
 800abca:	2164      	movs	r1, #100	@ 0x64
 800abcc:	fb93 f2f1 	sdiv	r2, r3, r1
 800abd0:	fb01 3212 	mls	r2, r1, r2, r3
 800abd4:	b9c2      	cbnz	r2, 800ac08 <validate_structure+0xf0>
 800abd6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800abda:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800abde:	fb93 f1f2 	sdiv	r1, r3, r2
 800abe2:	fb02 3311 	mls	r3, r2, r1, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bf14      	ite	ne
 800abea:	231c      	movne	r3, #28
 800abec:	231d      	moveq	r3, #29
 800abee:	68e2      	ldr	r2, [r4, #12]
 800abf0:	2a00      	cmp	r2, #0
 800abf2:	dc0b      	bgt.n	800ac0c <validate_structure+0xf4>
 800abf4:	200b      	movs	r0, #11
 800abf6:	2164      	movs	r1, #100	@ 0x64
 800abf8:	4d30      	ldr	r5, [pc, #192]	@ (800acbc <validate_structure+0x1a4>)
 800abfa:	68e6      	ldr	r6, [r4, #12]
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	dd30      	ble.n	800ac62 <validate_structure+0x14a>
 800ac00:	b003      	add	sp, #12
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac04:	231c      	movs	r3, #28
 800ac06:	e7f2      	b.n	800abee <validate_structure+0xd6>
 800ac08:	231d      	movs	r3, #29
 800ac0a:	e7f0      	b.n	800abee <validate_structure+0xd6>
 800ac0c:	4d2b      	ldr	r5, [pc, #172]	@ (800acbc <validate_structure+0x1a4>)
 800ac0e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800ac12:	2a01      	cmp	r2, #1
 800ac14:	bf0c      	ite	eq
 800ac16:	4618      	moveq	r0, r3
 800ac18:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800ac1c:	4281      	cmp	r1, r0
 800ac1e:	ddef      	ble.n	800ac00 <validate_structure+0xe8>
 800ac20:	3201      	adds	r2, #1
 800ac22:	1a09      	subs	r1, r1, r0
 800ac24:	2a0c      	cmp	r2, #12
 800ac26:	60e1      	str	r1, [r4, #12]
 800ac28:	6122      	str	r2, [r4, #16]
 800ac2a:	d1f0      	bne.n	800ac0e <validate_structure+0xf6>
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	6963      	ldr	r3, [r4, #20]
 800ac30:	6121      	str	r1, [r4, #16]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	0791      	lsls	r1, r2, #30
 800ac36:	6162      	str	r2, [r4, #20]
 800ac38:	d13c      	bne.n	800acb4 <validate_structure+0x19c>
 800ac3a:	2164      	movs	r1, #100	@ 0x64
 800ac3c:	fb92 f0f1 	sdiv	r0, r2, r1
 800ac40:	fb01 2210 	mls	r2, r1, r0, r2
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d137      	bne.n	800acb8 <validate_structure+0x1a0>
 800ac48:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac4c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800ac50:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac54:	fb02 3311 	mls	r3, r2, r1, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bf14      	ite	ne
 800ac5c:	231c      	movne	r3, #28
 800ac5e:	231d      	moveq	r3, #29
 800ac60:	e7d5      	b.n	800ac0e <validate_structure+0xf6>
 800ac62:	6922      	ldr	r2, [r4, #16]
 800ac64:	3a01      	subs	r2, #1
 800ac66:	6122      	str	r2, [r4, #16]
 800ac68:	3201      	adds	r2, #1
 800ac6a:	d116      	bne.n	800ac9a <validate_structure+0x182>
 800ac6c:	6963      	ldr	r3, [r4, #20]
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	0797      	lsls	r7, r2, #30
 800ac72:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800ac76:	d119      	bne.n	800acac <validate_structure+0x194>
 800ac78:	fb92 f7f1 	sdiv	r7, r2, r1
 800ac7c:	fb01 2217 	mls	r2, r1, r7, r2
 800ac80:	b9b2      	cbnz	r2, 800acb0 <validate_structure+0x198>
 800ac82:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac86:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800ac8a:	fb93 f7f2 	sdiv	r7, r3, r2
 800ac8e:	fb02 3317 	mls	r3, r2, r7, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bf14      	ite	ne
 800ac96:	231c      	movne	r3, #28
 800ac98:	231d      	moveq	r3, #29
 800ac9a:	6922      	ldr	r2, [r4, #16]
 800ac9c:	2a01      	cmp	r2, #1
 800ac9e:	bf0c      	ite	eq
 800aca0:	461a      	moveq	r2, r3
 800aca2:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800aca6:	4432      	add	r2, r6
 800aca8:	60e2      	str	r2, [r4, #12]
 800acaa:	e7a6      	b.n	800abfa <validate_structure+0xe2>
 800acac:	231c      	movs	r3, #28
 800acae:	e7f4      	b.n	800ac9a <validate_structure+0x182>
 800acb0:	231d      	movs	r3, #29
 800acb2:	e7f2      	b.n	800ac9a <validate_structure+0x182>
 800acb4:	231c      	movs	r3, #28
 800acb6:	e7aa      	b.n	800ac0e <validate_structure+0xf6>
 800acb8:	231d      	movs	r3, #29
 800acba:	e7a8      	b.n	800ac0e <validate_structure+0xf6>
 800acbc:	0800efa4 	.word	0x0800efa4

0800acc0 <mktime>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	b085      	sub	sp, #20
 800acc6:	4607      	mov	r7, r0
 800acc8:	f002 fe20 	bl	800d90c <__gettzinfo>
 800accc:	4681      	mov	r9, r0
 800acce:	4638      	mov	r0, r7
 800acd0:	f7ff ff22 	bl	800ab18 <validate_structure>
 800acd4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800acd8:	223c      	movs	r2, #60	@ 0x3c
 800acda:	fb02 4403 	mla	r4, r2, r3, r4
 800acde:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	697d      	ldr	r5, [r7, #20]
 800ace6:	fb02 4403 	mla	r4, r2, r3, r4
 800acea:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800acee:	4ac1      	ldr	r2, [pc, #772]	@ (800aff4 <mktime+0x334>)
 800acf0:	3e01      	subs	r6, #1
 800acf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	4416      	add	r6, r2
 800acfa:	dd11      	ble.n	800ad20 <mktime+0x60>
 800acfc:	07a9      	lsls	r1, r5, #30
 800acfe:	d10f      	bne.n	800ad20 <mktime+0x60>
 800ad00:	2264      	movs	r2, #100	@ 0x64
 800ad02:	fb95 f3f2 	sdiv	r3, r5, r2
 800ad06:	fb02 5313 	mls	r3, r2, r3, r5
 800ad0a:	b943      	cbnz	r3, 800ad1e <mktime+0x5e>
 800ad0c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ad10:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ad14:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad18:	fb02 3311 	mls	r3, r2, r1, r3
 800ad1c:	b903      	cbnz	r3, 800ad20 <mktime+0x60>
 800ad1e:	3601      	adds	r6, #1
 800ad20:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ad24:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800ad28:	3310      	adds	r3, #16
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	61fe      	str	r6, [r7, #28]
 800ad2e:	f200 8167 	bhi.w	800b000 <mktime+0x340>
 800ad32:	2d46      	cmp	r5, #70	@ 0x46
 800ad34:	f340 808e 	ble.w	800ae54 <mktime+0x194>
 800ad38:	2346      	movs	r3, #70	@ 0x46
 800ad3a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ad3e:	2164      	movs	r1, #100	@ 0x64
 800ad40:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ad44:	079a      	lsls	r2, r3, #30
 800ad46:	d17f      	bne.n	800ae48 <mktime+0x188>
 800ad48:	fb93 f2f1 	sdiv	r2, r3, r1
 800ad4c:	fb01 3212 	mls	r2, r1, r2, r3
 800ad50:	2a00      	cmp	r2, #0
 800ad52:	d17c      	bne.n	800ae4e <mktime+0x18e>
 800ad54:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ad58:	fb92 fef0 	sdiv	lr, r2, r0
 800ad5c:	fb00 221e 	mls	r2, r0, lr, r2
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	bf14      	ite	ne
 800ad64:	4662      	movne	r2, ip
 800ad66:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	4416      	add	r6, r2
 800ad70:	d1e8      	bne.n	800ad44 <mktime+0x84>
 800ad72:	4ba1      	ldr	r3, [pc, #644]	@ (800aff8 <mktime+0x338>)
 800ad74:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800ad78:	fbc6 4803 	smlal	r4, r8, r6, r3
 800ad7c:	f000 f9f8 	bl	800b170 <__tz_lock>
 800ad80:	f000 fa02 	bl	800b188 <_tzset_unlocked>
 800ad84:	4b9d      	ldr	r3, [pc, #628]	@ (800affc <mktime+0x33c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 8140 	beq.w	800b00e <mktime+0x34e>
 800ad8e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800ad92:	6978      	ldr	r0, [r7, #20]
 800ad94:	4653      	mov	r3, sl
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	bfa8      	it	ge
 800ad9a:	2301      	movge	r3, #1
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ada2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800ada6:	4283      	cmp	r3, r0
 800ada8:	f040 8096 	bne.w	800aed8 <mktime+0x218>
 800adac:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800adb0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800adb4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800adb8:	1a13      	subs	r3, r2, r0
 800adba:	9303      	str	r3, [sp, #12]
 800adbc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800adc0:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	9a02      	ldr	r2, [sp, #8]
 800adc8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800adcc:	ebb2 0e03 	subs.w	lr, r2, r3
 800add0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800add4:	4574      	cmp	r4, lr
 800add6:	eb78 0201 	sbcs.w	r2, r8, r1
 800adda:	f280 8085 	bge.w	800aee8 <mktime+0x228>
 800adde:	f8d9 2000 	ldr.w	r2, [r9]
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	f000 808d 	beq.w	800af02 <mktime+0x242>
 800ade8:	9a03      	ldr	r2, [sp, #12]
 800adea:	4294      	cmp	r4, r2
 800adec:	eb78 020b 	sbcs.w	r2, r8, fp
 800adf0:	f2c0 810a 	blt.w	800b008 <mktime+0x348>
 800adf4:	4574      	cmp	r4, lr
 800adf6:	eb78 0101 	sbcs.w	r1, r8, r1
 800adfa:	bfb4      	ite	lt
 800adfc:	f04f 0b01 	movlt.w	fp, #1
 800ae00:	f04f 0b00 	movge.w	fp, #0
 800ae04:	f1ba 0f00 	cmp.w	sl, #0
 800ae08:	f280 8087 	bge.w	800af1a <mktime+0x25a>
 800ae0c:	f1bb 0f01 	cmp.w	fp, #1
 800ae10:	f040 80ff 	bne.w	800b012 <mktime+0x352>
 800ae14:	f04f 0b01 	mov.w	fp, #1
 800ae18:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ae1c:	191c      	adds	r4, r3, r4
 800ae1e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ae22:	f000 f9ab 	bl	800b17c <__tz_unlock>
 800ae26:	2307      	movs	r3, #7
 800ae28:	3604      	adds	r6, #4
 800ae2a:	fb96 f3f3 	sdiv	r3, r6, r3
 800ae2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ae32:	1af6      	subs	r6, r6, r3
 800ae34:	f100 80db 	bmi.w	800afee <mktime+0x32e>
 800ae38:	f8c7 b020 	str.w	fp, [r7, #32]
 800ae3c:	61be      	str	r6, [r7, #24]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4641      	mov	r1, r8
 800ae42:	b005      	add	sp, #20
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	f240 126d 	movw	r2, #365	@ 0x16d
 800ae4c:	e78d      	b.n	800ad6a <mktime+0xaa>
 800ae4e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ae52:	e78a      	b.n	800ad6a <mktime+0xaa>
 800ae54:	d08d      	beq.n	800ad72 <mktime+0xb2>
 800ae56:	2345      	movs	r3, #69	@ 0x45
 800ae58:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ae5c:	2164      	movs	r1, #100	@ 0x64
 800ae5e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ae62:	e012      	b.n	800ae8a <mktime+0x1ca>
 800ae64:	bb62      	cbnz	r2, 800aec0 <mktime+0x200>
 800ae66:	fb93 f2f1 	sdiv	r2, r3, r1
 800ae6a:	fb01 3212 	mls	r2, r1, r2, r3
 800ae6e:	bb52      	cbnz	r2, 800aec6 <mktime+0x206>
 800ae70:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ae74:	fb92 fef0 	sdiv	lr, r2, r0
 800ae78:	fb00 221e 	mls	r2, r0, lr, r2
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	bf14      	ite	ne
 800ae80:	4662      	movne	r2, ip
 800ae82:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ae86:	1ab6      	subs	r6, r6, r2
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	429d      	cmp	r5, r3
 800ae8c:	f003 0203 	and.w	r2, r3, #3
 800ae90:	dbe8      	blt.n	800ae64 <mktime+0x1a4>
 800ae92:	b9da      	cbnz	r2, 800aecc <mktime+0x20c>
 800ae94:	2264      	movs	r2, #100	@ 0x64
 800ae96:	fb95 f3f2 	sdiv	r3, r5, r2
 800ae9a:	fb02 5313 	mls	r3, r2, r3, r5
 800ae9e:	b9c3      	cbnz	r3, 800aed2 <mktime+0x212>
 800aea0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aea4:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800aea8:	fb93 f1f2 	sdiv	r1, r3, r2
 800aeac:	fb02 3311 	mls	r3, r2, r1, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f240 136d 	movw	r3, #365	@ 0x16d
 800aeb6:	bf08      	it	eq
 800aeb8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800aebc:	1af6      	subs	r6, r6, r3
 800aebe:	e758      	b.n	800ad72 <mktime+0xb2>
 800aec0:	f240 126d 	movw	r2, #365	@ 0x16d
 800aec4:	e7df      	b.n	800ae86 <mktime+0x1c6>
 800aec6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800aeca:	e7dc      	b.n	800ae86 <mktime+0x1c6>
 800aecc:	f240 136d 	movw	r3, #365	@ 0x16d
 800aed0:	e7f4      	b.n	800aebc <mktime+0x1fc>
 800aed2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800aed6:	e7f1      	b.n	800aebc <mktime+0x1fc>
 800aed8:	f000 f8a2 	bl	800b020 <__tzcalc_limits>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f47f af65 	bne.w	800adac <mktime+0xec>
 800aee2:	f8dd b004 	ldr.w	fp, [sp, #4]
 800aee6:	e791      	b.n	800ae0c <mktime+0x14c>
 800aee8:	9a02      	ldr	r2, [sp, #8]
 800aeea:	1a12      	subs	r2, r2, r0
 800aeec:	9202      	str	r2, [sp, #8]
 800aeee:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800aef2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800aef6:	9a02      	ldr	r2, [sp, #8]
 800aef8:	4294      	cmp	r4, r2
 800aefa:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800aefe:	dbf0      	blt.n	800aee2 <mktime+0x222>
 800af00:	e76d      	b.n	800adde <mktime+0x11e>
 800af02:	9a03      	ldr	r2, [sp, #12]
 800af04:	4294      	cmp	r4, r2
 800af06:	eb78 020b 	sbcs.w	r2, r8, fp
 800af0a:	f6ff af73 	blt.w	800adf4 <mktime+0x134>
 800af0e:	f1ba 0f00 	cmp.w	sl, #0
 800af12:	f6ff af7f 	blt.w	800ae14 <mktime+0x154>
 800af16:	f04f 0b01 	mov.w	fp, #1
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	ea82 020b 	eor.w	r2, r2, fp
 800af20:	2a01      	cmp	r2, #1
 800af22:	f47f af73 	bne.w	800ae0c <mktime+0x14c>
 800af26:	f1bb 0f00 	cmp.w	fp, #0
 800af2a:	d035      	beq.n	800af98 <mktime+0x2d8>
 800af2c:	1a1b      	subs	r3, r3, r0
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	191c      	adds	r4, r3, r4
 800af32:	441a      	add	r2, r3
 800af34:	603a      	str	r2, [r7, #0]
 800af36:	4638      	mov	r0, r7
 800af38:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800af3c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800af40:	f7ff fdea 	bl	800ab18 <validate_structure>
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	ebb2 020a 	subs.w	r2, r2, sl
 800af4a:	f43f af5f 	beq.w	800ae0c <mktime+0x14c>
 800af4e:	2a01      	cmp	r2, #1
 800af50:	dc24      	bgt.n	800af9c <mktime+0x2dc>
 800af52:	1c93      	adds	r3, r2, #2
 800af54:	bfd8      	it	le
 800af56:	2201      	movle	r2, #1
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	18d3      	adds	r3, r2, r3
 800af5c:	d527      	bpl.n	800afae <mktime+0x2ee>
 800af5e:	1e6b      	subs	r3, r5, #1
 800af60:	0798      	lsls	r0, r3, #30
 800af62:	d11e      	bne.n	800afa2 <mktime+0x2e2>
 800af64:	2164      	movs	r1, #100	@ 0x64
 800af66:	fb93 f0f1 	sdiv	r0, r3, r1
 800af6a:	fb01 3310 	mls	r3, r1, r0, r3
 800af6e:	b9db      	cbnz	r3, 800afa8 <mktime+0x2e8>
 800af70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800af74:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800af78:	fb95 f1f3 	sdiv	r1, r5, r3
 800af7c:	fb03 5511 	mls	r5, r3, r1, r5
 800af80:	2d00      	cmp	r5, #0
 800af82:	f240 136d 	movw	r3, #365	@ 0x16d
 800af86:	bf18      	it	ne
 800af88:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	4416      	add	r6, r2
 800af90:	e73c      	b.n	800ae0c <mktime+0x14c>
 800af92:	f04f 0b00 	mov.w	fp, #0
 800af96:	e7c0      	b.n	800af1a <mktime+0x25a>
 800af98:	1ac3      	subs	r3, r0, r3
 800af9a:	e7c8      	b.n	800af2e <mktime+0x26e>
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e7da      	b.n	800af58 <mktime+0x298>
 800afa2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800afa6:	e7f1      	b.n	800af8c <mktime+0x2cc>
 800afa8:	f240 136d 	movw	r3, #365	@ 0x16d
 800afac:	e7ee      	b.n	800af8c <mktime+0x2cc>
 800afae:	07a9      	lsls	r1, r5, #30
 800afb0:	d117      	bne.n	800afe2 <mktime+0x322>
 800afb2:	2064      	movs	r0, #100	@ 0x64
 800afb4:	fb95 f1f0 	sdiv	r1, r5, r0
 800afb8:	fb00 5111 	mls	r1, r0, r1, r5
 800afbc:	b9a1      	cbnz	r1, 800afe8 <mktime+0x328>
 800afbe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800afc2:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800afc6:	fb95 f0f1 	sdiv	r0, r5, r1
 800afca:	fb01 5510 	mls	r5, r1, r0, r5
 800afce:	2d00      	cmp	r5, #0
 800afd0:	f240 116d 	movw	r1, #365	@ 0x16d
 800afd4:	bf08      	it	eq
 800afd6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800afda:	428b      	cmp	r3, r1
 800afdc:	bfa8      	it	ge
 800afde:	1a5b      	subge	r3, r3, r1
 800afe0:	e7d4      	b.n	800af8c <mktime+0x2cc>
 800afe2:	f240 116d 	movw	r1, #365	@ 0x16d
 800afe6:	e7f8      	b.n	800afda <mktime+0x31a>
 800afe8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800afec:	e7f5      	b.n	800afda <mktime+0x31a>
 800afee:	3607      	adds	r6, #7
 800aff0:	e722      	b.n	800ae38 <mktime+0x178>
 800aff2:	bf00      	nop
 800aff4:	0800ef74 	.word	0x0800ef74
 800aff8:	00015180 	.word	0x00015180
 800affc:	20000c3c 	.word	0x20000c3c
 800b000:	f04f 34ff 	mov.w	r4, #4294967295
 800b004:	46a0      	mov	r8, r4
 800b006:	e71a      	b.n	800ae3e <mktime+0x17e>
 800b008:	f1ba 0f00 	cmp.w	sl, #0
 800b00c:	dac1      	bge.n	800af92 <mktime+0x2d2>
 800b00e:	f04f 0b00 	mov.w	fp, #0
 800b012:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b016:	191c      	adds	r4, r3, r4
 800b018:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b01c:	e701      	b.n	800ae22 <mktime+0x162>
 800b01e:	bf00      	nop

0800b020 <__tzcalc_limits>:
 800b020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	4604      	mov	r4, r0
 800b026:	f002 fc71 	bl	800d90c <__gettzinfo>
 800b02a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800b02e:	429c      	cmp	r4, r3
 800b030:	f340 8098 	ble.w	800b164 <__tzcalc_limits+0x144>
 800b034:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800b038:	f240 126d 	movw	r2, #365	@ 0x16d
 800b03c:	19e5      	adds	r5, r4, r7
 800b03e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800b042:	10ad      	asrs	r5, r5, #2
 800b044:	fb02 5503 	mla	r5, r2, r3, r5
 800b048:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800b04c:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800b050:	fb93 f3f2 	sdiv	r3, r3, r2
 800b054:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800b058:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b05c:	441d      	add	r5, r3
 800b05e:	eb04 030c 	add.w	r3, r4, ip
 800b062:	fbb3 f3f2 	udiv	r3, r3, r2
 800b066:	4601      	mov	r1, r0
 800b068:	4f3f      	ldr	r7, [pc, #252]	@ (800b168 <__tzcalc_limits+0x148>)
 800b06a:	6044      	str	r4, [r0, #4]
 800b06c:	441d      	add	r5, r3
 800b06e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800b072:	7a0b      	ldrb	r3, [r1, #8]
 800b074:	694a      	ldr	r2, [r1, #20]
 800b076:	2b4a      	cmp	r3, #74	@ 0x4a
 800b078:	d133      	bne.n	800b0e2 <__tzcalc_limits+0xc2>
 800b07a:	07a6      	lsls	r6, r4, #30
 800b07c:	eb05 0302 	add.w	r3, r5, r2
 800b080:	d106      	bne.n	800b090 <__tzcalc_limits+0x70>
 800b082:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800b086:	fb94 f6fe 	sdiv	r6, r4, lr
 800b08a:	fb0e 4616 	mls	r6, lr, r6, r4
 800b08e:	b936      	cbnz	r6, 800b09e <__tzcalc_limits+0x7e>
 800b090:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800b094:	fb94 f6fe 	sdiv	r6, r4, lr
 800b098:	fb0e 4616 	mls	r6, lr, r6, r4
 800b09c:	b9fe      	cbnz	r6, 800b0de <__tzcalc_limits+0xbe>
 800b09e:	2a3b      	cmp	r2, #59	@ 0x3b
 800b0a0:	bfd4      	ite	le
 800b0a2:	2200      	movle	r2, #0
 800b0a4:	2201      	movgt	r2, #1
 800b0a6:	4413      	add	r3, r2
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	698a      	ldr	r2, [r1, #24]
 800b0ac:	17d6      	asrs	r6, r2, #31
 800b0ae:	fbc3 2607 	smlal	r2, r6, r3, r7
 800b0b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b0b4:	18d2      	adds	r2, r2, r3
 800b0b6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800b0ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800b0be:	3128      	adds	r1, #40	@ 0x28
 800b0c0:	458c      	cmp	ip, r1
 800b0c2:	d1d6      	bne.n	800b072 <__tzcalc_limits+0x52>
 800b0c4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800b0c8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800b0cc:	428c      	cmp	r4, r1
 800b0ce:	4193      	sbcs	r3, r2
 800b0d0:	bfb4      	ite	lt
 800b0d2:	2301      	movlt	r3, #1
 800b0d4:	2300      	movge	r3, #0
 800b0d6:	6003      	str	r3, [r0, #0]
 800b0d8:	2001      	movs	r0, #1
 800b0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0de:	2200      	movs	r2, #0
 800b0e0:	e7e1      	b.n	800b0a6 <__tzcalc_limits+0x86>
 800b0e2:	2b44      	cmp	r3, #68	@ 0x44
 800b0e4:	d101      	bne.n	800b0ea <__tzcalc_limits+0xca>
 800b0e6:	18ab      	adds	r3, r5, r2
 800b0e8:	e7df      	b.n	800b0aa <__tzcalc_limits+0x8a>
 800b0ea:	07a3      	lsls	r3, r4, #30
 800b0ec:	d105      	bne.n	800b0fa <__tzcalc_limits+0xda>
 800b0ee:	2664      	movs	r6, #100	@ 0x64
 800b0f0:	fb94 f3f6 	sdiv	r3, r4, r6
 800b0f4:	fb06 4313 	mls	r3, r6, r3, r4
 800b0f8:	bb73      	cbnz	r3, 800b158 <__tzcalc_limits+0x138>
 800b0fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b0fe:	fb94 f6f3 	sdiv	r6, r4, r3
 800b102:	fb03 4616 	mls	r6, r3, r6, r4
 800b106:	fab6 f686 	clz	r6, r6
 800b10a:	0976      	lsrs	r6, r6, #5
 800b10c:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800b110:	462b      	mov	r3, r5
 800b112:	f04f 0800 	mov.w	r8, #0
 800b116:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800b16c <__tzcalc_limits+0x14c>
 800b11a:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b11e:	fb0a e606 	mla	r6, sl, r6, lr
 800b122:	f108 0801 	add.w	r8, r8, #1
 800b126:	45c1      	cmp	r9, r8
 800b128:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800b12c:	dc16      	bgt.n	800b15c <__tzcalc_limits+0x13c>
 800b12e:	2607      	movs	r6, #7
 800b130:	f103 0804 	add.w	r8, r3, #4
 800b134:	fb98 f6f6 	sdiv	r6, r8, r6
 800b138:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b13c:	eba8 0606 	sub.w	r6, r8, r6
 800b140:	1b92      	subs	r2, r2, r6
 800b142:	690e      	ldr	r6, [r1, #16]
 800b144:	bf48      	it	mi
 800b146:	3207      	addmi	r2, #7
 800b148:	3e01      	subs	r6, #1
 800b14a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b14e:	4432      	add	r2, r6
 800b150:	4572      	cmp	r2, lr
 800b152:	da05      	bge.n	800b160 <__tzcalc_limits+0x140>
 800b154:	4413      	add	r3, r2
 800b156:	e7a8      	b.n	800b0aa <__tzcalc_limits+0x8a>
 800b158:	2601      	movs	r6, #1
 800b15a:	e7d7      	b.n	800b10c <__tzcalc_limits+0xec>
 800b15c:	4473      	add	r3, lr
 800b15e:	e7e0      	b.n	800b122 <__tzcalc_limits+0x102>
 800b160:	3a07      	subs	r2, #7
 800b162:	e7f5      	b.n	800b150 <__tzcalc_limits+0x130>
 800b164:	2000      	movs	r0, #0
 800b166:	e7b8      	b.n	800b0da <__tzcalc_limits+0xba>
 800b168:	00015180 	.word	0x00015180
 800b16c:	0800f26c 	.word	0x0800f26c

0800b170 <__tz_lock>:
 800b170:	4801      	ldr	r0, [pc, #4]	@ (800b178 <__tz_lock+0x8>)
 800b172:	f000 baa8 	b.w	800b6c6 <__retarget_lock_acquire>
 800b176:	bf00      	nop
 800b178:	20000c44 	.word	0x20000c44

0800b17c <__tz_unlock>:
 800b17c:	4801      	ldr	r0, [pc, #4]	@ (800b184 <__tz_unlock+0x8>)
 800b17e:	f000 baa4 	b.w	800b6ca <__retarget_lock_release>
 800b182:	bf00      	nop
 800b184:	20000c44 	.word	0x20000c44

0800b188 <_tzset_unlocked>:
 800b188:	4b01      	ldr	r3, [pc, #4]	@ (800b190 <_tzset_unlocked+0x8>)
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	f000 b802 	b.w	800b194 <_tzset_unlocked_r>
 800b190:	20000194 	.word	0x20000194

0800b194 <_tzset_unlocked_r>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	b08d      	sub	sp, #52	@ 0x34
 800b19a:	4607      	mov	r7, r0
 800b19c:	f002 fbb6 	bl	800d90c <__gettzinfo>
 800b1a0:	496d      	ldr	r1, [pc, #436]	@ (800b358 <_tzset_unlocked_r+0x1c4>)
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	f001 fcd9 	bl	800cb5c <_getenv_r>
 800b1aa:	4d6c      	ldr	r5, [pc, #432]	@ (800b35c <_tzset_unlocked_r+0x1c8>)
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	bb10      	cbnz	r0, 800b1f6 <_tzset_unlocked_r+0x62>
 800b1b0:	4b6b      	ldr	r3, [pc, #428]	@ (800b360 <_tzset_unlocked_r+0x1cc>)
 800b1b2:	4a6c      	ldr	r2, [pc, #432]	@ (800b364 <_tzset_unlocked_r+0x1d0>)
 800b1b4:	6018      	str	r0, [r3, #0]
 800b1b6:	4b6c      	ldr	r3, [pc, #432]	@ (800b368 <_tzset_unlocked_r+0x1d4>)
 800b1b8:	214a      	movs	r1, #74	@ 0x4a
 800b1ba:	6018      	str	r0, [r3, #0]
 800b1bc:	4b6b      	ldr	r3, [pc, #428]	@ (800b36c <_tzset_unlocked_r+0x1d8>)
 800b1be:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b1c2:	e9c3 2200 	strd	r2, r2, [r3]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b1ce:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b1d2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b1d6:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b1d8:	6520      	str	r0, [r4, #80]	@ 0x50
 800b1da:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b1de:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b1e2:	6828      	ldr	r0, [r5, #0]
 800b1e4:	7221      	strb	r1, [r4, #8]
 800b1e6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b1ea:	f001 fcc7 	bl	800cb7c <free>
 800b1ee:	602e      	str	r6, [r5, #0]
 800b1f0:	b00d      	add	sp, #52	@ 0x34
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	6829      	ldr	r1, [r5, #0]
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	f040 808e 	bne.w	800b31a <_tzset_unlocked_r+0x186>
 800b1fe:	6828      	ldr	r0, [r5, #0]
 800b200:	f001 fcbc 	bl	800cb7c <free>
 800b204:	4630      	mov	r0, r6
 800b206:	f7f4 ffad 	bl	8000164 <strlen>
 800b20a:	1c41      	adds	r1, r0, #1
 800b20c:	4638      	mov	r0, r7
 800b20e:	f001 fcdf 	bl	800cbd0 <_malloc_r>
 800b212:	6028      	str	r0, [r5, #0]
 800b214:	2800      	cmp	r0, #0
 800b216:	f040 8086 	bne.w	800b326 <_tzset_unlocked_r+0x192>
 800b21a:	2300      	movs	r3, #0
 800b21c:	4a52      	ldr	r2, [pc, #328]	@ (800b368 <_tzset_unlocked_r+0x1d4>)
 800b21e:	2000      	movs	r0, #0
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	2100      	movs	r1, #0
 800b224:	4a52      	ldr	r2, [pc, #328]	@ (800b370 <_tzset_unlocked_r+0x1dc>)
 800b226:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800b36c <_tzset_unlocked_r+0x1d8>
 800b22a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b22e:	e9c8 2200 	strd	r2, r2, [r8]
 800b232:	224a      	movs	r2, #74	@ 0x4a
 800b234:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b238:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b23c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b240:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b244:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b248:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800b360 <_tzset_unlocked_r+0x1cc>
 800b24c:	7222      	strb	r2, [r4, #8]
 800b24e:	f8ca 3000 	str.w	r3, [sl]
 800b252:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b254:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b258:	6523      	str	r3, [r4, #80]	@ 0x50
 800b25a:	7833      	ldrb	r3, [r6, #0]
 800b25c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b25e:	bf08      	it	eq
 800b260:	3601      	addeq	r6, #1
 800b262:	7833      	ldrb	r3, [r6, #0]
 800b264:	2b3c      	cmp	r3, #60	@ 0x3c
 800b266:	d162      	bne.n	800b32e <_tzset_unlocked_r+0x19a>
 800b268:	1c75      	adds	r5, r6, #1
 800b26a:	4628      	mov	r0, r5
 800b26c:	4a41      	ldr	r2, [pc, #260]	@ (800b374 <_tzset_unlocked_r+0x1e0>)
 800b26e:	4942      	ldr	r1, [pc, #264]	@ (800b378 <_tzset_unlocked_r+0x1e4>)
 800b270:	ab0a      	add	r3, sp, #40	@ 0x28
 800b272:	f002 fb21 	bl	800d8b8 <siscanf>
 800b276:	2800      	cmp	r0, #0
 800b278:	ddba      	ble.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b27a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27c:	1eda      	subs	r2, r3, #3
 800b27e:	2a07      	cmp	r2, #7
 800b280:	d8b6      	bhi.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b282:	5ceb      	ldrb	r3, [r5, r3]
 800b284:	2b3e      	cmp	r3, #62	@ 0x3e
 800b286:	d1b3      	bne.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b288:	3602      	adds	r6, #2
 800b28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28c:	18f5      	adds	r5, r6, r3
 800b28e:	5cf3      	ldrb	r3, [r6, r3]
 800b290:	2b2d      	cmp	r3, #45	@ 0x2d
 800b292:	d15a      	bne.n	800b34a <_tzset_unlocked_r+0x1b6>
 800b294:	f04f 39ff 	mov.w	r9, #4294967295
 800b298:	3501      	adds	r5, #1
 800b29a:	2300      	movs	r3, #0
 800b29c:	af08      	add	r7, sp, #32
 800b29e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b2a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b2a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2a8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	f10d 031e 	add.w	r3, sp, #30
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	4931      	ldr	r1, [pc, #196]	@ (800b37c <_tzset_unlocked_r+0x1e8>)
 800b2b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2ba:	aa07      	add	r2, sp, #28
 800b2bc:	f002 fafc 	bl	800d8b8 <siscanf>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	dd95      	ble.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b2c4:	223c      	movs	r2, #60	@ 0x3c
 800b2c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b2ca:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b2ce:	fb02 6603 	mla	r6, r2, r3, r6
 800b2d2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b2d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b2da:	fb02 6603 	mla	r6, r2, r3, r6
 800b2de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2e0:	fb09 f606 	mul.w	r6, r9, r6
 800b2e4:	eb05 0903 	add.w	r9, r5, r3
 800b2e8:	5ceb      	ldrb	r3, [r5, r3]
 800b2ea:	2b3c      	cmp	r3, #60	@ 0x3c
 800b2ec:	f040 80e8 	bne.w	800b4c0 <_tzset_unlocked_r+0x32c>
 800b2f0:	f109 0501 	add.w	r5, r9, #1
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	4a22      	ldr	r2, [pc, #136]	@ (800b380 <_tzset_unlocked_r+0x1ec>)
 800b2f8:	491f      	ldr	r1, [pc, #124]	@ (800b378 <_tzset_unlocked_r+0x1e4>)
 800b2fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2fc:	f002 fadc 	bl	800d8b8 <siscanf>
 800b300:	2800      	cmp	r0, #0
 800b302:	dc41      	bgt.n	800b388 <_tzset_unlocked_r+0x1f4>
 800b304:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b308:	2b3e      	cmp	r3, #62	@ 0x3e
 800b30a:	d13d      	bne.n	800b388 <_tzset_unlocked_r+0x1f4>
 800b30c:	4b19      	ldr	r3, [pc, #100]	@ (800b374 <_tzset_unlocked_r+0x1e0>)
 800b30e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b310:	e9c8 3300 	strd	r3, r3, [r8]
 800b314:	f8ca 6000 	str.w	r6, [sl]
 800b318:	e76a      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b31a:	f7f4 ff19 	bl	8000150 <strcmp>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f47f af6d 	bne.w	800b1fe <_tzset_unlocked_r+0x6a>
 800b324:	e764      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b326:	4631      	mov	r1, r6
 800b328:	f000 f9d1 	bl	800b6ce <strcpy>
 800b32c:	e775      	b.n	800b21a <_tzset_unlocked_r+0x86>
 800b32e:	4630      	mov	r0, r6
 800b330:	4a10      	ldr	r2, [pc, #64]	@ (800b374 <_tzset_unlocked_r+0x1e0>)
 800b332:	4914      	ldr	r1, [pc, #80]	@ (800b384 <_tzset_unlocked_r+0x1f0>)
 800b334:	ab0a      	add	r3, sp, #40	@ 0x28
 800b336:	f002 fabf 	bl	800d8b8 <siscanf>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f77f af58 	ble.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b342:	3b03      	subs	r3, #3
 800b344:	2b07      	cmp	r3, #7
 800b346:	d9a0      	bls.n	800b28a <_tzset_unlocked_r+0xf6>
 800b348:	e752      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b34a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b34c:	f04f 0901 	mov.w	r9, #1
 800b350:	bf08      	it	eq
 800b352:	3501      	addeq	r5, #1
 800b354:	e7a1      	b.n	800b29a <_tzset_unlocked_r+0x106>
 800b356:	bf00      	nop
 800b358:	0800efd4 	.word	0x0800efd4
 800b35c:	20000c1c 	.word	0x20000c1c
 800b360:	20000c38 	.word	0x20000c38
 800b364:	0800efd7 	.word	0x0800efd7
 800b368:	20000c3c 	.word	0x20000c3c
 800b36c:	20000020 	.word	0x20000020
 800b370:	0800f30b 	.word	0x0800f30b
 800b374:	20000c2c 	.word	0x20000c2c
 800b378:	0800efdb 	.word	0x0800efdb
 800b37c:	0800f010 	.word	0x0800f010
 800b380:	20000c20 	.word	0x20000c20
 800b384:	0800efee 	.word	0x0800efee
 800b388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b38a:	1eda      	subs	r2, r3, #3
 800b38c:	2a07      	cmp	r2, #7
 800b38e:	f63f af2f 	bhi.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b392:	5ceb      	ldrb	r3, [r5, r3]
 800b394:	2b3e      	cmp	r3, #62	@ 0x3e
 800b396:	f47f af2b 	bne.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b39a:	f109 0902 	add.w	r9, r9, #2
 800b39e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a0:	eb09 0503 	add.w	r5, r9, r3
 800b3a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b3a8:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3aa:	f040 8098 	bne.w	800b4de <_tzset_unlocked_r+0x34a>
 800b3ae:	f04f 39ff 	mov.w	r9, #4294967295
 800b3b2:	3501      	adds	r5, #1
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b3ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b3be:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3c6:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	f10d 031e 	add.w	r3, sp, #30
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	497a      	ldr	r1, [pc, #488]	@ (800b5c0 <_tzset_unlocked_r+0x42c>)
 800b3d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3d8:	aa07      	add	r2, sp, #28
 800b3da:	f002 fa6d 	bl	800d8b8 <siscanf>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f300 8083 	bgt.w	800b4ea <_tzset_unlocked_r+0x356>
 800b3e4:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b3e8:	4627      	mov	r7, r4
 800b3ea:	f04f 0b00 	mov.w	fp, #0
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3f2:	441d      	add	r5, r3
 800b3f4:	782b      	ldrb	r3, [r5, #0]
 800b3f6:	2b2c      	cmp	r3, #44	@ 0x2c
 800b3f8:	bf08      	it	eq
 800b3fa:	3501      	addeq	r5, #1
 800b3fc:	f895 9000 	ldrb.w	r9, [r5]
 800b400:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b404:	f040 8084 	bne.w	800b510 <_tzset_unlocked_r+0x37c>
 800b408:	ab0a      	add	r3, sp, #40	@ 0x28
 800b40a:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b40e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b412:	aa09      	add	r2, sp, #36	@ 0x24
 800b414:	9200      	str	r2, [sp, #0]
 800b416:	4628      	mov	r0, r5
 800b418:	496a      	ldr	r1, [pc, #424]	@ (800b5c4 <_tzset_unlocked_r+0x430>)
 800b41a:	9303      	str	r3, [sp, #12]
 800b41c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b420:	f002 fa4a 	bl	800d8b8 <siscanf>
 800b424:	2803      	cmp	r0, #3
 800b426:	f47f aee3 	bne.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b42a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b42e:	1e4b      	subs	r3, r1, #1
 800b430:	2b0b      	cmp	r3, #11
 800b432:	f63f aedd 	bhi.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b436:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b43a:	1e53      	subs	r3, r2, #1
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	f63f aed7 	bhi.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b442:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b446:	2b06      	cmp	r3, #6
 800b448:	f63f aed2 	bhi.w	800b1f0 <_tzset_unlocked_r+0x5c>
 800b44c:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b450:	f887 9008 	strb.w	r9, [r7, #8]
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b458:	eb05 0903 	add.w	r9, r5, r3
 800b45c:	2500      	movs	r5, #0
 800b45e:	f04f 0302 	mov.w	r3, #2
 800b462:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b466:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b46a:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b46e:	950a      	str	r5, [sp, #40]	@ 0x28
 800b470:	f899 3000 	ldrb.w	r3, [r9]
 800b474:	2b2f      	cmp	r3, #47	@ 0x2f
 800b476:	d177      	bne.n	800b568 <_tzset_unlocked_r+0x3d4>
 800b478:	ab0a      	add	r3, sp, #40	@ 0x28
 800b47a:	aa08      	add	r2, sp, #32
 800b47c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b480:	f10d 021e 	add.w	r2, sp, #30
 800b484:	9200      	str	r2, [sp, #0]
 800b486:	4648      	mov	r0, r9
 800b488:	494f      	ldr	r1, [pc, #316]	@ (800b5c8 <_tzset_unlocked_r+0x434>)
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	aa07      	add	r2, sp, #28
 800b48e:	f002 fa13 	bl	800d8b8 <siscanf>
 800b492:	42a8      	cmp	r0, r5
 800b494:	dc68      	bgt.n	800b568 <_tzset_unlocked_r+0x3d4>
 800b496:	214a      	movs	r1, #74	@ 0x4a
 800b498:	2200      	movs	r2, #0
 800b49a:	2300      	movs	r3, #0
 800b49c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b4a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b4a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b4ac:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b4b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b4b4:	7221      	strb	r1, [r4, #8]
 800b4b6:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b4b8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b4bc:	6525      	str	r5, [r4, #80]	@ 0x50
 800b4be:	e697      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b4c0:	4648      	mov	r0, r9
 800b4c2:	4a42      	ldr	r2, [pc, #264]	@ (800b5cc <_tzset_unlocked_r+0x438>)
 800b4c4:	4942      	ldr	r1, [pc, #264]	@ (800b5d0 <_tzset_unlocked_r+0x43c>)
 800b4c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4c8:	f002 f9f6 	bl	800d8b8 <siscanf>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f77f af1d 	ble.w	800b30c <_tzset_unlocked_r+0x178>
 800b4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d4:	3b03      	subs	r3, #3
 800b4d6:	2b07      	cmp	r3, #7
 800b4d8:	f67f af61 	bls.w	800b39e <_tzset_unlocked_r+0x20a>
 800b4dc:	e688      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b4de:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4e0:	f04f 0901 	mov.w	r9, #1
 800b4e4:	bf08      	it	eq
 800b4e6:	3501      	addeq	r5, #1
 800b4e8:	e764      	b.n	800b3b4 <_tzset_unlocked_r+0x220>
 800b4ea:	213c      	movs	r1, #60	@ 0x3c
 800b4ec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b4f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b4f4:	fb01 3302 	mla	r3, r1, r2, r3
 800b4f8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b4fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b500:	fb01 3302 	mla	r3, r1, r2, r3
 800b504:	fb09 f303 	mul.w	r3, r9, r3
 800b508:	e76e      	b.n	800b3e8 <_tzset_unlocked_r+0x254>
 800b50a:	f04f 0b01 	mov.w	fp, #1
 800b50e:	e771      	b.n	800b3f4 <_tzset_unlocked_r+0x260>
 800b510:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b514:	bf0a      	itet	eq
 800b516:	464b      	moveq	r3, r9
 800b518:	2344      	movne	r3, #68	@ 0x44
 800b51a:	3501      	addeq	r5, #1
 800b51c:	220a      	movs	r2, #10
 800b51e:	4628      	mov	r0, r5
 800b520:	a90b      	add	r1, sp, #44	@ 0x2c
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	f002 f908 	bl	800d738 <strtoul>
 800b528:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b52c:	9b05      	ldr	r3, [sp, #20]
 800b52e:	45a9      	cmp	r9, r5
 800b530:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b534:	d114      	bne.n	800b560 <_tzset_unlocked_r+0x3cc>
 800b536:	234d      	movs	r3, #77	@ 0x4d
 800b538:	f1bb 0f00 	cmp.w	fp, #0
 800b53c:	d107      	bne.n	800b54e <_tzset_unlocked_r+0x3ba>
 800b53e:	2103      	movs	r1, #3
 800b540:	7223      	strb	r3, [r4, #8]
 800b542:	2302      	movs	r3, #2
 800b544:	f8c4 b014 	str.w	fp, [r4, #20]
 800b548:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b54c:	e786      	b.n	800b45c <_tzset_unlocked_r+0x2c8>
 800b54e:	220b      	movs	r2, #11
 800b550:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b554:	2301      	movs	r3, #1
 800b556:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b55a:	2300      	movs	r3, #0
 800b55c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b55e:	e77d      	b.n	800b45c <_tzset_unlocked_r+0x2c8>
 800b560:	b280      	uxth	r0, r0
 800b562:	723b      	strb	r3, [r7, #8]
 800b564:	6178      	str	r0, [r7, #20]
 800b566:	e779      	b.n	800b45c <_tzset_unlocked_r+0x2c8>
 800b568:	213c      	movs	r1, #60	@ 0x3c
 800b56a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b56e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b572:	3728      	adds	r7, #40	@ 0x28
 800b574:	fb01 3302 	mla	r3, r1, r2, r3
 800b578:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b57c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b580:	fb01 3302 	mla	r3, r1, r2, r3
 800b584:	f847 3c10 	str.w	r3, [r7, #-16]
 800b588:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b58a:	444d      	add	r5, r9
 800b58c:	f1bb 0f00 	cmp.w	fp, #0
 800b590:	d0bb      	beq.n	800b50a <_tzset_unlocked_r+0x376>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	6860      	ldr	r0, [r4, #4]
 800b596:	6523      	str	r3, [r4, #80]	@ 0x50
 800b598:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d4 <_tzset_unlocked_r+0x440>)
 800b59a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b59c:	f8c8 3000 	str.w	r3, [r8]
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5cc <_tzset_unlocked_r+0x438>)
 800b5a2:	f8c8 3004 	str.w	r3, [r8, #4]
 800b5a6:	f7ff fd3b 	bl	800b020 <__tzcalc_limits>
 800b5aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b5ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b5ae:	f8ca 2000 	str.w	r2, [sl]
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	bf18      	it	ne
 800b5b6:	2301      	movne	r3, #1
 800b5b8:	4a07      	ldr	r2, [pc, #28]	@ (800b5d8 <_tzset_unlocked_r+0x444>)
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	e618      	b.n	800b1f0 <_tzset_unlocked_r+0x5c>
 800b5be:	bf00      	nop
 800b5c0:	0800f010 	.word	0x0800f010
 800b5c4:	0800effc 	.word	0x0800effc
 800b5c8:	0800f00f 	.word	0x0800f00f
 800b5cc:	20000c20 	.word	0x20000c20
 800b5d0:	0800efee 	.word	0x0800efee
 800b5d4:	20000c2c 	.word	0x20000c2c
 800b5d8:	20000c3c 	.word	0x20000c3c

0800b5dc <_localeconv_r>:
 800b5dc:	4800      	ldr	r0, [pc, #0]	@ (800b5e0 <_localeconv_r+0x4>)
 800b5de:	4770      	bx	lr
 800b5e0:	20000118 	.word	0x20000118

0800b5e4 <_close_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	4d05      	ldr	r5, [pc, #20]	@ (800b600 <_close_r+0x1c>)
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	f7f9 f9f5 	bl	80049de <_close>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_close_r+0x1a>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_close_r+0x1a>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	20000c40 	.word	0x20000c40

0800b604 <_lseek_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4604      	mov	r4, r0
 800b608:	4608      	mov	r0, r1
 800b60a:	4611      	mov	r1, r2
 800b60c:	2200      	movs	r2, #0
 800b60e:	4d05      	ldr	r5, [pc, #20]	@ (800b624 <_lseek_r+0x20>)
 800b610:	602a      	str	r2, [r5, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	f7f9 fa07 	bl	8004a26 <_lseek>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_lseek_r+0x1e>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_lseek_r+0x1e>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	20000c40 	.word	0x20000c40

0800b628 <_read_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	4611      	mov	r1, r2
 800b630:	2200      	movs	r2, #0
 800b632:	4d05      	ldr	r5, [pc, #20]	@ (800b648 <_read_r+0x20>)
 800b634:	602a      	str	r2, [r5, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	f7f9 f998 	bl	800496c <_read>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_read_r+0x1e>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_read_r+0x1e>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	20000c40 	.word	0x20000c40

0800b64c <_write_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	2200      	movs	r2, #0
 800b656:	4d05      	ldr	r5, [pc, #20]	@ (800b66c <_write_r+0x20>)
 800b658:	602a      	str	r2, [r5, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f7f9 f9a3 	bl	80049a6 <_write>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_write_r+0x1e>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_write_r+0x1e>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	20000c40 	.word	0x20000c40

0800b670 <__errno>:
 800b670:	4b01      	ldr	r3, [pc, #4]	@ (800b678 <__errno+0x8>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000194 	.word	0x20000194

0800b67c <__libc_init_array>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	2600      	movs	r6, #0
 800b680:	4d0c      	ldr	r5, [pc, #48]	@ (800b6b4 <__libc_init_array+0x38>)
 800b682:	4c0d      	ldr	r4, [pc, #52]	@ (800b6b8 <__libc_init_array+0x3c>)
 800b684:	1b64      	subs	r4, r4, r5
 800b686:	10a4      	asrs	r4, r4, #2
 800b688:	42a6      	cmp	r6, r4
 800b68a:	d109      	bne.n	800b6a0 <__libc_init_array+0x24>
 800b68c:	f003 fb6e 	bl	800ed6c <_init>
 800b690:	2600      	movs	r6, #0
 800b692:	4d0a      	ldr	r5, [pc, #40]	@ (800b6bc <__libc_init_array+0x40>)
 800b694:	4c0a      	ldr	r4, [pc, #40]	@ (800b6c0 <__libc_init_array+0x44>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	42a6      	cmp	r6, r4
 800b69c:	d105      	bne.n	800b6aa <__libc_init_array+0x2e>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a4:	4798      	blx	r3
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	e7ee      	b.n	800b688 <__libc_init_array+0xc>
 800b6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ae:	4798      	blx	r3
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	e7f2      	b.n	800b69a <__libc_init_array+0x1e>
 800b6b4:	0800f378 	.word	0x0800f378
 800b6b8:	0800f378 	.word	0x0800f378
 800b6bc:	0800f378 	.word	0x0800f378
 800b6c0:	0800f37c 	.word	0x0800f37c

0800b6c4 <__retarget_lock_init_recursive>:
 800b6c4:	4770      	bx	lr

0800b6c6 <__retarget_lock_acquire>:
 800b6c6:	4770      	bx	lr

0800b6c8 <__retarget_lock_acquire_recursive>:
 800b6c8:	4770      	bx	lr

0800b6ca <__retarget_lock_release>:
 800b6ca:	4770      	bx	lr

0800b6cc <__retarget_lock_release_recursive>:
 800b6cc:	4770      	bx	lr

0800b6ce <strcpy>:
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d4:	f803 2b01 	strb.w	r2, [r3], #1
 800b6d8:	2a00      	cmp	r2, #0
 800b6da:	d1f9      	bne.n	800b6d0 <strcpy+0x2>
 800b6dc:	4770      	bx	lr

0800b6de <memchr>:
 800b6de:	4603      	mov	r3, r0
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	b2c9      	uxtb	r1, r1
 800b6e4:	4402      	add	r2, r0
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	d101      	bne.n	800b6f0 <memchr+0x12>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e003      	b.n	800b6f8 <memchr+0x1a>
 800b6f0:	7804      	ldrb	r4, [r0, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	428c      	cmp	r4, r1
 800b6f6:	d1f6      	bne.n	800b6e6 <memchr+0x8>
 800b6f8:	bd10      	pop	{r4, pc}

0800b6fa <memcpy>:
 800b6fa:	440a      	add	r2, r1
 800b6fc:	4291      	cmp	r1, r2
 800b6fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800b702:	d100      	bne.n	800b706 <memcpy+0xc>
 800b704:	4770      	bx	lr
 800b706:	b510      	push	{r4, lr}
 800b708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b70c:	4291      	cmp	r1, r2
 800b70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b712:	d1f9      	bne.n	800b708 <memcpy+0xe>
 800b714:	bd10      	pop	{r4, pc}
	...

0800b718 <nan>:
 800b718:	2000      	movs	r0, #0
 800b71a:	4901      	ldr	r1, [pc, #4]	@ (800b720 <nan+0x8>)
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	7ff80000 	.word	0x7ff80000

0800b724 <nanf>:
 800b724:	4800      	ldr	r0, [pc, #0]	@ (800b728 <nanf+0x4>)
 800b726:	4770      	bx	lr
 800b728:	7fc00000 	.word	0x7fc00000

0800b72c <div>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	fb91 f4f2 	sdiv	r4, r1, r2
 800b732:	fb02 1114 	mls	r1, r2, r4, r1
 800b736:	6004      	str	r4, [r0, #0]
 800b738:	6041      	str	r1, [r0, #4]
 800b73a:	bd10      	pop	{r4, pc}

0800b73c <quorem>:
 800b73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	6903      	ldr	r3, [r0, #16]
 800b742:	690c      	ldr	r4, [r1, #16]
 800b744:	4607      	mov	r7, r0
 800b746:	42a3      	cmp	r3, r4
 800b748:	db7e      	blt.n	800b848 <quorem+0x10c>
 800b74a:	3c01      	subs	r4, #1
 800b74c:	00a3      	lsls	r3, r4, #2
 800b74e:	f100 0514 	add.w	r5, r0, #20
 800b752:	f101 0814 	add.w	r8, r1, #20
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b766:	3301      	adds	r3, #1
 800b768:	429a      	cmp	r2, r3
 800b76a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b76e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b772:	d32e      	bcc.n	800b7d2 <quorem+0x96>
 800b774:	f04f 0a00 	mov.w	sl, #0
 800b778:	46c4      	mov	ip, r8
 800b77a:	46ae      	mov	lr, r5
 800b77c:	46d3      	mov	fp, sl
 800b77e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b782:	b298      	uxth	r0, r3
 800b784:	fb06 a000 	mla	r0, r6, r0, sl
 800b788:	0c1b      	lsrs	r3, r3, #16
 800b78a:	0c02      	lsrs	r2, r0, #16
 800b78c:	fb06 2303 	mla	r3, r6, r3, r2
 800b790:	f8de 2000 	ldr.w	r2, [lr]
 800b794:	b280      	uxth	r0, r0
 800b796:	b292      	uxth	r2, r2
 800b798:	1a12      	subs	r2, r2, r0
 800b79a:	445a      	add	r2, fp
 800b79c:	f8de 0000 	ldr.w	r0, [lr]
 800b7a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7b4:	45e1      	cmp	r9, ip
 800b7b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7ba:	f84e 2b04 	str.w	r2, [lr], #4
 800b7be:	d2de      	bcs.n	800b77e <quorem+0x42>
 800b7c0:	9b00      	ldr	r3, [sp, #0]
 800b7c2:	58eb      	ldr	r3, [r5, r3]
 800b7c4:	b92b      	cbnz	r3, 800b7d2 <quorem+0x96>
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	d32f      	bcc.n	800b830 <quorem+0xf4>
 800b7d0:	613c      	str	r4, [r7, #16]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f001 fd5c 	bl	800d290 <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	db25      	blt.n	800b828 <quorem+0xec>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7e4:	f8d1 c000 	ldr.w	ip, [r1]
 800b7e8:	fa1f fe82 	uxth.w	lr, r2
 800b7ec:	fa1f f38c 	uxth.w	r3, ip
 800b7f0:	eba3 030e 	sub.w	r3, r3, lr
 800b7f4:	4403      	add	r3, r0
 800b7f6:	0c12      	lsrs	r2, r2, #16
 800b7f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b806:	45c1      	cmp	r9, r8
 800b808:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b80c:	f841 3b04 	str.w	r3, [r1], #4
 800b810:	d2e6      	bcs.n	800b7e0 <quorem+0xa4>
 800b812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b81a:	b922      	cbnz	r2, 800b826 <quorem+0xea>
 800b81c:	3b04      	subs	r3, #4
 800b81e:	429d      	cmp	r5, r3
 800b820:	461a      	mov	r2, r3
 800b822:	d30b      	bcc.n	800b83c <quorem+0x100>
 800b824:	613c      	str	r4, [r7, #16]
 800b826:	3601      	adds	r6, #1
 800b828:	4630      	mov	r0, r6
 800b82a:	b003      	add	sp, #12
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	6812      	ldr	r2, [r2, #0]
 800b832:	3b04      	subs	r3, #4
 800b834:	2a00      	cmp	r2, #0
 800b836:	d1cb      	bne.n	800b7d0 <quorem+0x94>
 800b838:	3c01      	subs	r4, #1
 800b83a:	e7c6      	b.n	800b7ca <quorem+0x8e>
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	3b04      	subs	r3, #4
 800b840:	2a00      	cmp	r2, #0
 800b842:	d1ef      	bne.n	800b824 <quorem+0xe8>
 800b844:	3c01      	subs	r4, #1
 800b846:	e7ea      	b.n	800b81e <quorem+0xe2>
 800b848:	2000      	movs	r0, #0
 800b84a:	e7ee      	b.n	800b82a <quorem+0xee>
 800b84c:	0000      	movs	r0, r0
	...

0800b850 <_dtoa_r>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	4614      	mov	r4, r2
 800b856:	461d      	mov	r5, r3
 800b858:	69c7      	ldr	r7, [r0, #28]
 800b85a:	b097      	sub	sp, #92	@ 0x5c
 800b85c:	4683      	mov	fp, r0
 800b85e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b862:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b864:	b97f      	cbnz	r7, 800b886 <_dtoa_r+0x36>
 800b866:	2010      	movs	r0, #16
 800b868:	f001 f980 	bl	800cb6c <malloc>
 800b86c:	4602      	mov	r2, r0
 800b86e:	f8cb 001c 	str.w	r0, [fp, #28]
 800b872:	b920      	cbnz	r0, 800b87e <_dtoa_r+0x2e>
 800b874:	21ef      	movs	r1, #239	@ 0xef
 800b876:	4ba8      	ldr	r3, [pc, #672]	@ (800bb18 <_dtoa_r+0x2c8>)
 800b878:	48a8      	ldr	r0, [pc, #672]	@ (800bb1c <_dtoa_r+0x2cc>)
 800b87a:	f002 f85b 	bl	800d934 <__assert_func>
 800b87e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b882:	6007      	str	r7, [r0, #0]
 800b884:	60c7      	str	r7, [r0, #12]
 800b886:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b88a:	6819      	ldr	r1, [r3, #0]
 800b88c:	b159      	cbz	r1, 800b8a6 <_dtoa_r+0x56>
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	2301      	movs	r3, #1
 800b892:	4093      	lsls	r3, r2
 800b894:	604a      	str	r2, [r1, #4]
 800b896:	608b      	str	r3, [r1, #8]
 800b898:	4658      	mov	r0, fp
 800b89a:	f001 fa77 	bl	800cd8c <_Bfree>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	1e2b      	subs	r3, r5, #0
 800b8a8:	bfaf      	iteee	ge
 800b8aa:	2300      	movge	r3, #0
 800b8ac:	2201      	movlt	r2, #1
 800b8ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8b2:	9303      	strlt	r3, [sp, #12]
 800b8b4:	bfa8      	it	ge
 800b8b6:	6033      	strge	r3, [r6, #0]
 800b8b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b8bc:	4b98      	ldr	r3, [pc, #608]	@ (800bb20 <_dtoa_r+0x2d0>)
 800b8be:	bfb8      	it	lt
 800b8c0:	6032      	strlt	r2, [r6, #0]
 800b8c2:	ea33 0308 	bics.w	r3, r3, r8
 800b8c6:	d112      	bne.n	800b8ee <_dtoa_r+0x9e>
 800b8c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b8d4:	4323      	orrs	r3, r4
 800b8d6:	f000 8550 	beq.w	800c37a <_dtoa_r+0xb2a>
 800b8da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b8dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800bb24 <_dtoa_r+0x2d4>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8552 	beq.w	800c38a <_dtoa_r+0xb3a>
 800b8e6:	f10a 0303 	add.w	r3, sl, #3
 800b8ea:	f000 bd4c 	b.w	800c386 <_dtoa_r+0xb36>
 800b8ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b8f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f7f5 f85d 	bl	80009bc <__aeabi_dcmpeq>
 800b902:	4607      	mov	r7, r0
 800b904:	b158      	cbz	r0, 800b91e <_dtoa_r+0xce>
 800b906:	2301      	movs	r3, #1
 800b908:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b90e:	b113      	cbz	r3, 800b916 <_dtoa_r+0xc6>
 800b910:	4b85      	ldr	r3, [pc, #532]	@ (800bb28 <_dtoa_r+0x2d8>)
 800b912:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b914:	6013      	str	r3, [r2, #0]
 800b916:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bb2c <_dtoa_r+0x2dc>
 800b91a:	f000 bd36 	b.w	800c38a <_dtoa_r+0xb3a>
 800b91e:	ab14      	add	r3, sp, #80	@ 0x50
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	ab15      	add	r3, sp, #84	@ 0x54
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	4658      	mov	r0, fp
 800b928:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b92c:	f001 fdc8 	bl	800d4c0 <__d2b>
 800b930:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b934:	4681      	mov	r9, r0
 800b936:	2e00      	cmp	r6, #0
 800b938:	d077      	beq.n	800ba2a <_dtoa_r+0x1da>
 800b93a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b940:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b948:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b94c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b950:	9712      	str	r7, [sp, #72]	@ 0x48
 800b952:	4619      	mov	r1, r3
 800b954:	2200      	movs	r2, #0
 800b956:	4b76      	ldr	r3, [pc, #472]	@ (800bb30 <_dtoa_r+0x2e0>)
 800b958:	f7f4 fc10 	bl	800017c <__aeabi_dsub>
 800b95c:	a368      	add	r3, pc, #416	@ (adr r3, 800bb00 <_dtoa_r+0x2b0>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fdc3 	bl	80004ec <__aeabi_dmul>
 800b966:	a368      	add	r3, pc, #416	@ (adr r3, 800bb08 <_dtoa_r+0x2b8>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f7f4 fc08 	bl	8000180 <__adddf3>
 800b970:	4604      	mov	r4, r0
 800b972:	4630      	mov	r0, r6
 800b974:	460d      	mov	r5, r1
 800b976:	f7f4 fd4f 	bl	8000418 <__aeabi_i2d>
 800b97a:	a365      	add	r3, pc, #404	@ (adr r3, 800bb10 <_dtoa_r+0x2c0>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fdb4 	bl	80004ec <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4620      	mov	r0, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fbf8 	bl	8000180 <__adddf3>
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	f7f5 f85a 	bl	8000a4c <__aeabi_d2iz>
 800b998:	2200      	movs	r2, #0
 800b99a:	4607      	mov	r7, r0
 800b99c:	2300      	movs	r3, #0
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f5 f815 	bl	80009d0 <__aeabi_dcmplt>
 800b9a6:	b140      	cbz	r0, 800b9ba <_dtoa_r+0x16a>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7f4 fd35 	bl	8000418 <__aeabi_i2d>
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	f7f5 f803 	bl	80009bc <__aeabi_dcmpeq>
 800b9b6:	b900      	cbnz	r0, 800b9ba <_dtoa_r+0x16a>
 800b9b8:	3f01      	subs	r7, #1
 800b9ba:	2f16      	cmp	r7, #22
 800b9bc:	d853      	bhi.n	800ba66 <_dtoa_r+0x216>
 800b9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9c2:	4b5c      	ldr	r3, [pc, #368]	@ (800bb34 <_dtoa_r+0x2e4>)
 800b9c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f7f5 f800 	bl	80009d0 <__aeabi_dcmplt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d04a      	beq.n	800ba6a <_dtoa_r+0x21a>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	3f01      	subs	r7, #1
 800b9d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9dc:	1b9b      	subs	r3, r3, r6
 800b9de:	1e5a      	subs	r2, r3, #1
 800b9e0:	bf46      	itte	mi
 800b9e2:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9e6:	2300      	movmi	r3, #0
 800b9e8:	f04f 0800 	movpl.w	r8, #0
 800b9ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9ee:	bf48      	it	mi
 800b9f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b9f2:	2f00      	cmp	r7, #0
 800b9f4:	db3b      	blt.n	800ba6e <_dtoa_r+0x21e>
 800b9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f8:	970e      	str	r7, [sp, #56]	@ 0x38
 800b9fa:	443b      	add	r3, r7
 800b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fe:	2300      	movs	r3, #0
 800ba00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	d866      	bhi.n	800bad6 <_dtoa_r+0x286>
 800ba08:	2b05      	cmp	r3, #5
 800ba0a:	bfc4      	itt	gt
 800ba0c:	3b04      	subgt	r3, #4
 800ba0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ba10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba12:	bfc8      	it	gt
 800ba14:	2400      	movgt	r4, #0
 800ba16:	f1a3 0302 	sub.w	r3, r3, #2
 800ba1a:	bfd8      	it	le
 800ba1c:	2401      	movle	r4, #1
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d864      	bhi.n	800baec <_dtoa_r+0x29c>
 800ba22:	e8df f003 	tbb	[pc, r3]
 800ba26:	382b      	.short	0x382b
 800ba28:	5636      	.short	0x5636
 800ba2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ba2e:	441e      	add	r6, r3
 800ba30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	bfc1      	itttt	gt
 800ba38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba3c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba44:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba48:	bfd6      	itet	le
 800ba4a:	f1c3 0320 	rsble	r3, r3, #32
 800ba4e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba52:	fa04 f003 	lslle.w	r0, r4, r3
 800ba56:	f7f4 fccf 	bl	80003f8 <__aeabi_ui2d>
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba60:	3e01      	subs	r6, #1
 800ba62:	9212      	str	r2, [sp, #72]	@ 0x48
 800ba64:	e775      	b.n	800b952 <_dtoa_r+0x102>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7b6      	b.n	800b9d8 <_dtoa_r+0x188>
 800ba6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ba6c:	e7b5      	b.n	800b9da <_dtoa_r+0x18a>
 800ba6e:	427b      	negs	r3, r7
 800ba70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba72:	2300      	movs	r3, #0
 800ba74:	eba8 0807 	sub.w	r8, r8, r7
 800ba78:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba7a:	e7c2      	b.n	800ba02 <_dtoa_r+0x1b2>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dc35      	bgt.n	800baf2 <_dtoa_r+0x2a2>
 800ba86:	2301      	movs	r3, #1
 800ba88:	461a      	mov	r2, r3
 800ba8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ba8e:	9221      	str	r2, [sp, #132]	@ 0x84
 800ba90:	e00b      	b.n	800baaa <_dtoa_r+0x25a>
 800ba92:	2301      	movs	r3, #1
 800ba94:	e7f3      	b.n	800ba7e <_dtoa_r+0x22e>
 800ba96:	2300      	movs	r3, #0
 800ba98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba9c:	18fb      	adds	r3, r7, r3
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	3301      	adds	r3, #1
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	9307      	str	r3, [sp, #28]
 800baa6:	bfb8      	it	lt
 800baa8:	2301      	movlt	r3, #1
 800baaa:	2100      	movs	r1, #0
 800baac:	2204      	movs	r2, #4
 800baae:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bab2:	f102 0514 	add.w	r5, r2, #20
 800bab6:	429d      	cmp	r5, r3
 800bab8:	d91f      	bls.n	800bafa <_dtoa_r+0x2aa>
 800baba:	6041      	str	r1, [r0, #4]
 800babc:	4658      	mov	r0, fp
 800babe:	f001 f925 	bl	800cd0c <_Balloc>
 800bac2:	4682      	mov	sl, r0
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d139      	bne.n	800bb3c <_dtoa_r+0x2ec>
 800bac8:	4602      	mov	r2, r0
 800baca:	f240 11af 	movw	r1, #431	@ 0x1af
 800bace:	4b1a      	ldr	r3, [pc, #104]	@ (800bb38 <_dtoa_r+0x2e8>)
 800bad0:	e6d2      	b.n	800b878 <_dtoa_r+0x28>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e7e0      	b.n	800ba98 <_dtoa_r+0x248>
 800bad6:	2401      	movs	r4, #1
 800bad8:	2300      	movs	r3, #0
 800bada:	940b      	str	r4, [sp, #44]	@ 0x2c
 800badc:	9320      	str	r3, [sp, #128]	@ 0x80
 800bade:	f04f 33ff 	mov.w	r3, #4294967295
 800bae2:	2200      	movs	r2, #0
 800bae4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bae8:	2312      	movs	r3, #18
 800baea:	e7d0      	b.n	800ba8e <_dtoa_r+0x23e>
 800baec:	2301      	movs	r3, #1
 800baee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf0:	e7f5      	b.n	800bade <_dtoa_r+0x28e>
 800baf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800baf8:	e7d7      	b.n	800baaa <_dtoa_r+0x25a>
 800bafa:	3101      	adds	r1, #1
 800bafc:	0052      	lsls	r2, r2, #1
 800bafe:	e7d8      	b.n	800bab2 <_dtoa_r+0x262>
 800bb00:	636f4361 	.word	0x636f4361
 800bb04:	3fd287a7 	.word	0x3fd287a7
 800bb08:	8b60c8b3 	.word	0x8b60c8b3
 800bb0c:	3fc68a28 	.word	0x3fc68a28
 800bb10:	509f79fb 	.word	0x509f79fb
 800bb14:	3fd34413 	.word	0x3fd34413
 800bb18:	0800f037 	.word	0x0800f037
 800bb1c:	0800f04e 	.word	0x0800f04e
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	0800f033 	.word	0x0800f033
 800bb28:	0800f327 	.word	0x0800f327
 800bb2c:	0800f326 	.word	0x0800f326
 800bb30:	3ff80000 	.word	0x3ff80000
 800bb34:	0800f1a8 	.word	0x0800f1a8
 800bb38:	0800f0a6 	.word	0x0800f0a6
 800bb3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb40:	6018      	str	r0, [r3, #0]
 800bb42:	9b07      	ldr	r3, [sp, #28]
 800bb44:	2b0e      	cmp	r3, #14
 800bb46:	f200 80a4 	bhi.w	800bc92 <_dtoa_r+0x442>
 800bb4a:	2c00      	cmp	r4, #0
 800bb4c:	f000 80a1 	beq.w	800bc92 <_dtoa_r+0x442>
 800bb50:	2f00      	cmp	r7, #0
 800bb52:	dd33      	ble.n	800bbbc <_dtoa_r+0x36c>
 800bb54:	4b86      	ldr	r3, [pc, #536]	@ (800bd70 <_dtoa_r+0x520>)
 800bb56:	f007 020f 	and.w	r2, r7, #15
 800bb5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb5e:	05f8      	lsls	r0, r7, #23
 800bb60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb6c:	d516      	bpl.n	800bb9c <_dtoa_r+0x34c>
 800bb6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb72:	4b80      	ldr	r3, [pc, #512]	@ (800bd74 <_dtoa_r+0x524>)
 800bb74:	2603      	movs	r6, #3
 800bb76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb7a:	f7f4 fde1 	bl	8000740 <__aeabi_ddiv>
 800bb7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb82:	f004 040f 	and.w	r4, r4, #15
 800bb86:	4d7b      	ldr	r5, [pc, #492]	@ (800bd74 <_dtoa_r+0x524>)
 800bb88:	b954      	cbnz	r4, 800bba0 <_dtoa_r+0x350>
 800bb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb92:	f7f4 fdd5 	bl	8000740 <__aeabi_ddiv>
 800bb96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb9a:	e028      	b.n	800bbee <_dtoa_r+0x39e>
 800bb9c:	2602      	movs	r6, #2
 800bb9e:	e7f2      	b.n	800bb86 <_dtoa_r+0x336>
 800bba0:	07e1      	lsls	r1, r4, #31
 800bba2:	d508      	bpl.n	800bbb6 <_dtoa_r+0x366>
 800bba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbac:	f7f4 fc9e 	bl	80004ec <__aeabi_dmul>
 800bbb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb4:	3601      	adds	r6, #1
 800bbb6:	1064      	asrs	r4, r4, #1
 800bbb8:	3508      	adds	r5, #8
 800bbba:	e7e5      	b.n	800bb88 <_dtoa_r+0x338>
 800bbbc:	f000 80d2 	beq.w	800bd64 <_dtoa_r+0x514>
 800bbc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbc4:	427c      	negs	r4, r7
 800bbc6:	4b6a      	ldr	r3, [pc, #424]	@ (800bd70 <_dtoa_r+0x520>)
 800bbc8:	f004 020f 	and.w	r2, r4, #15
 800bbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fc8a 	bl	80004ec <__aeabi_dmul>
 800bbd8:	2602      	movs	r6, #2
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe0:	4d64      	ldr	r5, [pc, #400]	@ (800bd74 <_dtoa_r+0x524>)
 800bbe2:	1124      	asrs	r4, r4, #4
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	f040 80b2 	bne.w	800bd4e <_dtoa_r+0x4fe>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d3      	bne.n	800bb96 <_dtoa_r+0x346>
 800bbee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80b7 	beq.w	800bd68 <_dtoa_r+0x518>
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4b5d      	ldr	r3, [pc, #372]	@ (800bd78 <_dtoa_r+0x528>)
 800bc02:	f7f4 fee5 	bl	80009d0 <__aeabi_dcmplt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f000 80ae 	beq.w	800bd68 <_dtoa_r+0x518>
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80aa 	beq.w	800bd68 <_dtoa_r+0x518>
 800bc14:	9b08      	ldr	r3, [sp, #32]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dd37      	ble.n	800bc8a <_dtoa_r+0x43a>
 800bc1a:	1e7b      	subs	r3, r7, #1
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	2200      	movs	r2, #0
 800bc22:	4629      	mov	r1, r5
 800bc24:	4b55      	ldr	r3, [pc, #340]	@ (800bd7c <_dtoa_r+0x52c>)
 800bc26:	f7f4 fc61 	bl	80004ec <__aeabi_dmul>
 800bc2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc2e:	9c08      	ldr	r4, [sp, #32]
 800bc30:	3601      	adds	r6, #1
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7f4 fbf0 	bl	8000418 <__aeabi_i2d>
 800bc38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc3c:	f7f4 fc56 	bl	80004ec <__aeabi_dmul>
 800bc40:	2200      	movs	r2, #0
 800bc42:	4b4f      	ldr	r3, [pc, #316]	@ (800bd80 <_dtoa_r+0x530>)
 800bc44:	f7f4 fa9c 	bl	8000180 <__adddf3>
 800bc48:	4605      	mov	r5, r0
 800bc4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc4e:	2c00      	cmp	r4, #0
 800bc50:	f040 809a 	bne.w	800bd88 <_dtoa_r+0x538>
 800bc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4b4a      	ldr	r3, [pc, #296]	@ (800bd84 <_dtoa_r+0x534>)
 800bc5c:	f7f4 fa8e 	bl	800017c <__aeabi_dsub>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc68:	462a      	mov	r2, r5
 800bc6a:	4633      	mov	r3, r6
 800bc6c:	f7f4 fece 	bl	8000a0c <__aeabi_dcmpgt>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f040 828e 	bne.w	800c192 <_dtoa_r+0x942>
 800bc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7a:	462a      	mov	r2, r5
 800bc7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc80:	f7f4 fea6 	bl	80009d0 <__aeabi_dcmplt>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	f040 8127 	bne.w	800bed8 <_dtoa_r+0x688>
 800bc8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f2c0 8163 	blt.w	800bf60 <_dtoa_r+0x710>
 800bc9a:	2f0e      	cmp	r7, #14
 800bc9c:	f300 8160 	bgt.w	800bf60 <_dtoa_r+0x710>
 800bca0:	4b33      	ldr	r3, [pc, #204]	@ (800bd70 <_dtoa_r+0x520>)
 800bca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da03      	bge.n	800bcbc <_dtoa_r+0x46c>
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f340 8100 	ble.w	800bebc <_dtoa_r+0x66c>
 800bcbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcc0:	4656      	mov	r6, sl
 800bcc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fd39 	bl	8000740 <__aeabi_ddiv>
 800bcce:	f7f4 febd 	bl	8000a4c <__aeabi_d2iz>
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	f7f4 fba0 	bl	8000418 <__aeabi_i2d>
 800bcd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcdc:	f7f4 fc06 	bl	80004ec <__aeabi_dmul>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4620      	mov	r0, r4
 800bce6:	4629      	mov	r1, r5
 800bce8:	f7f4 fa48 	bl	800017c <__aeabi_dsub>
 800bcec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcf0:	9d07      	ldr	r5, [sp, #28]
 800bcf2:	f806 4b01 	strb.w	r4, [r6], #1
 800bcf6:	eba6 040a 	sub.w	r4, r6, sl
 800bcfa:	42a5      	cmp	r5, r4
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	f040 8116 	bne.w	800bf30 <_dtoa_r+0x6e0>
 800bd04:	f7f4 fa3c 	bl	8000180 <__adddf3>
 800bd08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	f7f4 fe7c 	bl	8000a0c <__aeabi_dcmpgt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f040 80f8 	bne.w	800bf0a <_dtoa_r+0x6ba>
 800bd1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fe4b 	bl	80009bc <__aeabi_dcmpeq>
 800bd26:	b118      	cbz	r0, 800bd30 <_dtoa_r+0x4e0>
 800bd28:	f018 0f01 	tst.w	r8, #1
 800bd2c:	f040 80ed 	bne.w	800bf0a <_dtoa_r+0x6ba>
 800bd30:	4649      	mov	r1, r9
 800bd32:	4658      	mov	r0, fp
 800bd34:	f001 f82a 	bl	800cd8c <_Bfree>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	7033      	strb	r3, [r6, #0]
 800bd3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bd3e:	3701      	adds	r7, #1
 800bd40:	601f      	str	r7, [r3, #0]
 800bd42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 8320 	beq.w	800c38a <_dtoa_r+0xb3a>
 800bd4a:	601e      	str	r6, [r3, #0]
 800bd4c:	e31d      	b.n	800c38a <_dtoa_r+0xb3a>
 800bd4e:	07e2      	lsls	r2, r4, #31
 800bd50:	d505      	bpl.n	800bd5e <_dtoa_r+0x50e>
 800bd52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd56:	f7f4 fbc9 	bl	80004ec <__aeabi_dmul>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	1064      	asrs	r4, r4, #1
 800bd60:	3508      	adds	r5, #8
 800bd62:	e73f      	b.n	800bbe4 <_dtoa_r+0x394>
 800bd64:	2602      	movs	r6, #2
 800bd66:	e742      	b.n	800bbee <_dtoa_r+0x39e>
 800bd68:	9c07      	ldr	r4, [sp, #28]
 800bd6a:	9704      	str	r7, [sp, #16]
 800bd6c:	e761      	b.n	800bc32 <_dtoa_r+0x3e2>
 800bd6e:	bf00      	nop
 800bd70:	0800f1a8 	.word	0x0800f1a8
 800bd74:	0800f180 	.word	0x0800f180
 800bd78:	3ff00000 	.word	0x3ff00000
 800bd7c:	40240000 	.word	0x40240000
 800bd80:	401c0000 	.word	0x401c0000
 800bd84:	40140000 	.word	0x40140000
 800bd88:	4b70      	ldr	r3, [pc, #448]	@ (800bf4c <_dtoa_r+0x6fc>)
 800bd8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd94:	4454      	add	r4, sl
 800bd96:	2900      	cmp	r1, #0
 800bd98:	d045      	beq.n	800be26 <_dtoa_r+0x5d6>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	496c      	ldr	r1, [pc, #432]	@ (800bf50 <_dtoa_r+0x700>)
 800bd9e:	f7f4 fccf 	bl	8000740 <__aeabi_ddiv>
 800bda2:	4633      	mov	r3, r6
 800bda4:	462a      	mov	r2, r5
 800bda6:	f7f4 f9e9 	bl	800017c <__aeabi_dsub>
 800bdaa:	4656      	mov	r6, sl
 800bdac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb4:	f7f4 fe4a 	bl	8000a4c <__aeabi_d2iz>
 800bdb8:	4605      	mov	r5, r0
 800bdba:	f7f4 fb2d 	bl	8000418 <__aeabi_i2d>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc6:	f7f4 f9d9 	bl	800017c <__aeabi_dsub>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	3530      	adds	r5, #48	@ 0x30
 800bdd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdd8:	f806 5b01 	strb.w	r5, [r6], #1
 800bddc:	f7f4 fdf8 	bl	80009d0 <__aeabi_dcmplt>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d163      	bne.n	800beac <_dtoa_r+0x65c>
 800bde4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bde8:	2000      	movs	r0, #0
 800bdea:	495a      	ldr	r1, [pc, #360]	@ (800bf54 <_dtoa_r+0x704>)
 800bdec:	f7f4 f9c6 	bl	800017c <__aeabi_dsub>
 800bdf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdf4:	f7f4 fdec 	bl	80009d0 <__aeabi_dcmplt>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	f040 8087 	bne.w	800bf0c <_dtoa_r+0x6bc>
 800bdfe:	42a6      	cmp	r6, r4
 800be00:	f43f af43 	beq.w	800bc8a <_dtoa_r+0x43a>
 800be04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be08:	2200      	movs	r2, #0
 800be0a:	4b53      	ldr	r3, [pc, #332]	@ (800bf58 <_dtoa_r+0x708>)
 800be0c:	f7f4 fb6e 	bl	80004ec <__aeabi_dmul>
 800be10:	2200      	movs	r2, #0
 800be12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1a:	4b4f      	ldr	r3, [pc, #316]	@ (800bf58 <_dtoa_r+0x708>)
 800be1c:	f7f4 fb66 	bl	80004ec <__aeabi_dmul>
 800be20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be24:	e7c4      	b.n	800bdb0 <_dtoa_r+0x560>
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	f7f4 fb5f 	bl	80004ec <__aeabi_dmul>
 800be2e:	4656      	mov	r6, sl
 800be30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be34:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	f7f4 fe07 	bl	8000a4c <__aeabi_d2iz>
 800be3e:	4605      	mov	r5, r0
 800be40:	f7f4 faea 	bl	8000418 <__aeabi_i2d>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4c:	f7f4 f996 	bl	800017c <__aeabi_dsub>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	3530      	adds	r5, #48	@ 0x30
 800be56:	f806 5b01 	strb.w	r5, [r6], #1
 800be5a:	42a6      	cmp	r6, r4
 800be5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	d124      	bne.n	800beb0 <_dtoa_r+0x660>
 800be66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be6a:	4b39      	ldr	r3, [pc, #228]	@ (800bf50 <_dtoa_r+0x700>)
 800be6c:	f7f4 f988 	bl	8000180 <__adddf3>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be78:	f7f4 fdc8 	bl	8000a0c <__aeabi_dcmpgt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d145      	bne.n	800bf0c <_dtoa_r+0x6bc>
 800be80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be84:	2000      	movs	r0, #0
 800be86:	4932      	ldr	r1, [pc, #200]	@ (800bf50 <_dtoa_r+0x700>)
 800be88:	f7f4 f978 	bl	800017c <__aeabi_dsub>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be94:	f7f4 fd9c 	bl	80009d0 <__aeabi_dcmplt>
 800be98:	2800      	cmp	r0, #0
 800be9a:	f43f aef6 	beq.w	800bc8a <_dtoa_r+0x43a>
 800be9e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bea0:	1e73      	subs	r3, r6, #1
 800bea2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bea4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bea8:	2b30      	cmp	r3, #48	@ 0x30
 800beaa:	d0f8      	beq.n	800be9e <_dtoa_r+0x64e>
 800beac:	9f04      	ldr	r7, [sp, #16]
 800beae:	e73f      	b.n	800bd30 <_dtoa_r+0x4e0>
 800beb0:	4b29      	ldr	r3, [pc, #164]	@ (800bf58 <_dtoa_r+0x708>)
 800beb2:	f7f4 fb1b 	bl	80004ec <__aeabi_dmul>
 800beb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beba:	e7bc      	b.n	800be36 <_dtoa_r+0x5e6>
 800bebc:	d10c      	bne.n	800bed8 <_dtoa_r+0x688>
 800bebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec2:	2200      	movs	r2, #0
 800bec4:	4b25      	ldr	r3, [pc, #148]	@ (800bf5c <_dtoa_r+0x70c>)
 800bec6:	f7f4 fb11 	bl	80004ec <__aeabi_dmul>
 800beca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bece:	f7f4 fd93 	bl	80009f8 <__aeabi_dcmpge>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f000 815b 	beq.w	800c18e <_dtoa_r+0x93e>
 800bed8:	2400      	movs	r4, #0
 800beda:	4625      	mov	r5, r4
 800bedc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bede:	4656      	mov	r6, sl
 800bee0:	43db      	mvns	r3, r3
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	2700      	movs	r7, #0
 800bee6:	4621      	mov	r1, r4
 800bee8:	4658      	mov	r0, fp
 800beea:	f000 ff4f 	bl	800cd8c <_Bfree>
 800beee:	2d00      	cmp	r5, #0
 800bef0:	d0dc      	beq.n	800beac <_dtoa_r+0x65c>
 800bef2:	b12f      	cbz	r7, 800bf00 <_dtoa_r+0x6b0>
 800bef4:	42af      	cmp	r7, r5
 800bef6:	d003      	beq.n	800bf00 <_dtoa_r+0x6b0>
 800bef8:	4639      	mov	r1, r7
 800befa:	4658      	mov	r0, fp
 800befc:	f000 ff46 	bl	800cd8c <_Bfree>
 800bf00:	4629      	mov	r1, r5
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 ff42 	bl	800cd8c <_Bfree>
 800bf08:	e7d0      	b.n	800beac <_dtoa_r+0x65c>
 800bf0a:	9704      	str	r7, [sp, #16]
 800bf0c:	4633      	mov	r3, r6
 800bf0e:	461e      	mov	r6, r3
 800bf10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf14:	2a39      	cmp	r2, #57	@ 0x39
 800bf16:	d107      	bne.n	800bf28 <_dtoa_r+0x6d8>
 800bf18:	459a      	cmp	sl, r3
 800bf1a:	d1f8      	bne.n	800bf0e <_dtoa_r+0x6be>
 800bf1c:	9a04      	ldr	r2, [sp, #16]
 800bf1e:	3201      	adds	r2, #1
 800bf20:	9204      	str	r2, [sp, #16]
 800bf22:	2230      	movs	r2, #48	@ 0x30
 800bf24:	f88a 2000 	strb.w	r2, [sl]
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	3201      	adds	r2, #1
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	e7bd      	b.n	800beac <_dtoa_r+0x65c>
 800bf30:	2200      	movs	r2, #0
 800bf32:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <_dtoa_r+0x708>)
 800bf34:	f7f4 fada 	bl	80004ec <__aeabi_dmul>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	460d      	mov	r5, r1
 800bf40:	f7f4 fd3c 	bl	80009bc <__aeabi_dcmpeq>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f43f aebc 	beq.w	800bcc2 <_dtoa_r+0x472>
 800bf4a:	e6f1      	b.n	800bd30 <_dtoa_r+0x4e0>
 800bf4c:	0800f1a8 	.word	0x0800f1a8
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	3ff00000 	.word	0x3ff00000
 800bf58:	40240000 	.word	0x40240000
 800bf5c:	40140000 	.word	0x40140000
 800bf60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	f000 80db 	beq.w	800c11e <_dtoa_r+0x8ce>
 800bf68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bf6a:	2a01      	cmp	r2, #1
 800bf6c:	f300 80bf 	bgt.w	800c0ee <_dtoa_r+0x89e>
 800bf70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	f000 80b7 	beq.w	800c0e6 <_dtoa_r+0x896>
 800bf78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf7c:	4646      	mov	r6, r8
 800bf7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf82:	2101      	movs	r1, #1
 800bf84:	441a      	add	r2, r3
 800bf86:	4658      	mov	r0, fp
 800bf88:	4498      	add	r8, r3
 800bf8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf8c:	f000 fffc 	bl	800cf88 <__i2b>
 800bf90:	4605      	mov	r5, r0
 800bf92:	b15e      	cbz	r6, 800bfac <_dtoa_r+0x75c>
 800bf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd08      	ble.n	800bfac <_dtoa_r+0x75c>
 800bf9a:	42b3      	cmp	r3, r6
 800bf9c:	bfa8      	it	ge
 800bf9e:	4633      	movge	r3, r6
 800bfa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfa2:	eba8 0803 	sub.w	r8, r8, r3
 800bfa6:	1af6      	subs	r6, r6, r3
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfae:	b1f3      	cbz	r3, 800bfee <_dtoa_r+0x79e>
 800bfb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 80b7 	beq.w	800c126 <_dtoa_r+0x8d6>
 800bfb8:	b18c      	cbz	r4, 800bfde <_dtoa_r+0x78e>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4658      	mov	r0, fp
 800bfc0:	f001 f8a0 	bl	800d104 <__pow5mult>
 800bfc4:	464a      	mov	r2, r9
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4605      	mov	r5, r0
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f000 fff2 	bl	800cfb4 <__multiply>
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	9004      	str	r0, [sp, #16]
 800bfd4:	4658      	mov	r0, fp
 800bfd6:	f000 fed9 	bl	800cd8c <_Bfree>
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	4699      	mov	r9, r3
 800bfde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfe0:	1b1a      	subs	r2, r3, r4
 800bfe2:	d004      	beq.n	800bfee <_dtoa_r+0x79e>
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	4658      	mov	r0, fp
 800bfe8:	f001 f88c 	bl	800d104 <__pow5mult>
 800bfec:	4681      	mov	r9, r0
 800bfee:	2101      	movs	r1, #1
 800bff0:	4658      	mov	r0, fp
 800bff2:	f000 ffc9 	bl	800cf88 <__i2b>
 800bff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bff8:	4604      	mov	r4, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 81c9 	beq.w	800c392 <_dtoa_r+0xb42>
 800c000:	461a      	mov	r2, r3
 800c002:	4601      	mov	r1, r0
 800c004:	4658      	mov	r0, fp
 800c006:	f001 f87d 	bl	800d104 <__pow5mult>
 800c00a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c00c:	4604      	mov	r4, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	f300 808f 	bgt.w	800c132 <_dtoa_r+0x8e2>
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	f040 8087 	bne.w	800c12a <_dtoa_r+0x8da>
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 8083 	bne.w	800c12e <_dtoa_r+0x8de>
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c02e:	0d1b      	lsrs	r3, r3, #20
 800c030:	051b      	lsls	r3, r3, #20
 800c032:	b12b      	cbz	r3, 800c040 <_dtoa_r+0x7f0>
 800c034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c036:	f108 0801 	add.w	r8, r8, #1
 800c03a:	3301      	adds	r3, #1
 800c03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c03e:	2301      	movs	r3, #1
 800c040:	930a      	str	r3, [sp, #40]	@ 0x28
 800c042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 81aa 	beq.w	800c39e <_dtoa_r+0xb4e>
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c050:	6918      	ldr	r0, [r3, #16]
 800c052:	f000 ff4d 	bl	800cef0 <__hi0bits>
 800c056:	f1c0 0020 	rsb	r0, r0, #32
 800c05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c05c:	4418      	add	r0, r3
 800c05e:	f010 001f 	ands.w	r0, r0, #31
 800c062:	d071      	beq.n	800c148 <_dtoa_r+0x8f8>
 800c064:	f1c0 0320 	rsb	r3, r0, #32
 800c068:	2b04      	cmp	r3, #4
 800c06a:	dd65      	ble.n	800c138 <_dtoa_r+0x8e8>
 800c06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06e:	f1c0 001c 	rsb	r0, r0, #28
 800c072:	4403      	add	r3, r0
 800c074:	4480      	add	r8, r0
 800c076:	4406      	add	r6, r0
 800c078:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07a:	f1b8 0f00 	cmp.w	r8, #0
 800c07e:	dd05      	ble.n	800c08c <_dtoa_r+0x83c>
 800c080:	4649      	mov	r1, r9
 800c082:	4642      	mov	r2, r8
 800c084:	4658      	mov	r0, fp
 800c086:	f001 f897 	bl	800d1b8 <__lshift>
 800c08a:	4681      	mov	r9, r0
 800c08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd05      	ble.n	800c09e <_dtoa_r+0x84e>
 800c092:	4621      	mov	r1, r4
 800c094:	461a      	mov	r2, r3
 800c096:	4658      	mov	r0, fp
 800c098:	f001 f88e 	bl	800d1b8 <__lshift>
 800c09c:	4604      	mov	r4, r0
 800c09e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d053      	beq.n	800c14c <_dtoa_r+0x8fc>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4648      	mov	r0, r9
 800c0a8:	f001 f8f2 	bl	800d290 <__mcmp>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	da4d      	bge.n	800c14c <_dtoa_r+0x8fc>
 800c0b0:	1e7b      	subs	r3, r7, #1
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	220a      	movs	r2, #10
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4658      	mov	r0, fp
 800c0bc:	f000 fe88 	bl	800cdd0 <__multadd>
 800c0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0c2:	4681      	mov	r9, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 816c 	beq.w	800c3a2 <_dtoa_r+0xb52>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	220a      	movs	r2, #10
 800c0d0:	4658      	mov	r0, fp
 800c0d2:	f000 fe7d 	bl	800cdd0 <__multadd>
 800c0d6:	9b08      	ldr	r3, [sp, #32]
 800c0d8:	4605      	mov	r5, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dc61      	bgt.n	800c1a2 <_dtoa_r+0x952>
 800c0de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	dc3b      	bgt.n	800c15c <_dtoa_r+0x90c>
 800c0e4:	e05d      	b.n	800c1a2 <_dtoa_r+0x952>
 800c0e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0ec:	e746      	b.n	800bf7c <_dtoa_r+0x72c>
 800c0ee:	9b07      	ldr	r3, [sp, #28]
 800c0f0:	1e5c      	subs	r4, r3, #1
 800c0f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	bfbf      	itttt	lt
 800c0f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c0fc:	1ae3      	sublt	r3, r4, r3
 800c0fe:	18d2      	addlt	r2, r2, r3
 800c100:	bfa8      	it	ge
 800c102:	1b1c      	subge	r4, r3, r4
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	bfbe      	ittt	lt
 800c108:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c10a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c10c:	2400      	movlt	r4, #0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bfb5      	itete	lt
 800c112:	eba8 0603 	sublt.w	r6, r8, r3
 800c116:	4646      	movge	r6, r8
 800c118:	2300      	movlt	r3, #0
 800c11a:	9b07      	ldrge	r3, [sp, #28]
 800c11c:	e730      	b.n	800bf80 <_dtoa_r+0x730>
 800c11e:	4646      	mov	r6, r8
 800c120:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c122:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c124:	e735      	b.n	800bf92 <_dtoa_r+0x742>
 800c126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c128:	e75c      	b.n	800bfe4 <_dtoa_r+0x794>
 800c12a:	2300      	movs	r3, #0
 800c12c:	e788      	b.n	800c040 <_dtoa_r+0x7f0>
 800c12e:	9b02      	ldr	r3, [sp, #8]
 800c130:	e786      	b.n	800c040 <_dtoa_r+0x7f0>
 800c132:	2300      	movs	r3, #0
 800c134:	930a      	str	r3, [sp, #40]	@ 0x28
 800c136:	e788      	b.n	800c04a <_dtoa_r+0x7fa>
 800c138:	d09f      	beq.n	800c07a <_dtoa_r+0x82a>
 800c13a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c13c:	331c      	adds	r3, #28
 800c13e:	441a      	add	r2, r3
 800c140:	4498      	add	r8, r3
 800c142:	441e      	add	r6, r3
 800c144:	9209      	str	r2, [sp, #36]	@ 0x24
 800c146:	e798      	b.n	800c07a <_dtoa_r+0x82a>
 800c148:	4603      	mov	r3, r0
 800c14a:	e7f6      	b.n	800c13a <_dtoa_r+0x8ea>
 800c14c:	9b07      	ldr	r3, [sp, #28]
 800c14e:	9704      	str	r7, [sp, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dc20      	bgt.n	800c196 <_dtoa_r+0x946>
 800c154:	9308      	str	r3, [sp, #32]
 800c156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c158:	2b02      	cmp	r3, #2
 800c15a:	dd1e      	ble.n	800c19a <_dtoa_r+0x94a>
 800c15c:	9b08      	ldr	r3, [sp, #32]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f47f aebc 	bne.w	800bedc <_dtoa_r+0x68c>
 800c164:	4621      	mov	r1, r4
 800c166:	2205      	movs	r2, #5
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 fe31 	bl	800cdd0 <__multadd>
 800c16e:	4601      	mov	r1, r0
 800c170:	4604      	mov	r4, r0
 800c172:	4648      	mov	r0, r9
 800c174:	f001 f88c 	bl	800d290 <__mcmp>
 800c178:	2800      	cmp	r0, #0
 800c17a:	f77f aeaf 	ble.w	800bedc <_dtoa_r+0x68c>
 800c17e:	2331      	movs	r3, #49	@ 0x31
 800c180:	4656      	mov	r6, sl
 800c182:	f806 3b01 	strb.w	r3, [r6], #1
 800c186:	9b04      	ldr	r3, [sp, #16]
 800c188:	3301      	adds	r3, #1
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	e6aa      	b.n	800bee4 <_dtoa_r+0x694>
 800c18e:	9c07      	ldr	r4, [sp, #28]
 800c190:	9704      	str	r7, [sp, #16]
 800c192:	4625      	mov	r5, r4
 800c194:	e7f3      	b.n	800c17e <_dtoa_r+0x92e>
 800c196:	9b07      	ldr	r3, [sp, #28]
 800c198:	9308      	str	r3, [sp, #32]
 800c19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 8104 	beq.w	800c3aa <_dtoa_r+0xb5a>
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	dd05      	ble.n	800c1b2 <_dtoa_r+0x962>
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	4658      	mov	r0, fp
 800c1ac:	f001 f804 	bl	800d1b8 <__lshift>
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d05a      	beq.n	800c26e <_dtoa_r+0xa1e>
 800c1b8:	4658      	mov	r0, fp
 800c1ba:	6869      	ldr	r1, [r5, #4]
 800c1bc:	f000 fda6 	bl	800cd0c <_Balloc>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	b928      	cbnz	r0, 800c1d0 <_dtoa_r+0x980>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1ca:	4b83      	ldr	r3, [pc, #524]	@ (800c3d8 <_dtoa_r+0xb88>)
 800c1cc:	f7ff bb54 	b.w	800b878 <_dtoa_r+0x28>
 800c1d0:	692a      	ldr	r2, [r5, #16]
 800c1d2:	f105 010c 	add.w	r1, r5, #12
 800c1d6:	3202      	adds	r2, #2
 800c1d8:	0092      	lsls	r2, r2, #2
 800c1da:	300c      	adds	r0, #12
 800c1dc:	f7ff fa8d 	bl	800b6fa <memcpy>
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4658      	mov	r0, fp
 800c1e6:	f000 ffe7 	bl	800d1b8 <__lshift>
 800c1ea:	462f      	mov	r7, r5
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	f10a 0301 	add.w	r3, sl, #1
 800c1f2:	9307      	str	r3, [sp, #28]
 800c1f4:	9b08      	ldr	r3, [sp, #32]
 800c1f6:	4453      	add	r3, sl
 800c1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	930a      	str	r3, [sp, #40]	@ 0x28
 800c202:	9b07      	ldr	r3, [sp, #28]
 800c204:	4621      	mov	r1, r4
 800c206:	3b01      	subs	r3, #1
 800c208:	4648      	mov	r0, r9
 800c20a:	9302      	str	r3, [sp, #8]
 800c20c:	f7ff fa96 	bl	800b73c <quorem>
 800c210:	4639      	mov	r1, r7
 800c212:	9008      	str	r0, [sp, #32]
 800c214:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c218:	4648      	mov	r0, r9
 800c21a:	f001 f839 	bl	800d290 <__mcmp>
 800c21e:	462a      	mov	r2, r5
 800c220:	9009      	str	r0, [sp, #36]	@ 0x24
 800c222:	4621      	mov	r1, r4
 800c224:	4658      	mov	r0, fp
 800c226:	f001 f84f 	bl	800d2c8 <__mdiff>
 800c22a:	68c2      	ldr	r2, [r0, #12]
 800c22c:	4606      	mov	r6, r0
 800c22e:	bb02      	cbnz	r2, 800c272 <_dtoa_r+0xa22>
 800c230:	4601      	mov	r1, r0
 800c232:	4648      	mov	r0, r9
 800c234:	f001 f82c 	bl	800d290 <__mcmp>
 800c238:	4602      	mov	r2, r0
 800c23a:	4631      	mov	r1, r6
 800c23c:	4658      	mov	r0, fp
 800c23e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c240:	f000 fda4 	bl	800cd8c <_Bfree>
 800c244:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c246:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c248:	9e07      	ldr	r6, [sp, #28]
 800c24a:	ea43 0102 	orr.w	r1, r3, r2
 800c24e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c250:	4319      	orrs	r1, r3
 800c252:	d110      	bne.n	800c276 <_dtoa_r+0xa26>
 800c254:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c258:	d029      	beq.n	800c2ae <_dtoa_r+0xa5e>
 800c25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dd02      	ble.n	800c266 <_dtoa_r+0xa16>
 800c260:	9b08      	ldr	r3, [sp, #32]
 800c262:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	f883 8000 	strb.w	r8, [r3]
 800c26c:	e63b      	b.n	800bee6 <_dtoa_r+0x696>
 800c26e:	4628      	mov	r0, r5
 800c270:	e7bb      	b.n	800c1ea <_dtoa_r+0x99a>
 800c272:	2201      	movs	r2, #1
 800c274:	e7e1      	b.n	800c23a <_dtoa_r+0x9ea>
 800c276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	db04      	blt.n	800c286 <_dtoa_r+0xa36>
 800c27c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c27e:	430b      	orrs	r3, r1
 800c280:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c282:	430b      	orrs	r3, r1
 800c284:	d120      	bne.n	800c2c8 <_dtoa_r+0xa78>
 800c286:	2a00      	cmp	r2, #0
 800c288:	dded      	ble.n	800c266 <_dtoa_r+0xa16>
 800c28a:	4649      	mov	r1, r9
 800c28c:	2201      	movs	r2, #1
 800c28e:	4658      	mov	r0, fp
 800c290:	f000 ff92 	bl	800d1b8 <__lshift>
 800c294:	4621      	mov	r1, r4
 800c296:	4681      	mov	r9, r0
 800c298:	f000 fffa 	bl	800d290 <__mcmp>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	dc03      	bgt.n	800c2a8 <_dtoa_r+0xa58>
 800c2a0:	d1e1      	bne.n	800c266 <_dtoa_r+0xa16>
 800c2a2:	f018 0f01 	tst.w	r8, #1
 800c2a6:	d0de      	beq.n	800c266 <_dtoa_r+0xa16>
 800c2a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2ac:	d1d8      	bne.n	800c260 <_dtoa_r+0xa10>
 800c2ae:	2339      	movs	r3, #57	@ 0x39
 800c2b0:	9a02      	ldr	r2, [sp, #8]
 800c2b2:	7013      	strb	r3, [r2, #0]
 800c2b4:	4633      	mov	r3, r6
 800c2b6:	461e      	mov	r6, r3
 800c2b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	2a39      	cmp	r2, #57	@ 0x39
 800c2c0:	d052      	beq.n	800c368 <_dtoa_r+0xb18>
 800c2c2:	3201      	adds	r2, #1
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	e60e      	b.n	800bee6 <_dtoa_r+0x696>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	dd07      	ble.n	800c2dc <_dtoa_r+0xa8c>
 800c2cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2d0:	d0ed      	beq.n	800c2ae <_dtoa_r+0xa5e>
 800c2d2:	9a02      	ldr	r2, [sp, #8]
 800c2d4:	f108 0301 	add.w	r3, r8, #1
 800c2d8:	7013      	strb	r3, [r2, #0]
 800c2da:	e604      	b.n	800bee6 <_dtoa_r+0x696>
 800c2dc:	9b07      	ldr	r3, [sp, #28]
 800c2de:	9a07      	ldr	r2, [sp, #28]
 800c2e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d028      	beq.n	800c33c <_dtoa_r+0xaec>
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	220a      	movs	r2, #10
 800c2f0:	4658      	mov	r0, fp
 800c2f2:	f000 fd6d 	bl	800cdd0 <__multadd>
 800c2f6:	42af      	cmp	r7, r5
 800c2f8:	4681      	mov	r9, r0
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	f04f 020a 	mov.w	r2, #10
 800c302:	4639      	mov	r1, r7
 800c304:	4658      	mov	r0, fp
 800c306:	d107      	bne.n	800c318 <_dtoa_r+0xac8>
 800c308:	f000 fd62 	bl	800cdd0 <__multadd>
 800c30c:	4607      	mov	r7, r0
 800c30e:	4605      	mov	r5, r0
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	3301      	adds	r3, #1
 800c314:	9307      	str	r3, [sp, #28]
 800c316:	e774      	b.n	800c202 <_dtoa_r+0x9b2>
 800c318:	f000 fd5a 	bl	800cdd0 <__multadd>
 800c31c:	4629      	mov	r1, r5
 800c31e:	4607      	mov	r7, r0
 800c320:	2300      	movs	r3, #0
 800c322:	220a      	movs	r2, #10
 800c324:	4658      	mov	r0, fp
 800c326:	f000 fd53 	bl	800cdd0 <__multadd>
 800c32a:	4605      	mov	r5, r0
 800c32c:	e7f0      	b.n	800c310 <_dtoa_r+0xac0>
 800c32e:	9b08      	ldr	r3, [sp, #32]
 800c330:	2700      	movs	r7, #0
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfcc      	ite	gt
 800c336:	461e      	movgt	r6, r3
 800c338:	2601      	movle	r6, #1
 800c33a:	4456      	add	r6, sl
 800c33c:	4649      	mov	r1, r9
 800c33e:	2201      	movs	r2, #1
 800c340:	4658      	mov	r0, fp
 800c342:	f000 ff39 	bl	800d1b8 <__lshift>
 800c346:	4621      	mov	r1, r4
 800c348:	4681      	mov	r9, r0
 800c34a:	f000 ffa1 	bl	800d290 <__mcmp>
 800c34e:	2800      	cmp	r0, #0
 800c350:	dcb0      	bgt.n	800c2b4 <_dtoa_r+0xa64>
 800c352:	d102      	bne.n	800c35a <_dtoa_r+0xb0a>
 800c354:	f018 0f01 	tst.w	r8, #1
 800c358:	d1ac      	bne.n	800c2b4 <_dtoa_r+0xa64>
 800c35a:	4633      	mov	r3, r6
 800c35c:	461e      	mov	r6, r3
 800c35e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c362:	2a30      	cmp	r2, #48	@ 0x30
 800c364:	d0fa      	beq.n	800c35c <_dtoa_r+0xb0c>
 800c366:	e5be      	b.n	800bee6 <_dtoa_r+0x696>
 800c368:	459a      	cmp	sl, r3
 800c36a:	d1a4      	bne.n	800c2b6 <_dtoa_r+0xa66>
 800c36c:	9b04      	ldr	r3, [sp, #16]
 800c36e:	3301      	adds	r3, #1
 800c370:	9304      	str	r3, [sp, #16]
 800c372:	2331      	movs	r3, #49	@ 0x31
 800c374:	f88a 3000 	strb.w	r3, [sl]
 800c378:	e5b5      	b.n	800bee6 <_dtoa_r+0x696>
 800c37a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c37c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3dc <_dtoa_r+0xb8c>
 800c380:	b11b      	cbz	r3, 800c38a <_dtoa_r+0xb3a>
 800c382:	f10a 0308 	add.w	r3, sl, #8
 800c386:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	4650      	mov	r0, sl
 800c38c:	b017      	add	sp, #92	@ 0x5c
 800c38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c392:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c394:	2b01      	cmp	r3, #1
 800c396:	f77f ae3d 	ble.w	800c014 <_dtoa_r+0x7c4>
 800c39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c39c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c39e:	2001      	movs	r0, #1
 800c3a0:	e65b      	b.n	800c05a <_dtoa_r+0x80a>
 800c3a2:	9b08      	ldr	r3, [sp, #32]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f77f aed6 	ble.w	800c156 <_dtoa_r+0x906>
 800c3aa:	4656      	mov	r6, sl
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4648      	mov	r0, r9
 800c3b0:	f7ff f9c4 	bl	800b73c <quorem>
 800c3b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	f806 8b01 	strb.w	r8, [r6], #1
 800c3be:	eba6 020a 	sub.w	r2, r6, sl
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	ddb3      	ble.n	800c32e <_dtoa_r+0xade>
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	220a      	movs	r2, #10
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f000 fcff 	bl	800cdd0 <__multadd>
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	e7ea      	b.n	800c3ac <_dtoa_r+0xb5c>
 800c3d6:	bf00      	nop
 800c3d8:	0800f0a6 	.word	0x0800f0a6
 800c3dc:	0800f02a 	.word	0x0800f02a

0800c3e0 <_free_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	d040      	beq.n	800c46a <_free_r+0x8a>
 800c3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ec:	1f0c      	subs	r4, r1, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bfb8      	it	lt
 800c3f2:	18e4      	addlt	r4, r4, r3
 800c3f4:	f000 fc7e 	bl	800ccf4 <__malloc_lock>
 800c3f8:	4a1c      	ldr	r2, [pc, #112]	@ (800c46c <_free_r+0x8c>)
 800c3fa:	6813      	ldr	r3, [r2, #0]
 800c3fc:	b933      	cbnz	r3, 800c40c <_free_r+0x2c>
 800c3fe:	6063      	str	r3, [r4, #4]
 800c400:	6014      	str	r4, [r2, #0]
 800c402:	4628      	mov	r0, r5
 800c404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c408:	f000 bc7a 	b.w	800cd00 <__malloc_unlock>
 800c40c:	42a3      	cmp	r3, r4
 800c40e:	d908      	bls.n	800c422 <_free_r+0x42>
 800c410:	6820      	ldr	r0, [r4, #0]
 800c412:	1821      	adds	r1, r4, r0
 800c414:	428b      	cmp	r3, r1
 800c416:	bf01      	itttt	eq
 800c418:	6819      	ldreq	r1, [r3, #0]
 800c41a:	685b      	ldreq	r3, [r3, #4]
 800c41c:	1809      	addeq	r1, r1, r0
 800c41e:	6021      	streq	r1, [r4, #0]
 800c420:	e7ed      	b.n	800c3fe <_free_r+0x1e>
 800c422:	461a      	mov	r2, r3
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	b10b      	cbz	r3, 800c42c <_free_r+0x4c>
 800c428:	42a3      	cmp	r3, r4
 800c42a:	d9fa      	bls.n	800c422 <_free_r+0x42>
 800c42c:	6811      	ldr	r1, [r2, #0]
 800c42e:	1850      	adds	r0, r2, r1
 800c430:	42a0      	cmp	r0, r4
 800c432:	d10b      	bne.n	800c44c <_free_r+0x6c>
 800c434:	6820      	ldr	r0, [r4, #0]
 800c436:	4401      	add	r1, r0
 800c438:	1850      	adds	r0, r2, r1
 800c43a:	4283      	cmp	r3, r0
 800c43c:	6011      	str	r1, [r2, #0]
 800c43e:	d1e0      	bne.n	800c402 <_free_r+0x22>
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	4408      	add	r0, r1
 800c446:	6010      	str	r0, [r2, #0]
 800c448:	6053      	str	r3, [r2, #4]
 800c44a:	e7da      	b.n	800c402 <_free_r+0x22>
 800c44c:	d902      	bls.n	800c454 <_free_r+0x74>
 800c44e:	230c      	movs	r3, #12
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	e7d6      	b.n	800c402 <_free_r+0x22>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	1821      	adds	r1, r4, r0
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf01      	itttt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	1809      	addeq	r1, r1, r0
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	6054      	str	r4, [r2, #4]
 800c468:	e7cb      	b.n	800c402 <_free_r+0x22>
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20000c4c 	.word	0x20000c4c

0800c470 <rshift>:
 800c470:	6903      	ldr	r3, [r0, #16]
 800c472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c47a:	f100 0414 	add.w	r4, r0, #20
 800c47e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c482:	dd46      	ble.n	800c512 <rshift+0xa2>
 800c484:	f011 011f 	ands.w	r1, r1, #31
 800c488:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c48c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c490:	d10c      	bne.n	800c4ac <rshift+0x3c>
 800c492:	4629      	mov	r1, r5
 800c494:	f100 0710 	add.w	r7, r0, #16
 800c498:	42b1      	cmp	r1, r6
 800c49a:	d335      	bcc.n	800c508 <rshift+0x98>
 800c49c:	1a9b      	subs	r3, r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	1eea      	subs	r2, r5, #3
 800c4a2:	4296      	cmp	r6, r2
 800c4a4:	bf38      	it	cc
 800c4a6:	2300      	movcc	r3, #0
 800c4a8:	4423      	add	r3, r4
 800c4aa:	e015      	b.n	800c4d8 <rshift+0x68>
 800c4ac:	46a1      	mov	r9, r4
 800c4ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4b2:	f1c1 0820 	rsb	r8, r1, #32
 800c4b6:	40cf      	lsrs	r7, r1
 800c4b8:	f105 0e04 	add.w	lr, r5, #4
 800c4bc:	4576      	cmp	r6, lr
 800c4be:	46f4      	mov	ip, lr
 800c4c0:	d816      	bhi.n	800c4f0 <rshift+0x80>
 800c4c2:	1a9a      	subs	r2, r3, r2
 800c4c4:	0092      	lsls	r2, r2, #2
 800c4c6:	3a04      	subs	r2, #4
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	42ae      	cmp	r6, r5
 800c4cc:	bf38      	it	cc
 800c4ce:	2200      	movcc	r2, #0
 800c4d0:	18a3      	adds	r3, r4, r2
 800c4d2:	50a7      	str	r7, [r4, r2]
 800c4d4:	b107      	cbz	r7, 800c4d8 <rshift+0x68>
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	eba3 0204 	sub.w	r2, r3, r4
 800c4de:	bf08      	it	eq
 800c4e0:	2300      	moveq	r3, #0
 800c4e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4e6:	6102      	str	r2, [r0, #16]
 800c4e8:	bf08      	it	eq
 800c4ea:	6143      	streq	r3, [r0, #20]
 800c4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	f8dc c000 	ldr.w	ip, [ip]
 800c4f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4f8:	ea4c 0707 	orr.w	r7, ip, r7
 800c4fc:	f849 7b04 	str.w	r7, [r9], #4
 800c500:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c504:	40cf      	lsrs	r7, r1
 800c506:	e7d9      	b.n	800c4bc <rshift+0x4c>
 800c508:	f851 cb04 	ldr.w	ip, [r1], #4
 800c50c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c510:	e7c2      	b.n	800c498 <rshift+0x28>
 800c512:	4623      	mov	r3, r4
 800c514:	e7e0      	b.n	800c4d8 <rshift+0x68>

0800c516 <__hexdig_fun>:
 800c516:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c51a:	2b09      	cmp	r3, #9
 800c51c:	d802      	bhi.n	800c524 <__hexdig_fun+0xe>
 800c51e:	3820      	subs	r0, #32
 800c520:	b2c0      	uxtb	r0, r0
 800c522:	4770      	bx	lr
 800c524:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c528:	2b05      	cmp	r3, #5
 800c52a:	d801      	bhi.n	800c530 <__hexdig_fun+0x1a>
 800c52c:	3847      	subs	r0, #71	@ 0x47
 800c52e:	e7f7      	b.n	800c520 <__hexdig_fun+0xa>
 800c530:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c534:	2b05      	cmp	r3, #5
 800c536:	d801      	bhi.n	800c53c <__hexdig_fun+0x26>
 800c538:	3827      	subs	r0, #39	@ 0x27
 800c53a:	e7f1      	b.n	800c520 <__hexdig_fun+0xa>
 800c53c:	2000      	movs	r0, #0
 800c53e:	4770      	bx	lr

0800c540 <__gethex>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	468a      	mov	sl, r1
 800c546:	4690      	mov	r8, r2
 800c548:	b085      	sub	sp, #20
 800c54a:	9302      	str	r3, [sp, #8]
 800c54c:	680b      	ldr	r3, [r1, #0]
 800c54e:	9001      	str	r0, [sp, #4]
 800c550:	1c9c      	adds	r4, r3, #2
 800c552:	46a1      	mov	r9, r4
 800c554:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c558:	2830      	cmp	r0, #48	@ 0x30
 800c55a:	d0fa      	beq.n	800c552 <__gethex+0x12>
 800c55c:	eba9 0303 	sub.w	r3, r9, r3
 800c560:	f1a3 0b02 	sub.w	fp, r3, #2
 800c564:	f7ff ffd7 	bl	800c516 <__hexdig_fun>
 800c568:	4605      	mov	r5, r0
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d168      	bne.n	800c640 <__gethex+0x100>
 800c56e:	2201      	movs	r2, #1
 800c570:	4648      	mov	r0, r9
 800c572:	499f      	ldr	r1, [pc, #636]	@ (800c7f0 <__gethex+0x2b0>)
 800c574:	f7fe fabd 	bl	800aaf2 <strncmp>
 800c578:	4607      	mov	r7, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d167      	bne.n	800c64e <__gethex+0x10e>
 800c57e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c582:	4626      	mov	r6, r4
 800c584:	f7ff ffc7 	bl	800c516 <__hexdig_fun>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d062      	beq.n	800c652 <__gethex+0x112>
 800c58c:	4623      	mov	r3, r4
 800c58e:	7818      	ldrb	r0, [r3, #0]
 800c590:	4699      	mov	r9, r3
 800c592:	2830      	cmp	r0, #48	@ 0x30
 800c594:	f103 0301 	add.w	r3, r3, #1
 800c598:	d0f9      	beq.n	800c58e <__gethex+0x4e>
 800c59a:	f7ff ffbc 	bl	800c516 <__hexdig_fun>
 800c59e:	fab0 f580 	clz	r5, r0
 800c5a2:	f04f 0b01 	mov.w	fp, #1
 800c5a6:	096d      	lsrs	r5, r5, #5
 800c5a8:	464a      	mov	r2, r9
 800c5aa:	4616      	mov	r6, r2
 800c5ac:	7830      	ldrb	r0, [r6, #0]
 800c5ae:	3201      	adds	r2, #1
 800c5b0:	f7ff ffb1 	bl	800c516 <__hexdig_fun>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1f8      	bne.n	800c5aa <__gethex+0x6a>
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	498c      	ldr	r1, [pc, #560]	@ (800c7f0 <__gethex+0x2b0>)
 800c5be:	f7fe fa98 	bl	800aaf2 <strncmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d13f      	bne.n	800c646 <__gethex+0x106>
 800c5c6:	b944      	cbnz	r4, 800c5da <__gethex+0x9a>
 800c5c8:	1c74      	adds	r4, r6, #1
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	7830      	ldrb	r0, [r6, #0]
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	f7ff ffa0 	bl	800c516 <__hexdig_fun>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d1f8      	bne.n	800c5cc <__gethex+0x8c>
 800c5da:	1ba4      	subs	r4, r4, r6
 800c5dc:	00a7      	lsls	r7, r4, #2
 800c5de:	7833      	ldrb	r3, [r6, #0]
 800c5e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5e4:	2b50      	cmp	r3, #80	@ 0x50
 800c5e6:	d13e      	bne.n	800c666 <__gethex+0x126>
 800c5e8:	7873      	ldrb	r3, [r6, #1]
 800c5ea:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5ec:	d033      	beq.n	800c656 <__gethex+0x116>
 800c5ee:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5f0:	d034      	beq.n	800c65c <__gethex+0x11c>
 800c5f2:	2400      	movs	r4, #0
 800c5f4:	1c71      	adds	r1, r6, #1
 800c5f6:	7808      	ldrb	r0, [r1, #0]
 800c5f8:	f7ff ff8d 	bl	800c516 <__hexdig_fun>
 800c5fc:	1e43      	subs	r3, r0, #1
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b18      	cmp	r3, #24
 800c602:	d830      	bhi.n	800c666 <__gethex+0x126>
 800c604:	f1a0 0210 	sub.w	r2, r0, #16
 800c608:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c60c:	f7ff ff83 	bl	800c516 <__hexdig_fun>
 800c610:	f100 3cff 	add.w	ip, r0, #4294967295
 800c614:	fa5f fc8c 	uxtb.w	ip, ip
 800c618:	f1bc 0f18 	cmp.w	ip, #24
 800c61c:	f04f 030a 	mov.w	r3, #10
 800c620:	d91e      	bls.n	800c660 <__gethex+0x120>
 800c622:	b104      	cbz	r4, 800c626 <__gethex+0xe6>
 800c624:	4252      	negs	r2, r2
 800c626:	4417      	add	r7, r2
 800c628:	f8ca 1000 	str.w	r1, [sl]
 800c62c:	b1ed      	cbz	r5, 800c66a <__gethex+0x12a>
 800c62e:	f1bb 0f00 	cmp.w	fp, #0
 800c632:	bf0c      	ite	eq
 800c634:	2506      	moveq	r5, #6
 800c636:	2500      	movne	r5, #0
 800c638:	4628      	mov	r0, r5
 800c63a:	b005      	add	sp, #20
 800c63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c640:	2500      	movs	r5, #0
 800c642:	462c      	mov	r4, r5
 800c644:	e7b0      	b.n	800c5a8 <__gethex+0x68>
 800c646:	2c00      	cmp	r4, #0
 800c648:	d1c7      	bne.n	800c5da <__gethex+0x9a>
 800c64a:	4627      	mov	r7, r4
 800c64c:	e7c7      	b.n	800c5de <__gethex+0x9e>
 800c64e:	464e      	mov	r6, r9
 800c650:	462f      	mov	r7, r5
 800c652:	2501      	movs	r5, #1
 800c654:	e7c3      	b.n	800c5de <__gethex+0x9e>
 800c656:	2400      	movs	r4, #0
 800c658:	1cb1      	adds	r1, r6, #2
 800c65a:	e7cc      	b.n	800c5f6 <__gethex+0xb6>
 800c65c:	2401      	movs	r4, #1
 800c65e:	e7fb      	b.n	800c658 <__gethex+0x118>
 800c660:	fb03 0002 	mla	r0, r3, r2, r0
 800c664:	e7ce      	b.n	800c604 <__gethex+0xc4>
 800c666:	4631      	mov	r1, r6
 800c668:	e7de      	b.n	800c628 <__gethex+0xe8>
 800c66a:	4629      	mov	r1, r5
 800c66c:	eba6 0309 	sub.w	r3, r6, r9
 800c670:	3b01      	subs	r3, #1
 800c672:	2b07      	cmp	r3, #7
 800c674:	dc0a      	bgt.n	800c68c <__gethex+0x14c>
 800c676:	9801      	ldr	r0, [sp, #4]
 800c678:	f000 fb48 	bl	800cd0c <_Balloc>
 800c67c:	4604      	mov	r4, r0
 800c67e:	b940      	cbnz	r0, 800c692 <__gethex+0x152>
 800c680:	4602      	mov	r2, r0
 800c682:	21e4      	movs	r1, #228	@ 0xe4
 800c684:	4b5b      	ldr	r3, [pc, #364]	@ (800c7f4 <__gethex+0x2b4>)
 800c686:	485c      	ldr	r0, [pc, #368]	@ (800c7f8 <__gethex+0x2b8>)
 800c688:	f001 f954 	bl	800d934 <__assert_func>
 800c68c:	3101      	adds	r1, #1
 800c68e:	105b      	asrs	r3, r3, #1
 800c690:	e7ef      	b.n	800c672 <__gethex+0x132>
 800c692:	2300      	movs	r3, #0
 800c694:	f100 0a14 	add.w	sl, r0, #20
 800c698:	4655      	mov	r5, sl
 800c69a:	469b      	mov	fp, r3
 800c69c:	45b1      	cmp	r9, r6
 800c69e:	d337      	bcc.n	800c710 <__gethex+0x1d0>
 800c6a0:	f845 bb04 	str.w	fp, [r5], #4
 800c6a4:	eba5 050a 	sub.w	r5, r5, sl
 800c6a8:	10ad      	asrs	r5, r5, #2
 800c6aa:	6125      	str	r5, [r4, #16]
 800c6ac:	4658      	mov	r0, fp
 800c6ae:	f000 fc1f 	bl	800cef0 <__hi0bits>
 800c6b2:	016d      	lsls	r5, r5, #5
 800c6b4:	f8d8 6000 	ldr.w	r6, [r8]
 800c6b8:	1a2d      	subs	r5, r5, r0
 800c6ba:	42b5      	cmp	r5, r6
 800c6bc:	dd54      	ble.n	800c768 <__gethex+0x228>
 800c6be:	1bad      	subs	r5, r5, r6
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 ffa7 	bl	800d616 <__any_on>
 800c6c8:	4681      	mov	r9, r0
 800c6ca:	b178      	cbz	r0, 800c6ec <__gethex+0x1ac>
 800c6cc:	f04f 0901 	mov.w	r9, #1
 800c6d0:	1e6b      	subs	r3, r5, #1
 800c6d2:	1159      	asrs	r1, r3, #5
 800c6d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6d8:	f003 021f 	and.w	r2, r3, #31
 800c6dc:	fa09 f202 	lsl.w	r2, r9, r2
 800c6e0:	420a      	tst	r2, r1
 800c6e2:	d003      	beq.n	800c6ec <__gethex+0x1ac>
 800c6e4:	454b      	cmp	r3, r9
 800c6e6:	dc36      	bgt.n	800c756 <__gethex+0x216>
 800c6e8:	f04f 0902 	mov.w	r9, #2
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7ff febe 	bl	800c470 <rshift>
 800c6f4:	442f      	add	r7, r5
 800c6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6fa:	42bb      	cmp	r3, r7
 800c6fc:	da42      	bge.n	800c784 <__gethex+0x244>
 800c6fe:	4621      	mov	r1, r4
 800c700:	9801      	ldr	r0, [sp, #4]
 800c702:	f000 fb43 	bl	800cd8c <_Bfree>
 800c706:	2300      	movs	r3, #0
 800c708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70a:	25a3      	movs	r5, #163	@ 0xa3
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	e793      	b.n	800c638 <__gethex+0xf8>
 800c710:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c714:	2a2e      	cmp	r2, #46	@ 0x2e
 800c716:	d012      	beq.n	800c73e <__gethex+0x1fe>
 800c718:	2b20      	cmp	r3, #32
 800c71a:	d104      	bne.n	800c726 <__gethex+0x1e6>
 800c71c:	f845 bb04 	str.w	fp, [r5], #4
 800c720:	f04f 0b00 	mov.w	fp, #0
 800c724:	465b      	mov	r3, fp
 800c726:	7830      	ldrb	r0, [r6, #0]
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	f7ff fef4 	bl	800c516 <__hexdig_fun>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	f000 000f 	and.w	r0, r0, #15
 800c734:	4098      	lsls	r0, r3
 800c736:	ea4b 0b00 	orr.w	fp, fp, r0
 800c73a:	3304      	adds	r3, #4
 800c73c:	e7ae      	b.n	800c69c <__gethex+0x15c>
 800c73e:	45b1      	cmp	r9, r6
 800c740:	d8ea      	bhi.n	800c718 <__gethex+0x1d8>
 800c742:	2201      	movs	r2, #1
 800c744:	4630      	mov	r0, r6
 800c746:	492a      	ldr	r1, [pc, #168]	@ (800c7f0 <__gethex+0x2b0>)
 800c748:	9303      	str	r3, [sp, #12]
 800c74a:	f7fe f9d2 	bl	800aaf2 <strncmp>
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	2800      	cmp	r0, #0
 800c752:	d1e1      	bne.n	800c718 <__gethex+0x1d8>
 800c754:	e7a2      	b.n	800c69c <__gethex+0x15c>
 800c756:	4620      	mov	r0, r4
 800c758:	1ea9      	subs	r1, r5, #2
 800c75a:	f000 ff5c 	bl	800d616 <__any_on>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d0c2      	beq.n	800c6e8 <__gethex+0x1a8>
 800c762:	f04f 0903 	mov.w	r9, #3
 800c766:	e7c1      	b.n	800c6ec <__gethex+0x1ac>
 800c768:	da09      	bge.n	800c77e <__gethex+0x23e>
 800c76a:	1b75      	subs	r5, r6, r5
 800c76c:	4621      	mov	r1, r4
 800c76e:	462a      	mov	r2, r5
 800c770:	9801      	ldr	r0, [sp, #4]
 800c772:	f000 fd21 	bl	800d1b8 <__lshift>
 800c776:	4604      	mov	r4, r0
 800c778:	1b7f      	subs	r7, r7, r5
 800c77a:	f100 0a14 	add.w	sl, r0, #20
 800c77e:	f04f 0900 	mov.w	r9, #0
 800c782:	e7b8      	b.n	800c6f6 <__gethex+0x1b6>
 800c784:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c788:	42bd      	cmp	r5, r7
 800c78a:	dd6f      	ble.n	800c86c <__gethex+0x32c>
 800c78c:	1bed      	subs	r5, r5, r7
 800c78e:	42ae      	cmp	r6, r5
 800c790:	dc34      	bgt.n	800c7fc <__gethex+0x2bc>
 800c792:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d022      	beq.n	800c7e0 <__gethex+0x2a0>
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d024      	beq.n	800c7e8 <__gethex+0x2a8>
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d115      	bne.n	800c7ce <__gethex+0x28e>
 800c7a2:	42ae      	cmp	r6, r5
 800c7a4:	d113      	bne.n	800c7ce <__gethex+0x28e>
 800c7a6:	2e01      	cmp	r6, #1
 800c7a8:	d10b      	bne.n	800c7c2 <__gethex+0x282>
 800c7aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7ae:	9a02      	ldr	r2, [sp, #8]
 800c7b0:	2562      	movs	r5, #98	@ 0x62
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	6123      	str	r3, [r4, #16]
 800c7b8:	f8ca 3000 	str.w	r3, [sl]
 800c7bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7be:	601c      	str	r4, [r3, #0]
 800c7c0:	e73a      	b.n	800c638 <__gethex+0xf8>
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	1e71      	subs	r1, r6, #1
 800c7c6:	f000 ff26 	bl	800d616 <__any_on>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1ed      	bne.n	800c7aa <__gethex+0x26a>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	9801      	ldr	r0, [sp, #4]
 800c7d2:	f000 fadb 	bl	800cd8c <_Bfree>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7da:	2550      	movs	r5, #80	@ 0x50
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	e72b      	b.n	800c638 <__gethex+0xf8>
 800c7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1f3      	bne.n	800c7ce <__gethex+0x28e>
 800c7e6:	e7e0      	b.n	800c7aa <__gethex+0x26a>
 800c7e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1dd      	bne.n	800c7aa <__gethex+0x26a>
 800c7ee:	e7ee      	b.n	800c7ce <__gethex+0x28e>
 800c7f0:	0800edea 	.word	0x0800edea
 800c7f4:	0800f0a6 	.word	0x0800f0a6
 800c7f8:	0800f0b7 	.word	0x0800f0b7
 800c7fc:	1e6f      	subs	r7, r5, #1
 800c7fe:	f1b9 0f00 	cmp.w	r9, #0
 800c802:	d130      	bne.n	800c866 <__gethex+0x326>
 800c804:	b127      	cbz	r7, 800c810 <__gethex+0x2d0>
 800c806:	4639      	mov	r1, r7
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 ff04 	bl	800d616 <__any_on>
 800c80e:	4681      	mov	r9, r0
 800c810:	2301      	movs	r3, #1
 800c812:	4629      	mov	r1, r5
 800c814:	1b76      	subs	r6, r6, r5
 800c816:	2502      	movs	r5, #2
 800c818:	117a      	asrs	r2, r7, #5
 800c81a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c81e:	f007 071f 	and.w	r7, r7, #31
 800c822:	40bb      	lsls	r3, r7
 800c824:	4213      	tst	r3, r2
 800c826:	4620      	mov	r0, r4
 800c828:	bf18      	it	ne
 800c82a:	f049 0902 	orrne.w	r9, r9, #2
 800c82e:	f7ff fe1f 	bl	800c470 <rshift>
 800c832:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c836:	f1b9 0f00 	cmp.w	r9, #0
 800c83a:	d047      	beq.n	800c8cc <__gethex+0x38c>
 800c83c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c840:	2b02      	cmp	r3, #2
 800c842:	d015      	beq.n	800c870 <__gethex+0x330>
 800c844:	2b03      	cmp	r3, #3
 800c846:	d017      	beq.n	800c878 <__gethex+0x338>
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d109      	bne.n	800c860 <__gethex+0x320>
 800c84c:	f019 0f02 	tst.w	r9, #2
 800c850:	d006      	beq.n	800c860 <__gethex+0x320>
 800c852:	f8da 3000 	ldr.w	r3, [sl]
 800c856:	ea49 0903 	orr.w	r9, r9, r3
 800c85a:	f019 0f01 	tst.w	r9, #1
 800c85e:	d10e      	bne.n	800c87e <__gethex+0x33e>
 800c860:	f045 0510 	orr.w	r5, r5, #16
 800c864:	e032      	b.n	800c8cc <__gethex+0x38c>
 800c866:	f04f 0901 	mov.w	r9, #1
 800c86a:	e7d1      	b.n	800c810 <__gethex+0x2d0>
 800c86c:	2501      	movs	r5, #1
 800c86e:	e7e2      	b.n	800c836 <__gethex+0x2f6>
 800c870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c872:	f1c3 0301 	rsb	r3, r3, #1
 800c876:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0f0      	beq.n	800c860 <__gethex+0x320>
 800c87e:	f04f 0c00 	mov.w	ip, #0
 800c882:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c886:	f104 0314 	add.w	r3, r4, #20
 800c88a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c88e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c892:	4618      	mov	r0, r3
 800c894:	f853 2b04 	ldr.w	r2, [r3], #4
 800c898:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c89c:	d01b      	beq.n	800c8d6 <__gethex+0x396>
 800c89e:	3201      	adds	r2, #1
 800c8a0:	6002      	str	r2, [r0, #0]
 800c8a2:	2d02      	cmp	r5, #2
 800c8a4:	f104 0314 	add.w	r3, r4, #20
 800c8a8:	d13c      	bne.n	800c924 <__gethex+0x3e4>
 800c8aa:	f8d8 2000 	ldr.w	r2, [r8]
 800c8ae:	3a01      	subs	r2, #1
 800c8b0:	42b2      	cmp	r2, r6
 800c8b2:	d109      	bne.n	800c8c8 <__gethex+0x388>
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	1171      	asrs	r1, r6, #5
 800c8b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8bc:	f006 061f 	and.w	r6, r6, #31
 800c8c0:	fa02 f606 	lsl.w	r6, r2, r6
 800c8c4:	421e      	tst	r6, r3
 800c8c6:	d13a      	bne.n	800c93e <__gethex+0x3fe>
 800c8c8:	f045 0520 	orr.w	r5, r5, #32
 800c8cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ce:	601c      	str	r4, [r3, #0]
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	601f      	str	r7, [r3, #0]
 800c8d4:	e6b0      	b.n	800c638 <__gethex+0xf8>
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8dc:	d8d9      	bhi.n	800c892 <__gethex+0x352>
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	459b      	cmp	fp, r3
 800c8e2:	db17      	blt.n	800c914 <__gethex+0x3d4>
 800c8e4:	6861      	ldr	r1, [r4, #4]
 800c8e6:	9801      	ldr	r0, [sp, #4]
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	f000 fa0f 	bl	800cd0c <_Balloc>
 800c8ee:	4681      	mov	r9, r0
 800c8f0:	b918      	cbnz	r0, 800c8fa <__gethex+0x3ba>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	2184      	movs	r1, #132	@ 0x84
 800c8f6:	4b19      	ldr	r3, [pc, #100]	@ (800c95c <__gethex+0x41c>)
 800c8f8:	e6c5      	b.n	800c686 <__gethex+0x146>
 800c8fa:	6922      	ldr	r2, [r4, #16]
 800c8fc:	f104 010c 	add.w	r1, r4, #12
 800c900:	3202      	adds	r2, #2
 800c902:	0092      	lsls	r2, r2, #2
 800c904:	300c      	adds	r0, #12
 800c906:	f7fe fef8 	bl	800b6fa <memcpy>
 800c90a:	4621      	mov	r1, r4
 800c90c:	9801      	ldr	r0, [sp, #4]
 800c90e:	f000 fa3d 	bl	800cd8c <_Bfree>
 800c912:	464c      	mov	r4, r9
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	6122      	str	r2, [r4, #16]
 800c91a:	2201      	movs	r2, #1
 800c91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c920:	615a      	str	r2, [r3, #20]
 800c922:	e7be      	b.n	800c8a2 <__gethex+0x362>
 800c924:	6922      	ldr	r2, [r4, #16]
 800c926:	455a      	cmp	r2, fp
 800c928:	dd0b      	ble.n	800c942 <__gethex+0x402>
 800c92a:	2101      	movs	r1, #1
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7ff fd9f 	bl	800c470 <rshift>
 800c932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c936:	3701      	adds	r7, #1
 800c938:	42bb      	cmp	r3, r7
 800c93a:	f6ff aee0 	blt.w	800c6fe <__gethex+0x1be>
 800c93e:	2501      	movs	r5, #1
 800c940:	e7c2      	b.n	800c8c8 <__gethex+0x388>
 800c942:	f016 061f 	ands.w	r6, r6, #31
 800c946:	d0fa      	beq.n	800c93e <__gethex+0x3fe>
 800c948:	4453      	add	r3, sl
 800c94a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c94e:	f000 facf 	bl	800cef0 <__hi0bits>
 800c952:	f1c6 0620 	rsb	r6, r6, #32
 800c956:	42b0      	cmp	r0, r6
 800c958:	dbe7      	blt.n	800c92a <__gethex+0x3ea>
 800c95a:	e7f0      	b.n	800c93e <__gethex+0x3fe>
 800c95c:	0800f0a6 	.word	0x0800f0a6

0800c960 <L_shift>:
 800c960:	f1c2 0208 	rsb	r2, r2, #8
 800c964:	0092      	lsls	r2, r2, #2
 800c966:	b570      	push	{r4, r5, r6, lr}
 800c968:	f1c2 0620 	rsb	r6, r2, #32
 800c96c:	6843      	ldr	r3, [r0, #4]
 800c96e:	6804      	ldr	r4, [r0, #0]
 800c970:	fa03 f506 	lsl.w	r5, r3, r6
 800c974:	432c      	orrs	r4, r5
 800c976:	40d3      	lsrs	r3, r2
 800c978:	6004      	str	r4, [r0, #0]
 800c97a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c97e:	4288      	cmp	r0, r1
 800c980:	d3f4      	bcc.n	800c96c <L_shift+0xc>
 800c982:	bd70      	pop	{r4, r5, r6, pc}

0800c984 <__match>:
 800c984:	b530      	push	{r4, r5, lr}
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	3301      	adds	r3, #1
 800c98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98e:	b914      	cbnz	r4, 800c996 <__match+0x12>
 800c990:	6003      	str	r3, [r0, #0]
 800c992:	2001      	movs	r0, #1
 800c994:	bd30      	pop	{r4, r5, pc}
 800c996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c99e:	2d19      	cmp	r5, #25
 800c9a0:	bf98      	it	ls
 800c9a2:	3220      	addls	r2, #32
 800c9a4:	42a2      	cmp	r2, r4
 800c9a6:	d0f0      	beq.n	800c98a <__match+0x6>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e7f3      	b.n	800c994 <__match+0x10>

0800c9ac <__hexnan>:
 800c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	2500      	movs	r5, #0
 800c9b2:	680b      	ldr	r3, [r1, #0]
 800c9b4:	4682      	mov	sl, r0
 800c9b6:	115e      	asrs	r6, r3, #5
 800c9b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9bc:	f013 031f 	ands.w	r3, r3, #31
 800c9c0:	bf18      	it	ne
 800c9c2:	3604      	addne	r6, #4
 800c9c4:	1f37      	subs	r7, r6, #4
 800c9c6:	4690      	mov	r8, r2
 800c9c8:	46b9      	mov	r9, r7
 800c9ca:	463c      	mov	r4, r7
 800c9cc:	46ab      	mov	fp, r5
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	6801      	ldr	r1, [r0, #0]
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9d8:	9502      	str	r5, [sp, #8]
 800c9da:	784a      	ldrb	r2, [r1, #1]
 800c9dc:	1c4b      	adds	r3, r1, #1
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	b342      	cbz	r2, 800ca34 <__hexnan+0x88>
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	9105      	str	r1, [sp, #20]
 800c9e6:	9204      	str	r2, [sp, #16]
 800c9e8:	f7ff fd95 	bl	800c516 <__hexdig_fun>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d151      	bne.n	800ca94 <__hexnan+0xe8>
 800c9f0:	9a04      	ldr	r2, [sp, #16]
 800c9f2:	9905      	ldr	r1, [sp, #20]
 800c9f4:	2a20      	cmp	r2, #32
 800c9f6:	d818      	bhi.n	800ca2a <__hexnan+0x7e>
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	459b      	cmp	fp, r3
 800c9fc:	dd13      	ble.n	800ca26 <__hexnan+0x7a>
 800c9fe:	454c      	cmp	r4, r9
 800ca00:	d206      	bcs.n	800ca10 <__hexnan+0x64>
 800ca02:	2d07      	cmp	r5, #7
 800ca04:	dc04      	bgt.n	800ca10 <__hexnan+0x64>
 800ca06:	462a      	mov	r2, r5
 800ca08:	4649      	mov	r1, r9
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f7ff ffa8 	bl	800c960 <L_shift>
 800ca10:	4544      	cmp	r4, r8
 800ca12:	d952      	bls.n	800caba <__hexnan+0x10e>
 800ca14:	2300      	movs	r3, #0
 800ca16:	f1a4 0904 	sub.w	r9, r4, #4
 800ca1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca1e:	461d      	mov	r5, r3
 800ca20:	464c      	mov	r4, r9
 800ca22:	f8cd b008 	str.w	fp, [sp, #8]
 800ca26:	9903      	ldr	r1, [sp, #12]
 800ca28:	e7d7      	b.n	800c9da <__hexnan+0x2e>
 800ca2a:	2a29      	cmp	r2, #41	@ 0x29
 800ca2c:	d157      	bne.n	800cade <__hexnan+0x132>
 800ca2e:	3102      	adds	r1, #2
 800ca30:	f8ca 1000 	str.w	r1, [sl]
 800ca34:	f1bb 0f00 	cmp.w	fp, #0
 800ca38:	d051      	beq.n	800cade <__hexnan+0x132>
 800ca3a:	454c      	cmp	r4, r9
 800ca3c:	d206      	bcs.n	800ca4c <__hexnan+0xa0>
 800ca3e:	2d07      	cmp	r5, #7
 800ca40:	dc04      	bgt.n	800ca4c <__hexnan+0xa0>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4649      	mov	r1, r9
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7ff ff8a 	bl	800c960 <L_shift>
 800ca4c:	4544      	cmp	r4, r8
 800ca4e:	d936      	bls.n	800cabe <__hexnan+0x112>
 800ca50:	4623      	mov	r3, r4
 800ca52:	f1a8 0204 	sub.w	r2, r8, #4
 800ca56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca5a:	429f      	cmp	r7, r3
 800ca5c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca60:	d2f9      	bcs.n	800ca56 <__hexnan+0xaa>
 800ca62:	1b3b      	subs	r3, r7, r4
 800ca64:	f023 0303 	bic.w	r3, r3, #3
 800ca68:	3304      	adds	r3, #4
 800ca6a:	3401      	adds	r4, #1
 800ca6c:	3e03      	subs	r6, #3
 800ca6e:	42b4      	cmp	r4, r6
 800ca70:	bf88      	it	hi
 800ca72:	2304      	movhi	r3, #4
 800ca74:	2200      	movs	r2, #0
 800ca76:	4443      	add	r3, r8
 800ca78:	f843 2b04 	str.w	r2, [r3], #4
 800ca7c:	429f      	cmp	r7, r3
 800ca7e:	d2fb      	bcs.n	800ca78 <__hexnan+0xcc>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	b91b      	cbnz	r3, 800ca8c <__hexnan+0xe0>
 800ca84:	4547      	cmp	r7, r8
 800ca86:	d128      	bne.n	800cada <__hexnan+0x12e>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	2005      	movs	r0, #5
 800ca8e:	b007      	add	sp, #28
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	3501      	adds	r5, #1
 800ca96:	2d08      	cmp	r5, #8
 800ca98:	f10b 0b01 	add.w	fp, fp, #1
 800ca9c:	dd06      	ble.n	800caac <__hexnan+0x100>
 800ca9e:	4544      	cmp	r4, r8
 800caa0:	d9c1      	bls.n	800ca26 <__hexnan+0x7a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2501      	movs	r5, #1
 800caa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800caaa:	3c04      	subs	r4, #4
 800caac:	6822      	ldr	r2, [r4, #0]
 800caae:	f000 000f 	and.w	r0, r0, #15
 800cab2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cab6:	6020      	str	r0, [r4, #0]
 800cab8:	e7b5      	b.n	800ca26 <__hexnan+0x7a>
 800caba:	2508      	movs	r5, #8
 800cabc:	e7b3      	b.n	800ca26 <__hexnan+0x7a>
 800cabe:	9b01      	ldr	r3, [sp, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d0dd      	beq.n	800ca80 <__hexnan+0xd4>
 800cac4:	f04f 32ff 	mov.w	r2, #4294967295
 800cac8:	f1c3 0320 	rsb	r3, r3, #32
 800cacc:	40da      	lsrs	r2, r3
 800cace:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cad2:	4013      	ands	r3, r2
 800cad4:	f846 3c04 	str.w	r3, [r6, #-4]
 800cad8:	e7d2      	b.n	800ca80 <__hexnan+0xd4>
 800cada:	3f04      	subs	r7, #4
 800cadc:	e7d0      	b.n	800ca80 <__hexnan+0xd4>
 800cade:	2004      	movs	r0, #4
 800cae0:	e7d5      	b.n	800ca8e <__hexnan+0xe2>
	...

0800cae4 <_findenv_r>:
 800cae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800cb58 <_findenv_r+0x74>
 800caec:	4606      	mov	r6, r0
 800caee:	4689      	mov	r9, r1
 800caf0:	4617      	mov	r7, r2
 800caf2:	f000 ff51 	bl	800d998 <__env_lock>
 800caf6:	f8da 4000 	ldr.w	r4, [sl]
 800cafa:	b134      	cbz	r4, 800cb0a <_findenv_r+0x26>
 800cafc:	464b      	mov	r3, r9
 800cafe:	4698      	mov	r8, r3
 800cb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb04:	b13a      	cbz	r2, 800cb16 <_findenv_r+0x32>
 800cb06:	2a3d      	cmp	r2, #61	@ 0x3d
 800cb08:	d1f9      	bne.n	800cafe <_findenv_r+0x1a>
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f000 ff4a 	bl	800d9a4 <__env_unlock>
 800cb10:	2000      	movs	r0, #0
 800cb12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	eba8 0809 	sub.w	r8, r8, r9
 800cb1a:	46a3      	mov	fp, r4
 800cb1c:	f854 0b04 	ldr.w	r0, [r4], #4
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d0f2      	beq.n	800cb0a <_findenv_r+0x26>
 800cb24:	4642      	mov	r2, r8
 800cb26:	4649      	mov	r1, r9
 800cb28:	f7fd ffe3 	bl	800aaf2 <strncmp>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d1f4      	bne.n	800cb1a <_findenv_r+0x36>
 800cb30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cb34:	eb03 0508 	add.w	r5, r3, r8
 800cb38:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cb3c:	2b3d      	cmp	r3, #61	@ 0x3d
 800cb3e:	d1ec      	bne.n	800cb1a <_findenv_r+0x36>
 800cb40:	f8da 3000 	ldr.w	r3, [sl]
 800cb44:	4630      	mov	r0, r6
 800cb46:	ebab 0303 	sub.w	r3, fp, r3
 800cb4a:	109b      	asrs	r3, r3, #2
 800cb4c:	603b      	str	r3, [r7, #0]
 800cb4e:	f000 ff29 	bl	800d9a4 <__env_unlock>
 800cb52:	1c68      	adds	r0, r5, #1
 800cb54:	e7dd      	b.n	800cb12 <_findenv_r+0x2e>
 800cb56:	bf00      	nop
 800cb58:	20000004 	.word	0x20000004

0800cb5c <_getenv_r>:
 800cb5c:	b507      	push	{r0, r1, r2, lr}
 800cb5e:	aa01      	add	r2, sp, #4
 800cb60:	f7ff ffc0 	bl	800cae4 <_findenv_r>
 800cb64:	b003      	add	sp, #12
 800cb66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cb6c <malloc>:
 800cb6c:	4b02      	ldr	r3, [pc, #8]	@ (800cb78 <malloc+0xc>)
 800cb6e:	4601      	mov	r1, r0
 800cb70:	6818      	ldr	r0, [r3, #0]
 800cb72:	f000 b82d 	b.w	800cbd0 <_malloc_r>
 800cb76:	bf00      	nop
 800cb78:	20000194 	.word	0x20000194

0800cb7c <free>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	@ (800cb88 <free+0xc>)
 800cb7e:	4601      	mov	r1, r0
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	f7ff bc2d 	b.w	800c3e0 <_free_r>
 800cb86:	bf00      	nop
 800cb88:	20000194 	.word	0x20000194

0800cb8c <sbrk_aligned>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4e0f      	ldr	r6, [pc, #60]	@ (800cbcc <sbrk_aligned+0x40>)
 800cb90:	460c      	mov	r4, r1
 800cb92:	6831      	ldr	r1, [r6, #0]
 800cb94:	4605      	mov	r5, r0
 800cb96:	b911      	cbnz	r1, 800cb9e <sbrk_aligned+0x12>
 800cb98:	f000 febc 	bl	800d914 <_sbrk_r>
 800cb9c:	6030      	str	r0, [r6, #0]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4628      	mov	r0, r5
 800cba2:	f000 feb7 	bl	800d914 <_sbrk_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d103      	bne.n	800cbb2 <sbrk_aligned+0x26>
 800cbaa:	f04f 34ff 	mov.w	r4, #4294967295
 800cbae:	4620      	mov	r0, r4
 800cbb0:	bd70      	pop	{r4, r5, r6, pc}
 800cbb2:	1cc4      	adds	r4, r0, #3
 800cbb4:	f024 0403 	bic.w	r4, r4, #3
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d0f8      	beq.n	800cbae <sbrk_aligned+0x22>
 800cbbc:	1a21      	subs	r1, r4, r0
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f000 fea8 	bl	800d914 <_sbrk_r>
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d1f2      	bne.n	800cbae <sbrk_aligned+0x22>
 800cbc8:	e7ef      	b.n	800cbaa <sbrk_aligned+0x1e>
 800cbca:	bf00      	nop
 800cbcc:	20000c48 	.word	0x20000c48

0800cbd0 <_malloc_r>:
 800cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd4:	1ccd      	adds	r5, r1, #3
 800cbd6:	f025 0503 	bic.w	r5, r5, #3
 800cbda:	3508      	adds	r5, #8
 800cbdc:	2d0c      	cmp	r5, #12
 800cbde:	bf38      	it	cc
 800cbe0:	250c      	movcc	r5, #12
 800cbe2:	2d00      	cmp	r5, #0
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	db01      	blt.n	800cbec <_malloc_r+0x1c>
 800cbe8:	42a9      	cmp	r1, r5
 800cbea:	d904      	bls.n	800cbf6 <_malloc_r+0x26>
 800cbec:	230c      	movs	r3, #12
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cccc <_malloc_r+0xfc>
 800cbfa:	f000 f87b 	bl	800ccf4 <__malloc_lock>
 800cbfe:	f8d8 3000 	ldr.w	r3, [r8]
 800cc02:	461c      	mov	r4, r3
 800cc04:	bb44      	cbnz	r4, 800cc58 <_malloc_r+0x88>
 800cc06:	4629      	mov	r1, r5
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7ff ffbf 	bl	800cb8c <sbrk_aligned>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	4604      	mov	r4, r0
 800cc12:	d158      	bne.n	800ccc6 <_malloc_r+0xf6>
 800cc14:	f8d8 4000 	ldr.w	r4, [r8]
 800cc18:	4627      	mov	r7, r4
 800cc1a:	2f00      	cmp	r7, #0
 800cc1c:	d143      	bne.n	800cca6 <_malloc_r+0xd6>
 800cc1e:	2c00      	cmp	r4, #0
 800cc20:	d04b      	beq.n	800ccba <_malloc_r+0xea>
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	4639      	mov	r1, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	eb04 0903 	add.w	r9, r4, r3
 800cc2c:	f000 fe72 	bl	800d914 <_sbrk_r>
 800cc30:	4581      	cmp	r9, r0
 800cc32:	d142      	bne.n	800ccba <_malloc_r+0xea>
 800cc34:	6821      	ldr	r1, [r4, #0]
 800cc36:	4630      	mov	r0, r6
 800cc38:	1a6d      	subs	r5, r5, r1
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7ff ffa6 	bl	800cb8c <sbrk_aligned>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d03a      	beq.n	800ccba <_malloc_r+0xea>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	442b      	add	r3, r5
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	bb62      	cbnz	r2, 800ccac <_malloc_r+0xdc>
 800cc52:	f8c8 7000 	str.w	r7, [r8]
 800cc56:	e00f      	b.n	800cc78 <_malloc_r+0xa8>
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	1b52      	subs	r2, r2, r5
 800cc5c:	d420      	bmi.n	800cca0 <_malloc_r+0xd0>
 800cc5e:	2a0b      	cmp	r2, #11
 800cc60:	d917      	bls.n	800cc92 <_malloc_r+0xc2>
 800cc62:	1961      	adds	r1, r4, r5
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	6025      	str	r5, [r4, #0]
 800cc68:	bf18      	it	ne
 800cc6a:	6059      	strne	r1, [r3, #4]
 800cc6c:	6863      	ldr	r3, [r4, #4]
 800cc6e:	bf08      	it	eq
 800cc70:	f8c8 1000 	streq.w	r1, [r8]
 800cc74:	5162      	str	r2, [r4, r5]
 800cc76:	604b      	str	r3, [r1, #4]
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f000 f841 	bl	800cd00 <__malloc_unlock>
 800cc7e:	f104 000b 	add.w	r0, r4, #11
 800cc82:	1d23      	adds	r3, r4, #4
 800cc84:	f020 0007 	bic.w	r0, r0, #7
 800cc88:	1ac2      	subs	r2, r0, r3
 800cc8a:	bf1c      	itt	ne
 800cc8c:	1a1b      	subne	r3, r3, r0
 800cc8e:	50a3      	strne	r3, [r4, r2]
 800cc90:	e7af      	b.n	800cbf2 <_malloc_r+0x22>
 800cc92:	6862      	ldr	r2, [r4, #4]
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	bf0c      	ite	eq
 800cc98:	f8c8 2000 	streq.w	r2, [r8]
 800cc9c:	605a      	strne	r2, [r3, #4]
 800cc9e:	e7eb      	b.n	800cc78 <_malloc_r+0xa8>
 800cca0:	4623      	mov	r3, r4
 800cca2:	6864      	ldr	r4, [r4, #4]
 800cca4:	e7ae      	b.n	800cc04 <_malloc_r+0x34>
 800cca6:	463c      	mov	r4, r7
 800cca8:	687f      	ldr	r7, [r7, #4]
 800ccaa:	e7b6      	b.n	800cc1a <_malloc_r+0x4a>
 800ccac:	461a      	mov	r2, r3
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	d1fb      	bne.n	800ccac <_malloc_r+0xdc>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	6053      	str	r3, [r2, #4]
 800ccb8:	e7de      	b.n	800cc78 <_malloc_r+0xa8>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	6033      	str	r3, [r6, #0]
 800ccc0:	f000 f81e 	bl	800cd00 <__malloc_unlock>
 800ccc4:	e794      	b.n	800cbf0 <_malloc_r+0x20>
 800ccc6:	6005      	str	r5, [r0, #0]
 800ccc8:	e7d6      	b.n	800cc78 <_malloc_r+0xa8>
 800ccca:	bf00      	nop
 800cccc:	20000c4c 	.word	0x20000c4c

0800ccd0 <__ascii_mbtowc>:
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	b901      	cbnz	r1, 800ccd6 <__ascii_mbtowc+0x6>
 800ccd4:	a901      	add	r1, sp, #4
 800ccd6:	b142      	cbz	r2, 800ccea <__ascii_mbtowc+0x1a>
 800ccd8:	b14b      	cbz	r3, 800ccee <__ascii_mbtowc+0x1e>
 800ccda:	7813      	ldrb	r3, [r2, #0]
 800ccdc:	600b      	str	r3, [r1, #0]
 800ccde:	7812      	ldrb	r2, [r2, #0]
 800cce0:	1e10      	subs	r0, r2, #0
 800cce2:	bf18      	it	ne
 800cce4:	2001      	movne	r0, #1
 800cce6:	b002      	add	sp, #8
 800cce8:	4770      	bx	lr
 800ccea:	4610      	mov	r0, r2
 800ccec:	e7fb      	b.n	800cce6 <__ascii_mbtowc+0x16>
 800ccee:	f06f 0001 	mvn.w	r0, #1
 800ccf2:	e7f8      	b.n	800cce6 <__ascii_mbtowc+0x16>

0800ccf4 <__malloc_lock>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	@ (800ccfc <__malloc_lock+0x8>)
 800ccf6:	f7fe bce7 	b.w	800b6c8 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20000c46 	.word	0x20000c46

0800cd00 <__malloc_unlock>:
 800cd00:	4801      	ldr	r0, [pc, #4]	@ (800cd08 <__malloc_unlock+0x8>)
 800cd02:	f7fe bce3 	b.w	800b6cc <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	20000c46 	.word	0x20000c46

0800cd0c <_Balloc>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	69c6      	ldr	r6, [r0, #28]
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	b976      	cbnz	r6, 800cd34 <_Balloc+0x28>
 800cd16:	2010      	movs	r0, #16
 800cd18:	f7ff ff28 	bl	800cb6c <malloc>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	61e0      	str	r0, [r4, #28]
 800cd20:	b920      	cbnz	r0, 800cd2c <_Balloc+0x20>
 800cd22:	216b      	movs	r1, #107	@ 0x6b
 800cd24:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <_Balloc+0x78>)
 800cd26:	4818      	ldr	r0, [pc, #96]	@ (800cd88 <_Balloc+0x7c>)
 800cd28:	f000 fe04 	bl	800d934 <__assert_func>
 800cd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd30:	6006      	str	r6, [r0, #0]
 800cd32:	60c6      	str	r6, [r0, #12]
 800cd34:	69e6      	ldr	r6, [r4, #28]
 800cd36:	68f3      	ldr	r3, [r6, #12]
 800cd38:	b183      	cbz	r3, 800cd5c <_Balloc+0x50>
 800cd3a:	69e3      	ldr	r3, [r4, #28]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd42:	b9b8      	cbnz	r0, 800cd74 <_Balloc+0x68>
 800cd44:	2101      	movs	r1, #1
 800cd46:	fa01 f605 	lsl.w	r6, r1, r5
 800cd4a:	1d72      	adds	r2, r6, #5
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	0092      	lsls	r2, r2, #2
 800cd50:	f000 fe0e 	bl	800d970 <_calloc_r>
 800cd54:	b160      	cbz	r0, 800cd70 <_Balloc+0x64>
 800cd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd5a:	e00e      	b.n	800cd7a <_Balloc+0x6e>
 800cd5c:	2221      	movs	r2, #33	@ 0x21
 800cd5e:	2104      	movs	r1, #4
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fe05 	bl	800d970 <_calloc_r>
 800cd66:	69e3      	ldr	r3, [r4, #28]
 800cd68:	60f0      	str	r0, [r6, #12]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e4      	bne.n	800cd3a <_Balloc+0x2e>
 800cd70:	2000      	movs	r0, #0
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	6802      	ldr	r2, [r0, #0]
 800cd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd80:	e7f7      	b.n	800cd72 <_Balloc+0x66>
 800cd82:	bf00      	nop
 800cd84:	0800f037 	.word	0x0800f037
 800cd88:	0800f117 	.word	0x0800f117

0800cd8c <_Bfree>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	69c6      	ldr	r6, [r0, #28]
 800cd90:	4605      	mov	r5, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	b976      	cbnz	r6, 800cdb4 <_Bfree+0x28>
 800cd96:	2010      	movs	r0, #16
 800cd98:	f7ff fee8 	bl	800cb6c <malloc>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	61e8      	str	r0, [r5, #28]
 800cda0:	b920      	cbnz	r0, 800cdac <_Bfree+0x20>
 800cda2:	218f      	movs	r1, #143	@ 0x8f
 800cda4:	4b08      	ldr	r3, [pc, #32]	@ (800cdc8 <_Bfree+0x3c>)
 800cda6:	4809      	ldr	r0, [pc, #36]	@ (800cdcc <_Bfree+0x40>)
 800cda8:	f000 fdc4 	bl	800d934 <__assert_func>
 800cdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdb0:	6006      	str	r6, [r0, #0]
 800cdb2:	60c6      	str	r6, [r0, #12]
 800cdb4:	b13c      	cbz	r4, 800cdc6 <_Bfree+0x3a>
 800cdb6:	69eb      	ldr	r3, [r5, #28]
 800cdb8:	6862      	ldr	r2, [r4, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdc0:	6021      	str	r1, [r4, #0]
 800cdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	0800f037 	.word	0x0800f037
 800cdcc:	0800f117 	.word	0x0800f117

0800cdd0 <__multadd>:
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	461e      	mov	r6, r3
 800cdda:	2000      	movs	r0, #0
 800cddc:	690d      	ldr	r5, [r1, #16]
 800cdde:	f101 0c14 	add.w	ip, r1, #20
 800cde2:	f8dc 3000 	ldr.w	r3, [ip]
 800cde6:	3001      	adds	r0, #1
 800cde8:	b299      	uxth	r1, r3
 800cdea:	fb02 6101 	mla	r1, r2, r1, r6
 800cdee:	0c1e      	lsrs	r6, r3, #16
 800cdf0:	0c0b      	lsrs	r3, r1, #16
 800cdf2:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf6:	b289      	uxth	r1, r1
 800cdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdfc:	4285      	cmp	r5, r0
 800cdfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce02:	f84c 1b04 	str.w	r1, [ip], #4
 800ce06:	dcec      	bgt.n	800cde2 <__multadd+0x12>
 800ce08:	b30e      	cbz	r6, 800ce4e <__multadd+0x7e>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc19      	bgt.n	800ce44 <__multadd+0x74>
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	4638      	mov	r0, r7
 800ce14:	3101      	adds	r1, #1
 800ce16:	f7ff ff79 	bl	800cd0c <_Balloc>
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	b928      	cbnz	r0, 800ce2a <__multadd+0x5a>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	21ba      	movs	r1, #186	@ 0xba
 800ce22:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <__multadd+0x84>)
 800ce24:	480c      	ldr	r0, [pc, #48]	@ (800ce58 <__multadd+0x88>)
 800ce26:	f000 fd85 	bl	800d934 <__assert_func>
 800ce2a:	6922      	ldr	r2, [r4, #16]
 800ce2c:	f104 010c 	add.w	r1, r4, #12
 800ce30:	3202      	adds	r2, #2
 800ce32:	0092      	lsls	r2, r2, #2
 800ce34:	300c      	adds	r0, #12
 800ce36:	f7fe fc60 	bl	800b6fa <memcpy>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff ffa5 	bl	800cd8c <_Bfree>
 800ce42:	4644      	mov	r4, r8
 800ce44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce48:	3501      	adds	r5, #1
 800ce4a:	615e      	str	r6, [r3, #20]
 800ce4c:	6125      	str	r5, [r4, #16]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	0800f0a6 	.word	0x0800f0a6
 800ce58:	0800f117 	.word	0x0800f117

0800ce5c <__s2b>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4615      	mov	r5, r2
 800ce62:	2209      	movs	r2, #9
 800ce64:	461f      	mov	r7, r3
 800ce66:	3308      	adds	r3, #8
 800ce68:	460c      	mov	r4, r1
 800ce6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce6e:	4606      	mov	r6, r0
 800ce70:	2201      	movs	r2, #1
 800ce72:	2100      	movs	r1, #0
 800ce74:	429a      	cmp	r2, r3
 800ce76:	db09      	blt.n	800ce8c <__s2b+0x30>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff ff47 	bl	800cd0c <_Balloc>
 800ce7e:	b940      	cbnz	r0, 800ce92 <__s2b+0x36>
 800ce80:	4602      	mov	r2, r0
 800ce82:	21d3      	movs	r1, #211	@ 0xd3
 800ce84:	4b18      	ldr	r3, [pc, #96]	@ (800cee8 <__s2b+0x8c>)
 800ce86:	4819      	ldr	r0, [pc, #100]	@ (800ceec <__s2b+0x90>)
 800ce88:	f000 fd54 	bl	800d934 <__assert_func>
 800ce8c:	0052      	lsls	r2, r2, #1
 800ce8e:	3101      	adds	r1, #1
 800ce90:	e7f0      	b.n	800ce74 <__s2b+0x18>
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	2d09      	cmp	r5, #9
 800ce96:	6143      	str	r3, [r0, #20]
 800ce98:	f04f 0301 	mov.w	r3, #1
 800ce9c:	6103      	str	r3, [r0, #16]
 800ce9e:	dd16      	ble.n	800cece <__s2b+0x72>
 800cea0:	f104 0909 	add.w	r9, r4, #9
 800cea4:	46c8      	mov	r8, r9
 800cea6:	442c      	add	r4, r5
 800cea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ceac:	4601      	mov	r1, r0
 800ceae:	220a      	movs	r2, #10
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	3b30      	subs	r3, #48	@ 0x30
 800ceb4:	f7ff ff8c 	bl	800cdd0 <__multadd>
 800ceb8:	45a0      	cmp	r8, r4
 800ceba:	d1f5      	bne.n	800cea8 <__s2b+0x4c>
 800cebc:	f1a5 0408 	sub.w	r4, r5, #8
 800cec0:	444c      	add	r4, r9
 800cec2:	1b2d      	subs	r5, r5, r4
 800cec4:	1963      	adds	r3, r4, r5
 800cec6:	42bb      	cmp	r3, r7
 800cec8:	db04      	blt.n	800ced4 <__s2b+0x78>
 800ceca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cece:	2509      	movs	r5, #9
 800ced0:	340a      	adds	r4, #10
 800ced2:	e7f6      	b.n	800cec2 <__s2b+0x66>
 800ced4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ced8:	4601      	mov	r1, r0
 800ceda:	220a      	movs	r2, #10
 800cedc:	4630      	mov	r0, r6
 800cede:	3b30      	subs	r3, #48	@ 0x30
 800cee0:	f7ff ff76 	bl	800cdd0 <__multadd>
 800cee4:	e7ee      	b.n	800cec4 <__s2b+0x68>
 800cee6:	bf00      	nop
 800cee8:	0800f0a6 	.word	0x0800f0a6
 800ceec:	0800f117 	.word	0x0800f117

0800cef0 <__hi0bits>:
 800cef0:	4603      	mov	r3, r0
 800cef2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cef6:	bf3a      	itte	cc
 800cef8:	0403      	lslcc	r3, r0, #16
 800cefa:	2010      	movcc	r0, #16
 800cefc:	2000      	movcs	r0, #0
 800cefe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf02:	bf3c      	itt	cc
 800cf04:	021b      	lslcc	r3, r3, #8
 800cf06:	3008      	addcc	r0, #8
 800cf08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf0c:	bf3c      	itt	cc
 800cf0e:	011b      	lslcc	r3, r3, #4
 800cf10:	3004      	addcc	r0, #4
 800cf12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf16:	bf3c      	itt	cc
 800cf18:	009b      	lslcc	r3, r3, #2
 800cf1a:	3002      	addcc	r0, #2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	db05      	blt.n	800cf2c <__hi0bits+0x3c>
 800cf20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf24:	f100 0001 	add.w	r0, r0, #1
 800cf28:	bf08      	it	eq
 800cf2a:	2020      	moveq	r0, #32
 800cf2c:	4770      	bx	lr

0800cf2e <__lo0bits>:
 800cf2e:	6803      	ldr	r3, [r0, #0]
 800cf30:	4602      	mov	r2, r0
 800cf32:	f013 0007 	ands.w	r0, r3, #7
 800cf36:	d00b      	beq.n	800cf50 <__lo0bits+0x22>
 800cf38:	07d9      	lsls	r1, r3, #31
 800cf3a:	d421      	bmi.n	800cf80 <__lo0bits+0x52>
 800cf3c:	0798      	lsls	r0, r3, #30
 800cf3e:	bf49      	itett	mi
 800cf40:	085b      	lsrmi	r3, r3, #1
 800cf42:	089b      	lsrpl	r3, r3, #2
 800cf44:	2001      	movmi	r0, #1
 800cf46:	6013      	strmi	r3, [r2, #0]
 800cf48:	bf5c      	itt	pl
 800cf4a:	2002      	movpl	r0, #2
 800cf4c:	6013      	strpl	r3, [r2, #0]
 800cf4e:	4770      	bx	lr
 800cf50:	b299      	uxth	r1, r3
 800cf52:	b909      	cbnz	r1, 800cf58 <__lo0bits+0x2a>
 800cf54:	2010      	movs	r0, #16
 800cf56:	0c1b      	lsrs	r3, r3, #16
 800cf58:	b2d9      	uxtb	r1, r3
 800cf5a:	b909      	cbnz	r1, 800cf60 <__lo0bits+0x32>
 800cf5c:	3008      	adds	r0, #8
 800cf5e:	0a1b      	lsrs	r3, r3, #8
 800cf60:	0719      	lsls	r1, r3, #28
 800cf62:	bf04      	itt	eq
 800cf64:	091b      	lsreq	r3, r3, #4
 800cf66:	3004      	addeq	r0, #4
 800cf68:	0799      	lsls	r1, r3, #30
 800cf6a:	bf04      	itt	eq
 800cf6c:	089b      	lsreq	r3, r3, #2
 800cf6e:	3002      	addeq	r0, #2
 800cf70:	07d9      	lsls	r1, r3, #31
 800cf72:	d403      	bmi.n	800cf7c <__lo0bits+0x4e>
 800cf74:	085b      	lsrs	r3, r3, #1
 800cf76:	f100 0001 	add.w	r0, r0, #1
 800cf7a:	d003      	beq.n	800cf84 <__lo0bits+0x56>
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	4770      	bx	lr
 800cf80:	2000      	movs	r0, #0
 800cf82:	4770      	bx	lr
 800cf84:	2020      	movs	r0, #32
 800cf86:	4770      	bx	lr

0800cf88 <__i2b>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	f7ff febd 	bl	800cd0c <_Balloc>
 800cf92:	4602      	mov	r2, r0
 800cf94:	b928      	cbnz	r0, 800cfa2 <__i2b+0x1a>
 800cf96:	f240 1145 	movw	r1, #325	@ 0x145
 800cf9a:	4b04      	ldr	r3, [pc, #16]	@ (800cfac <__i2b+0x24>)
 800cf9c:	4804      	ldr	r0, [pc, #16]	@ (800cfb0 <__i2b+0x28>)
 800cf9e:	f000 fcc9 	bl	800d934 <__assert_func>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	6144      	str	r4, [r0, #20]
 800cfa6:	6103      	str	r3, [r0, #16]
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	bf00      	nop
 800cfac:	0800f0a6 	.word	0x0800f0a6
 800cfb0:	0800f117 	.word	0x0800f117

0800cfb4 <__multiply>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4614      	mov	r4, r2
 800cfba:	690a      	ldr	r2, [r1, #16]
 800cfbc:	6923      	ldr	r3, [r4, #16]
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	bfa2      	ittt	ge
 800cfc4:	4623      	movge	r3, r4
 800cfc6:	460c      	movge	r4, r1
 800cfc8:	461f      	movge	r7, r3
 800cfca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cfce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	6861      	ldr	r1, [r4, #4]
 800cfd6:	eb0a 0609 	add.w	r6, sl, r9
 800cfda:	42b3      	cmp	r3, r6
 800cfdc:	b085      	sub	sp, #20
 800cfde:	bfb8      	it	lt
 800cfe0:	3101      	addlt	r1, #1
 800cfe2:	f7ff fe93 	bl	800cd0c <_Balloc>
 800cfe6:	b930      	cbnz	r0, 800cff6 <__multiply+0x42>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cfee:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <__multiply+0x148>)
 800cff0:	4843      	ldr	r0, [pc, #268]	@ (800d100 <__multiply+0x14c>)
 800cff2:	f000 fc9f 	bl	800d934 <__assert_func>
 800cff6:	f100 0514 	add.w	r5, r0, #20
 800cffa:	462b      	mov	r3, r5
 800cffc:	2200      	movs	r2, #0
 800cffe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d002:	4543      	cmp	r3, r8
 800d004:	d321      	bcc.n	800d04a <__multiply+0x96>
 800d006:	f107 0114 	add.w	r1, r7, #20
 800d00a:	f104 0214 	add.w	r2, r4, #20
 800d00e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d012:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d016:	9302      	str	r3, [sp, #8]
 800d018:	1b13      	subs	r3, r2, r4
 800d01a:	3b15      	subs	r3, #21
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	3304      	adds	r3, #4
 800d022:	f104 0715 	add.w	r7, r4, #21
 800d026:	42ba      	cmp	r2, r7
 800d028:	bf38      	it	cc
 800d02a:	2304      	movcc	r3, #4
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	9b02      	ldr	r3, [sp, #8]
 800d030:	9103      	str	r1, [sp, #12]
 800d032:	428b      	cmp	r3, r1
 800d034:	d80c      	bhi.n	800d050 <__multiply+0x9c>
 800d036:	2e00      	cmp	r6, #0
 800d038:	dd03      	ble.n	800d042 <__multiply+0x8e>
 800d03a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d05a      	beq.n	800d0f8 <__multiply+0x144>
 800d042:	6106      	str	r6, [r0, #16]
 800d044:	b005      	add	sp, #20
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	f843 2b04 	str.w	r2, [r3], #4
 800d04e:	e7d8      	b.n	800d002 <__multiply+0x4e>
 800d050:	f8b1 a000 	ldrh.w	sl, [r1]
 800d054:	f1ba 0f00 	cmp.w	sl, #0
 800d058:	d023      	beq.n	800d0a2 <__multiply+0xee>
 800d05a:	46a9      	mov	r9, r5
 800d05c:	f04f 0c00 	mov.w	ip, #0
 800d060:	f104 0e14 	add.w	lr, r4, #20
 800d064:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d068:	f8d9 3000 	ldr.w	r3, [r9]
 800d06c:	fa1f fb87 	uxth.w	fp, r7
 800d070:	b29b      	uxth	r3, r3
 800d072:	fb0a 330b 	mla	r3, sl, fp, r3
 800d076:	4463      	add	r3, ip
 800d078:	f8d9 c000 	ldr.w	ip, [r9]
 800d07c:	0c3f      	lsrs	r7, r7, #16
 800d07e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d082:	fb0a c707 	mla	r7, sl, r7, ip
 800d086:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d090:	4572      	cmp	r2, lr
 800d092:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d096:	f849 3b04 	str.w	r3, [r9], #4
 800d09a:	d8e3      	bhi.n	800d064 <__multiply+0xb0>
 800d09c:	9b01      	ldr	r3, [sp, #4]
 800d09e:	f845 c003 	str.w	ip, [r5, r3]
 800d0a2:	9b03      	ldr	r3, [sp, #12]
 800d0a4:	3104      	adds	r1, #4
 800d0a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0aa:	f1b9 0f00 	cmp.w	r9, #0
 800d0ae:	d021      	beq.n	800d0f4 <__multiply+0x140>
 800d0b0:	46ae      	mov	lr, r5
 800d0b2:	f04f 0a00 	mov.w	sl, #0
 800d0b6:	682b      	ldr	r3, [r5, #0]
 800d0b8:	f104 0c14 	add.w	ip, r4, #20
 800d0bc:	f8bc b000 	ldrh.w	fp, [ip]
 800d0c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	fb09 770b 	mla	r7, r9, fp, r7
 800d0ca:	4457      	add	r7, sl
 800d0cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0d0:	f84e 3b04 	str.w	r3, [lr], #4
 800d0d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0dc:	f8be 3000 	ldrh.w	r3, [lr]
 800d0e0:	4562      	cmp	r2, ip
 800d0e2:	fb09 330a 	mla	r3, r9, sl, r3
 800d0e6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d0ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0ee:	d8e5      	bhi.n	800d0bc <__multiply+0x108>
 800d0f0:	9f01      	ldr	r7, [sp, #4]
 800d0f2:	51eb      	str	r3, [r5, r7]
 800d0f4:	3504      	adds	r5, #4
 800d0f6:	e79a      	b.n	800d02e <__multiply+0x7a>
 800d0f8:	3e01      	subs	r6, #1
 800d0fa:	e79c      	b.n	800d036 <__multiply+0x82>
 800d0fc:	0800f0a6 	.word	0x0800f0a6
 800d100:	0800f117 	.word	0x0800f117

0800d104 <__pow5mult>:
 800d104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d108:	4615      	mov	r5, r2
 800d10a:	f012 0203 	ands.w	r2, r2, #3
 800d10e:	4607      	mov	r7, r0
 800d110:	460e      	mov	r6, r1
 800d112:	d007      	beq.n	800d124 <__pow5mult+0x20>
 800d114:	4c25      	ldr	r4, [pc, #148]	@ (800d1ac <__pow5mult+0xa8>)
 800d116:	3a01      	subs	r2, #1
 800d118:	2300      	movs	r3, #0
 800d11a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d11e:	f7ff fe57 	bl	800cdd0 <__multadd>
 800d122:	4606      	mov	r6, r0
 800d124:	10ad      	asrs	r5, r5, #2
 800d126:	d03d      	beq.n	800d1a4 <__pow5mult+0xa0>
 800d128:	69fc      	ldr	r4, [r7, #28]
 800d12a:	b97c      	cbnz	r4, 800d14c <__pow5mult+0x48>
 800d12c:	2010      	movs	r0, #16
 800d12e:	f7ff fd1d 	bl	800cb6c <malloc>
 800d132:	4602      	mov	r2, r0
 800d134:	61f8      	str	r0, [r7, #28]
 800d136:	b928      	cbnz	r0, 800d144 <__pow5mult+0x40>
 800d138:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d13c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b0 <__pow5mult+0xac>)
 800d13e:	481d      	ldr	r0, [pc, #116]	@ (800d1b4 <__pow5mult+0xb0>)
 800d140:	f000 fbf8 	bl	800d934 <__assert_func>
 800d144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d148:	6004      	str	r4, [r0, #0]
 800d14a:	60c4      	str	r4, [r0, #12]
 800d14c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d154:	b94c      	cbnz	r4, 800d16a <__pow5mult+0x66>
 800d156:	f240 2171 	movw	r1, #625	@ 0x271
 800d15a:	4638      	mov	r0, r7
 800d15c:	f7ff ff14 	bl	800cf88 <__i2b>
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	f8c8 0008 	str.w	r0, [r8, #8]
 800d168:	6003      	str	r3, [r0, #0]
 800d16a:	f04f 0900 	mov.w	r9, #0
 800d16e:	07eb      	lsls	r3, r5, #31
 800d170:	d50a      	bpl.n	800d188 <__pow5mult+0x84>
 800d172:	4631      	mov	r1, r6
 800d174:	4622      	mov	r2, r4
 800d176:	4638      	mov	r0, r7
 800d178:	f7ff ff1c 	bl	800cfb4 <__multiply>
 800d17c:	4680      	mov	r8, r0
 800d17e:	4631      	mov	r1, r6
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff fe03 	bl	800cd8c <_Bfree>
 800d186:	4646      	mov	r6, r8
 800d188:	106d      	asrs	r5, r5, #1
 800d18a:	d00b      	beq.n	800d1a4 <__pow5mult+0xa0>
 800d18c:	6820      	ldr	r0, [r4, #0]
 800d18e:	b938      	cbnz	r0, 800d1a0 <__pow5mult+0x9c>
 800d190:	4622      	mov	r2, r4
 800d192:	4621      	mov	r1, r4
 800d194:	4638      	mov	r0, r7
 800d196:	f7ff ff0d 	bl	800cfb4 <__multiply>
 800d19a:	6020      	str	r0, [r4, #0]
 800d19c:	f8c0 9000 	str.w	r9, [r0]
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	e7e4      	b.n	800d16e <__pow5mult+0x6a>
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800f170 	.word	0x0800f170
 800d1b0:	0800f037 	.word	0x0800f037
 800d1b4:	0800f117 	.word	0x0800f117

0800d1b8 <__lshift>:
 800d1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1bc:	460c      	mov	r4, r1
 800d1be:	4607      	mov	r7, r0
 800d1c0:	4691      	mov	r9, r2
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6849      	ldr	r1, [r1, #4]
 800d1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1d0:	f108 0601 	add.w	r6, r8, #1
 800d1d4:	42b3      	cmp	r3, r6
 800d1d6:	db0b      	blt.n	800d1f0 <__lshift+0x38>
 800d1d8:	4638      	mov	r0, r7
 800d1da:	f7ff fd97 	bl	800cd0c <_Balloc>
 800d1de:	4605      	mov	r5, r0
 800d1e0:	b948      	cbnz	r0, 800d1f6 <__lshift+0x3e>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d1e8:	4b27      	ldr	r3, [pc, #156]	@ (800d288 <__lshift+0xd0>)
 800d1ea:	4828      	ldr	r0, [pc, #160]	@ (800d28c <__lshift+0xd4>)
 800d1ec:	f000 fba2 	bl	800d934 <__assert_func>
 800d1f0:	3101      	adds	r1, #1
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	e7ee      	b.n	800d1d4 <__lshift+0x1c>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f100 0114 	add.w	r1, r0, #20
 800d1fc:	f100 0210 	add.w	r2, r0, #16
 800d200:	4618      	mov	r0, r3
 800d202:	4553      	cmp	r3, sl
 800d204:	db33      	blt.n	800d26e <__lshift+0xb6>
 800d206:	6920      	ldr	r0, [r4, #16]
 800d208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d20c:	f104 0314 	add.w	r3, r4, #20
 800d210:	f019 091f 	ands.w	r9, r9, #31
 800d214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d21c:	d02b      	beq.n	800d276 <__lshift+0xbe>
 800d21e:	468a      	mov	sl, r1
 800d220:	2200      	movs	r2, #0
 800d222:	f1c9 0e20 	rsb	lr, r9, #32
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	fa00 f009 	lsl.w	r0, r0, r9
 800d22c:	4310      	orrs	r0, r2
 800d22e:	f84a 0b04 	str.w	r0, [sl], #4
 800d232:	f853 2b04 	ldr.w	r2, [r3], #4
 800d236:	459c      	cmp	ip, r3
 800d238:	fa22 f20e 	lsr.w	r2, r2, lr
 800d23c:	d8f3      	bhi.n	800d226 <__lshift+0x6e>
 800d23e:	ebac 0304 	sub.w	r3, ip, r4
 800d242:	3b15      	subs	r3, #21
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	3304      	adds	r3, #4
 800d24a:	f104 0015 	add.w	r0, r4, #21
 800d24e:	4584      	cmp	ip, r0
 800d250:	bf38      	it	cc
 800d252:	2304      	movcc	r3, #4
 800d254:	50ca      	str	r2, [r1, r3]
 800d256:	b10a      	cbz	r2, 800d25c <__lshift+0xa4>
 800d258:	f108 0602 	add.w	r6, r8, #2
 800d25c:	3e01      	subs	r6, #1
 800d25e:	4638      	mov	r0, r7
 800d260:	4621      	mov	r1, r4
 800d262:	612e      	str	r6, [r5, #16]
 800d264:	f7ff fd92 	bl	800cd8c <_Bfree>
 800d268:	4628      	mov	r0, r5
 800d26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d272:	3301      	adds	r3, #1
 800d274:	e7c5      	b.n	800d202 <__lshift+0x4a>
 800d276:	3904      	subs	r1, #4
 800d278:	f853 2b04 	ldr.w	r2, [r3], #4
 800d27c:	459c      	cmp	ip, r3
 800d27e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d282:	d8f9      	bhi.n	800d278 <__lshift+0xc0>
 800d284:	e7ea      	b.n	800d25c <__lshift+0xa4>
 800d286:	bf00      	nop
 800d288:	0800f0a6 	.word	0x0800f0a6
 800d28c:	0800f117 	.word	0x0800f117

0800d290 <__mcmp>:
 800d290:	4603      	mov	r3, r0
 800d292:	690a      	ldr	r2, [r1, #16]
 800d294:	6900      	ldr	r0, [r0, #16]
 800d296:	b530      	push	{r4, r5, lr}
 800d298:	1a80      	subs	r0, r0, r2
 800d29a:	d10e      	bne.n	800d2ba <__mcmp+0x2a>
 800d29c:	3314      	adds	r3, #20
 800d29e:	3114      	adds	r1, #20
 800d2a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2b0:	4295      	cmp	r5, r2
 800d2b2:	d003      	beq.n	800d2bc <__mcmp+0x2c>
 800d2b4:	d205      	bcs.n	800d2c2 <__mcmp+0x32>
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ba:	bd30      	pop	{r4, r5, pc}
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	d3f3      	bcc.n	800d2a8 <__mcmp+0x18>
 800d2c0:	e7fb      	b.n	800d2ba <__mcmp+0x2a>
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	e7f9      	b.n	800d2ba <__mcmp+0x2a>
	...

0800d2c8 <__mdiff>:
 800d2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	4689      	mov	r9, r1
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4648      	mov	r0, r9
 800d2d4:	4614      	mov	r4, r2
 800d2d6:	f7ff ffdb 	bl	800d290 <__mcmp>
 800d2da:	1e05      	subs	r5, r0, #0
 800d2dc:	d112      	bne.n	800d304 <__mdiff+0x3c>
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f7ff fd13 	bl	800cd0c <_Balloc>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	b928      	cbnz	r0, 800d2f6 <__mdiff+0x2e>
 800d2ea:	f240 2137 	movw	r1, #567	@ 0x237
 800d2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d3e8 <__mdiff+0x120>)
 800d2f0:	483e      	ldr	r0, [pc, #248]	@ (800d3ec <__mdiff+0x124>)
 800d2f2:	f000 fb1f 	bl	800d934 <__assert_func>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	b003      	add	sp, #12
 800d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d304:	bfbc      	itt	lt
 800d306:	464b      	movlt	r3, r9
 800d308:	46a1      	movlt	r9, r4
 800d30a:	4630      	mov	r0, r6
 800d30c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d310:	bfba      	itte	lt
 800d312:	461c      	movlt	r4, r3
 800d314:	2501      	movlt	r5, #1
 800d316:	2500      	movge	r5, #0
 800d318:	f7ff fcf8 	bl	800cd0c <_Balloc>
 800d31c:	4602      	mov	r2, r0
 800d31e:	b918      	cbnz	r0, 800d328 <__mdiff+0x60>
 800d320:	f240 2145 	movw	r1, #581	@ 0x245
 800d324:	4b30      	ldr	r3, [pc, #192]	@ (800d3e8 <__mdiff+0x120>)
 800d326:	e7e3      	b.n	800d2f0 <__mdiff+0x28>
 800d328:	f100 0b14 	add.w	fp, r0, #20
 800d32c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d330:	f109 0310 	add.w	r3, r9, #16
 800d334:	60c5      	str	r5, [r0, #12]
 800d336:	f04f 0c00 	mov.w	ip, #0
 800d33a:	f109 0514 	add.w	r5, r9, #20
 800d33e:	46d9      	mov	r9, fp
 800d340:	6926      	ldr	r6, [r4, #16]
 800d342:	f104 0e14 	add.w	lr, r4, #20
 800d346:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d34a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d356:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d35a:	b281      	uxth	r1, r0
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	fa1f f38a 	uxth.w	r3, sl
 800d362:	1a5b      	subs	r3, r3, r1
 800d364:	0c00      	lsrs	r0, r0, #16
 800d366:	4463      	add	r3, ip
 800d368:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d36c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d370:	b29b      	uxth	r3, r3
 800d372:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d376:	4576      	cmp	r6, lr
 800d378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d37c:	f849 3b04 	str.w	r3, [r9], #4
 800d380:	d8e6      	bhi.n	800d350 <__mdiff+0x88>
 800d382:	1b33      	subs	r3, r6, r4
 800d384:	3b15      	subs	r3, #21
 800d386:	f023 0303 	bic.w	r3, r3, #3
 800d38a:	3415      	adds	r4, #21
 800d38c:	3304      	adds	r3, #4
 800d38e:	42a6      	cmp	r6, r4
 800d390:	bf38      	it	cc
 800d392:	2304      	movcc	r3, #4
 800d394:	441d      	add	r5, r3
 800d396:	445b      	add	r3, fp
 800d398:	461e      	mov	r6, r3
 800d39a:	462c      	mov	r4, r5
 800d39c:	4544      	cmp	r4, r8
 800d39e:	d30e      	bcc.n	800d3be <__mdiff+0xf6>
 800d3a0:	f108 0103 	add.w	r1, r8, #3
 800d3a4:	1b49      	subs	r1, r1, r5
 800d3a6:	f021 0103 	bic.w	r1, r1, #3
 800d3aa:	3d03      	subs	r5, #3
 800d3ac:	45a8      	cmp	r8, r5
 800d3ae:	bf38      	it	cc
 800d3b0:	2100      	movcc	r1, #0
 800d3b2:	440b      	add	r3, r1
 800d3b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3b8:	b199      	cbz	r1, 800d3e2 <__mdiff+0x11a>
 800d3ba:	6117      	str	r7, [r2, #16]
 800d3bc:	e79e      	b.n	800d2fc <__mdiff+0x34>
 800d3be:	46e6      	mov	lr, ip
 800d3c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3c4:	fa1f fc81 	uxth.w	ip, r1
 800d3c8:	44f4      	add	ip, lr
 800d3ca:	0c08      	lsrs	r0, r1, #16
 800d3cc:	4471      	add	r1, lr
 800d3ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3d2:	b289      	uxth	r1, r1
 800d3d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3dc:	f846 1b04 	str.w	r1, [r6], #4
 800d3e0:	e7dc      	b.n	800d39c <__mdiff+0xd4>
 800d3e2:	3f01      	subs	r7, #1
 800d3e4:	e7e6      	b.n	800d3b4 <__mdiff+0xec>
 800d3e6:	bf00      	nop
 800d3e8:	0800f0a6 	.word	0x0800f0a6
 800d3ec:	0800f117 	.word	0x0800f117

0800d3f0 <__ulp>:
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d42c <__ulp+0x3c>)
 800d3f2:	400b      	ands	r3, r1
 800d3f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	dc08      	bgt.n	800d40e <__ulp+0x1e>
 800d3fc:	425b      	negs	r3, r3
 800d3fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d402:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d406:	da04      	bge.n	800d412 <__ulp+0x22>
 800d408:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d40c:	4113      	asrs	r3, r2
 800d40e:	2200      	movs	r2, #0
 800d410:	e008      	b.n	800d424 <__ulp+0x34>
 800d412:	f1a2 0314 	sub.w	r3, r2, #20
 800d416:	2b1e      	cmp	r3, #30
 800d418:	bfd6      	itet	le
 800d41a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d41e:	2201      	movgt	r2, #1
 800d420:	40da      	lsrle	r2, r3
 800d422:	2300      	movs	r3, #0
 800d424:	4619      	mov	r1, r3
 800d426:	4610      	mov	r0, r2
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	7ff00000 	.word	0x7ff00000

0800d430 <__b2d>:
 800d430:	6902      	ldr	r2, [r0, #16]
 800d432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d434:	f100 0614 	add.w	r6, r0, #20
 800d438:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d43c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d440:	4f1e      	ldr	r7, [pc, #120]	@ (800d4bc <__b2d+0x8c>)
 800d442:	4620      	mov	r0, r4
 800d444:	f7ff fd54 	bl	800cef0 <__hi0bits>
 800d448:	4603      	mov	r3, r0
 800d44a:	f1c0 0020 	rsb	r0, r0, #32
 800d44e:	2b0a      	cmp	r3, #10
 800d450:	f1a2 0504 	sub.w	r5, r2, #4
 800d454:	6008      	str	r0, [r1, #0]
 800d456:	dc12      	bgt.n	800d47e <__b2d+0x4e>
 800d458:	42ae      	cmp	r6, r5
 800d45a:	bf2c      	ite	cs
 800d45c:	2200      	movcs	r2, #0
 800d45e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d462:	f1c3 0c0b 	rsb	ip, r3, #11
 800d466:	3315      	adds	r3, #21
 800d468:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d46c:	fa04 f303 	lsl.w	r3, r4, r3
 800d470:	fa22 f20c 	lsr.w	r2, r2, ip
 800d474:	ea4e 0107 	orr.w	r1, lr, r7
 800d478:	431a      	orrs	r2, r3
 800d47a:	4610      	mov	r0, r2
 800d47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47e:	42ae      	cmp	r6, r5
 800d480:	bf36      	itet	cc
 800d482:	f1a2 0508 	subcc.w	r5, r2, #8
 800d486:	2200      	movcs	r2, #0
 800d488:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d48c:	3b0b      	subs	r3, #11
 800d48e:	d012      	beq.n	800d4b6 <__b2d+0x86>
 800d490:	f1c3 0720 	rsb	r7, r3, #32
 800d494:	fa22 f107 	lsr.w	r1, r2, r7
 800d498:	409c      	lsls	r4, r3
 800d49a:	430c      	orrs	r4, r1
 800d49c:	42b5      	cmp	r5, r6
 800d49e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d4a2:	bf94      	ite	ls
 800d4a4:	2400      	movls	r4, #0
 800d4a6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d4aa:	409a      	lsls	r2, r3
 800d4ac:	40fc      	lsrs	r4, r7
 800d4ae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d4b2:	4322      	orrs	r2, r4
 800d4b4:	e7e1      	b.n	800d47a <__b2d+0x4a>
 800d4b6:	ea44 0107 	orr.w	r1, r4, r7
 800d4ba:	e7de      	b.n	800d47a <__b2d+0x4a>
 800d4bc:	3ff00000 	.word	0x3ff00000

0800d4c0 <__d2b>:
 800d4c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	4690      	mov	r8, r2
 800d4c8:	4699      	mov	r9, r3
 800d4ca:	9e08      	ldr	r6, [sp, #32]
 800d4cc:	f7ff fc1e 	bl	800cd0c <_Balloc>
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	b930      	cbnz	r0, 800d4e2 <__d2b+0x22>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	f240 310f 	movw	r1, #783	@ 0x30f
 800d4da:	4b23      	ldr	r3, [pc, #140]	@ (800d568 <__d2b+0xa8>)
 800d4dc:	4823      	ldr	r0, [pc, #140]	@ (800d56c <__d2b+0xac>)
 800d4de:	f000 fa29 	bl	800d934 <__assert_func>
 800d4e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4ea:	b10d      	cbz	r5, 800d4f0 <__d2b+0x30>
 800d4ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	f1b8 0300 	subs.w	r3, r8, #0
 800d4f6:	d024      	beq.n	800d542 <__d2b+0x82>
 800d4f8:	4668      	mov	r0, sp
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	f7ff fd17 	bl	800cf2e <__lo0bits>
 800d500:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d504:	b1d8      	cbz	r0, 800d53e <__d2b+0x7e>
 800d506:	f1c0 0320 	rsb	r3, r0, #32
 800d50a:	fa02 f303 	lsl.w	r3, r2, r3
 800d50e:	430b      	orrs	r3, r1
 800d510:	40c2      	lsrs	r2, r0
 800d512:	6163      	str	r3, [r4, #20]
 800d514:	9201      	str	r2, [sp, #4]
 800d516:	9b01      	ldr	r3, [sp, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	bf0c      	ite	eq
 800d51c:	2201      	moveq	r2, #1
 800d51e:	2202      	movne	r2, #2
 800d520:	61a3      	str	r3, [r4, #24]
 800d522:	6122      	str	r2, [r4, #16]
 800d524:	b1ad      	cbz	r5, 800d552 <__d2b+0x92>
 800d526:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d52a:	4405      	add	r5, r0
 800d52c:	6035      	str	r5, [r6, #0]
 800d52e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d534:	6018      	str	r0, [r3, #0]
 800d536:	4620      	mov	r0, r4
 800d538:	b002      	add	sp, #8
 800d53a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d53e:	6161      	str	r1, [r4, #20]
 800d540:	e7e9      	b.n	800d516 <__d2b+0x56>
 800d542:	a801      	add	r0, sp, #4
 800d544:	f7ff fcf3 	bl	800cf2e <__lo0bits>
 800d548:	9b01      	ldr	r3, [sp, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	6163      	str	r3, [r4, #20]
 800d54e:	3020      	adds	r0, #32
 800d550:	e7e7      	b.n	800d522 <__d2b+0x62>
 800d552:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d556:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d55a:	6030      	str	r0, [r6, #0]
 800d55c:	6918      	ldr	r0, [r3, #16]
 800d55e:	f7ff fcc7 	bl	800cef0 <__hi0bits>
 800d562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d566:	e7e4      	b.n	800d532 <__d2b+0x72>
 800d568:	0800f0a6 	.word	0x0800f0a6
 800d56c:	0800f117 	.word	0x0800f117

0800d570 <__ratio>:
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	b085      	sub	sp, #20
 800d576:	e9cd 1000 	strd	r1, r0, [sp]
 800d57a:	a902      	add	r1, sp, #8
 800d57c:	f7ff ff58 	bl	800d430 <__b2d>
 800d580:	468b      	mov	fp, r1
 800d582:	4606      	mov	r6, r0
 800d584:	460f      	mov	r7, r1
 800d586:	9800      	ldr	r0, [sp, #0]
 800d588:	a903      	add	r1, sp, #12
 800d58a:	f7ff ff51 	bl	800d430 <__b2d>
 800d58e:	460d      	mov	r5, r1
 800d590:	9b01      	ldr	r3, [sp, #4]
 800d592:	4689      	mov	r9, r1
 800d594:	6919      	ldr	r1, [r3, #16]
 800d596:	9b00      	ldr	r3, [sp, #0]
 800d598:	4604      	mov	r4, r0
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	4630      	mov	r0, r6
 800d59e:	1ac9      	subs	r1, r1, r3
 800d5a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfcd      	iteet	gt
 800d5ae:	463a      	movgt	r2, r7
 800d5b0:	462a      	movle	r2, r5
 800d5b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d5ba:	bfd8      	it	le
 800d5bc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d5c0:	464b      	mov	r3, r9
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	4659      	mov	r1, fp
 800d5c6:	f7f3 f8bb 	bl	8000740 <__aeabi_ddiv>
 800d5ca:	b005      	add	sp, #20
 800d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5d0 <__copybits>:
 800d5d0:	3901      	subs	r1, #1
 800d5d2:	b570      	push	{r4, r5, r6, lr}
 800d5d4:	1149      	asrs	r1, r1, #5
 800d5d6:	6914      	ldr	r4, [r2, #16]
 800d5d8:	3101      	adds	r1, #1
 800d5da:	f102 0314 	add.w	r3, r2, #20
 800d5de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5e6:	1f05      	subs	r5, r0, #4
 800d5e8:	42a3      	cmp	r3, r4
 800d5ea:	d30c      	bcc.n	800d606 <__copybits+0x36>
 800d5ec:	1aa3      	subs	r3, r4, r2
 800d5ee:	3b11      	subs	r3, #17
 800d5f0:	f023 0303 	bic.w	r3, r3, #3
 800d5f4:	3211      	adds	r2, #17
 800d5f6:	42a2      	cmp	r2, r4
 800d5f8:	bf88      	it	hi
 800d5fa:	2300      	movhi	r3, #0
 800d5fc:	4418      	add	r0, r3
 800d5fe:	2300      	movs	r3, #0
 800d600:	4288      	cmp	r0, r1
 800d602:	d305      	bcc.n	800d610 <__copybits+0x40>
 800d604:	bd70      	pop	{r4, r5, r6, pc}
 800d606:	f853 6b04 	ldr.w	r6, [r3], #4
 800d60a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d60e:	e7eb      	b.n	800d5e8 <__copybits+0x18>
 800d610:	f840 3b04 	str.w	r3, [r0], #4
 800d614:	e7f4      	b.n	800d600 <__copybits+0x30>

0800d616 <__any_on>:
 800d616:	f100 0214 	add.w	r2, r0, #20
 800d61a:	6900      	ldr	r0, [r0, #16]
 800d61c:	114b      	asrs	r3, r1, #5
 800d61e:	4298      	cmp	r0, r3
 800d620:	b510      	push	{r4, lr}
 800d622:	db11      	blt.n	800d648 <__any_on+0x32>
 800d624:	dd0a      	ble.n	800d63c <__any_on+0x26>
 800d626:	f011 011f 	ands.w	r1, r1, #31
 800d62a:	d007      	beq.n	800d63c <__any_on+0x26>
 800d62c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d630:	fa24 f001 	lsr.w	r0, r4, r1
 800d634:	fa00 f101 	lsl.w	r1, r0, r1
 800d638:	428c      	cmp	r4, r1
 800d63a:	d10b      	bne.n	800d654 <__any_on+0x3e>
 800d63c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d640:	4293      	cmp	r3, r2
 800d642:	d803      	bhi.n	800d64c <__any_on+0x36>
 800d644:	2000      	movs	r0, #0
 800d646:	bd10      	pop	{r4, pc}
 800d648:	4603      	mov	r3, r0
 800d64a:	e7f7      	b.n	800d63c <__any_on+0x26>
 800d64c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d650:	2900      	cmp	r1, #0
 800d652:	d0f5      	beq.n	800d640 <__any_on+0x2a>
 800d654:	2001      	movs	r0, #1
 800d656:	e7f6      	b.n	800d646 <__any_on+0x30>

0800d658 <_strtoul_l.constprop.0>:
 800d658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d65c:	4686      	mov	lr, r0
 800d65e:	460d      	mov	r5, r1
 800d660:	4e33      	ldr	r6, [pc, #204]	@ (800d730 <_strtoul_l.constprop.0+0xd8>)
 800d662:	4628      	mov	r0, r5
 800d664:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d668:	5d37      	ldrb	r7, [r6, r4]
 800d66a:	f017 0708 	ands.w	r7, r7, #8
 800d66e:	d1f8      	bne.n	800d662 <_strtoul_l.constprop.0+0xa>
 800d670:	2c2d      	cmp	r4, #45	@ 0x2d
 800d672:	d12f      	bne.n	800d6d4 <_strtoul_l.constprop.0+0x7c>
 800d674:	2701      	movs	r7, #1
 800d676:	782c      	ldrb	r4, [r5, #0]
 800d678:	1c85      	adds	r5, r0, #2
 800d67a:	f033 0010 	bics.w	r0, r3, #16
 800d67e:	d109      	bne.n	800d694 <_strtoul_l.constprop.0+0x3c>
 800d680:	2c30      	cmp	r4, #48	@ 0x30
 800d682:	d12c      	bne.n	800d6de <_strtoul_l.constprop.0+0x86>
 800d684:	7828      	ldrb	r0, [r5, #0]
 800d686:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d68a:	2858      	cmp	r0, #88	@ 0x58
 800d68c:	d127      	bne.n	800d6de <_strtoul_l.constprop.0+0x86>
 800d68e:	2310      	movs	r3, #16
 800d690:	786c      	ldrb	r4, [r5, #1]
 800d692:	3502      	adds	r5, #2
 800d694:	f04f 38ff 	mov.w	r8, #4294967295
 800d698:	fbb8 f8f3 	udiv	r8, r8, r3
 800d69c:	2600      	movs	r6, #0
 800d69e:	fb03 f908 	mul.w	r9, r3, r8
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	ea6f 0909 	mvn.w	r9, r9
 800d6a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d6ac:	f1bc 0f09 	cmp.w	ip, #9
 800d6b0:	d81c      	bhi.n	800d6ec <_strtoul_l.constprop.0+0x94>
 800d6b2:	4664      	mov	r4, ip
 800d6b4:	42a3      	cmp	r3, r4
 800d6b6:	dd2a      	ble.n	800d70e <_strtoul_l.constprop.0+0xb6>
 800d6b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d6bc:	d007      	beq.n	800d6ce <_strtoul_l.constprop.0+0x76>
 800d6be:	4580      	cmp	r8, r0
 800d6c0:	d322      	bcc.n	800d708 <_strtoul_l.constprop.0+0xb0>
 800d6c2:	d101      	bne.n	800d6c8 <_strtoul_l.constprop.0+0x70>
 800d6c4:	45a1      	cmp	r9, r4
 800d6c6:	db1f      	blt.n	800d708 <_strtoul_l.constprop.0+0xb0>
 800d6c8:	2601      	movs	r6, #1
 800d6ca:	fb00 4003 	mla	r0, r0, r3, r4
 800d6ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6d2:	e7e9      	b.n	800d6a8 <_strtoul_l.constprop.0+0x50>
 800d6d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d6d6:	bf04      	itt	eq
 800d6d8:	782c      	ldrbeq	r4, [r5, #0]
 800d6da:	1c85      	addeq	r5, r0, #2
 800d6dc:	e7cd      	b.n	800d67a <_strtoul_l.constprop.0+0x22>
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1d8      	bne.n	800d694 <_strtoul_l.constprop.0+0x3c>
 800d6e2:	2c30      	cmp	r4, #48	@ 0x30
 800d6e4:	bf0c      	ite	eq
 800d6e6:	2308      	moveq	r3, #8
 800d6e8:	230a      	movne	r3, #10
 800d6ea:	e7d3      	b.n	800d694 <_strtoul_l.constprop.0+0x3c>
 800d6ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d6f0:	f1bc 0f19 	cmp.w	ip, #25
 800d6f4:	d801      	bhi.n	800d6fa <_strtoul_l.constprop.0+0xa2>
 800d6f6:	3c37      	subs	r4, #55	@ 0x37
 800d6f8:	e7dc      	b.n	800d6b4 <_strtoul_l.constprop.0+0x5c>
 800d6fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d6fe:	f1bc 0f19 	cmp.w	ip, #25
 800d702:	d804      	bhi.n	800d70e <_strtoul_l.constprop.0+0xb6>
 800d704:	3c57      	subs	r4, #87	@ 0x57
 800d706:	e7d5      	b.n	800d6b4 <_strtoul_l.constprop.0+0x5c>
 800d708:	f04f 36ff 	mov.w	r6, #4294967295
 800d70c:	e7df      	b.n	800d6ce <_strtoul_l.constprop.0+0x76>
 800d70e:	1c73      	adds	r3, r6, #1
 800d710:	d106      	bne.n	800d720 <_strtoul_l.constprop.0+0xc8>
 800d712:	2322      	movs	r3, #34	@ 0x22
 800d714:	4630      	mov	r0, r6
 800d716:	f8ce 3000 	str.w	r3, [lr]
 800d71a:	b932      	cbnz	r2, 800d72a <_strtoul_l.constprop.0+0xd2>
 800d71c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d720:	b107      	cbz	r7, 800d724 <_strtoul_l.constprop.0+0xcc>
 800d722:	4240      	negs	r0, r0
 800d724:	2a00      	cmp	r2, #0
 800d726:	d0f9      	beq.n	800d71c <_strtoul_l.constprop.0+0xc4>
 800d728:	b106      	cbz	r6, 800d72c <_strtoul_l.constprop.0+0xd4>
 800d72a:	1e69      	subs	r1, r5, #1
 800d72c:	6011      	str	r1, [r2, #0]
 800d72e:	e7f5      	b.n	800d71c <_strtoul_l.constprop.0+0xc4>
 800d730:	0800ee41 	.word	0x0800ee41

0800d734 <_strtoul_r>:
 800d734:	f7ff bf90 	b.w	800d658 <_strtoul_l.constprop.0>

0800d738 <strtoul>:
 800d738:	4613      	mov	r3, r2
 800d73a:	460a      	mov	r2, r1
 800d73c:	4601      	mov	r1, r0
 800d73e:	4802      	ldr	r0, [pc, #8]	@ (800d748 <strtoul+0x10>)
 800d740:	6800      	ldr	r0, [r0, #0]
 800d742:	f7ff bf89 	b.w	800d658 <_strtoul_l.constprop.0>
 800d746:	bf00      	nop
 800d748:	20000194 	.word	0x20000194

0800d74c <__ascii_wctomb>:
 800d74c:	4603      	mov	r3, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	b141      	cbz	r1, 800d764 <__ascii_wctomb+0x18>
 800d752:	2aff      	cmp	r2, #255	@ 0xff
 800d754:	d904      	bls.n	800d760 <__ascii_wctomb+0x14>
 800d756:	228a      	movs	r2, #138	@ 0x8a
 800d758:	f04f 30ff 	mov.w	r0, #4294967295
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	4770      	bx	lr
 800d760:	2001      	movs	r0, #1
 800d762:	700a      	strb	r2, [r1, #0]
 800d764:	4770      	bx	lr
	...

0800d768 <__sflush_r>:
 800d768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	0716      	lsls	r6, r2, #28
 800d770:	4605      	mov	r5, r0
 800d772:	460c      	mov	r4, r1
 800d774:	d454      	bmi.n	800d820 <__sflush_r+0xb8>
 800d776:	684b      	ldr	r3, [r1, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dc02      	bgt.n	800d782 <__sflush_r+0x1a>
 800d77c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d77e:	2b00      	cmp	r3, #0
 800d780:	dd48      	ble.n	800d814 <__sflush_r+0xac>
 800d782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d784:	2e00      	cmp	r6, #0
 800d786:	d045      	beq.n	800d814 <__sflush_r+0xac>
 800d788:	2300      	movs	r3, #0
 800d78a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d78e:	682f      	ldr	r7, [r5, #0]
 800d790:	6a21      	ldr	r1, [r4, #32]
 800d792:	602b      	str	r3, [r5, #0]
 800d794:	d030      	beq.n	800d7f8 <__sflush_r+0x90>
 800d796:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	0759      	lsls	r1, r3, #29
 800d79c:	d505      	bpl.n	800d7aa <__sflush_r+0x42>
 800d79e:	6863      	ldr	r3, [r4, #4]
 800d7a0:	1ad2      	subs	r2, r2, r3
 800d7a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a4:	b10b      	cbz	r3, 800d7aa <__sflush_r+0x42>
 800d7a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7a8:	1ad2      	subs	r2, r2, r3
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b0:	6a21      	ldr	r1, [r4, #32]
 800d7b2:	47b0      	blx	r6
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	89a3      	ldrh	r3, [r4, #12]
 800d7b8:	d106      	bne.n	800d7c8 <__sflush_r+0x60>
 800d7ba:	6829      	ldr	r1, [r5, #0]
 800d7bc:	291d      	cmp	r1, #29
 800d7be:	d82b      	bhi.n	800d818 <__sflush_r+0xb0>
 800d7c0:	4a28      	ldr	r2, [pc, #160]	@ (800d864 <__sflush_r+0xfc>)
 800d7c2:	410a      	asrs	r2, r1
 800d7c4:	07d6      	lsls	r6, r2, #31
 800d7c6:	d427      	bmi.n	800d818 <__sflush_r+0xb0>
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	6062      	str	r2, [r4, #4]
 800d7cc:	6922      	ldr	r2, [r4, #16]
 800d7ce:	04d9      	lsls	r1, r3, #19
 800d7d0:	6022      	str	r2, [r4, #0]
 800d7d2:	d504      	bpl.n	800d7de <__sflush_r+0x76>
 800d7d4:	1c42      	adds	r2, r0, #1
 800d7d6:	d101      	bne.n	800d7dc <__sflush_r+0x74>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b903      	cbnz	r3, 800d7de <__sflush_r+0x76>
 800d7dc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7e0:	602f      	str	r7, [r5, #0]
 800d7e2:	b1b9      	cbz	r1, 800d814 <__sflush_r+0xac>
 800d7e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e8:	4299      	cmp	r1, r3
 800d7ea:	d002      	beq.n	800d7f2 <__sflush_r+0x8a>
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	f7fe fdf7 	bl	800c3e0 <_free_r>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f6:	e00d      	b.n	800d814 <__sflush_r+0xac>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b0      	blx	r6
 800d7fe:	4602      	mov	r2, r0
 800d800:	1c50      	adds	r0, r2, #1
 800d802:	d1c9      	bne.n	800d798 <__sflush_r+0x30>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0c6      	beq.n	800d798 <__sflush_r+0x30>
 800d80a:	2b1d      	cmp	r3, #29
 800d80c:	d001      	beq.n	800d812 <__sflush_r+0xaa>
 800d80e:	2b16      	cmp	r3, #22
 800d810:	d11d      	bne.n	800d84e <__sflush_r+0xe6>
 800d812:	602f      	str	r7, [r5, #0]
 800d814:	2000      	movs	r0, #0
 800d816:	e021      	b.n	800d85c <__sflush_r+0xf4>
 800d818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81c:	b21b      	sxth	r3, r3
 800d81e:	e01a      	b.n	800d856 <__sflush_r+0xee>
 800d820:	690f      	ldr	r7, [r1, #16]
 800d822:	2f00      	cmp	r7, #0
 800d824:	d0f6      	beq.n	800d814 <__sflush_r+0xac>
 800d826:	0793      	lsls	r3, r2, #30
 800d828:	bf18      	it	ne
 800d82a:	2300      	movne	r3, #0
 800d82c:	680e      	ldr	r6, [r1, #0]
 800d82e:	bf08      	it	eq
 800d830:	694b      	ldreq	r3, [r1, #20]
 800d832:	1bf6      	subs	r6, r6, r7
 800d834:	600f      	str	r7, [r1, #0]
 800d836:	608b      	str	r3, [r1, #8]
 800d838:	2e00      	cmp	r6, #0
 800d83a:	ddeb      	ble.n	800d814 <__sflush_r+0xac>
 800d83c:	4633      	mov	r3, r6
 800d83e:	463a      	mov	r2, r7
 800d840:	4628      	mov	r0, r5
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d848:	47e0      	blx	ip
 800d84a:	2800      	cmp	r0, #0
 800d84c:	dc07      	bgt.n	800d85e <__sflush_r+0xf6>
 800d84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d856:	f04f 30ff 	mov.w	r0, #4294967295
 800d85a:	81a3      	strh	r3, [r4, #12]
 800d85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d85e:	4407      	add	r7, r0
 800d860:	1a36      	subs	r6, r6, r0
 800d862:	e7e9      	b.n	800d838 <__sflush_r+0xd0>
 800d864:	dfbffffe 	.word	0xdfbffffe

0800d868 <_fflush_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	690b      	ldr	r3, [r1, #16]
 800d86c:	4605      	mov	r5, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	b913      	cbnz	r3, 800d878 <_fflush_r+0x10>
 800d872:	2500      	movs	r5, #0
 800d874:	4628      	mov	r0, r5
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	b118      	cbz	r0, 800d882 <_fflush_r+0x1a>
 800d87a:	6a03      	ldr	r3, [r0, #32]
 800d87c:	b90b      	cbnz	r3, 800d882 <_fflush_r+0x1a>
 800d87e:	f7fd f8b5 	bl	800a9ec <__sinit>
 800d882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0f3      	beq.n	800d872 <_fflush_r+0xa>
 800d88a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d88c:	07d0      	lsls	r0, r2, #31
 800d88e:	d404      	bmi.n	800d89a <_fflush_r+0x32>
 800d890:	0599      	lsls	r1, r3, #22
 800d892:	d402      	bmi.n	800d89a <_fflush_r+0x32>
 800d894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d896:	f7fd ff17 	bl	800b6c8 <__retarget_lock_acquire_recursive>
 800d89a:	4628      	mov	r0, r5
 800d89c:	4621      	mov	r1, r4
 800d89e:	f7ff ff63 	bl	800d768 <__sflush_r>
 800d8a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	07da      	lsls	r2, r3, #31
 800d8a8:	d4e4      	bmi.n	800d874 <_fflush_r+0xc>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	059b      	lsls	r3, r3, #22
 800d8ae:	d4e1      	bmi.n	800d874 <_fflush_r+0xc>
 800d8b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8b2:	f7fd ff0b 	bl	800b6cc <__retarget_lock_release_recursive>
 800d8b6:	e7dd      	b.n	800d874 <_fflush_r+0xc>

0800d8b8 <siscanf>:
 800d8b8:	b40e      	push	{r1, r2, r3}
 800d8ba:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d8be:	b530      	push	{r4, r5, lr}
 800d8c0:	b09c      	sub	sp, #112	@ 0x70
 800d8c2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d8c4:	f854 5b04 	ldr.w	r5, [r4], #4
 800d8c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d8cc:	9002      	str	r0, [sp, #8]
 800d8ce:	9006      	str	r0, [sp, #24]
 800d8d0:	f7f2 fc48 	bl	8000164 <strlen>
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d904 <siscanf+0x4c>)
 800d8d6:	9003      	str	r0, [sp, #12]
 800d8d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8da:	2300      	movs	r3, #0
 800d8dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8de:	9314      	str	r3, [sp, #80]	@ 0x50
 800d8e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8e4:	9007      	str	r0, [sp, #28]
 800d8e6:	4808      	ldr	r0, [pc, #32]	@ (800d908 <siscanf+0x50>)
 800d8e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4623      	mov	r3, r4
 800d8f0:	a902      	add	r1, sp, #8
 800d8f2:	6800      	ldr	r0, [r0, #0]
 800d8f4:	9401      	str	r4, [sp, #4]
 800d8f6:	f000 f8b3 	bl	800da60 <__ssvfiscanf_r>
 800d8fa:	b01c      	add	sp, #112	@ 0x70
 800d8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d900:	b003      	add	sp, #12
 800d902:	4770      	bx	lr
 800d904:	0800aa7b 	.word	0x0800aa7b
 800d908:	20000194 	.word	0x20000194

0800d90c <__gettzinfo>:
 800d90c:	4800      	ldr	r0, [pc, #0]	@ (800d910 <__gettzinfo+0x4>)
 800d90e:	4770      	bx	lr
 800d910:	200001e8 	.word	0x200001e8

0800d914 <_sbrk_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	2300      	movs	r3, #0
 800d918:	4d05      	ldr	r5, [pc, #20]	@ (800d930 <_sbrk_r+0x1c>)
 800d91a:	4604      	mov	r4, r0
 800d91c:	4608      	mov	r0, r1
 800d91e:	602b      	str	r3, [r5, #0]
 800d920:	f7f7 f88e 	bl	8004a40 <_sbrk>
 800d924:	1c43      	adds	r3, r0, #1
 800d926:	d102      	bne.n	800d92e <_sbrk_r+0x1a>
 800d928:	682b      	ldr	r3, [r5, #0]
 800d92a:	b103      	cbz	r3, 800d92e <_sbrk_r+0x1a>
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	bd38      	pop	{r3, r4, r5, pc}
 800d930:	20000c40 	.word	0x20000c40

0800d934 <__assert_func>:
 800d934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d936:	4614      	mov	r4, r2
 800d938:	461a      	mov	r2, r3
 800d93a:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <__assert_func+0x2c>)
 800d93c:	4605      	mov	r5, r0
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68d8      	ldr	r0, [r3, #12]
 800d942:	b954      	cbnz	r4, 800d95a <__assert_func+0x26>
 800d944:	4b07      	ldr	r3, [pc, #28]	@ (800d964 <__assert_func+0x30>)
 800d946:	461c      	mov	r4, r3
 800d948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d94c:	9100      	str	r1, [sp, #0]
 800d94e:	462b      	mov	r3, r5
 800d950:	4905      	ldr	r1, [pc, #20]	@ (800d968 <__assert_func+0x34>)
 800d952:	f000 fb43 	bl	800dfdc <fiprintf>
 800d956:	f000 fbc4 	bl	800e0e2 <abort>
 800d95a:	4b04      	ldr	r3, [pc, #16]	@ (800d96c <__assert_func+0x38>)
 800d95c:	e7f4      	b.n	800d948 <__assert_func+0x14>
 800d95e:	bf00      	nop
 800d960:	20000194 	.word	0x20000194
 800d964:	0800f30b 	.word	0x0800f30b
 800d968:	0800f2dd 	.word	0x0800f2dd
 800d96c:	0800f2d0 	.word	0x0800f2d0

0800d970 <_calloc_r>:
 800d970:	b570      	push	{r4, r5, r6, lr}
 800d972:	fba1 5402 	umull	r5, r4, r1, r2
 800d976:	b93c      	cbnz	r4, 800d988 <_calloc_r+0x18>
 800d978:	4629      	mov	r1, r5
 800d97a:	f7ff f929 	bl	800cbd0 <_malloc_r>
 800d97e:	4606      	mov	r6, r0
 800d980:	b928      	cbnz	r0, 800d98e <_calloc_r+0x1e>
 800d982:	2600      	movs	r6, #0
 800d984:	4630      	mov	r0, r6
 800d986:	bd70      	pop	{r4, r5, r6, pc}
 800d988:	220c      	movs	r2, #12
 800d98a:	6002      	str	r2, [r0, #0]
 800d98c:	e7f9      	b.n	800d982 <_calloc_r+0x12>
 800d98e:	462a      	mov	r2, r5
 800d990:	4621      	mov	r1, r4
 800d992:	f7fd f8a6 	bl	800aae2 <memset>
 800d996:	e7f5      	b.n	800d984 <_calloc_r+0x14>

0800d998 <__env_lock>:
 800d998:	4801      	ldr	r0, [pc, #4]	@ (800d9a0 <__env_lock+0x8>)
 800d99a:	f7fd be95 	b.w	800b6c8 <__retarget_lock_acquire_recursive>
 800d99e:	bf00      	nop
 800d9a0:	20000c45 	.word	0x20000c45

0800d9a4 <__env_unlock>:
 800d9a4:	4801      	ldr	r0, [pc, #4]	@ (800d9ac <__env_unlock+0x8>)
 800d9a6:	f7fd be91 	b.w	800b6cc <__retarget_lock_release_recursive>
 800d9aa:	bf00      	nop
 800d9ac:	20000c45 	.word	0x20000c45

0800d9b0 <_sungetc_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	1c4b      	adds	r3, r1, #1
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	d103      	bne.n	800d9c0 <_sungetc_r+0x10>
 800d9b8:	f04f 35ff 	mov.w	r5, #4294967295
 800d9bc:	4628      	mov	r0, r5
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	8993      	ldrh	r3, [r2, #12]
 800d9c2:	b2cd      	uxtb	r5, r1
 800d9c4:	f023 0320 	bic.w	r3, r3, #32
 800d9c8:	8193      	strh	r3, [r2, #12]
 800d9ca:	6853      	ldr	r3, [r2, #4]
 800d9cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d9ce:	b18a      	cbz	r2, 800d9f4 <_sungetc_r+0x44>
 800d9d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	dd08      	ble.n	800d9e8 <_sungetc_r+0x38>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	1e5a      	subs	r2, r3, #1
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d9e0:	6863      	ldr	r3, [r4, #4]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	e7e9      	b.n	800d9bc <_sungetc_r+0xc>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	f000 fb42 	bl	800e072 <__submore>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d0f1      	beq.n	800d9d6 <_sungetc_r+0x26>
 800d9f2:	e7e1      	b.n	800d9b8 <_sungetc_r+0x8>
 800d9f4:	6921      	ldr	r1, [r4, #16]
 800d9f6:	6822      	ldr	r2, [r4, #0]
 800d9f8:	b141      	cbz	r1, 800da0c <_sungetc_r+0x5c>
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	d206      	bcs.n	800da0c <_sungetc_r+0x5c>
 800d9fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800da02:	42a9      	cmp	r1, r5
 800da04:	d102      	bne.n	800da0c <_sungetc_r+0x5c>
 800da06:	3a01      	subs	r2, #1
 800da08:	6022      	str	r2, [r4, #0]
 800da0a:	e7ea      	b.n	800d9e2 <_sungetc_r+0x32>
 800da0c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800da10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da14:	6363      	str	r3, [r4, #52]	@ 0x34
 800da16:	2303      	movs	r3, #3
 800da18:	63a3      	str	r3, [r4, #56]	@ 0x38
 800da1a:	4623      	mov	r3, r4
 800da1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	2301      	movs	r3, #1
 800da24:	e7de      	b.n	800d9e4 <_sungetc_r+0x34>

0800da26 <__ssrefill_r>:
 800da26:	b510      	push	{r4, lr}
 800da28:	460c      	mov	r4, r1
 800da2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800da2c:	b169      	cbz	r1, 800da4a <__ssrefill_r+0x24>
 800da2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da32:	4299      	cmp	r1, r3
 800da34:	d001      	beq.n	800da3a <__ssrefill_r+0x14>
 800da36:	f7fe fcd3 	bl	800c3e0 <_free_r>
 800da3a:	2000      	movs	r0, #0
 800da3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800da40:	6063      	str	r3, [r4, #4]
 800da42:	b113      	cbz	r3, 800da4a <__ssrefill_r+0x24>
 800da44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	bd10      	pop	{r4, pc}
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	2300      	movs	r3, #0
 800da54:	6063      	str	r3, [r4, #4]
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	f043 0320 	orr.w	r3, r3, #32
 800da5c:	81a3      	strh	r3, [r4, #12]
 800da5e:	e7f3      	b.n	800da48 <__ssrefill_r+0x22>

0800da60 <__ssvfiscanf_r>:
 800da60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da64:	460c      	mov	r4, r1
 800da66:	2100      	movs	r1, #0
 800da68:	4606      	mov	r6, r0
 800da6a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800da6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800da72:	49aa      	ldr	r1, [pc, #680]	@ (800dd1c <__ssvfiscanf_r+0x2bc>)
 800da74:	f10d 0804 	add.w	r8, sp, #4
 800da78:	91a0      	str	r1, [sp, #640]	@ 0x280
 800da7a:	49a9      	ldr	r1, [pc, #676]	@ (800dd20 <__ssvfiscanf_r+0x2c0>)
 800da7c:	4fa9      	ldr	r7, [pc, #676]	@ (800dd24 <__ssvfiscanf_r+0x2c4>)
 800da7e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800da82:	91a1      	str	r1, [sp, #644]	@ 0x284
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	7813      	ldrb	r3, [r2, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 8159 	beq.w	800dd40 <__ssvfiscanf_r+0x2e0>
 800da8e:	5cf9      	ldrb	r1, [r7, r3]
 800da90:	1c55      	adds	r5, r2, #1
 800da92:	f011 0108 	ands.w	r1, r1, #8
 800da96:	d019      	beq.n	800dacc <__ssvfiscanf_r+0x6c>
 800da98:	6863      	ldr	r3, [r4, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	dd0f      	ble.n	800dabe <__ssvfiscanf_r+0x5e>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	781a      	ldrb	r2, [r3, #0]
 800daa2:	5cba      	ldrb	r2, [r7, r2]
 800daa4:	0712      	lsls	r2, r2, #28
 800daa6:	d401      	bmi.n	800daac <__ssvfiscanf_r+0x4c>
 800daa8:	462a      	mov	r2, r5
 800daaa:	e7ec      	b.n	800da86 <__ssvfiscanf_r+0x26>
 800daac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800daae:	3301      	adds	r3, #1
 800dab0:	3201      	adds	r2, #1
 800dab2:	9245      	str	r2, [sp, #276]	@ 0x114
 800dab4:	6862      	ldr	r2, [r4, #4]
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	3a01      	subs	r2, #1
 800daba:	6062      	str	r2, [r4, #4]
 800dabc:	e7ec      	b.n	800da98 <__ssvfiscanf_r+0x38>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4630      	mov	r0, r6
 800dac2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dac4:	4798      	blx	r3
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d0e9      	beq.n	800da9e <__ssvfiscanf_r+0x3e>
 800daca:	e7ed      	b.n	800daa8 <__ssvfiscanf_r+0x48>
 800dacc:	2b25      	cmp	r3, #37	@ 0x25
 800dace:	d012      	beq.n	800daf6 <__ssvfiscanf_r+0x96>
 800dad0:	4699      	mov	r9, r3
 800dad2:	6863      	ldr	r3, [r4, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f340 8094 	ble.w	800dc02 <__ssvfiscanf_r+0x1a2>
 800dada:	6822      	ldr	r2, [r4, #0]
 800dadc:	7813      	ldrb	r3, [r2, #0]
 800dade:	454b      	cmp	r3, r9
 800dae0:	f040 812e 	bne.w	800dd40 <__ssvfiscanf_r+0x2e0>
 800dae4:	6863      	ldr	r3, [r4, #4]
 800dae6:	3201      	adds	r2, #1
 800dae8:	3b01      	subs	r3, #1
 800daea:	6063      	str	r3, [r4, #4]
 800daec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	9345      	str	r3, [sp, #276]	@ 0x114
 800daf4:	e7d8      	b.n	800daa8 <__ssvfiscanf_r+0x48>
 800daf6:	9141      	str	r1, [sp, #260]	@ 0x104
 800daf8:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dafa:	7853      	ldrb	r3, [r2, #1]
 800dafc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dafe:	bf04      	itt	eq
 800db00:	2310      	moveq	r3, #16
 800db02:	1c95      	addeq	r5, r2, #2
 800db04:	f04f 020a 	mov.w	r2, #10
 800db08:	bf08      	it	eq
 800db0a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800db0c:	46a9      	mov	r9, r5
 800db0e:	f819 1b01 	ldrb.w	r1, [r9], #1
 800db12:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800db16:	2b09      	cmp	r3, #9
 800db18:	d91e      	bls.n	800db58 <__ssvfiscanf_r+0xf8>
 800db1a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800dd28 <__ssvfiscanf_r+0x2c8>
 800db1e:	2203      	movs	r2, #3
 800db20:	4650      	mov	r0, sl
 800db22:	f7fd fddc 	bl	800b6de <memchr>
 800db26:	b138      	cbz	r0, 800db38 <__ssvfiscanf_r+0xd8>
 800db28:	2301      	movs	r3, #1
 800db2a:	464d      	mov	r5, r9
 800db2c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800db2e:	eba0 000a 	sub.w	r0, r0, sl
 800db32:	4083      	lsls	r3, r0
 800db34:	4313      	orrs	r3, r2
 800db36:	9341      	str	r3, [sp, #260]	@ 0x104
 800db38:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db3c:	2b78      	cmp	r3, #120	@ 0x78
 800db3e:	d806      	bhi.n	800db4e <__ssvfiscanf_r+0xee>
 800db40:	2b57      	cmp	r3, #87	@ 0x57
 800db42:	d810      	bhi.n	800db66 <__ssvfiscanf_r+0x106>
 800db44:	2b25      	cmp	r3, #37	@ 0x25
 800db46:	d0c3      	beq.n	800dad0 <__ssvfiscanf_r+0x70>
 800db48:	d856      	bhi.n	800dbf8 <__ssvfiscanf_r+0x198>
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d064      	beq.n	800dc18 <__ssvfiscanf_r+0x1b8>
 800db4e:	2303      	movs	r3, #3
 800db50:	9347      	str	r3, [sp, #284]	@ 0x11c
 800db52:	230a      	movs	r3, #10
 800db54:	9342      	str	r3, [sp, #264]	@ 0x108
 800db56:	e077      	b.n	800dc48 <__ssvfiscanf_r+0x1e8>
 800db58:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800db5a:	464d      	mov	r5, r9
 800db5c:	fb02 1103 	mla	r1, r2, r3, r1
 800db60:	3930      	subs	r1, #48	@ 0x30
 800db62:	9143      	str	r1, [sp, #268]	@ 0x10c
 800db64:	e7d2      	b.n	800db0c <__ssvfiscanf_r+0xac>
 800db66:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800db6a:	2a20      	cmp	r2, #32
 800db6c:	d8ef      	bhi.n	800db4e <__ssvfiscanf_r+0xee>
 800db6e:	a101      	add	r1, pc, #4	@ (adr r1, 800db74 <__ssvfiscanf_r+0x114>)
 800db70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800db74:	0800dc27 	.word	0x0800dc27
 800db78:	0800db4f 	.word	0x0800db4f
 800db7c:	0800db4f 	.word	0x0800db4f
 800db80:	0800dc81 	.word	0x0800dc81
 800db84:	0800db4f 	.word	0x0800db4f
 800db88:	0800db4f 	.word	0x0800db4f
 800db8c:	0800db4f 	.word	0x0800db4f
 800db90:	0800db4f 	.word	0x0800db4f
 800db94:	0800db4f 	.word	0x0800db4f
 800db98:	0800db4f 	.word	0x0800db4f
 800db9c:	0800db4f 	.word	0x0800db4f
 800dba0:	0800dc97 	.word	0x0800dc97
 800dba4:	0800dc7d 	.word	0x0800dc7d
 800dba8:	0800dbff 	.word	0x0800dbff
 800dbac:	0800dbff 	.word	0x0800dbff
 800dbb0:	0800dbff 	.word	0x0800dbff
 800dbb4:	0800db4f 	.word	0x0800db4f
 800dbb8:	0800dc39 	.word	0x0800dc39
 800dbbc:	0800db4f 	.word	0x0800db4f
 800dbc0:	0800db4f 	.word	0x0800db4f
 800dbc4:	0800db4f 	.word	0x0800db4f
 800dbc8:	0800db4f 	.word	0x0800db4f
 800dbcc:	0800dca7 	.word	0x0800dca7
 800dbd0:	0800dc41 	.word	0x0800dc41
 800dbd4:	0800dc1f 	.word	0x0800dc1f
 800dbd8:	0800db4f 	.word	0x0800db4f
 800dbdc:	0800db4f 	.word	0x0800db4f
 800dbe0:	0800dca3 	.word	0x0800dca3
 800dbe4:	0800db4f 	.word	0x0800db4f
 800dbe8:	0800dc7d 	.word	0x0800dc7d
 800dbec:	0800db4f 	.word	0x0800db4f
 800dbf0:	0800db4f 	.word	0x0800db4f
 800dbf4:	0800dc27 	.word	0x0800dc27
 800dbf8:	3b45      	subs	r3, #69	@ 0x45
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d8a7      	bhi.n	800db4e <__ssvfiscanf_r+0xee>
 800dbfe:	2305      	movs	r3, #5
 800dc00:	e021      	b.n	800dc46 <__ssvfiscanf_r+0x1e6>
 800dc02:	4621      	mov	r1, r4
 800dc04:	4630      	mov	r0, r6
 800dc06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dc08:	4798      	blx	r3
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f43f af65 	beq.w	800dada <__ssvfiscanf_r+0x7a>
 800dc10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f040 808c 	bne.w	800dd30 <__ssvfiscanf_r+0x2d0>
 800dc18:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1c:	e08c      	b.n	800dd38 <__ssvfiscanf_r+0x2d8>
 800dc1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dc20:	f042 0220 	orr.w	r2, r2, #32
 800dc24:	9241      	str	r2, [sp, #260]	@ 0x104
 800dc26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dc28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc2c:	9241      	str	r2, [sp, #260]	@ 0x104
 800dc2e:	2210      	movs	r2, #16
 800dc30:	2b6e      	cmp	r3, #110	@ 0x6e
 800dc32:	9242      	str	r2, [sp, #264]	@ 0x108
 800dc34:	d902      	bls.n	800dc3c <__ssvfiscanf_r+0x1dc>
 800dc36:	e005      	b.n	800dc44 <__ssvfiscanf_r+0x1e4>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9342      	str	r3, [sp, #264]	@ 0x108
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	e002      	b.n	800dc46 <__ssvfiscanf_r+0x1e6>
 800dc40:	2308      	movs	r3, #8
 800dc42:	9342      	str	r3, [sp, #264]	@ 0x108
 800dc44:	2304      	movs	r3, #4
 800dc46:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dc48:	6863      	ldr	r3, [r4, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dd39      	ble.n	800dcc2 <__ssvfiscanf_r+0x262>
 800dc4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dc50:	0659      	lsls	r1, r3, #25
 800dc52:	d404      	bmi.n	800dc5e <__ssvfiscanf_r+0x1fe>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	781a      	ldrb	r2, [r3, #0]
 800dc58:	5cba      	ldrb	r2, [r7, r2]
 800dc5a:	0712      	lsls	r2, r2, #28
 800dc5c:	d438      	bmi.n	800dcd0 <__ssvfiscanf_r+0x270>
 800dc5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	dc47      	bgt.n	800dcf4 <__ssvfiscanf_r+0x294>
 800dc64:	466b      	mov	r3, sp
 800dc66:	4622      	mov	r2, r4
 800dc68:	4630      	mov	r0, r6
 800dc6a:	a941      	add	r1, sp, #260	@ 0x104
 800dc6c:	f000 f86a 	bl	800dd44 <_scanf_chars>
 800dc70:	2801      	cmp	r0, #1
 800dc72:	d065      	beq.n	800dd40 <__ssvfiscanf_r+0x2e0>
 800dc74:	2802      	cmp	r0, #2
 800dc76:	f47f af17 	bne.w	800daa8 <__ssvfiscanf_r+0x48>
 800dc7a:	e7c9      	b.n	800dc10 <__ssvfiscanf_r+0x1b0>
 800dc7c:	220a      	movs	r2, #10
 800dc7e:	e7d7      	b.n	800dc30 <__ssvfiscanf_r+0x1d0>
 800dc80:	4629      	mov	r1, r5
 800dc82:	4640      	mov	r0, r8
 800dc84:	f000 f9bc 	bl	800e000 <__sccl>
 800dc88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc90:	9341      	str	r3, [sp, #260]	@ 0x104
 800dc92:	2301      	movs	r3, #1
 800dc94:	e7d7      	b.n	800dc46 <__ssvfiscanf_r+0x1e6>
 800dc96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dc98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc9c:	9341      	str	r3, [sp, #260]	@ 0x104
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e7d1      	b.n	800dc46 <__ssvfiscanf_r+0x1e6>
 800dca2:	2302      	movs	r3, #2
 800dca4:	e7cf      	b.n	800dc46 <__ssvfiscanf_r+0x1e6>
 800dca6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800dca8:	06c3      	lsls	r3, r0, #27
 800dcaa:	f53f aefd 	bmi.w	800daa8 <__ssvfiscanf_r+0x48>
 800dcae:	9b00      	ldr	r3, [sp, #0]
 800dcb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dcb2:	1d19      	adds	r1, r3, #4
 800dcb4:	9100      	str	r1, [sp, #0]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	07c0      	lsls	r0, r0, #31
 800dcba:	bf4c      	ite	mi
 800dcbc:	801a      	strhmi	r2, [r3, #0]
 800dcbe:	601a      	strpl	r2, [r3, #0]
 800dcc0:	e6f2      	b.n	800daa8 <__ssvfiscanf_r+0x48>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dcc8:	4798      	blx	r3
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0bf      	beq.n	800dc4e <__ssvfiscanf_r+0x1ee>
 800dcce:	e79f      	b.n	800dc10 <__ssvfiscanf_r+0x1b0>
 800dcd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dcd2:	3201      	adds	r2, #1
 800dcd4:	9245      	str	r2, [sp, #276]	@ 0x114
 800dcd6:	6862      	ldr	r2, [r4, #4]
 800dcd8:	3a01      	subs	r2, #1
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	6062      	str	r2, [r4, #4]
 800dcde:	dd02      	ble.n	800dce6 <__ssvfiscanf_r+0x286>
 800dce0:	3301      	adds	r3, #1
 800dce2:	6023      	str	r3, [r4, #0]
 800dce4:	e7b6      	b.n	800dc54 <__ssvfiscanf_r+0x1f4>
 800dce6:	4621      	mov	r1, r4
 800dce8:	4630      	mov	r0, r6
 800dcea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dcec:	4798      	blx	r3
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d0b0      	beq.n	800dc54 <__ssvfiscanf_r+0x1f4>
 800dcf2:	e78d      	b.n	800dc10 <__ssvfiscanf_r+0x1b0>
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	dc06      	bgt.n	800dd06 <__ssvfiscanf_r+0x2a6>
 800dcf8:	466b      	mov	r3, sp
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	a941      	add	r1, sp, #260	@ 0x104
 800dd00:	f000 f87a 	bl	800ddf8 <_scanf_i>
 800dd04:	e7b4      	b.n	800dc70 <__ssvfiscanf_r+0x210>
 800dd06:	4b09      	ldr	r3, [pc, #36]	@ (800dd2c <__ssvfiscanf_r+0x2cc>)
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f43f aecd 	beq.w	800daa8 <__ssvfiscanf_r+0x48>
 800dd0e:	466b      	mov	r3, sp
 800dd10:	4622      	mov	r2, r4
 800dd12:	4630      	mov	r0, r6
 800dd14:	a941      	add	r1, sp, #260	@ 0x104
 800dd16:	f3af 8000 	nop.w
 800dd1a:	e7a9      	b.n	800dc70 <__ssvfiscanf_r+0x210>
 800dd1c:	0800d9b1 	.word	0x0800d9b1
 800dd20:	0800da27 	.word	0x0800da27
 800dd24:	0800ee41 	.word	0x0800ee41
 800dd28:	0800f30c 	.word	0x0800f30c
 800dd2c:	00000000 	.word	0x00000000
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	065b      	lsls	r3, r3, #25
 800dd34:	f53f af70 	bmi.w	800dc18 <__ssvfiscanf_r+0x1b8>
 800dd38:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dd42:	e7f9      	b.n	800dd38 <__ssvfiscanf_r+0x2d8>

0800dd44 <_scanf_chars>:
 800dd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4615      	mov	r5, r2
 800dd4a:	688a      	ldr	r2, [r1, #8]
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	b932      	cbnz	r2, 800dd60 <_scanf_chars+0x1c>
 800dd52:	698a      	ldr	r2, [r1, #24]
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	bf14      	ite	ne
 800dd58:	f04f 32ff 	movne.w	r2, #4294967295
 800dd5c:	2201      	moveq	r2, #1
 800dd5e:	608a      	str	r2, [r1, #8]
 800dd60:	2700      	movs	r7, #0
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800ddf4 <_scanf_chars+0xb0>
 800dd68:	06d1      	lsls	r1, r2, #27
 800dd6a:	bf5f      	itttt	pl
 800dd6c:	681a      	ldrpl	r2, [r3, #0]
 800dd6e:	1d11      	addpl	r1, r2, #4
 800dd70:	6019      	strpl	r1, [r3, #0]
 800dd72:	6816      	ldrpl	r6, [r2, #0]
 800dd74:	69a0      	ldr	r0, [r4, #24]
 800dd76:	b188      	cbz	r0, 800dd9c <_scanf_chars+0x58>
 800dd78:	2801      	cmp	r0, #1
 800dd7a:	d107      	bne.n	800dd8c <_scanf_chars+0x48>
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	781a      	ldrb	r2, [r3, #0]
 800dd80:	6963      	ldr	r3, [r4, #20]
 800dd82:	5c9b      	ldrb	r3, [r3, r2]
 800dd84:	b953      	cbnz	r3, 800dd9c <_scanf_chars+0x58>
 800dd86:	2f00      	cmp	r7, #0
 800dd88:	d031      	beq.n	800ddee <_scanf_chars+0xaa>
 800dd8a:	e022      	b.n	800ddd2 <_scanf_chars+0x8e>
 800dd8c:	2802      	cmp	r0, #2
 800dd8e:	d120      	bne.n	800ddd2 <_scanf_chars+0x8e>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dd98:	071b      	lsls	r3, r3, #28
 800dd9a:	d41a      	bmi.n	800ddd2 <_scanf_chars+0x8e>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	3701      	adds	r7, #1
 800dda0:	06da      	lsls	r2, r3, #27
 800dda2:	bf5e      	ittt	pl
 800dda4:	682b      	ldrpl	r3, [r5, #0]
 800dda6:	781b      	ldrbpl	r3, [r3, #0]
 800dda8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ddac:	682a      	ldr	r2, [r5, #0]
 800ddae:	686b      	ldr	r3, [r5, #4]
 800ddb0:	3201      	adds	r2, #1
 800ddb2:	602a      	str	r2, [r5, #0]
 800ddb4:	68a2      	ldr	r2, [r4, #8]
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	3a01      	subs	r2, #1
 800ddba:	606b      	str	r3, [r5, #4]
 800ddbc:	60a2      	str	r2, [r4, #8]
 800ddbe:	b142      	cbz	r2, 800ddd2 <_scanf_chars+0x8e>
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dcd7      	bgt.n	800dd74 <_scanf_chars+0x30>
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ddcc:	4798      	blx	r3
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d0d0      	beq.n	800dd74 <_scanf_chars+0x30>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	f013 0310 	ands.w	r3, r3, #16
 800ddd8:	d105      	bne.n	800dde6 <_scanf_chars+0xa2>
 800ddda:	68e2      	ldr	r2, [r4, #12]
 800dddc:	3201      	adds	r2, #1
 800ddde:	60e2      	str	r2, [r4, #12]
 800dde0:	69a2      	ldr	r2, [r4, #24]
 800dde2:	b102      	cbz	r2, 800dde6 <_scanf_chars+0xa2>
 800dde4:	7033      	strb	r3, [r6, #0]
 800dde6:	2000      	movs	r0, #0
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	443b      	add	r3, r7
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf2:	bf00      	nop
 800ddf4:	0800ee41 	.word	0x0800ee41

0800ddf8 <_scanf_i>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	460c      	mov	r4, r1
 800ddfe:	4698      	mov	r8, r3
 800de00:	4b72      	ldr	r3, [pc, #456]	@ (800dfcc <_scanf_i+0x1d4>)
 800de02:	b087      	sub	sp, #28
 800de04:	4682      	mov	sl, r0
 800de06:	4616      	mov	r6, r2
 800de08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de0c:	ab03      	add	r3, sp, #12
 800de0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800de12:	4b6f      	ldr	r3, [pc, #444]	@ (800dfd0 <_scanf_i+0x1d8>)
 800de14:	69a1      	ldr	r1, [r4, #24]
 800de16:	4a6f      	ldr	r2, [pc, #444]	@ (800dfd4 <_scanf_i+0x1dc>)
 800de18:	4627      	mov	r7, r4
 800de1a:	2903      	cmp	r1, #3
 800de1c:	bf08      	it	eq
 800de1e:	461a      	moveq	r2, r3
 800de20:	68a3      	ldr	r3, [r4, #8]
 800de22:	9201      	str	r2, [sp, #4]
 800de24:	1e5a      	subs	r2, r3, #1
 800de26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800de2a:	bf81      	itttt	hi
 800de2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800de30:	eb03 0905 	addhi.w	r9, r3, r5
 800de34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800de38:	60a3      	strhi	r3, [r4, #8]
 800de3a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800de3e:	bf98      	it	ls
 800de40:	f04f 0900 	movls.w	r9, #0
 800de44:	463d      	mov	r5, r7
 800de46:	f04f 0b00 	mov.w	fp, #0
 800de4a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	6831      	ldr	r1, [r6, #0]
 800de52:	ab03      	add	r3, sp, #12
 800de54:	2202      	movs	r2, #2
 800de56:	7809      	ldrb	r1, [r1, #0]
 800de58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800de5c:	f7fd fc3f 	bl	800b6de <memchr>
 800de60:	b328      	cbz	r0, 800deae <_scanf_i+0xb6>
 800de62:	f1bb 0f01 	cmp.w	fp, #1
 800de66:	d159      	bne.n	800df1c <_scanf_i+0x124>
 800de68:	6862      	ldr	r2, [r4, #4]
 800de6a:	b92a      	cbnz	r2, 800de78 <_scanf_i+0x80>
 800de6c:	2108      	movs	r1, #8
 800de6e:	6822      	ldr	r2, [r4, #0]
 800de70:	6061      	str	r1, [r4, #4]
 800de72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de76:	6022      	str	r2, [r4, #0]
 800de78:	6822      	ldr	r2, [r4, #0]
 800de7a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	68a2      	ldr	r2, [r4, #8]
 800de82:	1e51      	subs	r1, r2, #1
 800de84:	60a1      	str	r1, [r4, #8]
 800de86:	b192      	cbz	r2, 800deae <_scanf_i+0xb6>
 800de88:	6832      	ldr	r2, [r6, #0]
 800de8a:	1c51      	adds	r1, r2, #1
 800de8c:	6031      	str	r1, [r6, #0]
 800de8e:	7812      	ldrb	r2, [r2, #0]
 800de90:	f805 2b01 	strb.w	r2, [r5], #1
 800de94:	6872      	ldr	r2, [r6, #4]
 800de96:	3a01      	subs	r2, #1
 800de98:	2a00      	cmp	r2, #0
 800de9a:	6072      	str	r2, [r6, #4]
 800de9c:	dc07      	bgt.n	800deae <_scanf_i+0xb6>
 800de9e:	4631      	mov	r1, r6
 800dea0:	4650      	mov	r0, sl
 800dea2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dea6:	4790      	blx	r2
 800dea8:	2800      	cmp	r0, #0
 800deaa:	f040 8085 	bne.w	800dfb8 <_scanf_i+0x1c0>
 800deae:	f10b 0b01 	add.w	fp, fp, #1
 800deb2:	f1bb 0f03 	cmp.w	fp, #3
 800deb6:	d1cb      	bne.n	800de50 <_scanf_i+0x58>
 800deb8:	6863      	ldr	r3, [r4, #4]
 800deba:	b90b      	cbnz	r3, 800dec0 <_scanf_i+0xc8>
 800debc:	230a      	movs	r3, #10
 800debe:	6063      	str	r3, [r4, #4]
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	4945      	ldr	r1, [pc, #276]	@ (800dfd8 <_scanf_i+0x1e0>)
 800dec4:	6960      	ldr	r0, [r4, #20]
 800dec6:	1ac9      	subs	r1, r1, r3
 800dec8:	f000 f89a 	bl	800e000 <__sccl>
 800decc:	f04f 0b00 	mov.w	fp, #0
 800ded0:	68a3      	ldr	r3, [r4, #8]
 800ded2:	6822      	ldr	r2, [r4, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d03d      	beq.n	800df54 <_scanf_i+0x15c>
 800ded8:	6831      	ldr	r1, [r6, #0]
 800deda:	6960      	ldr	r0, [r4, #20]
 800dedc:	f891 c000 	ldrb.w	ip, [r1]
 800dee0:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d035      	beq.n	800df54 <_scanf_i+0x15c>
 800dee8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800deec:	d124      	bne.n	800df38 <_scanf_i+0x140>
 800deee:	0510      	lsls	r0, r2, #20
 800def0:	d522      	bpl.n	800df38 <_scanf_i+0x140>
 800def2:	f10b 0b01 	add.w	fp, fp, #1
 800def6:	f1b9 0f00 	cmp.w	r9, #0
 800defa:	d003      	beq.n	800df04 <_scanf_i+0x10c>
 800defc:	3301      	adds	r3, #1
 800defe:	f109 39ff 	add.w	r9, r9, #4294967295
 800df02:	60a3      	str	r3, [r4, #8]
 800df04:	6873      	ldr	r3, [r6, #4]
 800df06:	3b01      	subs	r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	6073      	str	r3, [r6, #4]
 800df0c:	dd1b      	ble.n	800df46 <_scanf_i+0x14e>
 800df0e:	6833      	ldr	r3, [r6, #0]
 800df10:	3301      	adds	r3, #1
 800df12:	6033      	str	r3, [r6, #0]
 800df14:	68a3      	ldr	r3, [r4, #8]
 800df16:	3b01      	subs	r3, #1
 800df18:	60a3      	str	r3, [r4, #8]
 800df1a:	e7d9      	b.n	800ded0 <_scanf_i+0xd8>
 800df1c:	f1bb 0f02 	cmp.w	fp, #2
 800df20:	d1ae      	bne.n	800de80 <_scanf_i+0x88>
 800df22:	6822      	ldr	r2, [r4, #0]
 800df24:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800df28:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800df2c:	d1bf      	bne.n	800deae <_scanf_i+0xb6>
 800df2e:	2110      	movs	r1, #16
 800df30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df34:	6061      	str	r1, [r4, #4]
 800df36:	e7a2      	b.n	800de7e <_scanf_i+0x86>
 800df38:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800df3c:	6022      	str	r2, [r4, #0]
 800df3e:	780b      	ldrb	r3, [r1, #0]
 800df40:	f805 3b01 	strb.w	r3, [r5], #1
 800df44:	e7de      	b.n	800df04 <_scanf_i+0x10c>
 800df46:	4631      	mov	r1, r6
 800df48:	4650      	mov	r0, sl
 800df4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df4e:	4798      	blx	r3
 800df50:	2800      	cmp	r0, #0
 800df52:	d0df      	beq.n	800df14 <_scanf_i+0x11c>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	05d9      	lsls	r1, r3, #23
 800df58:	d50d      	bpl.n	800df76 <_scanf_i+0x17e>
 800df5a:	42bd      	cmp	r5, r7
 800df5c:	d909      	bls.n	800df72 <_scanf_i+0x17a>
 800df5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800df62:	4632      	mov	r2, r6
 800df64:	4650      	mov	r0, sl
 800df66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df6a:	f105 39ff 	add.w	r9, r5, #4294967295
 800df6e:	4798      	blx	r3
 800df70:	464d      	mov	r5, r9
 800df72:	42bd      	cmp	r5, r7
 800df74:	d028      	beq.n	800dfc8 <_scanf_i+0x1d0>
 800df76:	6822      	ldr	r2, [r4, #0]
 800df78:	f012 0210 	ands.w	r2, r2, #16
 800df7c:	d113      	bne.n	800dfa6 <_scanf_i+0x1ae>
 800df7e:	702a      	strb	r2, [r5, #0]
 800df80:	4639      	mov	r1, r7
 800df82:	6863      	ldr	r3, [r4, #4]
 800df84:	4650      	mov	r0, sl
 800df86:	9e01      	ldr	r6, [sp, #4]
 800df88:	47b0      	blx	r6
 800df8a:	f8d8 3000 	ldr.w	r3, [r8]
 800df8e:	6821      	ldr	r1, [r4, #0]
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	f8c8 2000 	str.w	r2, [r8]
 800df96:	f011 0f20 	tst.w	r1, #32
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	d00f      	beq.n	800dfbe <_scanf_i+0x1c6>
 800df9e:	6018      	str	r0, [r3, #0]
 800dfa0:	68e3      	ldr	r3, [r4, #12]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	60e3      	str	r3, [r4, #12]
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	1bed      	subs	r5, r5, r7
 800dfac:	445d      	add	r5, fp
 800dfae:	442b      	add	r3, r5
 800dfb0:	6123      	str	r3, [r4, #16]
 800dfb2:	b007      	add	sp, #28
 800dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb8:	f04f 0b00 	mov.w	fp, #0
 800dfbc:	e7ca      	b.n	800df54 <_scanf_i+0x15c>
 800dfbe:	07ca      	lsls	r2, r1, #31
 800dfc0:	bf4c      	ite	mi
 800dfc2:	8018      	strhmi	r0, [r3, #0]
 800dfc4:	6018      	strpl	r0, [r3, #0]
 800dfc6:	e7eb      	b.n	800dfa0 <_scanf_i+0x1a8>
 800dfc8:	2001      	movs	r0, #1
 800dfca:	e7f2      	b.n	800dfb2 <_scanf_i+0x1ba>
 800dfcc:	0800ed94 	.word	0x0800ed94
 800dfd0:	0800a005 	.word	0x0800a005
 800dfd4:	0800d735 	.word	0x0800d735
 800dfd8:	0800f320 	.word	0x0800f320

0800dfdc <fiprintf>:
 800dfdc:	b40e      	push	{r1, r2, r3}
 800dfde:	b503      	push	{r0, r1, lr}
 800dfe0:	4601      	mov	r1, r0
 800dfe2:	ab03      	add	r3, sp, #12
 800dfe4:	4805      	ldr	r0, [pc, #20]	@ (800dffc <fiprintf+0x20>)
 800dfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfea:	6800      	ldr	r0, [r0, #0]
 800dfec:	9301      	str	r3, [sp, #4]
 800dfee:	f000 f8d5 	bl	800e19c <_vfiprintf_r>
 800dff2:	b002      	add	sp, #8
 800dff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dff8:	b003      	add	sp, #12
 800dffa:	4770      	bx	lr
 800dffc:	20000194 	.word	0x20000194

0800e000 <__sccl>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	780b      	ldrb	r3, [r1, #0]
 800e004:	4604      	mov	r4, r0
 800e006:	2b5e      	cmp	r3, #94	@ 0x5e
 800e008:	bf0b      	itete	eq
 800e00a:	784b      	ldrbeq	r3, [r1, #1]
 800e00c:	1c4a      	addne	r2, r1, #1
 800e00e:	1c8a      	addeq	r2, r1, #2
 800e010:	2100      	movne	r1, #0
 800e012:	bf08      	it	eq
 800e014:	2101      	moveq	r1, #1
 800e016:	3801      	subs	r0, #1
 800e018:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e01c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e020:	42a8      	cmp	r0, r5
 800e022:	d1fb      	bne.n	800e01c <__sccl+0x1c>
 800e024:	b90b      	cbnz	r3, 800e02a <__sccl+0x2a>
 800e026:	1e50      	subs	r0, r2, #1
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	f081 0101 	eor.w	r1, r1, #1
 800e02e:	4610      	mov	r0, r2
 800e030:	54e1      	strb	r1, [r4, r3]
 800e032:	4602      	mov	r2, r0
 800e034:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e038:	2d2d      	cmp	r5, #45	@ 0x2d
 800e03a:	d005      	beq.n	800e048 <__sccl+0x48>
 800e03c:	2d5d      	cmp	r5, #93	@ 0x5d
 800e03e:	d016      	beq.n	800e06e <__sccl+0x6e>
 800e040:	2d00      	cmp	r5, #0
 800e042:	d0f1      	beq.n	800e028 <__sccl+0x28>
 800e044:	462b      	mov	r3, r5
 800e046:	e7f2      	b.n	800e02e <__sccl+0x2e>
 800e048:	7846      	ldrb	r6, [r0, #1]
 800e04a:	2e5d      	cmp	r6, #93	@ 0x5d
 800e04c:	d0fa      	beq.n	800e044 <__sccl+0x44>
 800e04e:	42b3      	cmp	r3, r6
 800e050:	dcf8      	bgt.n	800e044 <__sccl+0x44>
 800e052:	461a      	mov	r2, r3
 800e054:	3002      	adds	r0, #2
 800e056:	3201      	adds	r2, #1
 800e058:	4296      	cmp	r6, r2
 800e05a:	54a1      	strb	r1, [r4, r2]
 800e05c:	dcfb      	bgt.n	800e056 <__sccl+0x56>
 800e05e:	1af2      	subs	r2, r6, r3
 800e060:	3a01      	subs	r2, #1
 800e062:	42b3      	cmp	r3, r6
 800e064:	bfa8      	it	ge
 800e066:	2200      	movge	r2, #0
 800e068:	1c5d      	adds	r5, r3, #1
 800e06a:	18ab      	adds	r3, r5, r2
 800e06c:	e7e1      	b.n	800e032 <__sccl+0x32>
 800e06e:	4610      	mov	r0, r2
 800e070:	e7da      	b.n	800e028 <__sccl+0x28>

0800e072 <__submore>:
 800e072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e076:	460c      	mov	r4, r1
 800e078:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e07a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e07e:	4299      	cmp	r1, r3
 800e080:	d11b      	bne.n	800e0ba <__submore+0x48>
 800e082:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e086:	f7fe fda3 	bl	800cbd0 <_malloc_r>
 800e08a:	b918      	cbnz	r0, 800e094 <__submore+0x22>
 800e08c:	f04f 30ff 	mov.w	r0, #4294967295
 800e090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e098:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e09a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e09e:	6360      	str	r0, [r4, #52]	@ 0x34
 800e0a0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e0a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e0a8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e0ac:	7043      	strb	r3, [r0, #1]
 800e0ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e0b2:	7003      	strb	r3, [r0, #0]
 800e0b4:	6020      	str	r0, [r4, #0]
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	e7ea      	b.n	800e090 <__submore+0x1e>
 800e0ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e0bc:	0077      	lsls	r7, r6, #1
 800e0be:	463a      	mov	r2, r7
 800e0c0:	f000 f816 	bl	800e0f0 <_realloc_r>
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d0e0      	beq.n	800e08c <__submore+0x1a>
 800e0ca:	eb00 0806 	add.w	r8, r0, r6
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	4632      	mov	r2, r6
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	f7fd fb11 	bl	800b6fa <memcpy>
 800e0d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e0dc:	f8c4 8000 	str.w	r8, [r4]
 800e0e0:	e7e9      	b.n	800e0b6 <__submore+0x44>

0800e0e2 <abort>:
 800e0e2:	2006      	movs	r0, #6
 800e0e4:	b508      	push	{r3, lr}
 800e0e6:	f000 fa2d 	bl	800e544 <raise>
 800e0ea:	2001      	movs	r0, #1
 800e0ec:	f7f6 fc33 	bl	8004956 <_exit>

0800e0f0 <_realloc_r>:
 800e0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	4615      	mov	r5, r2
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	b921      	cbnz	r1, 800e106 <_realloc_r+0x16>
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e102:	f7fe bd65 	b.w	800cbd0 <_malloc_r>
 800e106:	b92a      	cbnz	r2, 800e114 <_realloc_r+0x24>
 800e108:	f7fe f96a 	bl	800c3e0 <_free_r>
 800e10c:	2400      	movs	r4, #0
 800e10e:	4620      	mov	r0, r4
 800e110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e114:	f000 fa32 	bl	800e57c <_malloc_usable_size_r>
 800e118:	4285      	cmp	r5, r0
 800e11a:	4606      	mov	r6, r0
 800e11c:	d802      	bhi.n	800e124 <_realloc_r+0x34>
 800e11e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e122:	d8f4      	bhi.n	800e10e <_realloc_r+0x1e>
 800e124:	4629      	mov	r1, r5
 800e126:	4640      	mov	r0, r8
 800e128:	f7fe fd52 	bl	800cbd0 <_malloc_r>
 800e12c:	4607      	mov	r7, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0ec      	beq.n	800e10c <_realloc_r+0x1c>
 800e132:	42b5      	cmp	r5, r6
 800e134:	462a      	mov	r2, r5
 800e136:	4621      	mov	r1, r4
 800e138:	bf28      	it	cs
 800e13a:	4632      	movcs	r2, r6
 800e13c:	f7fd fadd 	bl	800b6fa <memcpy>
 800e140:	4621      	mov	r1, r4
 800e142:	4640      	mov	r0, r8
 800e144:	f7fe f94c 	bl	800c3e0 <_free_r>
 800e148:	463c      	mov	r4, r7
 800e14a:	e7e0      	b.n	800e10e <_realloc_r+0x1e>

0800e14c <__sfputc_r>:
 800e14c:	6893      	ldr	r3, [r2, #8]
 800e14e:	b410      	push	{r4}
 800e150:	3b01      	subs	r3, #1
 800e152:	2b00      	cmp	r3, #0
 800e154:	6093      	str	r3, [r2, #8]
 800e156:	da07      	bge.n	800e168 <__sfputc_r+0x1c>
 800e158:	6994      	ldr	r4, [r2, #24]
 800e15a:	42a3      	cmp	r3, r4
 800e15c:	db01      	blt.n	800e162 <__sfputc_r+0x16>
 800e15e:	290a      	cmp	r1, #10
 800e160:	d102      	bne.n	800e168 <__sfputc_r+0x1c>
 800e162:	bc10      	pop	{r4}
 800e164:	f000 b932 	b.w	800e3cc <__swbuf_r>
 800e168:	6813      	ldr	r3, [r2, #0]
 800e16a:	1c58      	adds	r0, r3, #1
 800e16c:	6010      	str	r0, [r2, #0]
 800e16e:	7019      	strb	r1, [r3, #0]
 800e170:	4608      	mov	r0, r1
 800e172:	bc10      	pop	{r4}
 800e174:	4770      	bx	lr

0800e176 <__sfputs_r>:
 800e176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e178:	4606      	mov	r6, r0
 800e17a:	460f      	mov	r7, r1
 800e17c:	4614      	mov	r4, r2
 800e17e:	18d5      	adds	r5, r2, r3
 800e180:	42ac      	cmp	r4, r5
 800e182:	d101      	bne.n	800e188 <__sfputs_r+0x12>
 800e184:	2000      	movs	r0, #0
 800e186:	e007      	b.n	800e198 <__sfputs_r+0x22>
 800e188:	463a      	mov	r2, r7
 800e18a:	4630      	mov	r0, r6
 800e18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e190:	f7ff ffdc 	bl	800e14c <__sfputc_r>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d1f3      	bne.n	800e180 <__sfputs_r+0xa>
 800e198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e19c <_vfiprintf_r>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	4614      	mov	r4, r2
 800e1a4:	4698      	mov	r8, r3
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	b09d      	sub	sp, #116	@ 0x74
 800e1aa:	b118      	cbz	r0, 800e1b4 <_vfiprintf_r+0x18>
 800e1ac:	6a03      	ldr	r3, [r0, #32]
 800e1ae:	b90b      	cbnz	r3, 800e1b4 <_vfiprintf_r+0x18>
 800e1b0:	f7fc fc1c 	bl	800a9ec <__sinit>
 800e1b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1b6:	07d9      	lsls	r1, r3, #31
 800e1b8:	d405      	bmi.n	800e1c6 <_vfiprintf_r+0x2a>
 800e1ba:	89ab      	ldrh	r3, [r5, #12]
 800e1bc:	059a      	lsls	r2, r3, #22
 800e1be:	d402      	bmi.n	800e1c6 <_vfiprintf_r+0x2a>
 800e1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1c2:	f7fd fa81 	bl	800b6c8 <__retarget_lock_acquire_recursive>
 800e1c6:	89ab      	ldrh	r3, [r5, #12]
 800e1c8:	071b      	lsls	r3, r3, #28
 800e1ca:	d501      	bpl.n	800e1d0 <_vfiprintf_r+0x34>
 800e1cc:	692b      	ldr	r3, [r5, #16]
 800e1ce:	b99b      	cbnz	r3, 800e1f8 <_vfiprintf_r+0x5c>
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f000 f938 	bl	800e448 <__swsetup_r>
 800e1d8:	b170      	cbz	r0, 800e1f8 <_vfiprintf_r+0x5c>
 800e1da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1dc:	07dc      	lsls	r4, r3, #31
 800e1de:	d504      	bpl.n	800e1ea <_vfiprintf_r+0x4e>
 800e1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e4:	b01d      	add	sp, #116	@ 0x74
 800e1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	0598      	lsls	r0, r3, #22
 800e1ee:	d4f7      	bmi.n	800e1e0 <_vfiprintf_r+0x44>
 800e1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1f2:	f7fd fa6b 	bl	800b6cc <__retarget_lock_release_recursive>
 800e1f6:	e7f3      	b.n	800e1e0 <_vfiprintf_r+0x44>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1fc:	2320      	movs	r3, #32
 800e1fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e202:	2330      	movs	r3, #48	@ 0x30
 800e204:	f04f 0901 	mov.w	r9, #1
 800e208:	f8cd 800c 	str.w	r8, [sp, #12]
 800e20c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e3b8 <_vfiprintf_r+0x21c>
 800e210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e214:	4623      	mov	r3, r4
 800e216:	469a      	mov	sl, r3
 800e218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e21c:	b10a      	cbz	r2, 800e222 <_vfiprintf_r+0x86>
 800e21e:	2a25      	cmp	r2, #37	@ 0x25
 800e220:	d1f9      	bne.n	800e216 <_vfiprintf_r+0x7a>
 800e222:	ebba 0b04 	subs.w	fp, sl, r4
 800e226:	d00b      	beq.n	800e240 <_vfiprintf_r+0xa4>
 800e228:	465b      	mov	r3, fp
 800e22a:	4622      	mov	r2, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	4630      	mov	r0, r6
 800e230:	f7ff ffa1 	bl	800e176 <__sfputs_r>
 800e234:	3001      	adds	r0, #1
 800e236:	f000 80a7 	beq.w	800e388 <_vfiprintf_r+0x1ec>
 800e23a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e23c:	445a      	add	r2, fp
 800e23e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e240:	f89a 3000 	ldrb.w	r3, [sl]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 809f 	beq.w	800e388 <_vfiprintf_r+0x1ec>
 800e24a:	2300      	movs	r3, #0
 800e24c:	f04f 32ff 	mov.w	r2, #4294967295
 800e250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e254:	f10a 0a01 	add.w	sl, sl, #1
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e260:	931a      	str	r3, [sp, #104]	@ 0x68
 800e262:	4654      	mov	r4, sl
 800e264:	2205      	movs	r2, #5
 800e266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26a:	4853      	ldr	r0, [pc, #332]	@ (800e3b8 <_vfiprintf_r+0x21c>)
 800e26c:	f7fd fa37 	bl	800b6de <memchr>
 800e270:	9a04      	ldr	r2, [sp, #16]
 800e272:	b9d8      	cbnz	r0, 800e2ac <_vfiprintf_r+0x110>
 800e274:	06d1      	lsls	r1, r2, #27
 800e276:	bf44      	itt	mi
 800e278:	2320      	movmi	r3, #32
 800e27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e27e:	0713      	lsls	r3, r2, #28
 800e280:	bf44      	itt	mi
 800e282:	232b      	movmi	r3, #43	@ 0x2b
 800e284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e288:	f89a 3000 	ldrb.w	r3, [sl]
 800e28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e28e:	d015      	beq.n	800e2bc <_vfiprintf_r+0x120>
 800e290:	4654      	mov	r4, sl
 800e292:	2000      	movs	r0, #0
 800e294:	f04f 0c0a 	mov.w	ip, #10
 800e298:	9a07      	ldr	r2, [sp, #28]
 800e29a:	4621      	mov	r1, r4
 800e29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2a0:	3b30      	subs	r3, #48	@ 0x30
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d94b      	bls.n	800e33e <_vfiprintf_r+0x1a2>
 800e2a6:	b1b0      	cbz	r0, 800e2d6 <_vfiprintf_r+0x13a>
 800e2a8:	9207      	str	r2, [sp, #28]
 800e2aa:	e014      	b.n	800e2d6 <_vfiprintf_r+0x13a>
 800e2ac:	eba0 0308 	sub.w	r3, r0, r8
 800e2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	46a2      	mov	sl, r4
 800e2b8:	9304      	str	r3, [sp, #16]
 800e2ba:	e7d2      	b.n	800e262 <_vfiprintf_r+0xc6>
 800e2bc:	9b03      	ldr	r3, [sp, #12]
 800e2be:	1d19      	adds	r1, r3, #4
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	9103      	str	r1, [sp, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	bfbb      	ittet	lt
 800e2c8:	425b      	neglt	r3, r3
 800e2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e2ce:	9307      	strge	r3, [sp, #28]
 800e2d0:	9307      	strlt	r3, [sp, #28]
 800e2d2:	bfb8      	it	lt
 800e2d4:	9204      	strlt	r2, [sp, #16]
 800e2d6:	7823      	ldrb	r3, [r4, #0]
 800e2d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2da:	d10a      	bne.n	800e2f2 <_vfiprintf_r+0x156>
 800e2dc:	7863      	ldrb	r3, [r4, #1]
 800e2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2e0:	d132      	bne.n	800e348 <_vfiprintf_r+0x1ac>
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	3402      	adds	r4, #2
 800e2e6:	1d1a      	adds	r2, r3, #4
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	9203      	str	r2, [sp, #12]
 800e2ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2f0:	9305      	str	r3, [sp, #20]
 800e2f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e3bc <_vfiprintf_r+0x220>
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	7821      	ldrb	r1, [r4, #0]
 800e2fc:	f7fd f9ef 	bl	800b6de <memchr>
 800e300:	b138      	cbz	r0, 800e312 <_vfiprintf_r+0x176>
 800e302:	2240      	movs	r2, #64	@ 0x40
 800e304:	9b04      	ldr	r3, [sp, #16]
 800e306:	eba0 000a 	sub.w	r0, r0, sl
 800e30a:	4082      	lsls	r2, r0
 800e30c:	4313      	orrs	r3, r2
 800e30e:	3401      	adds	r4, #1
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e316:	2206      	movs	r2, #6
 800e318:	4829      	ldr	r0, [pc, #164]	@ (800e3c0 <_vfiprintf_r+0x224>)
 800e31a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e31e:	f7fd f9de 	bl	800b6de <memchr>
 800e322:	2800      	cmp	r0, #0
 800e324:	d03f      	beq.n	800e3a6 <_vfiprintf_r+0x20a>
 800e326:	4b27      	ldr	r3, [pc, #156]	@ (800e3c4 <_vfiprintf_r+0x228>)
 800e328:	bb1b      	cbnz	r3, 800e372 <_vfiprintf_r+0x1d6>
 800e32a:	9b03      	ldr	r3, [sp, #12]
 800e32c:	3307      	adds	r3, #7
 800e32e:	f023 0307 	bic.w	r3, r3, #7
 800e332:	3308      	adds	r3, #8
 800e334:	9303      	str	r3, [sp, #12]
 800e336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e338:	443b      	add	r3, r7
 800e33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e33c:	e76a      	b.n	800e214 <_vfiprintf_r+0x78>
 800e33e:	460c      	mov	r4, r1
 800e340:	2001      	movs	r0, #1
 800e342:	fb0c 3202 	mla	r2, ip, r2, r3
 800e346:	e7a8      	b.n	800e29a <_vfiprintf_r+0xfe>
 800e348:	2300      	movs	r3, #0
 800e34a:	f04f 0c0a 	mov.w	ip, #10
 800e34e:	4619      	mov	r1, r3
 800e350:	3401      	adds	r4, #1
 800e352:	9305      	str	r3, [sp, #20]
 800e354:	4620      	mov	r0, r4
 800e356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e35a:	3a30      	subs	r2, #48	@ 0x30
 800e35c:	2a09      	cmp	r2, #9
 800e35e:	d903      	bls.n	800e368 <_vfiprintf_r+0x1cc>
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0c6      	beq.n	800e2f2 <_vfiprintf_r+0x156>
 800e364:	9105      	str	r1, [sp, #20]
 800e366:	e7c4      	b.n	800e2f2 <_vfiprintf_r+0x156>
 800e368:	4604      	mov	r4, r0
 800e36a:	2301      	movs	r3, #1
 800e36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e370:	e7f0      	b.n	800e354 <_vfiprintf_r+0x1b8>
 800e372:	ab03      	add	r3, sp, #12
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	462a      	mov	r2, r5
 800e378:	4630      	mov	r0, r6
 800e37a:	4b13      	ldr	r3, [pc, #76]	@ (800e3c8 <_vfiprintf_r+0x22c>)
 800e37c:	a904      	add	r1, sp, #16
 800e37e:	f7fb feeb 	bl	800a158 <_printf_float>
 800e382:	4607      	mov	r7, r0
 800e384:	1c78      	adds	r0, r7, #1
 800e386:	d1d6      	bne.n	800e336 <_vfiprintf_r+0x19a>
 800e388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e38a:	07d9      	lsls	r1, r3, #31
 800e38c:	d405      	bmi.n	800e39a <_vfiprintf_r+0x1fe>
 800e38e:	89ab      	ldrh	r3, [r5, #12]
 800e390:	059a      	lsls	r2, r3, #22
 800e392:	d402      	bmi.n	800e39a <_vfiprintf_r+0x1fe>
 800e394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e396:	f7fd f999 	bl	800b6cc <__retarget_lock_release_recursive>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	065b      	lsls	r3, r3, #25
 800e39e:	f53f af1f 	bmi.w	800e1e0 <_vfiprintf_r+0x44>
 800e3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a4:	e71e      	b.n	800e1e4 <_vfiprintf_r+0x48>
 800e3a6:	ab03      	add	r3, sp, #12
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	462a      	mov	r2, r5
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	4b06      	ldr	r3, [pc, #24]	@ (800e3c8 <_vfiprintf_r+0x22c>)
 800e3b0:	a904      	add	r1, sp, #16
 800e3b2:	f7fc f96f 	bl	800a694 <_printf_i>
 800e3b6:	e7e4      	b.n	800e382 <_vfiprintf_r+0x1e6>
 800e3b8:	0800f32b 	.word	0x0800f32b
 800e3bc:	0800f30c 	.word	0x0800f30c
 800e3c0:	0800f331 	.word	0x0800f331
 800e3c4:	0800a159 	.word	0x0800a159
 800e3c8:	0800e177 	.word	0x0800e177

0800e3cc <__swbuf_r>:
 800e3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ce:	460e      	mov	r6, r1
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	b118      	cbz	r0, 800e3de <__swbuf_r+0x12>
 800e3d6:	6a03      	ldr	r3, [r0, #32]
 800e3d8:	b90b      	cbnz	r3, 800e3de <__swbuf_r+0x12>
 800e3da:	f7fc fb07 	bl	800a9ec <__sinit>
 800e3de:	69a3      	ldr	r3, [r4, #24]
 800e3e0:	60a3      	str	r3, [r4, #8]
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	071a      	lsls	r2, r3, #28
 800e3e6:	d501      	bpl.n	800e3ec <__swbuf_r+0x20>
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	b943      	cbnz	r3, 800e3fe <__swbuf_r+0x32>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 f82a 	bl	800e448 <__swsetup_r>
 800e3f4:	b118      	cbz	r0, 800e3fe <__swbuf_r+0x32>
 800e3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	6922      	ldr	r2, [r4, #16]
 800e402:	b2f6      	uxtb	r6, r6
 800e404:	1a98      	subs	r0, r3, r2
 800e406:	6963      	ldr	r3, [r4, #20]
 800e408:	4637      	mov	r7, r6
 800e40a:	4283      	cmp	r3, r0
 800e40c:	dc05      	bgt.n	800e41a <__swbuf_r+0x4e>
 800e40e:	4621      	mov	r1, r4
 800e410:	4628      	mov	r0, r5
 800e412:	f7ff fa29 	bl	800d868 <_fflush_r>
 800e416:	2800      	cmp	r0, #0
 800e418:	d1ed      	bne.n	800e3f6 <__swbuf_r+0x2a>
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	3b01      	subs	r3, #1
 800e41e:	60a3      	str	r3, [r4, #8]
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	6022      	str	r2, [r4, #0]
 800e426:	701e      	strb	r6, [r3, #0]
 800e428:	6962      	ldr	r2, [r4, #20]
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d004      	beq.n	800e43a <__swbuf_r+0x6e>
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	07db      	lsls	r3, r3, #31
 800e434:	d5e1      	bpl.n	800e3fa <__swbuf_r+0x2e>
 800e436:	2e0a      	cmp	r6, #10
 800e438:	d1df      	bne.n	800e3fa <__swbuf_r+0x2e>
 800e43a:	4621      	mov	r1, r4
 800e43c:	4628      	mov	r0, r5
 800e43e:	f7ff fa13 	bl	800d868 <_fflush_r>
 800e442:	2800      	cmp	r0, #0
 800e444:	d0d9      	beq.n	800e3fa <__swbuf_r+0x2e>
 800e446:	e7d6      	b.n	800e3f6 <__swbuf_r+0x2a>

0800e448 <__swsetup_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4b29      	ldr	r3, [pc, #164]	@ (800e4f0 <__swsetup_r+0xa8>)
 800e44c:	4605      	mov	r5, r0
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	460c      	mov	r4, r1
 800e452:	b118      	cbz	r0, 800e45c <__swsetup_r+0x14>
 800e454:	6a03      	ldr	r3, [r0, #32]
 800e456:	b90b      	cbnz	r3, 800e45c <__swsetup_r+0x14>
 800e458:	f7fc fac8 	bl	800a9ec <__sinit>
 800e45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e460:	0719      	lsls	r1, r3, #28
 800e462:	d422      	bmi.n	800e4aa <__swsetup_r+0x62>
 800e464:	06da      	lsls	r2, r3, #27
 800e466:	d407      	bmi.n	800e478 <__swsetup_r+0x30>
 800e468:	2209      	movs	r2, #9
 800e46a:	602a      	str	r2, [r5, #0]
 800e46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	81a3      	strh	r3, [r4, #12]
 800e476:	e033      	b.n	800e4e0 <__swsetup_r+0x98>
 800e478:	0758      	lsls	r0, r3, #29
 800e47a:	d512      	bpl.n	800e4a2 <__swsetup_r+0x5a>
 800e47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e47e:	b141      	cbz	r1, 800e492 <__swsetup_r+0x4a>
 800e480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e484:	4299      	cmp	r1, r3
 800e486:	d002      	beq.n	800e48e <__swsetup_r+0x46>
 800e488:	4628      	mov	r0, r5
 800e48a:	f7fd ffa9 	bl	800c3e0 <_free_r>
 800e48e:	2300      	movs	r3, #0
 800e490:	6363      	str	r3, [r4, #52]	@ 0x34
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e498:	81a3      	strh	r3, [r4, #12]
 800e49a:	2300      	movs	r3, #0
 800e49c:	6063      	str	r3, [r4, #4]
 800e49e:	6923      	ldr	r3, [r4, #16]
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	f043 0308 	orr.w	r3, r3, #8
 800e4a8:	81a3      	strh	r3, [r4, #12]
 800e4aa:	6923      	ldr	r3, [r4, #16]
 800e4ac:	b94b      	cbnz	r3, 800e4c2 <__swsetup_r+0x7a>
 800e4ae:	89a3      	ldrh	r3, [r4, #12]
 800e4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4b8:	d003      	beq.n	800e4c2 <__swsetup_r+0x7a>
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f000 f88a 	bl	800e5d6 <__smakebuf_r>
 800e4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c6:	f013 0201 	ands.w	r2, r3, #1
 800e4ca:	d00a      	beq.n	800e4e2 <__swsetup_r+0x9a>
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	60a2      	str	r2, [r4, #8]
 800e4d0:	6962      	ldr	r2, [r4, #20]
 800e4d2:	4252      	negs	r2, r2
 800e4d4:	61a2      	str	r2, [r4, #24]
 800e4d6:	6922      	ldr	r2, [r4, #16]
 800e4d8:	b942      	cbnz	r2, 800e4ec <__swsetup_r+0xa4>
 800e4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e4de:	d1c5      	bne.n	800e46c <__swsetup_r+0x24>
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	0799      	lsls	r1, r3, #30
 800e4e4:	bf58      	it	pl
 800e4e6:	6962      	ldrpl	r2, [r4, #20]
 800e4e8:	60a2      	str	r2, [r4, #8]
 800e4ea:	e7f4      	b.n	800e4d6 <__swsetup_r+0x8e>
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	e7f7      	b.n	800e4e0 <__swsetup_r+0x98>
 800e4f0:	20000194 	.word	0x20000194

0800e4f4 <_raise_r>:
 800e4f4:	291f      	cmp	r1, #31
 800e4f6:	b538      	push	{r3, r4, r5, lr}
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	d904      	bls.n	800e508 <_raise_r+0x14>
 800e4fe:	2316      	movs	r3, #22
 800e500:	6003      	str	r3, [r0, #0]
 800e502:	f04f 30ff 	mov.w	r0, #4294967295
 800e506:	bd38      	pop	{r3, r4, r5, pc}
 800e508:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e50a:	b112      	cbz	r2, 800e512 <_raise_r+0x1e>
 800e50c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e510:	b94b      	cbnz	r3, 800e526 <_raise_r+0x32>
 800e512:	4628      	mov	r0, r5
 800e514:	f000 f830 	bl	800e578 <_getpid_r>
 800e518:	4622      	mov	r2, r4
 800e51a:	4601      	mov	r1, r0
 800e51c:	4628      	mov	r0, r5
 800e51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e522:	f000 b817 	b.w	800e554 <_kill_r>
 800e526:	2b01      	cmp	r3, #1
 800e528:	d00a      	beq.n	800e540 <_raise_r+0x4c>
 800e52a:	1c59      	adds	r1, r3, #1
 800e52c:	d103      	bne.n	800e536 <_raise_r+0x42>
 800e52e:	2316      	movs	r3, #22
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	2001      	movs	r0, #1
 800e534:	e7e7      	b.n	800e506 <_raise_r+0x12>
 800e536:	2100      	movs	r1, #0
 800e538:	4620      	mov	r0, r4
 800e53a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e53e:	4798      	blx	r3
 800e540:	2000      	movs	r0, #0
 800e542:	e7e0      	b.n	800e506 <_raise_r+0x12>

0800e544 <raise>:
 800e544:	4b02      	ldr	r3, [pc, #8]	@ (800e550 <raise+0xc>)
 800e546:	4601      	mov	r1, r0
 800e548:	6818      	ldr	r0, [r3, #0]
 800e54a:	f7ff bfd3 	b.w	800e4f4 <_raise_r>
 800e54e:	bf00      	nop
 800e550:	20000194 	.word	0x20000194

0800e554 <_kill_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	2300      	movs	r3, #0
 800e558:	4d06      	ldr	r5, [pc, #24]	@ (800e574 <_kill_r+0x20>)
 800e55a:	4604      	mov	r4, r0
 800e55c:	4608      	mov	r0, r1
 800e55e:	4611      	mov	r1, r2
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	f7f6 f9e8 	bl	8004936 <_kill>
 800e566:	1c43      	adds	r3, r0, #1
 800e568:	d102      	bne.n	800e570 <_kill_r+0x1c>
 800e56a:	682b      	ldr	r3, [r5, #0]
 800e56c:	b103      	cbz	r3, 800e570 <_kill_r+0x1c>
 800e56e:	6023      	str	r3, [r4, #0]
 800e570:	bd38      	pop	{r3, r4, r5, pc}
 800e572:	bf00      	nop
 800e574:	20000c40 	.word	0x20000c40

0800e578 <_getpid_r>:
 800e578:	f7f6 b9d6 	b.w	8004928 <_getpid>

0800e57c <_malloc_usable_size_r>:
 800e57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e580:	1f18      	subs	r0, r3, #4
 800e582:	2b00      	cmp	r3, #0
 800e584:	bfbc      	itt	lt
 800e586:	580b      	ldrlt	r3, [r1, r0]
 800e588:	18c0      	addlt	r0, r0, r3
 800e58a:	4770      	bx	lr

0800e58c <__swhatbuf_r>:
 800e58c:	b570      	push	{r4, r5, r6, lr}
 800e58e:	460c      	mov	r4, r1
 800e590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e594:	4615      	mov	r5, r2
 800e596:	2900      	cmp	r1, #0
 800e598:	461e      	mov	r6, r3
 800e59a:	b096      	sub	sp, #88	@ 0x58
 800e59c:	da0c      	bge.n	800e5b8 <__swhatbuf_r+0x2c>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5a6:	bf14      	ite	ne
 800e5a8:	2340      	movne	r3, #64	@ 0x40
 800e5aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	6031      	str	r1, [r6, #0]
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	b016      	add	sp, #88	@ 0x58
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}
 800e5b8:	466a      	mov	r2, sp
 800e5ba:	f000 f849 	bl	800e650 <_fstat_r>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	dbed      	blt.n	800e59e <__swhatbuf_r+0x12>
 800e5c2:	9901      	ldr	r1, [sp, #4]
 800e5c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5cc:	4259      	negs	r1, r3
 800e5ce:	4159      	adcs	r1, r3
 800e5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5d4:	e7eb      	b.n	800e5ae <__swhatbuf_r+0x22>

0800e5d6 <__smakebuf_r>:
 800e5d6:	898b      	ldrh	r3, [r1, #12]
 800e5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5da:	079d      	lsls	r5, r3, #30
 800e5dc:	4606      	mov	r6, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	d507      	bpl.n	800e5f2 <__smakebuf_r+0x1c>
 800e5e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5e6:	6023      	str	r3, [r4, #0]
 800e5e8:	6123      	str	r3, [r4, #16]
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	6163      	str	r3, [r4, #20]
 800e5ee:	b003      	add	sp, #12
 800e5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f2:	466a      	mov	r2, sp
 800e5f4:	ab01      	add	r3, sp, #4
 800e5f6:	f7ff ffc9 	bl	800e58c <__swhatbuf_r>
 800e5fa:	9f00      	ldr	r7, [sp, #0]
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	4639      	mov	r1, r7
 800e600:	4630      	mov	r0, r6
 800e602:	f7fe fae5 	bl	800cbd0 <_malloc_r>
 800e606:	b948      	cbnz	r0, 800e61c <__smakebuf_r+0x46>
 800e608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e60c:	059a      	lsls	r2, r3, #22
 800e60e:	d4ee      	bmi.n	800e5ee <__smakebuf_r+0x18>
 800e610:	f023 0303 	bic.w	r3, r3, #3
 800e614:	f043 0302 	orr.w	r3, r3, #2
 800e618:	81a3      	strh	r3, [r4, #12]
 800e61a:	e7e2      	b.n	800e5e2 <__smakebuf_r+0xc>
 800e61c:	89a3      	ldrh	r3, [r4, #12]
 800e61e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e626:	81a3      	strh	r3, [r4, #12]
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	6020      	str	r0, [r4, #0]
 800e62c:	b15b      	cbz	r3, 800e646 <__smakebuf_r+0x70>
 800e62e:	4630      	mov	r0, r6
 800e630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e634:	f000 f81e 	bl	800e674 <_isatty_r>
 800e638:	b128      	cbz	r0, 800e646 <__smakebuf_r+0x70>
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	f023 0303 	bic.w	r3, r3, #3
 800e640:	f043 0301 	orr.w	r3, r3, #1
 800e644:	81a3      	strh	r3, [r4, #12]
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	431d      	orrs	r5, r3
 800e64a:	81a5      	strh	r5, [r4, #12]
 800e64c:	e7cf      	b.n	800e5ee <__smakebuf_r+0x18>
	...

0800e650 <_fstat_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	2300      	movs	r3, #0
 800e654:	4d06      	ldr	r5, [pc, #24]	@ (800e670 <_fstat_r+0x20>)
 800e656:	4604      	mov	r4, r0
 800e658:	4608      	mov	r0, r1
 800e65a:	4611      	mov	r1, r2
 800e65c:	602b      	str	r3, [r5, #0]
 800e65e:	f7f6 f9c9 	bl	80049f4 <_fstat>
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	d102      	bne.n	800e66c <_fstat_r+0x1c>
 800e666:	682b      	ldr	r3, [r5, #0]
 800e668:	b103      	cbz	r3, 800e66c <_fstat_r+0x1c>
 800e66a:	6023      	str	r3, [r4, #0]
 800e66c:	bd38      	pop	{r3, r4, r5, pc}
 800e66e:	bf00      	nop
 800e670:	20000c40 	.word	0x20000c40

0800e674 <_isatty_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	2300      	movs	r3, #0
 800e678:	4d05      	ldr	r5, [pc, #20]	@ (800e690 <_isatty_r+0x1c>)
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	602b      	str	r3, [r5, #0]
 800e680:	f7f6 f9c7 	bl	8004a12 <_isatty>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_isatty_r+0x1a>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_isatty_r+0x1a>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	20000c40 	.word	0x20000c40

0800e694 <asinf>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	f000 f822 	bl	800e6e0 <__ieee754_asinf>
 800e69c:	4621      	mov	r1, r4
 800e69e:	4605      	mov	r5, r0
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7f2 fd3f 	bl	8001124 <__aeabi_fcmpun>
 800e6a6:	b980      	cbnz	r0, 800e6ca <asinf+0x36>
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 f815 	bl	800e6d8 <fabsf>
 800e6ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e6b2:	f7f2 fd2d 	bl	8001110 <__aeabi_fcmpgt>
 800e6b6:	b140      	cbz	r0, 800e6ca <asinf+0x36>
 800e6b8:	f7fc ffda 	bl	800b670 <__errno>
 800e6bc:	2321      	movs	r3, #33	@ 0x21
 800e6be:	6003      	str	r3, [r0, #0]
 800e6c0:	4803      	ldr	r0, [pc, #12]	@ (800e6d0 <asinf+0x3c>)
 800e6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c6:	f7fd b82d 	b.w	800b724 <nanf>
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
 800e6ce:	bf00      	nop
 800e6d0:	0800f30b 	.word	0x0800f30b

0800e6d4 <atan2f>:
 800e6d4:	f000 b946 	b.w	800e964 <__ieee754_atan2f>

0800e6d8 <fabsf>:
 800e6d8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e6dc:	4770      	bx	lr
	...

0800e6e0 <__ieee754_asinf>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e6e8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	d10c      	bne.n	800e70c <__ieee754_asinf+0x2c>
 800e6f2:	498c      	ldr	r1, [pc, #560]	@ (800e924 <__ieee754_asinf+0x244>)
 800e6f4:	f7f2 fb50 	bl	8000d98 <__aeabi_fmul>
 800e6f8:	498b      	ldr	r1, [pc, #556]	@ (800e928 <__ieee754_asinf+0x248>)
 800e6fa:	4605      	mov	r5, r0
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f7f2 fb4b 	bl	8000d98 <__aeabi_fmul>
 800e702:	4601      	mov	r1, r0
 800e704:	4628      	mov	r0, r5
 800e706:	f7f2 fa3f 	bl	8000b88 <__addsf3>
 800e70a:	e006      	b.n	800e71a <__ieee754_asinf+0x3a>
 800e70c:	d909      	bls.n	800e722 <__ieee754_asinf+0x42>
 800e70e:	4601      	mov	r1, r0
 800e710:	f7f2 fa38 	bl	8000b84 <__aeabi_fsub>
 800e714:	4601      	mov	r1, r0
 800e716:	f7f2 fbf3 	bl	8000f00 <__aeabi_fdiv>
 800e71a:	4604      	mov	r4, r0
 800e71c:	4620      	mov	r0, r4
 800e71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e722:	f1b8 5f7c 	cmp.w	r8, #1056964608	@ 0x3f000000
 800e726:	d20b      	bcs.n	800e740 <__ieee754_asinf+0x60>
 800e728:	f1b8 5f48 	cmp.w	r8, #838860800	@ 0x32000000
 800e72c:	d273      	bcs.n	800e816 <__ieee754_asinf+0x136>
 800e72e:	497f      	ldr	r1, [pc, #508]	@ (800e92c <__ieee754_asinf+0x24c>)
 800e730:	f7f2 fa2a 	bl	8000b88 <__addsf3>
 800e734:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e738:	f7f2 fcea 	bl	8001110 <__aeabi_fcmpgt>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d1ed      	bne.n	800e71c <__ieee754_asinf+0x3c>
 800e740:	4620      	mov	r0, r4
 800e742:	f7ff ffc9 	bl	800e6d8 <fabsf>
 800e746:	4601      	mov	r1, r0
 800e748:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e74c:	f7f2 fa1a 	bl	8000b84 <__aeabi_fsub>
 800e750:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e754:	f7f2 fb20 	bl	8000d98 <__aeabi_fmul>
 800e758:	4606      	mov	r6, r0
 800e75a:	4975      	ldr	r1, [pc, #468]	@ (800e930 <__ieee754_asinf+0x250>)
 800e75c:	f7f2 fb1c 	bl	8000d98 <__aeabi_fmul>
 800e760:	4974      	ldr	r1, [pc, #464]	@ (800e934 <__ieee754_asinf+0x254>)
 800e762:	f7f2 fa11 	bl	8000b88 <__addsf3>
 800e766:	4631      	mov	r1, r6
 800e768:	f7f2 fb16 	bl	8000d98 <__aeabi_fmul>
 800e76c:	4972      	ldr	r1, [pc, #456]	@ (800e938 <__ieee754_asinf+0x258>)
 800e76e:	f7f2 fa09 	bl	8000b84 <__aeabi_fsub>
 800e772:	4631      	mov	r1, r6
 800e774:	f7f2 fb10 	bl	8000d98 <__aeabi_fmul>
 800e778:	4970      	ldr	r1, [pc, #448]	@ (800e93c <__ieee754_asinf+0x25c>)
 800e77a:	f7f2 fa05 	bl	8000b88 <__addsf3>
 800e77e:	4631      	mov	r1, r6
 800e780:	f7f2 fb0a 	bl	8000d98 <__aeabi_fmul>
 800e784:	496e      	ldr	r1, [pc, #440]	@ (800e940 <__ieee754_asinf+0x260>)
 800e786:	f7f2 f9fd 	bl	8000b84 <__aeabi_fsub>
 800e78a:	4631      	mov	r1, r6
 800e78c:	f7f2 fb04 	bl	8000d98 <__aeabi_fmul>
 800e790:	496c      	ldr	r1, [pc, #432]	@ (800e944 <__ieee754_asinf+0x264>)
 800e792:	f7f2 f9f9 	bl	8000b88 <__addsf3>
 800e796:	4631      	mov	r1, r6
 800e798:	f7f2 fafe 	bl	8000d98 <__aeabi_fmul>
 800e79c:	496a      	ldr	r1, [pc, #424]	@ (800e948 <__ieee754_asinf+0x268>)
 800e79e:	4681      	mov	r9, r0
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	f7f2 faf9 	bl	8000d98 <__aeabi_fmul>
 800e7a6:	4969      	ldr	r1, [pc, #420]	@ (800e94c <__ieee754_asinf+0x26c>)
 800e7a8:	f7f2 f9ec 	bl	8000b84 <__aeabi_fsub>
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	f7f2 faf3 	bl	8000d98 <__aeabi_fmul>
 800e7b2:	4967      	ldr	r1, [pc, #412]	@ (800e950 <__ieee754_asinf+0x270>)
 800e7b4:	f7f2 f9e8 	bl	8000b88 <__addsf3>
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	f7f2 faed 	bl	8000d98 <__aeabi_fmul>
 800e7be:	4965      	ldr	r1, [pc, #404]	@ (800e954 <__ieee754_asinf+0x274>)
 800e7c0:	f7f2 f9e0 	bl	8000b84 <__aeabi_fsub>
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	f7f2 fae7 	bl	8000d98 <__aeabi_fmul>
 800e7ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e7ce:	f7f2 f9db 	bl	8000b88 <__addsf3>
 800e7d2:	4682      	mov	sl, r0
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f000 fa59 	bl	800ec8c <__ieee754_sqrtf>
 800e7da:	4b5f      	ldr	r3, [pc, #380]	@ (800e958 <__ieee754_asinf+0x278>)
 800e7dc:	4607      	mov	r7, r0
 800e7de:	4598      	cmp	r8, r3
 800e7e0:	d963      	bls.n	800e8aa <__ieee754_asinf+0x1ca>
 800e7e2:	4651      	mov	r1, sl
 800e7e4:	4648      	mov	r0, r9
 800e7e6:	f7f2 fb8b 	bl	8000f00 <__aeabi_fdiv>
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	f7f2 fad4 	bl	8000d98 <__aeabi_fmul>
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	f7f2 f9c9 	bl	8000b88 <__addsf3>
 800e7f6:	4601      	mov	r1, r0
 800e7f8:	f7f2 f9c6 	bl	8000b88 <__addsf3>
 800e7fc:	4957      	ldr	r1, [pc, #348]	@ (800e95c <__ieee754_asinf+0x27c>)
 800e7fe:	f7f2 f9c3 	bl	8000b88 <__addsf3>
 800e802:	4601      	mov	r1, r0
 800e804:	4847      	ldr	r0, [pc, #284]	@ (800e924 <__ieee754_asinf+0x244>)
 800e806:	f7f2 f9bd 	bl	8000b84 <__aeabi_fsub>
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	4604      	mov	r4, r0
 800e80e:	bfd8      	it	le
 800e810:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800e814:	e782      	b.n	800e71c <__ieee754_asinf+0x3c>
 800e816:	4601      	mov	r1, r0
 800e818:	f7f2 fabe 	bl	8000d98 <__aeabi_fmul>
 800e81c:	4605      	mov	r5, r0
 800e81e:	4944      	ldr	r1, [pc, #272]	@ (800e930 <__ieee754_asinf+0x250>)
 800e820:	f7f2 faba 	bl	8000d98 <__aeabi_fmul>
 800e824:	4943      	ldr	r1, [pc, #268]	@ (800e934 <__ieee754_asinf+0x254>)
 800e826:	f7f2 f9af 	bl	8000b88 <__addsf3>
 800e82a:	4629      	mov	r1, r5
 800e82c:	f7f2 fab4 	bl	8000d98 <__aeabi_fmul>
 800e830:	4941      	ldr	r1, [pc, #260]	@ (800e938 <__ieee754_asinf+0x258>)
 800e832:	f7f2 f9a7 	bl	8000b84 <__aeabi_fsub>
 800e836:	4629      	mov	r1, r5
 800e838:	f7f2 faae 	bl	8000d98 <__aeabi_fmul>
 800e83c:	493f      	ldr	r1, [pc, #252]	@ (800e93c <__ieee754_asinf+0x25c>)
 800e83e:	f7f2 f9a3 	bl	8000b88 <__addsf3>
 800e842:	4629      	mov	r1, r5
 800e844:	f7f2 faa8 	bl	8000d98 <__aeabi_fmul>
 800e848:	493d      	ldr	r1, [pc, #244]	@ (800e940 <__ieee754_asinf+0x260>)
 800e84a:	f7f2 f99b 	bl	8000b84 <__aeabi_fsub>
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f2 faa2 	bl	8000d98 <__aeabi_fmul>
 800e854:	493b      	ldr	r1, [pc, #236]	@ (800e944 <__ieee754_asinf+0x264>)
 800e856:	f7f2 f997 	bl	8000b88 <__addsf3>
 800e85a:	4629      	mov	r1, r5
 800e85c:	f7f2 fa9c 	bl	8000d98 <__aeabi_fmul>
 800e860:	4939      	ldr	r1, [pc, #228]	@ (800e948 <__ieee754_asinf+0x268>)
 800e862:	4606      	mov	r6, r0
 800e864:	4628      	mov	r0, r5
 800e866:	f7f2 fa97 	bl	8000d98 <__aeabi_fmul>
 800e86a:	4938      	ldr	r1, [pc, #224]	@ (800e94c <__ieee754_asinf+0x26c>)
 800e86c:	f7f2 f98a 	bl	8000b84 <__aeabi_fsub>
 800e870:	4629      	mov	r1, r5
 800e872:	f7f2 fa91 	bl	8000d98 <__aeabi_fmul>
 800e876:	4936      	ldr	r1, [pc, #216]	@ (800e950 <__ieee754_asinf+0x270>)
 800e878:	f7f2 f986 	bl	8000b88 <__addsf3>
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7f2 fa8b 	bl	8000d98 <__aeabi_fmul>
 800e882:	4934      	ldr	r1, [pc, #208]	@ (800e954 <__ieee754_asinf+0x274>)
 800e884:	f7f2 f97e 	bl	8000b84 <__aeabi_fsub>
 800e888:	4629      	mov	r1, r5
 800e88a:	f7f2 fa85 	bl	8000d98 <__aeabi_fmul>
 800e88e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e892:	f7f2 f979 	bl	8000b88 <__addsf3>
 800e896:	4601      	mov	r1, r0
 800e898:	4630      	mov	r0, r6
 800e89a:	f7f2 fb31 	bl	8000f00 <__aeabi_fdiv>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	f7f2 fa7a 	bl	8000d98 <__aeabi_fmul>
 800e8a4:	4601      	mov	r1, r0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	e72d      	b.n	800e706 <__ieee754_asinf+0x26>
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800e8b0:	f7f2 f96a 	bl	8000b88 <__addsf3>
 800e8b4:	4651      	mov	r1, sl
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f7f2 fb21 	bl	8000f00 <__aeabi_fdiv>
 800e8be:	4601      	mov	r1, r0
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f7f2 fa69 	bl	8000d98 <__aeabi_fmul>
 800e8c6:	f028 080f 	bic.w	r8, r8, #15
 800e8ca:	4681      	mov	r9, r0
 800e8cc:	4641      	mov	r1, r8
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	f7f2 fa62 	bl	8000d98 <__aeabi_fmul>
 800e8d4:	4601      	mov	r1, r0
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	f7f2 f954 	bl	8000b84 <__aeabi_fsub>
 800e8dc:	4641      	mov	r1, r8
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f7f2 f951 	bl	8000b88 <__addsf3>
 800e8e6:	4601      	mov	r1, r0
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	f7f2 fb09 	bl	8000f00 <__aeabi_fdiv>
 800e8ee:	4601      	mov	r1, r0
 800e8f0:	f7f2 f94a 	bl	8000b88 <__addsf3>
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	480c      	ldr	r0, [pc, #48]	@ (800e928 <__ieee754_asinf+0x248>)
 800e8f8:	f7f2 f944 	bl	8000b84 <__aeabi_fsub>
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	4648      	mov	r0, r9
 800e900:	f7f2 f940 	bl	8000b84 <__aeabi_fsub>
 800e904:	4641      	mov	r1, r8
 800e906:	4604      	mov	r4, r0
 800e908:	4640      	mov	r0, r8
 800e90a:	f7f2 f93d 	bl	8000b88 <__addsf3>
 800e90e:	4601      	mov	r1, r0
 800e910:	4813      	ldr	r0, [pc, #76]	@ (800e960 <__ieee754_asinf+0x280>)
 800e912:	f7f2 f937 	bl	8000b84 <__aeabi_fsub>
 800e916:	4601      	mov	r1, r0
 800e918:	4620      	mov	r0, r4
 800e91a:	f7f2 f933 	bl	8000b84 <__aeabi_fsub>
 800e91e:	4601      	mov	r1, r0
 800e920:	480f      	ldr	r0, [pc, #60]	@ (800e960 <__ieee754_asinf+0x280>)
 800e922:	e770      	b.n	800e806 <__ieee754_asinf+0x126>
 800e924:	3fc90fdb 	.word	0x3fc90fdb
 800e928:	b33bbd2e 	.word	0xb33bbd2e
 800e92c:	7149f2ca 	.word	0x7149f2ca
 800e930:	3811ef08 	.word	0x3811ef08
 800e934:	3a4f7f04 	.word	0x3a4f7f04
 800e938:	3d241146 	.word	0x3d241146
 800e93c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e940:	3ea6b090 	.word	0x3ea6b090
 800e944:	3e2aaaab 	.word	0x3e2aaaab
 800e948:	3d9dc62e 	.word	0x3d9dc62e
 800e94c:	3f303361 	.word	0x3f303361
 800e950:	4001572d 	.word	0x4001572d
 800e954:	4019d139 	.word	0x4019d139
 800e958:	3f799999 	.word	0x3f799999
 800e95c:	333bbd2e 	.word	0x333bbd2e
 800e960:	3f490fdb 	.word	0x3f490fdb

0800e964 <__ieee754_atan2f>:
 800e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e966:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e96a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e96e:	4603      	mov	r3, r0
 800e970:	d805      	bhi.n	800e97e <__ieee754_atan2f+0x1a>
 800e972:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e976:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e97a:	4607      	mov	r7, r0
 800e97c:	d904      	bls.n	800e988 <__ieee754_atan2f+0x24>
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f2 f902 	bl	8000b88 <__addsf3>
 800e984:	4603      	mov	r3, r0
 800e986:	e010      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800e988:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e98c:	d103      	bne.n	800e996 <__ieee754_atan2f+0x32>
 800e98e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e992:	f000 b86f 	b.w	800ea74 <atanf>
 800e996:	178c      	asrs	r4, r1, #30
 800e998:	f004 0402 	and.w	r4, r4, #2
 800e99c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e9a0:	b92a      	cbnz	r2, 800e9ae <__ieee754_atan2f+0x4a>
 800e9a2:	2c02      	cmp	r4, #2
 800e9a4:	d04b      	beq.n	800ea3e <__ieee754_atan2f+0xda>
 800e9a6:	2c03      	cmp	r4, #3
 800e9a8:	d04b      	beq.n	800ea42 <__ieee754_atan2f+0xde>
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ae:	b91e      	cbnz	r6, 800e9b8 <__ieee754_atan2f+0x54>
 800e9b0:	2f00      	cmp	r7, #0
 800e9b2:	da4c      	bge.n	800ea4e <__ieee754_atan2f+0xea>
 800e9b4:	4b27      	ldr	r3, [pc, #156]	@ (800ea54 <__ieee754_atan2f+0xf0>)
 800e9b6:	e7f8      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800e9b8:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e9bc:	d10e      	bne.n	800e9dc <__ieee754_atan2f+0x78>
 800e9be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9c6:	d105      	bne.n	800e9d4 <__ieee754_atan2f+0x70>
 800e9c8:	2c02      	cmp	r4, #2
 800e9ca:	d83c      	bhi.n	800ea46 <__ieee754_atan2f+0xe2>
 800e9cc:	4b22      	ldr	r3, [pc, #136]	@ (800ea58 <__ieee754_atan2f+0xf4>)
 800e9ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e9d2:	e7ea      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800e9d4:	2c02      	cmp	r4, #2
 800e9d6:	d838      	bhi.n	800ea4a <__ieee754_atan2f+0xe6>
 800e9d8:	4b20      	ldr	r3, [pc, #128]	@ (800ea5c <__ieee754_atan2f+0xf8>)
 800e9da:	e7f8      	b.n	800e9ce <__ieee754_atan2f+0x6a>
 800e9dc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9e0:	d0e6      	beq.n	800e9b0 <__ieee754_atan2f+0x4c>
 800e9e2:	1b92      	subs	r2, r2, r6
 800e9e4:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800e9e8:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800e9ec:	da17      	bge.n	800ea1e <__ieee754_atan2f+0xba>
 800e9ee:	2900      	cmp	r1, #0
 800e9f0:	da01      	bge.n	800e9f6 <__ieee754_atan2f+0x92>
 800e9f2:	303c      	adds	r0, #60	@ 0x3c
 800e9f4:	db15      	blt.n	800ea22 <__ieee754_atan2f+0xbe>
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7f2 fa82 	bl	8000f00 <__aeabi_fdiv>
 800e9fc:	f7ff fe6c 	bl	800e6d8 <fabsf>
 800ea00:	f000 f838 	bl	800ea74 <atanf>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2c01      	cmp	r4, #1
 800ea08:	d00d      	beq.n	800ea26 <__ieee754_atan2f+0xc2>
 800ea0a:	2c02      	cmp	r4, #2
 800ea0c:	d00e      	beq.n	800ea2c <__ieee754_atan2f+0xc8>
 800ea0e:	2c00      	cmp	r4, #0
 800ea10:	d0cb      	beq.n	800e9aa <__ieee754_atan2f+0x46>
 800ea12:	4913      	ldr	r1, [pc, #76]	@ (800ea60 <__ieee754_atan2f+0xfc>)
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f2 f8b7 	bl	8000b88 <__addsf3>
 800ea1a:	4912      	ldr	r1, [pc, #72]	@ (800ea64 <__ieee754_atan2f+0x100>)
 800ea1c:	e00c      	b.n	800ea38 <__ieee754_atan2f+0xd4>
 800ea1e:	4b12      	ldr	r3, [pc, #72]	@ (800ea68 <__ieee754_atan2f+0x104>)
 800ea20:	e7f1      	b.n	800ea06 <__ieee754_atan2f+0xa2>
 800ea22:	2300      	movs	r3, #0
 800ea24:	e7ef      	b.n	800ea06 <__ieee754_atan2f+0xa2>
 800ea26:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea2a:	e7be      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea2c:	490c      	ldr	r1, [pc, #48]	@ (800ea60 <__ieee754_atan2f+0xfc>)
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f2 f8aa 	bl	8000b88 <__addsf3>
 800ea34:	4601      	mov	r1, r0
 800ea36:	480b      	ldr	r0, [pc, #44]	@ (800ea64 <__ieee754_atan2f+0x100>)
 800ea38:	f7f2 f8a4 	bl	8000b84 <__aeabi_fsub>
 800ea3c:	e7a2      	b.n	800e984 <__ieee754_atan2f+0x20>
 800ea3e:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <__ieee754_atan2f+0x100>)
 800ea40:	e7b3      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea42:	4b0a      	ldr	r3, [pc, #40]	@ (800ea6c <__ieee754_atan2f+0x108>)
 800ea44:	e7b1      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea46:	4b0a      	ldr	r3, [pc, #40]	@ (800ea70 <__ieee754_atan2f+0x10c>)
 800ea48:	e7af      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e7ad      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea4e:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <__ieee754_atan2f+0x104>)
 800ea50:	e7ab      	b.n	800e9aa <__ieee754_atan2f+0x46>
 800ea52:	bf00      	nop
 800ea54:	bfc90fdb 	.word	0xbfc90fdb
 800ea58:	0800f344 	.word	0x0800f344
 800ea5c:	0800f338 	.word	0x0800f338
 800ea60:	33bbbd2e 	.word	0x33bbbd2e
 800ea64:	40490fdb 	.word	0x40490fdb
 800ea68:	3fc90fdb 	.word	0x3fc90fdb
 800ea6c:	c0490fdb 	.word	0xc0490fdb
 800ea70:	3f490fdb 	.word	0x3f490fdb

0800ea74 <atanf>:
 800ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea78:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800ea7c:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800ea80:	4604      	mov	r4, r0
 800ea82:	4680      	mov	r8, r0
 800ea84:	d30e      	bcc.n	800eaa4 <atanf+0x30>
 800ea86:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ea8a:	d904      	bls.n	800ea96 <atanf+0x22>
 800ea8c:	4601      	mov	r1, r0
 800ea8e:	f7f2 f87b 	bl	8000b88 <__addsf3>
 800ea92:	4604      	mov	r4, r0
 800ea94:	e003      	b.n	800ea9e <atanf+0x2a>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	f340 80ce 	ble.w	800ec38 <atanf+0x1c4>
 800ea9c:	4c67      	ldr	r4, [pc, #412]	@ (800ec3c <atanf+0x1c8>)
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa4:	4b66      	ldr	r3, [pc, #408]	@ (800ec40 <atanf+0x1cc>)
 800eaa6:	429d      	cmp	r5, r3
 800eaa8:	d80e      	bhi.n	800eac8 <atanf+0x54>
 800eaaa:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800eaae:	d208      	bcs.n	800eac2 <atanf+0x4e>
 800eab0:	4964      	ldr	r1, [pc, #400]	@ (800ec44 <atanf+0x1d0>)
 800eab2:	f7f2 f869 	bl	8000b88 <__addsf3>
 800eab6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800eaba:	f7f2 fb29 	bl	8001110 <__aeabi_fcmpgt>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d1ed      	bne.n	800ea9e <atanf+0x2a>
 800eac2:	f04f 36ff 	mov.w	r6, #4294967295
 800eac6:	e01c      	b.n	800eb02 <atanf+0x8e>
 800eac8:	f7ff fe06 	bl	800e6d8 <fabsf>
 800eacc:	4b5e      	ldr	r3, [pc, #376]	@ (800ec48 <atanf+0x1d4>)
 800eace:	4604      	mov	r4, r0
 800ead0:	429d      	cmp	r5, r3
 800ead2:	d87c      	bhi.n	800ebce <atanf+0x15a>
 800ead4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ead8:	429d      	cmp	r5, r3
 800eada:	d867      	bhi.n	800ebac <atanf+0x138>
 800eadc:	4601      	mov	r1, r0
 800eade:	f7f2 f853 	bl	8000b88 <__addsf3>
 800eae2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800eae6:	f7f2 f84d 	bl	8000b84 <__aeabi_fsub>
 800eaea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800eaee:	4605      	mov	r5, r0
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f7f2 f849 	bl	8000b88 <__addsf3>
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f7f2 fa01 	bl	8000f00 <__aeabi_fdiv>
 800eafe:	2600      	movs	r6, #0
 800eb00:	4604      	mov	r4, r0
 800eb02:	4621      	mov	r1, r4
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7f2 f947 	bl	8000d98 <__aeabi_fmul>
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	f7f2 f943 	bl	8000d98 <__aeabi_fmul>
 800eb12:	4605      	mov	r5, r0
 800eb14:	494d      	ldr	r1, [pc, #308]	@ (800ec4c <atanf+0x1d8>)
 800eb16:	f7f2 f93f 	bl	8000d98 <__aeabi_fmul>
 800eb1a:	494d      	ldr	r1, [pc, #308]	@ (800ec50 <atanf+0x1dc>)
 800eb1c:	f7f2 f834 	bl	8000b88 <__addsf3>
 800eb20:	4629      	mov	r1, r5
 800eb22:	f7f2 f939 	bl	8000d98 <__aeabi_fmul>
 800eb26:	494b      	ldr	r1, [pc, #300]	@ (800ec54 <atanf+0x1e0>)
 800eb28:	f7f2 f82e 	bl	8000b88 <__addsf3>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f2 f933 	bl	8000d98 <__aeabi_fmul>
 800eb32:	4949      	ldr	r1, [pc, #292]	@ (800ec58 <atanf+0x1e4>)
 800eb34:	f7f2 f828 	bl	8000b88 <__addsf3>
 800eb38:	4629      	mov	r1, r5
 800eb3a:	f7f2 f92d 	bl	8000d98 <__aeabi_fmul>
 800eb3e:	4947      	ldr	r1, [pc, #284]	@ (800ec5c <atanf+0x1e8>)
 800eb40:	f7f2 f822 	bl	8000b88 <__addsf3>
 800eb44:	4629      	mov	r1, r5
 800eb46:	f7f2 f927 	bl	8000d98 <__aeabi_fmul>
 800eb4a:	4945      	ldr	r1, [pc, #276]	@ (800ec60 <atanf+0x1ec>)
 800eb4c:	f7f2 f81c 	bl	8000b88 <__addsf3>
 800eb50:	4639      	mov	r1, r7
 800eb52:	f7f2 f921 	bl	8000d98 <__aeabi_fmul>
 800eb56:	4943      	ldr	r1, [pc, #268]	@ (800ec64 <atanf+0x1f0>)
 800eb58:	4607      	mov	r7, r0
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f7f2 f91c 	bl	8000d98 <__aeabi_fmul>
 800eb60:	4941      	ldr	r1, [pc, #260]	@ (800ec68 <atanf+0x1f4>)
 800eb62:	f7f2 f80f 	bl	8000b84 <__aeabi_fsub>
 800eb66:	4629      	mov	r1, r5
 800eb68:	f7f2 f916 	bl	8000d98 <__aeabi_fmul>
 800eb6c:	493f      	ldr	r1, [pc, #252]	@ (800ec6c <atanf+0x1f8>)
 800eb6e:	f7f2 f809 	bl	8000b84 <__aeabi_fsub>
 800eb72:	4629      	mov	r1, r5
 800eb74:	f7f2 f910 	bl	8000d98 <__aeabi_fmul>
 800eb78:	493d      	ldr	r1, [pc, #244]	@ (800ec70 <atanf+0x1fc>)
 800eb7a:	f7f2 f803 	bl	8000b84 <__aeabi_fsub>
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7f2 f90a 	bl	8000d98 <__aeabi_fmul>
 800eb84:	493b      	ldr	r1, [pc, #236]	@ (800ec74 <atanf+0x200>)
 800eb86:	f7f1 fffd 	bl	8000b84 <__aeabi_fsub>
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	f7f2 f904 	bl	8000d98 <__aeabi_fmul>
 800eb90:	4601      	mov	r1, r0
 800eb92:	4638      	mov	r0, r7
 800eb94:	f7f1 fff8 	bl	8000b88 <__addsf3>
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7f2 f8fd 	bl	8000d98 <__aeabi_fmul>
 800eb9e:	1c73      	adds	r3, r6, #1
 800eba0:	4601      	mov	r1, r0
 800eba2:	d133      	bne.n	800ec0c <atanf+0x198>
 800eba4:	4620      	mov	r0, r4
 800eba6:	f7f1 ffed 	bl	8000b84 <__aeabi_fsub>
 800ebaa:	e772      	b.n	800ea92 <atanf+0x1e>
 800ebac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ebb0:	f7f1 ffe8 	bl	8000b84 <__aeabi_fsub>
 800ebb4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ebb8:	4605      	mov	r5, r0
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f7f1 ffe4 	bl	8000b88 <__addsf3>
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f7f2 f99c 	bl	8000f00 <__aeabi_fdiv>
 800ebc8:	2601      	movs	r6, #1
 800ebca:	4604      	mov	r4, r0
 800ebcc:	e799      	b.n	800eb02 <atanf+0x8e>
 800ebce:	4b2a      	ldr	r3, [pc, #168]	@ (800ec78 <atanf+0x204>)
 800ebd0:	429d      	cmp	r5, r3
 800ebd2:	d814      	bhi.n	800ebfe <atanf+0x18a>
 800ebd4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ebd8:	f7f1 ffd4 	bl	8000b84 <__aeabi_fsub>
 800ebdc:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f7f2 f8d8 	bl	8000d98 <__aeabi_fmul>
 800ebe8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ebec:	f7f1 ffcc 	bl	8000b88 <__addsf3>
 800ebf0:	4601      	mov	r1, r0
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f7f2 f984 	bl	8000f00 <__aeabi_fdiv>
 800ebf8:	2602      	movs	r6, #2
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	e781      	b.n	800eb02 <atanf+0x8e>
 800ebfe:	4601      	mov	r1, r0
 800ec00:	481e      	ldr	r0, [pc, #120]	@ (800ec7c <atanf+0x208>)
 800ec02:	f7f2 f97d 	bl	8000f00 <__aeabi_fdiv>
 800ec06:	2603      	movs	r6, #3
 800ec08:	4604      	mov	r4, r0
 800ec0a:	e77a      	b.n	800eb02 <atanf+0x8e>
 800ec0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ec80 <atanf+0x20c>)
 800ec0e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ec12:	f7f1 ffb7 	bl	8000b84 <__aeabi_fsub>
 800ec16:	4621      	mov	r1, r4
 800ec18:	f7f1 ffb4 	bl	8000b84 <__aeabi_fsub>
 800ec1c:	4b19      	ldr	r3, [pc, #100]	@ (800ec84 <atanf+0x210>)
 800ec1e:	4601      	mov	r1, r0
 800ec20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ec24:	f7f1 ffae 	bl	8000b84 <__aeabi_fsub>
 800ec28:	f1b8 0f00 	cmp.w	r8, #0
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	f6bf af36 	bge.w	800ea9e <atanf+0x2a>
 800ec32:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800ec36:	e732      	b.n	800ea9e <atanf+0x2a>
 800ec38:	4c13      	ldr	r4, [pc, #76]	@ (800ec88 <atanf+0x214>)
 800ec3a:	e730      	b.n	800ea9e <atanf+0x2a>
 800ec3c:	3fc90fdb 	.word	0x3fc90fdb
 800ec40:	3edfffff 	.word	0x3edfffff
 800ec44:	7149f2ca 	.word	0x7149f2ca
 800ec48:	3f97ffff 	.word	0x3f97ffff
 800ec4c:	3c8569d7 	.word	0x3c8569d7
 800ec50:	3d4bda59 	.word	0x3d4bda59
 800ec54:	3d886b35 	.word	0x3d886b35
 800ec58:	3dba2e6e 	.word	0x3dba2e6e
 800ec5c:	3e124925 	.word	0x3e124925
 800ec60:	3eaaaaab 	.word	0x3eaaaaab
 800ec64:	bd15a221 	.word	0xbd15a221
 800ec68:	3d6ef16b 	.word	0x3d6ef16b
 800ec6c:	3d9d8795 	.word	0x3d9d8795
 800ec70:	3de38e38 	.word	0x3de38e38
 800ec74:	3e4ccccd 	.word	0x3e4ccccd
 800ec78:	401bffff 	.word	0x401bffff
 800ec7c:	bf800000 	.word	0xbf800000
 800ec80:	0800f350 	.word	0x0800f350
 800ec84:	0800f360 	.word	0x0800f360
 800ec88:	bfc90fdb 	.word	0xbfc90fdb

0800ec8c <__ieee754_sqrtf>:
 800ec8c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800ec90:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	4603      	mov	r3, r0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	d30a      	bcc.n	800ecb4 <__ieee754_sqrtf+0x28>
 800ec9e:	4601      	mov	r1, r0
 800eca0:	f7f2 f87a 	bl	8000d98 <__aeabi_fmul>
 800eca4:	4601      	mov	r1, r0
 800eca6:	4620      	mov	r0, r4
 800eca8:	f7f1 ff6e 	bl	8000b88 <__addsf3>
 800ecac:	4604      	mov	r4, r0
 800ecae:	4620      	mov	r0, r4
 800ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb4:	2a00      	cmp	r2, #0
 800ecb6:	d0fa      	beq.n	800ecae <__ieee754_sqrtf+0x22>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	da06      	bge.n	800ecca <__ieee754_sqrtf+0x3e>
 800ecbc:	4601      	mov	r1, r0
 800ecbe:	f7f1 ff61 	bl	8000b84 <__aeabi_fsub>
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	f7f2 f91c 	bl	8000f00 <__aeabi_fdiv>
 800ecc8:	e7f0      	b.n	800ecac <__ieee754_sqrtf+0x20>
 800ecca:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800ecce:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ecd2:	d03e      	beq.n	800ed52 <__ieee754_sqrtf+0xc6>
 800ecd4:	2400      	movs	r4, #0
 800ecd6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800ecda:	07ca      	lsls	r2, r1, #31
 800ecdc:	f04f 0019 	mov.w	r0, #25
 800ece0:	4626      	mov	r6, r4
 800ece2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800ece6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ecea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ecee:	bf58      	it	pl
 800ecf0:	005b      	lslpl	r3, r3, #1
 800ecf2:	106d      	asrs	r5, r5, #1
 800ecf4:	005b      	lsls	r3, r3, #1
 800ecf6:	1872      	adds	r2, r6, r1
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bfcf      	iteee	gt
 800ecfc:	461a      	movgt	r2, r3
 800ecfe:	1856      	addle	r6, r2, r1
 800ed00:	1864      	addle	r4, r4, r1
 800ed02:	1a9a      	suble	r2, r3, r2
 800ed04:	3801      	subs	r0, #1
 800ed06:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800ed0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed0e:	d1f2      	bne.n	800ecf6 <__ieee754_sqrtf+0x6a>
 800ed10:	b1ba      	cbz	r2, 800ed42 <__ieee754_sqrtf+0xb6>
 800ed12:	4e14      	ldr	r6, [pc, #80]	@ (800ed64 <__ieee754_sqrtf+0xd8>)
 800ed14:	4f14      	ldr	r7, [pc, #80]	@ (800ed68 <__ieee754_sqrtf+0xdc>)
 800ed16:	6830      	ldr	r0, [r6, #0]
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	f7f1 ff33 	bl	8000b84 <__aeabi_fsub>
 800ed1e:	f8d6 8000 	ldr.w	r8, [r6]
 800ed22:	4601      	mov	r1, r0
 800ed24:	4640      	mov	r0, r8
 800ed26:	f7f2 f9df 	bl	80010e8 <__aeabi_fcmple>
 800ed2a:	b150      	cbz	r0, 800ed42 <__ieee754_sqrtf+0xb6>
 800ed2c:	6830      	ldr	r0, [r6, #0]
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	f7f1 ff2a 	bl	8000b88 <__addsf3>
 800ed34:	6836      	ldr	r6, [r6, #0]
 800ed36:	4601      	mov	r1, r0
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7f2 f9cb 	bl	80010d4 <__aeabi_fcmplt>
 800ed3e:	b168      	cbz	r0, 800ed5c <__ieee754_sqrtf+0xd0>
 800ed40:	3402      	adds	r4, #2
 800ed42:	1064      	asrs	r4, r4, #1
 800ed44:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800ed48:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800ed4c:	e7af      	b.n	800ecae <__ieee754_sqrtf+0x22>
 800ed4e:	005b      	lsls	r3, r3, #1
 800ed50:	3201      	adds	r2, #1
 800ed52:	0218      	lsls	r0, r3, #8
 800ed54:	d5fb      	bpl.n	800ed4e <__ieee754_sqrtf+0xc2>
 800ed56:	3a01      	subs	r2, #1
 800ed58:	1a89      	subs	r1, r1, r2
 800ed5a:	e7bb      	b.n	800ecd4 <__ieee754_sqrtf+0x48>
 800ed5c:	3401      	adds	r4, #1
 800ed5e:	f024 0401 	bic.w	r4, r4, #1
 800ed62:	e7ee      	b.n	800ed42 <__ieee754_sqrtf+0xb6>
 800ed64:	20000244 	.word	0x20000244
 800ed68:	20000240 	.word	0x20000240

0800ed6c <_init>:
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	bf00      	nop
 800ed70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed72:	bc08      	pop	{r3}
 800ed74:	469e      	mov	lr, r3
 800ed76:	4770      	bx	lr

0800ed78 <_fini>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr
