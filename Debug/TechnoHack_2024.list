
TechnoHack_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003054  08003054  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003054  08003054  00004054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800305c  0800305c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800305c  0800305c  0000405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003064  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000060  080030c0  00005060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080030c0  00005560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f89  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f3  00000000  00000000  0000b00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050d  00000000  00000000  0000cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ce  00000000  00000000  0000d2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008119  00000000  00000000  000245c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082498  00000000  00000000  0002c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeb74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f9c  00000000  00000000  000aebb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b0b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08002fb4 	.word	0x08002fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08002fb4 	.word	0x08002fb4

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fae7 	bl	8000a24 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fb02 	bl	8000a64 <SX1278_hw_SPIReadByte>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa9f 	bl	80009ae <SX1278_hw_SetNSS>
	return tmp;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
 8000486:	4613      	mov	r3, r2
 8000488:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fa8c 	bl	80009ae <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f000 fabd 	bl	8000a24 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	78ba      	ldrb	r2, [r7, #2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fab6 	bl	8000a24 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fa75 	bl	80009ae <SX1278_hw_SetNSS>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d929      	bls.n	800053a <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fa5e 	bl	80009ae <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	4610      	mov	r0, r2
 8000502:	f000 fa8f 	bl	8000a24 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	75fb      	strb	r3, [r7, #23]
 800050a:	e00b      	b.n	8000524 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f000 fa83 	bl	8000a24 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800051e:	7dfb      	ldrb	r3, [r7, #23]
 8000520:	3301      	adds	r3, #1
 8000522:	75fb      	strb	r3, [r7, #23]
 8000524:	7dfa      	ldrb	r2, [r7, #23]
 8000526:	7abb      	ldrb	r3, [r7, #10]
 8000528:	429a      	cmp	r2, r3
 800052a:	d3ef      	bcc.n	800050c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa3b 	bl	80009ae <SX1278_hw_SetNSS>
 8000538:	e000      	b.n	800053c <SX1278_SPIBurstWrite+0x70>
		return;
 800053a:	bf00      	nop
	}
}
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f90d 	bl	800076c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000552:	200f      	movs	r0, #15
 8000554:	f000 faac 	bl	8000ab0 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f917 	bl	800078c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	04d9      	lsls	r1, r3, #19
 800056e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000572:	04d0      	lsls	r0, r2, #19
 8000574:	4a6f      	ldr	r2, [pc, #444]	@ (8000734 <SX1278_config+0x1f0>)
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	f7ff fde9 	bl	8000150 <__aeabi_uldivmod>
 800057e:	4602      	mov	r2, r0
 8000580:	460b      	mov	r3, r1
 8000582:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	f04f 0300 	mov.w	r3, #0
 8000592:	0c02      	lsrs	r2, r0, #16
 8000594:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000598:	0c0b      	lsrs	r3, r1, #16
 800059a:	b2d3      	uxtb	r3, r2
 800059c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800059e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005a2:	f04f 0200 	mov.w	r2, #0
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	0a02      	lsrs	r2, r0, #8
 80005ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005b0:	0a0b      	lsrs	r3, r1, #8
 80005b2:	b2d3      	uxtb	r3, r2
 80005b4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005b6:	7c3b      	ldrb	r3, [r7, #16]
 80005b8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80005ba:	f107 020c 	add.w	r2, r7, #12
 80005be:	2303      	movs	r3, #3
 80005c0:	2106      	movs	r1, #6
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ff82 	bl	80004cc <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80005c8:	2234      	movs	r2, #52	@ 0x34
 80005ca:	2139      	movs	r1, #57	@ 0x39
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff54 	bl	800047a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7c1b      	ldrb	r3, [r3, #16]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <SX1278_config+0x1f4>)
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	461a      	mov	r2, r3
 80005de:	2109      	movs	r1, #9
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff4a 	bl	800047a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80005e6:	220b      	movs	r2, #11
 80005e8:	210b      	movs	r1, #11
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ff45 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80005f0:	2223      	movs	r2, #35	@ 0x23
 80005f2:	210c      	movs	r1, #12
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff40 	bl	800047a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7c5b      	ldrb	r3, [r3, #17]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b4e      	ldr	r3, [pc, #312]	@ (800073c <SX1278_config+0x1f8>)
 8000602:	5c9b      	ldrb	r3, [r3, r2]
 8000604:	2b06      	cmp	r3, #6
 8000606:	d147      	bne.n	8000698 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7c9b      	ldrb	r3, [r3, #18]
 800060c:	461a      	mov	r2, r3
 800060e:	4b4c      	ldr	r3, [pc, #304]	@ (8000740 <SX1278_config+0x1fc>)
 8000610:	5c9b      	ldrb	r3, [r3, r2]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7cdb      	ldrb	r3, [r3, #19]
 800061a:	4619      	mov	r1, r3
 800061c:	4b49      	ldr	r3, [pc, #292]	@ (8000744 <SX1278_config+0x200>)
 800061e:	5c5b      	ldrb	r3, [r3, r1]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4413      	add	r3, r2
 8000626:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	211d      	movs	r1, #29
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff22 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7c5b      	ldrb	r3, [r3, #17]
 800063a:	461a      	mov	r2, r3
 800063c:	4b3f      	ldr	r3, [pc, #252]	@ (800073c <SX1278_config+0x1f8>)
 800063e:	5c9b      	ldrb	r3, [r3, r2]
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7d1b      	ldrb	r3, [r3, #20]
 8000648:	4619      	mov	r1, r3
 800064a:	4b3f      	ldr	r3, [pc, #252]	@ (8000748 <SX1278_config+0x204>)
 800064c:	5c5b      	ldrb	r3, [r3, r1]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4413      	add	r3, r2
 8000654:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000656:	3303      	adds	r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	211e      	movs	r1, #30
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff0b 	bl	800047a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000664:	2131      	movs	r1, #49	@ 0x31
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fee8 	bl	800043c <SX1278_SPIRead>
 800066c:	4603      	mov	r3, r0
 800066e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0307 	bic.w	r3, r3, #7
 8000676:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	f043 0305 	orr.w	r3, r3, #5
 800067e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	461a      	mov	r2, r3
 8000684:	2131      	movs	r1, #49	@ 0x31
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fef7 	bl	800047a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800068c:	220c      	movs	r2, #12
 800068e:	2137      	movs	r1, #55	@ 0x37
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff fef2 	bl	800047a <SX1278_SPIWrite>
 8000696:	e029      	b.n	80006ec <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7c9b      	ldrb	r3, [r3, #18]
 800069c:	461a      	mov	r2, r3
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SX1278_config+0x1fc>)
 80006a0:	5c9b      	ldrb	r3, [r3, r2]
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7cdb      	ldrb	r3, [r3, #19]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <SX1278_config+0x200>)
 80006ae:	5c5b      	ldrb	r3, [r3, r1]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006b4:	4413      	add	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	211d      	movs	r1, #29
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fedc 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7c5b      	ldrb	r3, [r3, #17]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <SX1278_config+0x1f8>)
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7d1b      	ldrb	r3, [r3, #20]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <SX1278_config+0x204>)
 80006d8:	5c5b      	ldrb	r3, [r3, r1]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006de:	4413      	add	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	211e      	movs	r1, #30
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff fec7 	bl	800047a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80006ec:	2204      	movs	r2, #4
 80006ee:	2126      	movs	r1, #38	@ 0x26
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fec2 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80006f6:	2208      	movs	r2, #8
 80006f8:	211f      	movs	r1, #31
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff febd 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff feb8 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800070a:	2208      	movs	r2, #8
 800070c:	2121      	movs	r1, #33	@ 0x21
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff feb3 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000714:	2201      	movs	r2, #1
 8000716:	2141      	movs	r1, #65	@ 0x41
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff feae 	bl	800047a <SX1278_SPIWrite>
	module->readBytes = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f810 	bl	800074c <SX1278_standby>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	01e84800 	.word	0x01e84800
 8000738:	08002fdc 	.word	0x08002fdc
 800073c:	08002fe0 	.word	0x08002fe0
 8000740:	08002fe8 	.word	0x08002fe8
 8000744:	08002ff4 	.word	0x08002ff4
 8000748:	08002ff8 	.word	0x08002ff8

0800074c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000754:	2209      	movs	r2, #9
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fe8e 	bl	800047a <SX1278_SPIWrite>
	module->status = STANDBY;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	759a      	strb	r2, [r3, #22]
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000774:	2208      	movs	r2, #8
 8000776:	2101      	movs	r1, #1
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fe7e 	bl	800047a <SX1278_SPIWrite>
	module->status = SLEEP;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	759a      	strb	r2, [r3, #22]
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000794:	2288      	movs	r2, #136	@ 0x88
 8000796:	2101      	movs	r1, #1
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fe6e 	bl	800047a <SX1278_SPIWrite>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80007ae:	22ff      	movs	r2, #255	@ 0xff
 80007b0:	2112      	movs	r1, #18
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fe61 	bl	800047a <SX1278_SPIWrite>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	460b      	mov	r3, r1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	7afa      	ldrb	r2, [r7, #11]
 80007d2:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f7ff feb5 	bl	8000544 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80007da:	2287      	movs	r2, #135	@ 0x87
 80007dc:	214d      	movs	r1, #77	@ 0x4d
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff fe4b 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80007e4:	2200      	movs	r2, #0
 80007e6:	2124      	movs	r1, #36	@ 0x24
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff fe46 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80007ee:	2241      	movs	r2, #65	@ 0x41
 80007f0:	2140      	movs	r1, #64	@ 0x40
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff fe41 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff ffd4 	bl	80007a6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80007fe:	22f7      	movs	r2, #247	@ 0xf7
 8000800:	2111      	movs	r1, #17
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff fe39 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	461a      	mov	r2, r3
 800080c:	2122      	movs	r1, #34	@ 0x22
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff fe33 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000814:	210e      	movs	r1, #14
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fe10 	bl	800043c <SX1278_SPIRead>
 800081c:	4603      	mov	r3, r0
 800081e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	461a      	mov	r2, r3
 8000824:	210d      	movs	r1, #13
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f7ff fe27 	bl	800047a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800082c:	2122      	movs	r1, #34	@ 0x22
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f7ff fe04 	bl	800043c <SX1278_SPIRead>
 8000834:	4603      	mov	r3, r0
 8000836:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000838:	7dba      	ldrb	r2, [r7, #22]
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	429a      	cmp	r2, r3
 800083e:	d104      	bne.n	800084a <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2202      	movs	r2, #2
 8000844:	759a      	strb	r2, [r3, #22]
			return 1;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b01      	subs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ea      	bne.n	800082c <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f8be 	bl	80009dc <SX1278_hw_Reset>
			SX1278_config(module);
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff fe6f 	bl	8000544 <SX1278_config>
			return 0;
 8000866:	2300      	movs	r3, #0
		}
	}
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4613      	mov	r3, r2
 800087e:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	2100      	movs	r1, #0
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fe20 	bl	80004cc <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800088c:	228b      	movs	r2, #139	@ 0x8b
 800088e:	2101      	movs	r1, #1
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f7ff fdf2 	bl	800047a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f913 	bl	8000ac6 <SX1278_hw_GetDIO0>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00b      	beq.n	80008be <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80008a6:	2112      	movs	r1, #18
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff fdc7 	bl	800043c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff ff79 	bl	80007a6 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff ff49 	bl	800074c <SX1278_standby>
			return 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e013      	b.n	80008e6 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d109      	bne.n	80008de <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f884 	bl	80009dc <SX1278_hw_Reset>
			SX1278_config(module);
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff fe35 	bl	8000544 <SX1278_config>
			return 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	e003      	b.n	80008e6 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 f8e6 	bl	8000ab0 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80008e4:	e7d7      	b.n	8000896 <SX1278_LoRaTxPacket+0x26>
	}
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f840 	bl	8000984 <SX1278_hw_init>
	module->frequency = frequency;
 8000904:	68f9      	ldr	r1, [r7, #12]
 8000906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800090a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	7e3a      	ldrb	r2, [r7, #24]
 8000912:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	7f3a      	ldrb	r2, [r7, #28]
 8000918:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000920:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000928:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000930:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000938:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff fe02 	bl	8000544 <SX1278_config>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4613      	mov	r3, r2
 8000956:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff2e 	bl	80007c0 <SX1278_LoRaEntryTx>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d007      	beq.n	800097a <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff ff7d 	bl	8000870 <SX1278_LoRaTxPacket>
 8000976:	4603      	mov	r3, r0
 8000978:	e000      	b.n	800097c <SX1278_transmit+0x34>
	}
	return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800098c:	2101      	movs	r1, #1
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f80d 	bl	80009ae <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6858      	ldr	r0, [r3, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	f000 fe36 	bl	8001612 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6958      	ldr	r0, [r3, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	b299      	uxth	r1, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	f000 fe1f 	bl	8001612 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80009e4:	2101      	movs	r1, #1
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffe1 	bl	80009ae <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6858      	ldr	r0, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	f000 fe0a 	bl	8001612 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f856 	bl	8000ab0 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	f000 fdfe 	bl	8001612 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000a16:	2064      	movs	r0, #100	@ 0x64
 8000a18:	f000 f84a 	bl	8000ab0 <SX1278_hw_DelayMs>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffbb 	bl	80009ae <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6998      	ldr	r0, [r3, #24]
 8000a3c:	1cf9      	adds	r1, r7, #3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	2201      	movs	r2, #1
 8000a44:	f001 fa60 	bl	8001f08 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000a48:	bf00      	nop
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fd4d 	bl	80024ee <HAL_SPI_GetState>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1f7      	bne.n	8000a4a <SX1278_hw_SPICommand+0x26>
		;
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ff99 	bl	80009ae <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6998      	ldr	r0, [r3, #24]
 8000a80:	f107 020e 	add.w	r2, r7, #14
 8000a84:	f107 010f 	add.w	r1, r7, #15
 8000a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f001 fb7d 	bl	800218e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000a94:	bf00      	nop
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fd27 	bl	80024ee <HAL_SPI_GetState>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d1f7      	bne.n	8000a96 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fb07 	bl	80010cc <HAL_Delay>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4610      	mov	r0, r2
 8000adc:	f000 fd82 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	0000      	movs	r0, r0
	...

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fa83 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f87d 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f8ed 	bl	8000ce4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b0a:	f000 f8b5 	bl	8000c78 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SX1278_hw.dio0.port = LORA_DI0_GPIO_Port;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	@ (8000bd8 <main+0xe0>)
 8000b10:	4a32      	ldr	r2, [pc, #200]	@ (8000bdc <main+0xe4>)
 8000b12:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = LORA_DI0_Pin;
 8000b14:	4b30      	ldr	r3, [pc, #192]	@ (8000bd8 <main+0xe0>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <main+0xe0>)
 8000b1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bdc <main+0xe4>)
 8000b1e:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <main+0xe0>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <main+0xe0>)
 8000b28:	4a2d      	ldr	r2, [pc, #180]	@ (8000be0 <main+0xe8>)
 8000b2a:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <main+0xe0>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <main+0xe0>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <main+0xec>)
 8000b36:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <main+0xf0>)
 8000b3a:	4a27      	ldr	r2, [pc, #156]	@ (8000bd8 <main+0xe0>)
 8000b3c:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 15);
 8000b3e:	230f      	movs	r3, #15
 8000b40:	9305      	str	r3, [sp, #20]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9304      	str	r3, [sp, #16]
 8000b46:	2300      	movs	r3, #0
 8000b48:	9303      	str	r3, [sp, #12]
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	a31e      	add	r3, pc, #120	@ (adr r3, 8000bd0 <main+0xd8>)
 8000b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5c:	4822      	ldr	r0, [pc, #136]	@ (8000be8 <main+0xf0>)
 8000b5e:	f7ff fec6 	bl	80008ee <SX1278_init>
  ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000b62:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b66:	2110      	movs	r1, #16
 8000b68:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <main+0xf0>)
 8000b6a:	f7ff fe29 	bl	80007c0 <SX1278_LoRaEntryTx>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <main+0xf4>)
 8000b72:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  message_length = sprintf(buffer, "Hello, world!");
 8000b74:	491e      	ldr	r1, [pc, #120]	@ (8000bf0 <main+0xf8>)
 8000b76:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <main+0xfc>)
 8000b78:	f001 fd6c 	bl	8002654 <siprintf>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf8 <main+0x100>)
 8000b80:	6013      	str	r3, [r2, #0]
	  if (message_length >= 0) {
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <main+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db11      	blt.n	8000bae <main+0xb6>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b90:	481a      	ldr	r0, [pc, #104]	@ (8000bfc <main+0x104>)
 8000b92:	f000 fd3e 	bl	8001612 <HAL_GPIO_WritePin>
	  	ret = SX1278_transmit(&SX1278, (uint8_t*) buffer, message_length, 2000); //TODO Handle error
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <main+0x100>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ba0:	4914      	ldr	r1, [pc, #80]	@ (8000bf4 <main+0xfc>)
 8000ba2:	4811      	ldr	r0, [pc, #68]	@ (8000be8 <main+0xf0>)
 8000ba4:	f7ff fed0 	bl	8000948 <SX1278_transmit>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a10      	ldr	r2, [pc, #64]	@ (8000bec <main+0xf4>)
 8000bac:	6013      	str	r3, [r2, #0]
	  }
	  HAL_Delay(250);
 8000bae:	20fa      	movs	r0, #250	@ 0xfa
 8000bb0:	f000 fa8c 	bl	80010cc <HAL_Delay>
	  if(ret != 0) {
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <main+0xf4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <main+0xd0>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc2:	480e      	ldr	r0, [pc, #56]	@ (8000bfc <main+0x104>)
 8000bc4:	f000 fd25 	bl	8001612 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(250);
 8000bc8:	20fa      	movs	r0, #250	@ 0xfa
 8000bca:	f000 fa7f 	bl	80010cc <HAL_Delay>
	  message_length = sprintf(buffer, "Hello, world!");
 8000bce:	e7d1      	b.n	8000b74 <main+0x7c>
 8000bd0:	19de5080 	.word	0x19de5080
 8000bd4:	00000000 	.word	0x00000000
 8000bd8:	200000d4 	.word	0x200000d4
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	2000007c 	.word	0x2000007c
 8000be8:	200000f0 	.word	0x200000f0
 8000bec:	20000208 	.word	0x20000208
 8000bf0:	08002fcc 	.word	0x08002fcc
 8000bf4:	20000210 	.word	0x20000210
 8000bf8:	2000020c 	.word	0x2000020c
 8000bfc:	40011000 	.word	0x40011000

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	@ 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fd40 	bl	8002694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd04 	bl	8001644 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8d1 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 ff72 	bl	8001b48 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f8bd 	bl	8000de8 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	@ 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <MX_SPI1_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_SPI1_Init+0x64>)
 8000cca:	f001 f899 	bl	8001e00 <HAL_SPI_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd4:	f000 f888 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000007c 	.word	0x2000007c
 8000ce0:	40013000 	.word	0x40013000

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a36      	ldr	r2, [pc, #216]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a30      	ldr	r2, [pc, #192]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <MX_GPIO_Init+0xf4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d46:	4825      	ldr	r0, [pc, #148]	@ (8000ddc <MX_GPIO_Init+0xf8>)
 8000d48:	f000 fc63 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <MX_GPIO_Init+0xfc>)
 8000d52:	f000 fc5e 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4822      	ldr	r0, [pc, #136]	@ (8000de4 <MX_GPIO_Init+0x100>)
 8000d5c:	f000 fc59 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <MX_GPIO_Init+0xf8>)
 8000d7a:	f000 faaf 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DI0_Pin */
  GPIO_InitStruct.Pin = LORA_DI0_Pin;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_DI0_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_GPIO_Init+0xfc>)
 8000d92:	f000 faa3 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8000d96:	2310      	movs	r3, #16
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_GPIO_Init+0xfc>)
 8000dae:	f000 fa95 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_GPIO_Init+0x100>)
 8000dca:	f000 fa87 	bl	80012dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <HAL_MspInit+0x5c>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_MspInit+0x60>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_MspInit+0x60>)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d12f      	bne.n	8000ed8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ea8:	23a0      	movs	r3, #160	@ 0xa0
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000ebc:	f000 fa0e 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec0:	2340      	movs	r3, #64	@ 0x40
 8000ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000ed4:	f000 fa02 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40013000 	.word	0x40013000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f8aa 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f001 fb96 	bl	80026a4 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20005000 	.word	0x20005000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000410 	.word	0x20000410
 8000fac:	20000560 	.word	0x20000560

08000fb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fbc:	f7ff fff8 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fc2:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd8:	4c09      	ldr	r4, [pc, #36]	@ (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f001 fb63 	bl	80026b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fea:	f7ff fd85 	bl	8000af8 <main>
  bx lr
 8000fee:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ff8:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 8000ffc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001000:	20000560 	.word	0x20000560

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_Init+0x28>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_Init+0x28>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f92b 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	200f      	movs	r0, #15
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fee6 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f935 	bl	80012c2 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f90b 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000008 	.word	0x20000008
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_IncTick+0x1c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_IncTick+0x20>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a03      	ldr	r2, [pc, #12]	@ (80010b4 <HAL_IncTick+0x20>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000414 	.word	0x20000414

080010b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b02      	ldr	r3, [pc, #8]	@ (80010c8 <HAL_GetTick+0x10>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000414 	.word	0x20000414

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff fff0 	bl	80010b8 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffe0 	bl	80010b8 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff90 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff49 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff5e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb0 	bl	8001230 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	@ 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e169      	b.n	80015c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8158 	bne.w	80015be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a9a      	ldr	r2, [pc, #616]	@ (800157c <HAL_GPIO_Init+0x2a0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d05e      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001318:	4a98      	ldr	r2, [pc, #608]	@ (800157c <HAL_GPIO_Init+0x2a0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d875      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800131e:	4a98      	ldr	r2, [pc, #608]	@ (8001580 <HAL_GPIO_Init+0x2a4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d058      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001324:	4a96      	ldr	r2, [pc, #600]	@ (8001580 <HAL_GPIO_Init+0x2a4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d86f      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800132a:	4a96      	ldr	r2, [pc, #600]	@ (8001584 <HAL_GPIO_Init+0x2a8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d052      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001330:	4a94      	ldr	r2, [pc, #592]	@ (8001584 <HAL_GPIO_Init+0x2a8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d869      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001336:	4a94      	ldr	r2, [pc, #592]	@ (8001588 <HAL_GPIO_Init+0x2ac>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d04c      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 800133c:	4a92      	ldr	r2, [pc, #584]	@ (8001588 <HAL_GPIO_Init+0x2ac>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d863      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001342:	4a92      	ldr	r2, [pc, #584]	@ (800158c <HAL_GPIO_Init+0x2b0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d046      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001348:	4a90      	ldr	r2, [pc, #576]	@ (800158c <HAL_GPIO_Init+0x2b0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d85d      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d82a      	bhi.n	80013a8 <HAL_GPIO_Init+0xcc>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d859      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001356:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <HAL_GPIO_Init+0x80>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	080013d7 	.word	0x080013d7
 8001360:	080013b1 	.word	0x080013b1
 8001364:	080013c3 	.word	0x080013c3
 8001368:	08001405 	.word	0x08001405
 800136c:	0800140b 	.word	0x0800140b
 8001370:	0800140b 	.word	0x0800140b
 8001374:	0800140b 	.word	0x0800140b
 8001378:	0800140b 	.word	0x0800140b
 800137c:	0800140b 	.word	0x0800140b
 8001380:	0800140b 	.word	0x0800140b
 8001384:	0800140b 	.word	0x0800140b
 8001388:	0800140b 	.word	0x0800140b
 800138c:	0800140b 	.word	0x0800140b
 8001390:	0800140b 	.word	0x0800140b
 8001394:	0800140b 	.word	0x0800140b
 8001398:	0800140b 	.word	0x0800140b
 800139c:	0800140b 	.word	0x0800140b
 80013a0:	080013b9 	.word	0x080013b9
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	4a79      	ldr	r2, [pc, #484]	@ (8001590 <HAL_GPIO_Init+0x2b4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ae:	e02c      	b.n	800140a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e029      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	3304      	adds	r3, #4
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e024      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	3308      	adds	r3, #8
 80013c8:	623b      	str	r3, [r7, #32]
          break;
 80013ca:	e01f      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	330c      	adds	r3, #12
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e01a      	b.n	800140c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013de:	2304      	movs	r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e013      	b.n	800140c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	611a      	str	r2, [r3, #16]
          break;
 80013f6:	e009      	b.n	800140c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f8:	2308      	movs	r3, #8
 80013fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	615a      	str	r2, [r3, #20]
          break;
 8001402:	e003      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x130>
          break;
 800140a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2bff      	cmp	r3, #255	@ 0xff
 8001410:	d801      	bhi.n	8001416 <HAL_GPIO_Init+0x13a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	e001      	b.n	800141a <HAL_GPIO_Init+0x13e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3304      	adds	r3, #4
 800141a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2bff      	cmp	r3, #255	@ 0xff
 8001420:	d802      	bhi.n	8001428 <HAL_GPIO_Init+0x14c>
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x152>
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	3b08      	subs	r3, #8
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	210f      	movs	r1, #15
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	6a39      	ldr	r1, [r7, #32]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80b1 	beq.w	80015be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800145c:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a4c      	ldr	r2, [pc, #304]	@ (8001594 <HAL_GPIO_Init+0x2b8>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <HAL_GPIO_Init+0x2b8>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001474:	4a48      	ldr	r2, [pc, #288]	@ (8001598 <HAL_GPIO_Init+0x2bc>)
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a40      	ldr	r2, [pc, #256]	@ (800159c <HAL_GPIO_Init+0x2c0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d013      	beq.n	80014c8 <HAL_GPIO_Init+0x1ec>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3f      	ldr	r2, [pc, #252]	@ (80015a0 <HAL_GPIO_Init+0x2c4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00d      	beq.n	80014c4 <HAL_GPIO_Init+0x1e8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a3e      	ldr	r2, [pc, #248]	@ (80015a4 <HAL_GPIO_Init+0x2c8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d007      	beq.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a3d      	ldr	r2, [pc, #244]	@ (80015a8 <HAL_GPIO_Init+0x2cc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d101      	bne.n	80014bc <HAL_GPIO_Init+0x1e0>
 80014b8:	2303      	movs	r3, #3
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014bc:	2304      	movs	r3, #4
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c8:	2300      	movs	r3, #0
 80014ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014da:	492f      	ldr	r1, [pc, #188]	@ (8001598 <HAL_GPIO_Init+0x2bc>)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f4:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	492c      	ldr	r1, [pc, #176]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	4928      	ldr	r1, [pc, #160]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800150c:	4013      	ands	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800151c:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	4922      	ldr	r1, [pc, #136]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	60cb      	str	r3, [r1, #12]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	491e      	ldr	r1, [pc, #120]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001534:	4013      	ands	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4918      	ldr	r1, [pc, #96]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4914      	ldr	r1, [pc, #80]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800155c:	4013      	ands	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d021      	beq.n	80015b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	490e      	ldr	r1, [pc, #56]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e021      	b.n	80015be <HAL_GPIO_Init+0x2e2>
 800157a:	bf00      	nop
 800157c:	10320000 	.word	0x10320000
 8001580:	10310000 	.word	0x10310000
 8001584:	10220000 	.word	0x10220000
 8001588:	10210000 	.word	0x10210000
 800158c:	10120000 	.word	0x10120000
 8001590:	10110000 	.word	0x10110000
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000
 800159c:	40010800 	.word	0x40010800
 80015a0:	40010c00 	.word	0x40010c00
 80015a4:	40011000 	.word	0x40011000
 80015a8:	40011400 	.word	0x40011400
 80015ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4909      	ldr	r1, [pc, #36]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	3301      	adds	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f47f ae8e 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	372c      	adds	r7, #44	@ 0x2c
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800162e:	e003      	b.n	8001638 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e272      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001664:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001670:	4b8f      	ldr	r3, [pc, #572]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d112      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
 800167c:	4b8c      	ldr	r3, [pc, #560]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x12c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e24c      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
 80016ac:	4b80      	ldr	r3, [pc, #512]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b7b      	ldr	r3, [pc, #492]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7a      	ldr	r2, [pc, #488]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b78      	ldr	r3, [pc, #480]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a77      	ldr	r2, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xbc>
 80016e6:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a71      	ldr	r2, [pc, #452]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 8001700:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6a      	ldr	r2, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a67      	ldr	r2, [pc, #412]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fcca 	bl	80010b8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fcc6 	bl	80010b8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e200      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe4>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fcb6 	bl	80010b8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcb2 	bl	80010b8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1ec      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x10c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b4c      	ldr	r3, [pc, #304]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178a:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1c0      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4939      	ldr	r1, [pc, #228]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fc6b 	bl	80010b8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc67 	bl	80010b8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1a1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4927      	ldr	r1, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc4a 	bl	80010b8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fc46 	bl	80010b8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e180      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03a      	beq.n	80018c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fc2a 	bl	80010b8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fc26 	bl	80010b8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e160      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fa9c 	bl	8001dc4 <RCC_Delay>
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fc10 	bl	80010b8 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fc0c 	bl	80010b8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d908      	bls.n	80018bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e146      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	42420000 	.word	0x42420000
 80018b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b92      	ldr	r3, [pc, #584]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e9      	bne.n	800189c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a6 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b88      	ldr	r3, [pc, #544]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a87      	ldr	r2, [pc, #540]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b85      	ldr	r3, [pc, #532]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b82      	ldr	r3, [pc, #520]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7e      	ldr	r2, [pc, #504]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fbcd 	bl	80010b8 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fbc9 	bl	80010b8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	@ 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e103      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b75      	ldr	r3, [pc, #468]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x334>
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a69      	ldr	r2, [pc, #420]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a66      	ldr	r2, [pc, #408]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x356>
 8001980:	4b61      	ldr	r3, [pc, #388]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a60      	ldr	r2, [pc, #384]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	4b5e      	ldr	r3, [pc, #376]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a5d      	ldr	r2, [pc, #372]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 800199a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb7d 	bl	80010b8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb79 	bl	80010b8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0b1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x37e>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fb67 	bl	80010b8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fb63 	bl	80010b8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b3c      	ldr	r3, [pc, #240]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d061      	beq.n	8001afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d146      	bne.n	8001ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fb37 	bl	80010b8 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fb33 	bl	80010b8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e06d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4921      	ldr	r1, [pc, #132]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a19      	ldr	r1, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	491b      	ldr	r1, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb07 	bl	80010b8 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff fb03 	bl	80010b8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
 8001acc:	e035      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff faf0 	bl	80010b8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff faec 	bl	80010b8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e026      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x498>
 8001afa:	e01e      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e019      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_OscConfig+0x500>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d0      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b67      	ldr	r3, [pc, #412]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4965      	ldr	r1, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e073      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4936      	ldr	r1, [pc, #216]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c38:	f7ff fa3e 	bl	80010b8 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff fa3a 	bl	80010b8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e053      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d210      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	4922      	ldr	r1, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f99c 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08002ffc 	.word	0x08002ffc
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x30>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x36>
 8001d4a:	e027      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4e:	613b      	str	r3, [r7, #16]
      break;
 8001d50:	e027      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0c5b      	lsrs	r3, r3, #17
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e004      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	613b      	str	r3, [r7, #16]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9e:	613b      	str	r3, [r7, #16]
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	693b      	ldr	r3, [r7, #16]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	0800300c 	.word	0x0800300c
 8001dbc:	0800301c 	.word	0x0800301c
 8001dc0:	003d0900 	.word	0x003d0900

08001dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <RCC_Delay+0x34>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <RCC_Delay+0x38>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de0:	bf00      	nop
  }
  while (Delay --);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	60fa      	str	r2, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <RCC_Delay+0x1c>
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	10624dd3 	.word	0x10624dd3

08001e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e076      	b.n	8001f00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e22:	d009      	beq.n	8001e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
 8001e2a:	e005      	b.n	8001e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff f800 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f002 0204 	and.w	r2, r2, #4
 8001ede:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_SPI_Transmit+0x22>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e12d      	b.n	8002186 <HAL_SPI_Transmit+0x27e>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f32:	f7ff f8c1 	bl	80010b8 <HAL_GetTick>
 8001f36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f4c:	e116      	b.n	800217c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_SPI_Transmit+0x52>
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f5e:	e10d      	b.n	800217c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2203      	movs	r2, #3
 8001f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd2:	2b40      	cmp	r3, #64	@ 0x40
 8001fd4:	d007      	beq.n	8001fe6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fee:	d14f      	bne.n	8002090 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_SPI_Transmit+0xf6>
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d142      	bne.n	8002084 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	1c9a      	adds	r2, r3, #2
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002022:	e02f      	b.n	8002084 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d112      	bne.n	8002058 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	1c9a      	adds	r2, r3, #2
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002056:	e015      	b.n	8002084 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002058:	f7ff f82e 	bl	80010b8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d803      	bhi.n	8002070 <HAL_SPI_Transmit+0x168>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d102      	bne.n	8002076 <HAL_SPI_Transmit+0x16e>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002082:	e07b      	b.n	800217c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ca      	bne.n	8002024 <HAL_SPI_Transmit+0x11c>
 800208e:	e050      	b.n	8002132 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x196>
 8002098:	8afb      	ldrh	r3, [r7, #22]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d144      	bne.n	8002128 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	330c      	adds	r3, #12
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020c4:	e030      	b.n	8002128 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d113      	bne.n	80020fc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020fa:	e015      	b.n	8002128 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020fc:	f7fe ffdc 	bl	80010b8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d803      	bhi.n	8002114 <HAL_SPI_Transmit+0x20c>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d102      	bne.n	800211a <HAL_SPI_Transmit+0x212>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002126:	e029      	b.n	800217c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1c9      	bne.n	80020c6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa6e 	bl	8002618 <SPI_EndRxTxTransaction>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	77fb      	strb	r3, [r7, #31]
 8002172:	e003      	b.n	800217c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002184:	7ffb      	ldrb	r3, [r7, #31]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b08c      	sub	sp, #48	@ 0x30
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800219c:	2301      	movs	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_SPI_TransmitReceive+0x26>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e198      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x358>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021bc:	f7fe ff7c 	bl	80010b8 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00f      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x70>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021e4:	d107      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x68>
 80021ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80021fc:	e16d      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x82>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x82>
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d103      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002216:	e160      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b04      	cmp	r3, #4
 8002222:	d003      	beq.n	800222c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b40      	cmp	r3, #64	@ 0x40
 800226e:	d007      	beq.n	8002280 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002288:	d17c      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x10a>
 8002292:	8b7b      	ldrh	r3, [r7, #26]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d16a      	bne.n	800236e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022bc:	e057      	b.n	800236e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11b      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x176>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x176>
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d113      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d119      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x1b8>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d014      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	b292      	uxth	r2, r2
 8002328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	1c9a      	adds	r2, r3, #2
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002342:	2301      	movs	r3, #1
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002346:	f7fe feb7 	bl	80010b8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002352:	429a      	cmp	r2, r3
 8002354:	d80b      	bhi.n	800236e <HAL_SPI_TransmitReceive+0x1e0>
 8002356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d007      	beq.n	800236e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800236c:	e0b5      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1a2      	bne.n	80022be <HAL_SPI_TransmitReceive+0x130>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d19d      	bne.n	80022be <HAL_SPI_TransmitReceive+0x130>
 8002382:	e080      	b.n	8002486 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_TransmitReceive+0x204>
 800238c:	8b7b      	ldrh	r3, [r7, #26]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d16f      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b8:	e05b      	b.n	8002472 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d11c      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x274>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x274>
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d114      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d119      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x2b6>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d014      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002440:	2301      	movs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002444:	f7fe fe38 	bl	80010b8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002450:	429a      	cmp	r2, r3
 8002452:	d803      	bhi.n	800245c <HAL_SPI_TransmitReceive+0x2ce>
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d102      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2d4>
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002470:	e033      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d19e      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x22c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d199      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002488:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8c4 	bl	8002618 <SPI_EndRxTxTransaction>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80024a2:	e01a      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024d0:	e003      	b.n	80024da <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80024e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3730      	adds	r7, #48	@ 0x30
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024fc:	b2db      	uxtb	r3, r3
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002518:	f7fe fdce 	bl	80010b8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002528:	f7fe fdc6 	bl	80010b8 <HAL_GetTick>
 800252c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800252e:	4b39      	ldr	r3, [pc, #228]	@ (8002614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	015b      	lsls	r3, r3, #5
 8002534:	0d1b      	lsrs	r3, r3, #20
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800253e:	e054      	b.n	80025ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d050      	beq.n	80025ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002548:	f7fe fdb6 	bl	80010b8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	d902      	bls.n	800255e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d13d      	bne.n	80025da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800256c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002576:	d111      	bne.n	800259c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002580:	d004      	beq.n	800258c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258a:	d107      	bne.n	800259c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a4:	d10f      	bne.n	80025c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e017      	b.n	800260a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	429a      	cmp	r2, r3
 8002606:	d19b      	bne.n	8002540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff ff6a 	bl	8002508 <SPI_WaitFlagStateUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e000      	b.n	800264c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <siprintf>:
 8002654:	b40e      	push	{r1, r2, r3}
 8002656:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800265a:	b500      	push	{lr}
 800265c:	b09c      	sub	sp, #112	@ 0x70
 800265e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002660:	9002      	str	r0, [sp, #8]
 8002662:	9006      	str	r0, [sp, #24]
 8002664:	9107      	str	r1, [sp, #28]
 8002666:	9104      	str	r1, [sp, #16]
 8002668:	4808      	ldr	r0, [pc, #32]	@ (800268c <siprintf+0x38>)
 800266a:	4909      	ldr	r1, [pc, #36]	@ (8002690 <siprintf+0x3c>)
 800266c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002670:	9105      	str	r1, [sp, #20]
 8002672:	6800      	ldr	r0, [r0, #0]
 8002674:	a902      	add	r1, sp, #8
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	f000 f9a0 	bl	80029bc <_svfiprintf_r>
 800267c:	2200      	movs	r2, #0
 800267e:	9b02      	ldr	r3, [sp, #8]
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	b01c      	add	sp, #112	@ 0x70
 8002684:	f85d eb04 	ldr.w	lr, [sp], #4
 8002688:	b003      	add	sp, #12
 800268a:	4770      	bx	lr
 800268c:	2000000c 	.word	0x2000000c
 8002690:	ffff0208 	.word	0xffff0208

08002694 <memset>:
 8002694:	4603      	mov	r3, r0
 8002696:	4402      	add	r2, r0
 8002698:	4293      	cmp	r3, r2
 800269a:	d100      	bne.n	800269e <memset+0xa>
 800269c:	4770      	bx	lr
 800269e:	f803 1b01 	strb.w	r1, [r3], #1
 80026a2:	e7f9      	b.n	8002698 <memset+0x4>

080026a4 <__errno>:
 80026a4:	4b01      	ldr	r3, [pc, #4]	@ (80026ac <__errno+0x8>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c

080026b0 <__libc_init_array>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	2600      	movs	r6, #0
 80026b4:	4d0c      	ldr	r5, [pc, #48]	@ (80026e8 <__libc_init_array+0x38>)
 80026b6:	4c0d      	ldr	r4, [pc, #52]	@ (80026ec <__libc_init_array+0x3c>)
 80026b8:	1b64      	subs	r4, r4, r5
 80026ba:	10a4      	asrs	r4, r4, #2
 80026bc:	42a6      	cmp	r6, r4
 80026be:	d109      	bne.n	80026d4 <__libc_init_array+0x24>
 80026c0:	f000 fc78 	bl	8002fb4 <_init>
 80026c4:	2600      	movs	r6, #0
 80026c6:	4d0a      	ldr	r5, [pc, #40]	@ (80026f0 <__libc_init_array+0x40>)
 80026c8:	4c0a      	ldr	r4, [pc, #40]	@ (80026f4 <__libc_init_array+0x44>)
 80026ca:	1b64      	subs	r4, r4, r5
 80026cc:	10a4      	asrs	r4, r4, #2
 80026ce:	42a6      	cmp	r6, r4
 80026d0:	d105      	bne.n	80026de <__libc_init_array+0x2e>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d8:	4798      	blx	r3
 80026da:	3601      	adds	r6, #1
 80026dc:	e7ee      	b.n	80026bc <__libc_init_array+0xc>
 80026de:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e2:	4798      	blx	r3
 80026e4:	3601      	adds	r6, #1
 80026e6:	e7f2      	b.n	80026ce <__libc_init_array+0x1e>
 80026e8:	0800305c 	.word	0x0800305c
 80026ec:	0800305c 	.word	0x0800305c
 80026f0:	0800305c 	.word	0x0800305c
 80026f4:	08003060 	.word	0x08003060

080026f8 <__retarget_lock_acquire_recursive>:
 80026f8:	4770      	bx	lr

080026fa <__retarget_lock_release_recursive>:
 80026fa:	4770      	bx	lr

080026fc <memcpy>:
 80026fc:	440a      	add	r2, r1
 80026fe:	4291      	cmp	r1, r2
 8002700:	f100 33ff 	add.w	r3, r0, #4294967295
 8002704:	d100      	bne.n	8002708 <memcpy+0xc>
 8002706:	4770      	bx	lr
 8002708:	b510      	push	{r4, lr}
 800270a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800270e:	4291      	cmp	r1, r2
 8002710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002714:	d1f9      	bne.n	800270a <memcpy+0xe>
 8002716:	bd10      	pop	{r4, pc}

08002718 <_free_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4605      	mov	r5, r0
 800271c:	2900      	cmp	r1, #0
 800271e:	d040      	beq.n	80027a2 <_free_r+0x8a>
 8002720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002724:	1f0c      	subs	r4, r1, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	bfb8      	it	lt
 800272a:	18e4      	addlt	r4, r4, r3
 800272c:	f000 f8de 	bl	80028ec <__malloc_lock>
 8002730:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <_free_r+0x8c>)
 8002732:	6813      	ldr	r3, [r2, #0]
 8002734:	b933      	cbnz	r3, 8002744 <_free_r+0x2c>
 8002736:	6063      	str	r3, [r4, #4]
 8002738:	6014      	str	r4, [r2, #0]
 800273a:	4628      	mov	r0, r5
 800273c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002740:	f000 b8da 	b.w	80028f8 <__malloc_unlock>
 8002744:	42a3      	cmp	r3, r4
 8002746:	d908      	bls.n	800275a <_free_r+0x42>
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	1821      	adds	r1, r4, r0
 800274c:	428b      	cmp	r3, r1
 800274e:	bf01      	itttt	eq
 8002750:	6819      	ldreq	r1, [r3, #0]
 8002752:	685b      	ldreq	r3, [r3, #4]
 8002754:	1809      	addeq	r1, r1, r0
 8002756:	6021      	streq	r1, [r4, #0]
 8002758:	e7ed      	b.n	8002736 <_free_r+0x1e>
 800275a:	461a      	mov	r2, r3
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	b10b      	cbz	r3, 8002764 <_free_r+0x4c>
 8002760:	42a3      	cmp	r3, r4
 8002762:	d9fa      	bls.n	800275a <_free_r+0x42>
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	1850      	adds	r0, r2, r1
 8002768:	42a0      	cmp	r0, r4
 800276a:	d10b      	bne.n	8002784 <_free_r+0x6c>
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	4401      	add	r1, r0
 8002770:	1850      	adds	r0, r2, r1
 8002772:	4283      	cmp	r3, r0
 8002774:	6011      	str	r1, [r2, #0]
 8002776:	d1e0      	bne.n	800273a <_free_r+0x22>
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4408      	add	r0, r1
 800277e:	6010      	str	r0, [r2, #0]
 8002780:	6053      	str	r3, [r2, #4]
 8002782:	e7da      	b.n	800273a <_free_r+0x22>
 8002784:	d902      	bls.n	800278c <_free_r+0x74>
 8002786:	230c      	movs	r3, #12
 8002788:	602b      	str	r3, [r5, #0]
 800278a:	e7d6      	b.n	800273a <_free_r+0x22>
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	1821      	adds	r1, r4, r0
 8002790:	428b      	cmp	r3, r1
 8002792:	bf01      	itttt	eq
 8002794:	6819      	ldreq	r1, [r3, #0]
 8002796:	685b      	ldreq	r3, [r3, #4]
 8002798:	1809      	addeq	r1, r1, r0
 800279a:	6021      	streq	r1, [r4, #0]
 800279c:	6063      	str	r3, [r4, #4]
 800279e:	6054      	str	r4, [r2, #4]
 80027a0:	e7cb      	b.n	800273a <_free_r+0x22>
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
 80027a4:	2000055c 	.word	0x2000055c

080027a8 <sbrk_aligned>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4e0f      	ldr	r6, [pc, #60]	@ (80027e8 <sbrk_aligned+0x40>)
 80027ac:	460c      	mov	r4, r1
 80027ae:	6831      	ldr	r1, [r6, #0]
 80027b0:	4605      	mov	r5, r0
 80027b2:	b911      	cbnz	r1, 80027ba <sbrk_aligned+0x12>
 80027b4:	f000 fbaa 	bl	8002f0c <_sbrk_r>
 80027b8:	6030      	str	r0, [r6, #0]
 80027ba:	4621      	mov	r1, r4
 80027bc:	4628      	mov	r0, r5
 80027be:	f000 fba5 	bl	8002f0c <_sbrk_r>
 80027c2:	1c43      	adds	r3, r0, #1
 80027c4:	d103      	bne.n	80027ce <sbrk_aligned+0x26>
 80027c6:	f04f 34ff 	mov.w	r4, #4294967295
 80027ca:	4620      	mov	r0, r4
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	1cc4      	adds	r4, r0, #3
 80027d0:	f024 0403 	bic.w	r4, r4, #3
 80027d4:	42a0      	cmp	r0, r4
 80027d6:	d0f8      	beq.n	80027ca <sbrk_aligned+0x22>
 80027d8:	1a21      	subs	r1, r4, r0
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 fb96 	bl	8002f0c <_sbrk_r>
 80027e0:	3001      	adds	r0, #1
 80027e2:	d1f2      	bne.n	80027ca <sbrk_aligned+0x22>
 80027e4:	e7ef      	b.n	80027c6 <sbrk_aligned+0x1e>
 80027e6:	bf00      	nop
 80027e8:	20000558 	.word	0x20000558

080027ec <_malloc_r>:
 80027ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f0:	1ccd      	adds	r5, r1, #3
 80027f2:	f025 0503 	bic.w	r5, r5, #3
 80027f6:	3508      	adds	r5, #8
 80027f8:	2d0c      	cmp	r5, #12
 80027fa:	bf38      	it	cc
 80027fc:	250c      	movcc	r5, #12
 80027fe:	2d00      	cmp	r5, #0
 8002800:	4606      	mov	r6, r0
 8002802:	db01      	blt.n	8002808 <_malloc_r+0x1c>
 8002804:	42a9      	cmp	r1, r5
 8002806:	d904      	bls.n	8002812 <_malloc_r+0x26>
 8002808:	230c      	movs	r3, #12
 800280a:	6033      	str	r3, [r6, #0]
 800280c:	2000      	movs	r0, #0
 800280e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028e8 <_malloc_r+0xfc>
 8002816:	f000 f869 	bl	80028ec <__malloc_lock>
 800281a:	f8d8 3000 	ldr.w	r3, [r8]
 800281e:	461c      	mov	r4, r3
 8002820:	bb44      	cbnz	r4, 8002874 <_malloc_r+0x88>
 8002822:	4629      	mov	r1, r5
 8002824:	4630      	mov	r0, r6
 8002826:	f7ff ffbf 	bl	80027a8 <sbrk_aligned>
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	4604      	mov	r4, r0
 800282e:	d158      	bne.n	80028e2 <_malloc_r+0xf6>
 8002830:	f8d8 4000 	ldr.w	r4, [r8]
 8002834:	4627      	mov	r7, r4
 8002836:	2f00      	cmp	r7, #0
 8002838:	d143      	bne.n	80028c2 <_malloc_r+0xd6>
 800283a:	2c00      	cmp	r4, #0
 800283c:	d04b      	beq.n	80028d6 <_malloc_r+0xea>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	4639      	mov	r1, r7
 8002842:	4630      	mov	r0, r6
 8002844:	eb04 0903 	add.w	r9, r4, r3
 8002848:	f000 fb60 	bl	8002f0c <_sbrk_r>
 800284c:	4581      	cmp	r9, r0
 800284e:	d142      	bne.n	80028d6 <_malloc_r+0xea>
 8002850:	6821      	ldr	r1, [r4, #0]
 8002852:	4630      	mov	r0, r6
 8002854:	1a6d      	subs	r5, r5, r1
 8002856:	4629      	mov	r1, r5
 8002858:	f7ff ffa6 	bl	80027a8 <sbrk_aligned>
 800285c:	3001      	adds	r0, #1
 800285e:	d03a      	beq.n	80028d6 <_malloc_r+0xea>
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	442b      	add	r3, r5
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	f8d8 3000 	ldr.w	r3, [r8]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	bb62      	cbnz	r2, 80028c8 <_malloc_r+0xdc>
 800286e:	f8c8 7000 	str.w	r7, [r8]
 8002872:	e00f      	b.n	8002894 <_malloc_r+0xa8>
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	1b52      	subs	r2, r2, r5
 8002878:	d420      	bmi.n	80028bc <_malloc_r+0xd0>
 800287a:	2a0b      	cmp	r2, #11
 800287c:	d917      	bls.n	80028ae <_malloc_r+0xc2>
 800287e:	1961      	adds	r1, r4, r5
 8002880:	42a3      	cmp	r3, r4
 8002882:	6025      	str	r5, [r4, #0]
 8002884:	bf18      	it	ne
 8002886:	6059      	strne	r1, [r3, #4]
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	bf08      	it	eq
 800288c:	f8c8 1000 	streq.w	r1, [r8]
 8002890:	5162      	str	r2, [r4, r5]
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f82f 	bl	80028f8 <__malloc_unlock>
 800289a:	f104 000b 	add.w	r0, r4, #11
 800289e:	1d23      	adds	r3, r4, #4
 80028a0:	f020 0007 	bic.w	r0, r0, #7
 80028a4:	1ac2      	subs	r2, r0, r3
 80028a6:	bf1c      	itt	ne
 80028a8:	1a1b      	subne	r3, r3, r0
 80028aa:	50a3      	strne	r3, [r4, r2]
 80028ac:	e7af      	b.n	800280e <_malloc_r+0x22>
 80028ae:	6862      	ldr	r2, [r4, #4]
 80028b0:	42a3      	cmp	r3, r4
 80028b2:	bf0c      	ite	eq
 80028b4:	f8c8 2000 	streq.w	r2, [r8]
 80028b8:	605a      	strne	r2, [r3, #4]
 80028ba:	e7eb      	b.n	8002894 <_malloc_r+0xa8>
 80028bc:	4623      	mov	r3, r4
 80028be:	6864      	ldr	r4, [r4, #4]
 80028c0:	e7ae      	b.n	8002820 <_malloc_r+0x34>
 80028c2:	463c      	mov	r4, r7
 80028c4:	687f      	ldr	r7, [r7, #4]
 80028c6:	e7b6      	b.n	8002836 <_malloc_r+0x4a>
 80028c8:	461a      	mov	r2, r3
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	d1fb      	bne.n	80028c8 <_malloc_r+0xdc>
 80028d0:	2300      	movs	r3, #0
 80028d2:	6053      	str	r3, [r2, #4]
 80028d4:	e7de      	b.n	8002894 <_malloc_r+0xa8>
 80028d6:	230c      	movs	r3, #12
 80028d8:	4630      	mov	r0, r6
 80028da:	6033      	str	r3, [r6, #0]
 80028dc:	f000 f80c 	bl	80028f8 <__malloc_unlock>
 80028e0:	e794      	b.n	800280c <_malloc_r+0x20>
 80028e2:	6005      	str	r5, [r0, #0]
 80028e4:	e7d6      	b.n	8002894 <_malloc_r+0xa8>
 80028e6:	bf00      	nop
 80028e8:	2000055c 	.word	0x2000055c

080028ec <__malloc_lock>:
 80028ec:	4801      	ldr	r0, [pc, #4]	@ (80028f4 <__malloc_lock+0x8>)
 80028ee:	f7ff bf03 	b.w	80026f8 <__retarget_lock_acquire_recursive>
 80028f2:	bf00      	nop
 80028f4:	20000554 	.word	0x20000554

080028f8 <__malloc_unlock>:
 80028f8:	4801      	ldr	r0, [pc, #4]	@ (8002900 <__malloc_unlock+0x8>)
 80028fa:	f7ff befe 	b.w	80026fa <__retarget_lock_release_recursive>
 80028fe:	bf00      	nop
 8002900:	20000554 	.word	0x20000554

08002904 <__ssputs_r>:
 8002904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002908:	461f      	mov	r7, r3
 800290a:	688e      	ldr	r6, [r1, #8]
 800290c:	4682      	mov	sl, r0
 800290e:	42be      	cmp	r6, r7
 8002910:	460c      	mov	r4, r1
 8002912:	4690      	mov	r8, r2
 8002914:	680b      	ldr	r3, [r1, #0]
 8002916:	d82d      	bhi.n	8002974 <__ssputs_r+0x70>
 8002918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800291c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002920:	d026      	beq.n	8002970 <__ssputs_r+0x6c>
 8002922:	6965      	ldr	r5, [r4, #20]
 8002924:	6909      	ldr	r1, [r1, #16]
 8002926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800292a:	eba3 0901 	sub.w	r9, r3, r1
 800292e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002932:	1c7b      	adds	r3, r7, #1
 8002934:	444b      	add	r3, r9
 8002936:	106d      	asrs	r5, r5, #1
 8002938:	429d      	cmp	r5, r3
 800293a:	bf38      	it	cc
 800293c:	461d      	movcc	r5, r3
 800293e:	0553      	lsls	r3, r2, #21
 8002940:	d527      	bpl.n	8002992 <__ssputs_r+0x8e>
 8002942:	4629      	mov	r1, r5
 8002944:	f7ff ff52 	bl	80027ec <_malloc_r>
 8002948:	4606      	mov	r6, r0
 800294a:	b360      	cbz	r0, 80029a6 <__ssputs_r+0xa2>
 800294c:	464a      	mov	r2, r9
 800294e:	6921      	ldr	r1, [r4, #16]
 8002950:	f7ff fed4 	bl	80026fc <memcpy>
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800295a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295e:	81a3      	strh	r3, [r4, #12]
 8002960:	6126      	str	r6, [r4, #16]
 8002962:	444e      	add	r6, r9
 8002964:	6026      	str	r6, [r4, #0]
 8002966:	463e      	mov	r6, r7
 8002968:	6165      	str	r5, [r4, #20]
 800296a:	eba5 0509 	sub.w	r5, r5, r9
 800296e:	60a5      	str	r5, [r4, #8]
 8002970:	42be      	cmp	r6, r7
 8002972:	d900      	bls.n	8002976 <__ssputs_r+0x72>
 8002974:	463e      	mov	r6, r7
 8002976:	4632      	mov	r2, r6
 8002978:	4641      	mov	r1, r8
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	f000 faac 	bl	8002ed8 <memmove>
 8002980:	2000      	movs	r0, #0
 8002982:	68a3      	ldr	r3, [r4, #8]
 8002984:	1b9b      	subs	r3, r3, r6
 8002986:	60a3      	str	r3, [r4, #8]
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	4433      	add	r3, r6
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002992:	462a      	mov	r2, r5
 8002994:	f000 fad8 	bl	8002f48 <_realloc_r>
 8002998:	4606      	mov	r6, r0
 800299a:	2800      	cmp	r0, #0
 800299c:	d1e0      	bne.n	8002960 <__ssputs_r+0x5c>
 800299e:	4650      	mov	r0, sl
 80029a0:	6921      	ldr	r1, [r4, #16]
 80029a2:	f7ff feb9 	bl	8002718 <_free_r>
 80029a6:	230c      	movs	r3, #12
 80029a8:	f8ca 3000 	str.w	r3, [sl]
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b6:	81a3      	strh	r3, [r4, #12]
 80029b8:	e7e9      	b.n	800298e <__ssputs_r+0x8a>
	...

080029bc <_svfiprintf_r>:
 80029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c0:	4698      	mov	r8, r3
 80029c2:	898b      	ldrh	r3, [r1, #12]
 80029c4:	4607      	mov	r7, r0
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	460d      	mov	r5, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	b09d      	sub	sp, #116	@ 0x74
 80029ce:	d510      	bpl.n	80029f2 <_svfiprintf_r+0x36>
 80029d0:	690b      	ldr	r3, [r1, #16]
 80029d2:	b973      	cbnz	r3, 80029f2 <_svfiprintf_r+0x36>
 80029d4:	2140      	movs	r1, #64	@ 0x40
 80029d6:	f7ff ff09 	bl	80027ec <_malloc_r>
 80029da:	6028      	str	r0, [r5, #0]
 80029dc:	6128      	str	r0, [r5, #16]
 80029de:	b930      	cbnz	r0, 80029ee <_svfiprintf_r+0x32>
 80029e0:	230c      	movs	r3, #12
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	b01d      	add	sp, #116	@ 0x74
 80029ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ee:	2340      	movs	r3, #64	@ 0x40
 80029f0:	616b      	str	r3, [r5, #20]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80029f6:	2320      	movs	r3, #32
 80029f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029fc:	2330      	movs	r3, #48	@ 0x30
 80029fe:	f04f 0901 	mov.w	r9, #1
 8002a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002ba0 <_svfiprintf_r+0x1e4>
 8002a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a0e:	4623      	mov	r3, r4
 8002a10:	469a      	mov	sl, r3
 8002a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a16:	b10a      	cbz	r2, 8002a1c <_svfiprintf_r+0x60>
 8002a18:	2a25      	cmp	r2, #37	@ 0x25
 8002a1a:	d1f9      	bne.n	8002a10 <_svfiprintf_r+0x54>
 8002a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a20:	d00b      	beq.n	8002a3a <_svfiprintf_r+0x7e>
 8002a22:	465b      	mov	r3, fp
 8002a24:	4622      	mov	r2, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	4638      	mov	r0, r7
 8002a2a:	f7ff ff6b 	bl	8002904 <__ssputs_r>
 8002a2e:	3001      	adds	r0, #1
 8002a30:	f000 80a7 	beq.w	8002b82 <_svfiprintf_r+0x1c6>
 8002a34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a36:	445a      	add	r2, fp
 8002a38:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 809f 	beq.w	8002b82 <_svfiprintf_r+0x1c6>
 8002a44:	2300      	movs	r3, #0
 8002a46:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a4e:	f10a 0a01 	add.w	sl, sl, #1
 8002a52:	9304      	str	r3, [sp, #16]
 8002a54:	9307      	str	r3, [sp, #28]
 8002a56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a5c:	4654      	mov	r4, sl
 8002a5e:	2205      	movs	r2, #5
 8002a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a64:	484e      	ldr	r0, [pc, #312]	@ (8002ba0 <_svfiprintf_r+0x1e4>)
 8002a66:	f000 fa61 	bl	8002f2c <memchr>
 8002a6a:	9a04      	ldr	r2, [sp, #16]
 8002a6c:	b9d8      	cbnz	r0, 8002aa6 <_svfiprintf_r+0xea>
 8002a6e:	06d0      	lsls	r0, r2, #27
 8002a70:	bf44      	itt	mi
 8002a72:	2320      	movmi	r3, #32
 8002a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a78:	0711      	lsls	r1, r2, #28
 8002a7a:	bf44      	itt	mi
 8002a7c:	232b      	movmi	r3, #43	@ 0x2b
 8002a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a82:	f89a 3000 	ldrb.w	r3, [sl]
 8002a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a88:	d015      	beq.n	8002ab6 <_svfiprintf_r+0xfa>
 8002a8a:	4654      	mov	r4, sl
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f04f 0c0a 	mov.w	ip, #10
 8002a92:	9a07      	ldr	r2, [sp, #28]
 8002a94:	4621      	mov	r1, r4
 8002a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a9a:	3b30      	subs	r3, #48	@ 0x30
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d94b      	bls.n	8002b38 <_svfiprintf_r+0x17c>
 8002aa0:	b1b0      	cbz	r0, 8002ad0 <_svfiprintf_r+0x114>
 8002aa2:	9207      	str	r2, [sp, #28]
 8002aa4:	e014      	b.n	8002ad0 <_svfiprintf_r+0x114>
 8002aa6:	eba0 0308 	sub.w	r3, r0, r8
 8002aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	46a2      	mov	sl, r4
 8002ab2:	9304      	str	r3, [sp, #16]
 8002ab4:	e7d2      	b.n	8002a5c <_svfiprintf_r+0xa0>
 8002ab6:	9b03      	ldr	r3, [sp, #12]
 8002ab8:	1d19      	adds	r1, r3, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	9103      	str	r1, [sp, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bfbb      	ittet	lt
 8002ac2:	425b      	neglt	r3, r3
 8002ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ac8:	9307      	strge	r3, [sp, #28]
 8002aca:	9307      	strlt	r3, [sp, #28]
 8002acc:	bfb8      	it	lt
 8002ace:	9204      	strlt	r2, [sp, #16]
 8002ad0:	7823      	ldrb	r3, [r4, #0]
 8002ad2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ad4:	d10a      	bne.n	8002aec <_svfiprintf_r+0x130>
 8002ad6:	7863      	ldrb	r3, [r4, #1]
 8002ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ada:	d132      	bne.n	8002b42 <_svfiprintf_r+0x186>
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	3402      	adds	r4, #2
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	9203      	str	r2, [sp, #12]
 8002ae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002aea:	9305      	str	r3, [sp, #20]
 8002aec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002ba4 <_svfiprintf_r+0x1e8>
 8002af0:	2203      	movs	r2, #3
 8002af2:	4650      	mov	r0, sl
 8002af4:	7821      	ldrb	r1, [r4, #0]
 8002af6:	f000 fa19 	bl	8002f2c <memchr>
 8002afa:	b138      	cbz	r0, 8002b0c <_svfiprintf_r+0x150>
 8002afc:	2240      	movs	r2, #64	@ 0x40
 8002afe:	9b04      	ldr	r3, [sp, #16]
 8002b00:	eba0 000a 	sub.w	r0, r0, sl
 8002b04:	4082      	lsls	r2, r0
 8002b06:	4313      	orrs	r3, r2
 8002b08:	3401      	adds	r4, #1
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b10:	2206      	movs	r2, #6
 8002b12:	4825      	ldr	r0, [pc, #148]	@ (8002ba8 <_svfiprintf_r+0x1ec>)
 8002b14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b18:	f000 fa08 	bl	8002f2c <memchr>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d036      	beq.n	8002b8e <_svfiprintf_r+0x1d2>
 8002b20:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <_svfiprintf_r+0x1f0>)
 8002b22:	bb1b      	cbnz	r3, 8002b6c <_svfiprintf_r+0x1b0>
 8002b24:	9b03      	ldr	r3, [sp, #12]
 8002b26:	3307      	adds	r3, #7
 8002b28:	f023 0307 	bic.w	r3, r3, #7
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b32:	4433      	add	r3, r6
 8002b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b36:	e76a      	b.n	8002a0e <_svfiprintf_r+0x52>
 8002b38:	460c      	mov	r4, r1
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b40:	e7a8      	b.n	8002a94 <_svfiprintf_r+0xd8>
 8002b42:	2300      	movs	r3, #0
 8002b44:	f04f 0c0a 	mov.w	ip, #10
 8002b48:	4619      	mov	r1, r3
 8002b4a:	3401      	adds	r4, #1
 8002b4c:	9305      	str	r3, [sp, #20]
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b54:	3a30      	subs	r2, #48	@ 0x30
 8002b56:	2a09      	cmp	r2, #9
 8002b58:	d903      	bls.n	8002b62 <_svfiprintf_r+0x1a6>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0c6      	beq.n	8002aec <_svfiprintf_r+0x130>
 8002b5e:	9105      	str	r1, [sp, #20]
 8002b60:	e7c4      	b.n	8002aec <_svfiprintf_r+0x130>
 8002b62:	4604      	mov	r4, r0
 8002b64:	2301      	movs	r3, #1
 8002b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b6a:	e7f0      	b.n	8002b4e <_svfiprintf_r+0x192>
 8002b6c:	ab03      	add	r3, sp, #12
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	462a      	mov	r2, r5
 8002b72:	4638      	mov	r0, r7
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <_svfiprintf_r+0x1f4>)
 8002b76:	a904      	add	r1, sp, #16
 8002b78:	f3af 8000 	nop.w
 8002b7c:	1c42      	adds	r2, r0, #1
 8002b7e:	4606      	mov	r6, r0
 8002b80:	d1d6      	bne.n	8002b30 <_svfiprintf_r+0x174>
 8002b82:	89ab      	ldrh	r3, [r5, #12]
 8002b84:	065b      	lsls	r3, r3, #25
 8002b86:	f53f af2d 	bmi.w	80029e4 <_svfiprintf_r+0x28>
 8002b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b8c:	e72c      	b.n	80029e8 <_svfiprintf_r+0x2c>
 8002b8e:	ab03      	add	r3, sp, #12
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	462a      	mov	r2, r5
 8002b94:	4638      	mov	r0, r7
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <_svfiprintf_r+0x1f4>)
 8002b98:	a904      	add	r1, sp, #16
 8002b9a:	f000 f87d 	bl	8002c98 <_printf_i>
 8002b9e:	e7ed      	b.n	8002b7c <_svfiprintf_r+0x1c0>
 8002ba0:	0800301e 	.word	0x0800301e
 8002ba4:	08003024 	.word	0x08003024
 8002ba8:	08003028 	.word	0x08003028
 8002bac:	00000000 	.word	0x00000000
 8002bb0:	08002905 	.word	0x08002905

08002bb4 <_printf_common>:
 8002bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb8:	4616      	mov	r6, r2
 8002bba:	4698      	mov	r8, r3
 8002bbc:	688a      	ldr	r2, [r1, #8]
 8002bbe:	690b      	ldr	r3, [r1, #16]
 8002bc0:	4607      	mov	r7, r0
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	bfb8      	it	lt
 8002bc6:	4613      	movlt	r3, r2
 8002bc8:	6033      	str	r3, [r6, #0]
 8002bca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bce:	460c      	mov	r4, r1
 8002bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bd4:	b10a      	cbz	r2, 8002bda <_printf_common+0x26>
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	6033      	str	r3, [r6, #0]
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	0699      	lsls	r1, r3, #26
 8002bde:	bf42      	ittt	mi
 8002be0:	6833      	ldrmi	r3, [r6, #0]
 8002be2:	3302      	addmi	r3, #2
 8002be4:	6033      	strmi	r3, [r6, #0]
 8002be6:	6825      	ldr	r5, [r4, #0]
 8002be8:	f015 0506 	ands.w	r5, r5, #6
 8002bec:	d106      	bne.n	8002bfc <_printf_common+0x48>
 8002bee:	f104 0a19 	add.w	sl, r4, #25
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	6832      	ldr	r2, [r6, #0]
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	42ab      	cmp	r3, r5
 8002bfa:	dc2b      	bgt.n	8002c54 <_printf_common+0xa0>
 8002bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	3b00      	subs	r3, #0
 8002c04:	bf18      	it	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	0692      	lsls	r2, r2, #26
 8002c0a:	d430      	bmi.n	8002c6e <_printf_common+0xba>
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	4638      	mov	r0, r7
 8002c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c14:	47c8      	blx	r9
 8002c16:	3001      	adds	r0, #1
 8002c18:	d023      	beq.n	8002c62 <_printf_common+0xae>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	6922      	ldr	r2, [r4, #16]
 8002c1e:	f003 0306 	and.w	r3, r3, #6
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf14      	ite	ne
 8002c26:	2500      	movne	r5, #0
 8002c28:	6833      	ldreq	r3, [r6, #0]
 8002c2a:	f04f 0600 	mov.w	r6, #0
 8002c2e:	bf08      	it	eq
 8002c30:	68e5      	ldreq	r5, [r4, #12]
 8002c32:	f104 041a 	add.w	r4, r4, #26
 8002c36:	bf08      	it	eq
 8002c38:	1aed      	subeq	r5, r5, r3
 8002c3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c3e:	bf08      	it	eq
 8002c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c44:	4293      	cmp	r3, r2
 8002c46:	bfc4      	itt	gt
 8002c48:	1a9b      	subgt	r3, r3, r2
 8002c4a:	18ed      	addgt	r5, r5, r3
 8002c4c:	42b5      	cmp	r5, r6
 8002c4e:	d11a      	bne.n	8002c86 <_printf_common+0xd2>
 8002c50:	2000      	movs	r0, #0
 8002c52:	e008      	b.n	8002c66 <_printf_common+0xb2>
 8002c54:	2301      	movs	r3, #1
 8002c56:	4652      	mov	r2, sl
 8002c58:	4641      	mov	r1, r8
 8002c5a:	4638      	mov	r0, r7
 8002c5c:	47c8      	blx	r9
 8002c5e:	3001      	adds	r0, #1
 8002c60:	d103      	bne.n	8002c6a <_printf_common+0xb6>
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6a:	3501      	adds	r5, #1
 8002c6c:	e7c1      	b.n	8002bf2 <_printf_common+0x3e>
 8002c6e:	2030      	movs	r0, #48	@ 0x30
 8002c70:	18e1      	adds	r1, r4, r3
 8002c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c7c:	4422      	add	r2, r4
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c84:	e7c2      	b.n	8002c0c <_printf_common+0x58>
 8002c86:	2301      	movs	r3, #1
 8002c88:	4622      	mov	r2, r4
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	47c8      	blx	r9
 8002c90:	3001      	adds	r0, #1
 8002c92:	d0e6      	beq.n	8002c62 <_printf_common+0xae>
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7d9      	b.n	8002c4c <_printf_common+0x98>

08002c98 <_printf_i>:
 8002c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9c:	7e0f      	ldrb	r7, [r1, #24]
 8002c9e:	4691      	mov	r9, r2
 8002ca0:	2f78      	cmp	r7, #120	@ 0x78
 8002ca2:	4680      	mov	r8, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	469a      	mov	sl, r3
 8002ca8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cae:	d807      	bhi.n	8002cc0 <_printf_i+0x28>
 8002cb0:	2f62      	cmp	r7, #98	@ 0x62
 8002cb2:	d80a      	bhi.n	8002cca <_printf_i+0x32>
 8002cb4:	2f00      	cmp	r7, #0
 8002cb6:	f000 80d3 	beq.w	8002e60 <_printf_i+0x1c8>
 8002cba:	2f58      	cmp	r7, #88	@ 0x58
 8002cbc:	f000 80ba 	beq.w	8002e34 <_printf_i+0x19c>
 8002cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002cc8:	e03a      	b.n	8002d40 <_printf_i+0xa8>
 8002cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cce:	2b15      	cmp	r3, #21
 8002cd0:	d8f6      	bhi.n	8002cc0 <_printf_i+0x28>
 8002cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8002cd8 <_printf_i+0x40>)
 8002cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cd8:	08002d31 	.word	0x08002d31
 8002cdc:	08002d45 	.word	0x08002d45
 8002ce0:	08002cc1 	.word	0x08002cc1
 8002ce4:	08002cc1 	.word	0x08002cc1
 8002ce8:	08002cc1 	.word	0x08002cc1
 8002cec:	08002cc1 	.word	0x08002cc1
 8002cf0:	08002d45 	.word	0x08002d45
 8002cf4:	08002cc1 	.word	0x08002cc1
 8002cf8:	08002cc1 	.word	0x08002cc1
 8002cfc:	08002cc1 	.word	0x08002cc1
 8002d00:	08002cc1 	.word	0x08002cc1
 8002d04:	08002e47 	.word	0x08002e47
 8002d08:	08002d6f 	.word	0x08002d6f
 8002d0c:	08002e01 	.word	0x08002e01
 8002d10:	08002cc1 	.word	0x08002cc1
 8002d14:	08002cc1 	.word	0x08002cc1
 8002d18:	08002e69 	.word	0x08002e69
 8002d1c:	08002cc1 	.word	0x08002cc1
 8002d20:	08002d6f 	.word	0x08002d6f
 8002d24:	08002cc1 	.word	0x08002cc1
 8002d28:	08002cc1 	.word	0x08002cc1
 8002d2c:	08002e09 	.word	0x08002e09
 8002d30:	6833      	ldr	r3, [r6, #0]
 8002d32:	1d1a      	adds	r2, r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6032      	str	r2, [r6, #0]
 8002d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d40:	2301      	movs	r3, #1
 8002d42:	e09e      	b.n	8002e82 <_printf_i+0x1ea>
 8002d44:	6833      	ldr	r3, [r6, #0]
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	1d19      	adds	r1, r3, #4
 8002d4a:	6031      	str	r1, [r6, #0]
 8002d4c:	0606      	lsls	r6, r0, #24
 8002d4e:	d501      	bpl.n	8002d54 <_printf_i+0xbc>
 8002d50:	681d      	ldr	r5, [r3, #0]
 8002d52:	e003      	b.n	8002d5c <_printf_i+0xc4>
 8002d54:	0645      	lsls	r5, r0, #25
 8002d56:	d5fb      	bpl.n	8002d50 <_printf_i+0xb8>
 8002d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	da03      	bge.n	8002d68 <_printf_i+0xd0>
 8002d60:	232d      	movs	r3, #45	@ 0x2d
 8002d62:	426d      	negs	r5, r5
 8002d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d68:	230a      	movs	r3, #10
 8002d6a:	4859      	ldr	r0, [pc, #356]	@ (8002ed0 <_printf_i+0x238>)
 8002d6c:	e011      	b.n	8002d92 <_printf_i+0xfa>
 8002d6e:	6821      	ldr	r1, [r4, #0]
 8002d70:	6833      	ldr	r3, [r6, #0]
 8002d72:	0608      	lsls	r0, r1, #24
 8002d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d78:	d402      	bmi.n	8002d80 <_printf_i+0xe8>
 8002d7a:	0649      	lsls	r1, r1, #25
 8002d7c:	bf48      	it	mi
 8002d7e:	b2ad      	uxthmi	r5, r5
 8002d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d82:	6033      	str	r3, [r6, #0]
 8002d84:	bf14      	ite	ne
 8002d86:	230a      	movne	r3, #10
 8002d88:	2308      	moveq	r3, #8
 8002d8a:	4851      	ldr	r0, [pc, #324]	@ (8002ed0 <_printf_i+0x238>)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d92:	6866      	ldr	r6, [r4, #4]
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	bfa8      	it	ge
 8002d98:	6821      	ldrge	r1, [r4, #0]
 8002d9a:	60a6      	str	r6, [r4, #8]
 8002d9c:	bfa4      	itt	ge
 8002d9e:	f021 0104 	bicge.w	r1, r1, #4
 8002da2:	6021      	strge	r1, [r4, #0]
 8002da4:	b90d      	cbnz	r5, 8002daa <_printf_i+0x112>
 8002da6:	2e00      	cmp	r6, #0
 8002da8:	d04b      	beq.n	8002e42 <_printf_i+0x1aa>
 8002daa:	4616      	mov	r6, r2
 8002dac:	fbb5 f1f3 	udiv	r1, r5, r3
 8002db0:	fb03 5711 	mls	r7, r3, r1, r5
 8002db4:	5dc7      	ldrb	r7, [r0, r7]
 8002db6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002dba:	462f      	mov	r7, r5
 8002dbc:	42bb      	cmp	r3, r7
 8002dbe:	460d      	mov	r5, r1
 8002dc0:	d9f4      	bls.n	8002dac <_printf_i+0x114>
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d10b      	bne.n	8002dde <_printf_i+0x146>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	07df      	lsls	r7, r3, #31
 8002dca:	d508      	bpl.n	8002dde <_printf_i+0x146>
 8002dcc:	6923      	ldr	r3, [r4, #16]
 8002dce:	6861      	ldr	r1, [r4, #4]
 8002dd0:	4299      	cmp	r1, r3
 8002dd2:	bfde      	ittt	le
 8002dd4:	2330      	movle	r3, #48	@ 0x30
 8002dd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002dda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002dde:	1b92      	subs	r2, r2, r6
 8002de0:	6122      	str	r2, [r4, #16]
 8002de2:	464b      	mov	r3, r9
 8002de4:	4621      	mov	r1, r4
 8002de6:	4640      	mov	r0, r8
 8002de8:	f8cd a000 	str.w	sl, [sp]
 8002dec:	aa03      	add	r2, sp, #12
 8002dee:	f7ff fee1 	bl	8002bb4 <_printf_common>
 8002df2:	3001      	adds	r0, #1
 8002df4:	d14a      	bne.n	8002e8c <_printf_i+0x1f4>
 8002df6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfa:	b004      	add	sp, #16
 8002dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	2778      	movs	r7, #120	@ 0x78
 8002e0a:	4832      	ldr	r0, [pc, #200]	@ (8002ed4 <_printf_i+0x23c>)
 8002e0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	6831      	ldr	r1, [r6, #0]
 8002e14:	061f      	lsls	r7, r3, #24
 8002e16:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e1a:	d402      	bmi.n	8002e22 <_printf_i+0x18a>
 8002e1c:	065f      	lsls	r7, r3, #25
 8002e1e:	bf48      	it	mi
 8002e20:	b2ad      	uxthmi	r5, r5
 8002e22:	6031      	str	r1, [r6, #0]
 8002e24:	07d9      	lsls	r1, r3, #31
 8002e26:	bf44      	itt	mi
 8002e28:	f043 0320 	orrmi.w	r3, r3, #32
 8002e2c:	6023      	strmi	r3, [r4, #0]
 8002e2e:	b11d      	cbz	r5, 8002e38 <_printf_i+0x1a0>
 8002e30:	2310      	movs	r3, #16
 8002e32:	e7ab      	b.n	8002d8c <_printf_i+0xf4>
 8002e34:	4826      	ldr	r0, [pc, #152]	@ (8002ed0 <_printf_i+0x238>)
 8002e36:	e7e9      	b.n	8002e0c <_printf_i+0x174>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	e7f6      	b.n	8002e30 <_printf_i+0x198>
 8002e42:	4616      	mov	r6, r2
 8002e44:	e7bd      	b.n	8002dc2 <_printf_i+0x12a>
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	1d18      	adds	r0, r3, #4
 8002e4c:	6961      	ldr	r1, [r4, #20]
 8002e4e:	6030      	str	r0, [r6, #0]
 8002e50:	062e      	lsls	r6, r5, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	d501      	bpl.n	8002e5a <_printf_i+0x1c2>
 8002e56:	6019      	str	r1, [r3, #0]
 8002e58:	e002      	b.n	8002e60 <_printf_i+0x1c8>
 8002e5a:	0668      	lsls	r0, r5, #25
 8002e5c:	d5fb      	bpl.n	8002e56 <_printf_i+0x1be>
 8002e5e:	8019      	strh	r1, [r3, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	4616      	mov	r6, r2
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	e7bc      	b.n	8002de2 <_printf_i+0x14a>
 8002e68:	6833      	ldr	r3, [r6, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	1d1a      	adds	r2, r3, #4
 8002e6e:	6032      	str	r2, [r6, #0]
 8002e70:	681e      	ldr	r6, [r3, #0]
 8002e72:	6862      	ldr	r2, [r4, #4]
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f859 	bl	8002f2c <memchr>
 8002e7a:	b108      	cbz	r0, 8002e80 <_printf_i+0x1e8>
 8002e7c:	1b80      	subs	r0, r0, r6
 8002e7e:	6060      	str	r0, [r4, #4]
 8002e80:	6863      	ldr	r3, [r4, #4]
 8002e82:	6123      	str	r3, [r4, #16]
 8002e84:	2300      	movs	r3, #0
 8002e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e8a:	e7aa      	b.n	8002de2 <_printf_i+0x14a>
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	4649      	mov	r1, r9
 8002e90:	4640      	mov	r0, r8
 8002e92:	6923      	ldr	r3, [r4, #16]
 8002e94:	47d0      	blx	sl
 8002e96:	3001      	adds	r0, #1
 8002e98:	d0ad      	beq.n	8002df6 <_printf_i+0x15e>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	079b      	lsls	r3, r3, #30
 8002e9e:	d413      	bmi.n	8002ec8 <_printf_i+0x230>
 8002ea0:	68e0      	ldr	r0, [r4, #12]
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	bfb8      	it	lt
 8002ea8:	4618      	movlt	r0, r3
 8002eaa:	e7a6      	b.n	8002dfa <_printf_i+0x162>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4632      	mov	r2, r6
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	47d0      	blx	sl
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d09d      	beq.n	8002df6 <_printf_i+0x15e>
 8002eba:	3501      	adds	r5, #1
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	9903      	ldr	r1, [sp, #12]
 8002ec0:	1a5b      	subs	r3, r3, r1
 8002ec2:	42ab      	cmp	r3, r5
 8002ec4:	dcf2      	bgt.n	8002eac <_printf_i+0x214>
 8002ec6:	e7eb      	b.n	8002ea0 <_printf_i+0x208>
 8002ec8:	2500      	movs	r5, #0
 8002eca:	f104 0619 	add.w	r6, r4, #25
 8002ece:	e7f5      	b.n	8002ebc <_printf_i+0x224>
 8002ed0:	0800302f 	.word	0x0800302f
 8002ed4:	08003040 	.word	0x08003040

08002ed8 <memmove>:
 8002ed8:	4288      	cmp	r0, r1
 8002eda:	b510      	push	{r4, lr}
 8002edc:	eb01 0402 	add.w	r4, r1, r2
 8002ee0:	d902      	bls.n	8002ee8 <memmove+0x10>
 8002ee2:	4284      	cmp	r4, r0
 8002ee4:	4623      	mov	r3, r4
 8002ee6:	d807      	bhi.n	8002ef8 <memmove+0x20>
 8002ee8:	1e43      	subs	r3, r0, #1
 8002eea:	42a1      	cmp	r1, r4
 8002eec:	d008      	beq.n	8002f00 <memmove+0x28>
 8002eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ef6:	e7f8      	b.n	8002eea <memmove+0x12>
 8002ef8:	4601      	mov	r1, r0
 8002efa:	4402      	add	r2, r0
 8002efc:	428a      	cmp	r2, r1
 8002efe:	d100      	bne.n	8002f02 <memmove+0x2a>
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f0a:	e7f7      	b.n	8002efc <memmove+0x24>

08002f0c <_sbrk_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4d05      	ldr	r5, [pc, #20]	@ (8002f28 <_sbrk_r+0x1c>)
 8002f12:	4604      	mov	r4, r0
 8002f14:	4608      	mov	r0, r1
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	f7fe f814 	bl	8000f44 <_sbrk>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d102      	bne.n	8002f26 <_sbrk_r+0x1a>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	b103      	cbz	r3, 8002f26 <_sbrk_r+0x1a>
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
 8002f28:	20000550 	.word	0x20000550

08002f2c <memchr>:
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	b2c9      	uxtb	r1, r1
 8002f32:	4402      	add	r2, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	d101      	bne.n	8002f3e <memchr+0x12>
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e003      	b.n	8002f46 <memchr+0x1a>
 8002f3e:	7804      	ldrb	r4, [r0, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	428c      	cmp	r4, r1
 8002f44:	d1f6      	bne.n	8002f34 <memchr+0x8>
 8002f46:	bd10      	pop	{r4, pc}

08002f48 <_realloc_r>:
 8002f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4615      	mov	r5, r2
 8002f50:	460c      	mov	r4, r1
 8002f52:	b921      	cbnz	r1, 8002f5e <_realloc_r+0x16>
 8002f54:	4611      	mov	r1, r2
 8002f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5a:	f7ff bc47 	b.w	80027ec <_malloc_r>
 8002f5e:	b92a      	cbnz	r2, 8002f6c <_realloc_r+0x24>
 8002f60:	f7ff fbda 	bl	8002718 <_free_r>
 8002f64:	2400      	movs	r4, #0
 8002f66:	4620      	mov	r0, r4
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6c:	f000 f81a 	bl	8002fa4 <_malloc_usable_size_r>
 8002f70:	4285      	cmp	r5, r0
 8002f72:	4606      	mov	r6, r0
 8002f74:	d802      	bhi.n	8002f7c <_realloc_r+0x34>
 8002f76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002f7a:	d8f4      	bhi.n	8002f66 <_realloc_r+0x1e>
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f7ff fc34 	bl	80027ec <_malloc_r>
 8002f84:	4607      	mov	r7, r0
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0ec      	beq.n	8002f64 <_realloc_r+0x1c>
 8002f8a:	42b5      	cmp	r5, r6
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4621      	mov	r1, r4
 8002f90:	bf28      	it	cs
 8002f92:	4632      	movcs	r2, r6
 8002f94:	f7ff fbb2 	bl	80026fc <memcpy>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f7ff fbbc 	bl	8002718 <_free_r>
 8002fa0:	463c      	mov	r4, r7
 8002fa2:	e7e0      	b.n	8002f66 <_realloc_r+0x1e>

08002fa4 <_malloc_usable_size_r>:
 8002fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa8:	1f18      	subs	r0, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfbc      	itt	lt
 8002fae:	580b      	ldrlt	r3, [r1, r0]
 8002fb0:	18c0      	addlt	r0, r0, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
