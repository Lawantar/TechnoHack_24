
TechnoHack_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800ebf8  0800ebf8  0000fbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1e0  0800f1e0  00011248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1e0  0800f1e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1e8  0800f1e8  00011248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1e8  0800f1e8  000101e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1ec  0800f1ec  000101ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800f1f0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  20000248  0800f438  00011248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  0800f438  00011c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149bc  00000000  00000000  00011271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9b  00000000  00000000  00025c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  000288c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b7  00000000  00000000  00029e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7fb  00000000  00000000  0002aed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017882  00000000  00000000  000456d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093192  00000000  00000000  0005cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f00e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007764  00000000  00000000  000f012c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f7890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000248 	.word	0x20000248
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ebdc 	.word	0x0800ebdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000024c 	.word	0x2000024c
 800014c:	0800ebdc 	.word	0x0800ebdc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_ldivmod>:
 8001150:	b97b      	cbnz	r3, 8001172 <__aeabi_ldivmod+0x22>
 8001152:	b972      	cbnz	r2, 8001172 <__aeabi_ldivmod+0x22>
 8001154:	2900      	cmp	r1, #0
 8001156:	bfbe      	ittt	lt
 8001158:	2000      	movlt	r0, #0
 800115a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800115e:	e006      	blt.n	800116e <__aeabi_ldivmod+0x1e>
 8001160:	bf08      	it	eq
 8001162:	2800      	cmpeq	r0, #0
 8001164:	bf1c      	itt	ne
 8001166:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800116a:	f04f 30ff 	movne.w	r0, #4294967295
 800116e:	f000 b9e9 	b.w	8001544 <__aeabi_idiv0>
 8001172:	f1ad 0c08 	sub.w	ip, sp, #8
 8001176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800117a:	2900      	cmp	r1, #0
 800117c:	db09      	blt.n	8001192 <__aeabi_ldivmod+0x42>
 800117e:	2b00      	cmp	r3, #0
 8001180:	db1a      	blt.n	80011b8 <__aeabi_ldivmod+0x68>
 8001182:	f000 f883 	bl	800128c <__udivmoddi4>
 8001186:	f8dd e004 	ldr.w	lr, [sp, #4]
 800118a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800118e:	b004      	add	sp, #16
 8001190:	4770      	bx	lr
 8001192:	4240      	negs	r0, r0
 8001194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	db1b      	blt.n	80011d4 <__aeabi_ldivmod+0x84>
 800119c:	f000 f876 	bl	800128c <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4240      	negs	r0, r0
 80011ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b0:	4252      	negs	r2, r2
 80011b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011b6:	4770      	bx	lr
 80011b8:	4252      	negs	r2, r2
 80011ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011be:	f000 f865 	bl	800128c <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4240      	negs	r0, r0
 80011ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d2:	4770      	bx	lr
 80011d4:	4252      	negs	r2, r2
 80011d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011da:	f000 f857 	bl	800128c <__udivmoddi4>
 80011de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e6:	b004      	add	sp, #16
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	4770      	bx	lr

080011f0 <__aeabi_uldivmod>:
 80011f0:	b953      	cbnz	r3, 8001208 <__aeabi_uldivmod+0x18>
 80011f2:	b94a      	cbnz	r2, 8001208 <__aeabi_uldivmod+0x18>
 80011f4:	2900      	cmp	r1, #0
 80011f6:	bf08      	it	eq
 80011f8:	2800      	cmpeq	r0, #0
 80011fa:	bf1c      	itt	ne
 80011fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001200:	f04f 30ff 	movne.w	r0, #4294967295
 8001204:	f000 b99e 	b.w	8001544 <__aeabi_idiv0>
 8001208:	f1ad 0c08 	sub.w	ip, sp, #8
 800120c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001210:	f000 f83c 	bl	800128c <__udivmoddi4>
 8001214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800121c:	b004      	add	sp, #16
 800121e:	4770      	bx	lr

08001220 <__aeabi_d2lz>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f7ff fbd1 	bl	80009d0 <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x1c>
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4620      	mov	r0, r4
 800123e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f947 	bl	80004ec <__aeabi_dmul>
 800125e:	f7ff fc1d 	bl	8000a9c <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f8c8 	bl	80003f8 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f93e 	bl	80004ec <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ff80 	bl	800017c <__aeabi_dsub>
 800127c:	f7ff fc0e 	bl	8000a9c <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <__udivmoddi4>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	9d08      	ldr	r5, [sp, #32]
 8001292:	460c      	mov	r4, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d14e      	bne.n	8001336 <__udivmoddi4+0xaa>
 8001298:	4694      	mov	ip, r2
 800129a:	458c      	cmp	ip, r1
 800129c:	4686      	mov	lr, r0
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	d962      	bls.n	800136a <__udivmoddi4+0xde>
 80012a4:	b14a      	cbz	r2, 80012ba <__udivmoddi4+0x2e>
 80012a6:	f1c2 0320 	rsb	r3, r2, #32
 80012aa:	4091      	lsls	r1, r2
 80012ac:	fa20 f303 	lsr.w	r3, r0, r3
 80012b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b4:	4319      	orrs	r1, r3
 80012b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80012ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012be:	fbb1 f4f7 	udiv	r4, r1, r7
 80012c2:	fb07 1114 	mls	r1, r7, r4, r1
 80012c6:	fa1f f68c 	uxth.w	r6, ip
 80012ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	fb04 f106 	mul.w	r1, r4, r6
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d90a      	bls.n	80012f0 <__udivmoddi4+0x64>
 80012da:	eb1c 0303 	adds.w	r3, ip, r3
 80012de:	f104 30ff 	add.w	r0, r4, #4294967295
 80012e2:	f080 8110 	bcs.w	8001506 <__udivmoddi4+0x27a>
 80012e6:	4299      	cmp	r1, r3
 80012e8:	f240 810d 	bls.w	8001506 <__udivmoddi4+0x27a>
 80012ec:	3c02      	subs	r4, #2
 80012ee:	4463      	add	r3, ip
 80012f0:	1a59      	subs	r1, r3, r1
 80012f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80012f6:	fb07 1110 	mls	r1, r7, r0, r1
 80012fa:	fb00 f606 	mul.w	r6, r0, r6
 80012fe:	fa1f f38e 	uxth.w	r3, lr
 8001302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001306:	429e      	cmp	r6, r3
 8001308:	d90a      	bls.n	8001320 <__udivmoddi4+0x94>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001312:	f080 80fa 	bcs.w	800150a <__udivmoddi4+0x27e>
 8001316:	429e      	cmp	r6, r3
 8001318:	f240 80f7 	bls.w	800150a <__udivmoddi4+0x27e>
 800131c:	4463      	add	r3, ip
 800131e:	3802      	subs	r0, #2
 8001320:	2100      	movs	r1, #0
 8001322:	1b9b      	subs	r3, r3, r6
 8001324:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001328:	b11d      	cbz	r5, 8001332 <__udivmoddi4+0xa6>
 800132a:	40d3      	lsrs	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	e9c5 3200 	strd	r3, r2, [r5]
 8001332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001336:	428b      	cmp	r3, r1
 8001338:	d905      	bls.n	8001346 <__udivmoddi4+0xba>
 800133a:	b10d      	cbz	r5, 8001340 <__udivmoddi4+0xb4>
 800133c:	e9c5 0100 	strd	r0, r1, [r5]
 8001340:	2100      	movs	r1, #0
 8001342:	4608      	mov	r0, r1
 8001344:	e7f5      	b.n	8001332 <__udivmoddi4+0xa6>
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d146      	bne.n	80013dc <__udivmoddi4+0x150>
 800134e:	42a3      	cmp	r3, r4
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0xcc>
 8001352:	4290      	cmp	r0, r2
 8001354:	f0c0 80ee 	bcc.w	8001534 <__udivmoddi4+0x2a8>
 8001358:	1a86      	subs	r6, r0, r2
 800135a:	eb64 0303 	sbc.w	r3, r4, r3
 800135e:	2001      	movs	r0, #1
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0e6      	beq.n	8001332 <__udivmoddi4+0xa6>
 8001364:	e9c5 6300 	strd	r6, r3, [r5]
 8001368:	e7e3      	b.n	8001332 <__udivmoddi4+0xa6>
 800136a:	2a00      	cmp	r2, #0
 800136c:	f040 808f 	bne.w	800148e <__udivmoddi4+0x202>
 8001370:	eba1 040c 	sub.w	r4, r1, ip
 8001374:	2101      	movs	r1, #1
 8001376:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800137a:	fa1f f78c 	uxth.w	r7, ip
 800137e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001382:	fb08 4416 	mls	r4, r8, r6, r4
 8001386:	fb07 f006 	mul.w	r0, r7, r6
 800138a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800138e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d908      	bls.n	80013a8 <__udivmoddi4+0x11c>
 8001396:	eb1c 0303 	adds.w	r3, ip, r3
 800139a:	f106 34ff 	add.w	r4, r6, #4294967295
 800139e:	d202      	bcs.n	80013a6 <__udivmoddi4+0x11a>
 80013a0:	4298      	cmp	r0, r3
 80013a2:	f200 80cb 	bhi.w	800153c <__udivmoddi4+0x2b0>
 80013a6:	4626      	mov	r6, r4
 80013a8:	1a1c      	subs	r4, r3, r0
 80013aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ae:	fb08 4410 	mls	r4, r8, r0, r4
 80013b2:	fb00 f707 	mul.w	r7, r0, r7
 80013b6:	fa1f f38e 	uxth.w	r3, lr
 80013ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013be:	429f      	cmp	r7, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x148>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80013ca:	d202      	bcs.n	80013d2 <__udivmoddi4+0x146>
 80013cc:	429f      	cmp	r7, r3
 80013ce:	f200 80ae 	bhi.w	800152e <__udivmoddi4+0x2a2>
 80013d2:	4620      	mov	r0, r4
 80013d4:	1bdb      	subs	r3, r3, r7
 80013d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013da:	e7a5      	b.n	8001328 <__udivmoddi4+0x9c>
 80013dc:	f1c1 0720 	rsb	r7, r1, #32
 80013e0:	408b      	lsls	r3, r1
 80013e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ea:	fa24 f607 	lsr.w	r6, r4, r7
 80013ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013f2:	fbb6 f8f9 	udiv	r8, r6, r9
 80013f6:	fa1f fe8c 	uxth.w	lr, ip
 80013fa:	fb09 6618 	mls	r6, r9, r8, r6
 80013fe:	fa20 f307 	lsr.w	r3, r0, r7
 8001402:	408c      	lsls	r4, r1
 8001404:	fa00 fa01 	lsl.w	sl, r0, r1
 8001408:	fb08 f00e 	mul.w	r0, r8, lr
 800140c:	431c      	orrs	r4, r3
 800140e:	0c23      	lsrs	r3, r4, #16
 8001410:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001414:	4298      	cmp	r0, r3
 8001416:	fa02 f201 	lsl.w	r2, r2, r1
 800141a:	d90a      	bls.n	8001432 <__udivmoddi4+0x1a6>
 800141c:	eb1c 0303 	adds.w	r3, ip, r3
 8001420:	f108 36ff 	add.w	r6, r8, #4294967295
 8001424:	f080 8081 	bcs.w	800152a <__udivmoddi4+0x29e>
 8001428:	4298      	cmp	r0, r3
 800142a:	d97e      	bls.n	800152a <__udivmoddi4+0x29e>
 800142c:	f1a8 0802 	sub.w	r8, r8, #2
 8001430:	4463      	add	r3, ip
 8001432:	1a1e      	subs	r6, r3, r0
 8001434:	fbb6 f3f9 	udiv	r3, r6, r9
 8001438:	fb09 6613 	mls	r6, r9, r3, r6
 800143c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001440:	b2a4      	uxth	r4, r4
 8001442:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001446:	45a6      	cmp	lr, r4
 8001448:	d908      	bls.n	800145c <__udivmoddi4+0x1d0>
 800144a:	eb1c 0404 	adds.w	r4, ip, r4
 800144e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001452:	d266      	bcs.n	8001522 <__udivmoddi4+0x296>
 8001454:	45a6      	cmp	lr, r4
 8001456:	d964      	bls.n	8001522 <__udivmoddi4+0x296>
 8001458:	3b02      	subs	r3, #2
 800145a:	4464      	add	r4, ip
 800145c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001460:	fba0 8302 	umull	r8, r3, r0, r2
 8001464:	eba4 040e 	sub.w	r4, r4, lr
 8001468:	429c      	cmp	r4, r3
 800146a:	46c6      	mov	lr, r8
 800146c:	461e      	mov	r6, r3
 800146e:	d350      	bcc.n	8001512 <__udivmoddi4+0x286>
 8001470:	d04d      	beq.n	800150e <__udivmoddi4+0x282>
 8001472:	b155      	cbz	r5, 800148a <__udivmoddi4+0x1fe>
 8001474:	ebba 030e 	subs.w	r3, sl, lr
 8001478:	eb64 0406 	sbc.w	r4, r4, r6
 800147c:	fa04 f707 	lsl.w	r7, r4, r7
 8001480:	40cb      	lsrs	r3, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c5 7400 	strd	r7, r4, [r5]
 800148a:	2100      	movs	r1, #0
 800148c:	e751      	b.n	8001332 <__udivmoddi4+0xa6>
 800148e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001492:	f1c2 0320 	rsb	r3, r2, #32
 8001496:	40d9      	lsrs	r1, r3
 8001498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800149c:	fa20 f303 	lsr.w	r3, r0, r3
 80014a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80014a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80014a8:	fb08 1110 	mls	r1, r8, r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	431c      	orrs	r4, r3
 80014b0:	fa1f f78c 	uxth.w	r7, ip
 80014b4:	0c23      	lsrs	r3, r4, #16
 80014b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014ba:	fb00 f107 	mul.w	r1, r0, r7
 80014be:	4299      	cmp	r1, r3
 80014c0:	d908      	bls.n	80014d4 <__udivmoddi4+0x248>
 80014c2:	eb1c 0303 	adds.w	r3, ip, r3
 80014c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80014ca:	d22c      	bcs.n	8001526 <__udivmoddi4+0x29a>
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d92a      	bls.n	8001526 <__udivmoddi4+0x29a>
 80014d0:	3802      	subs	r0, #2
 80014d2:	4463      	add	r3, ip
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	fbb3 f1f8 	udiv	r1, r3, r8
 80014da:	fb08 3311 	mls	r3, r8, r1, r3
 80014de:	b2a4      	uxth	r4, r4
 80014e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014e4:	fb01 f307 	mul.w	r3, r1, r7
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d908      	bls.n	80014fe <__udivmoddi4+0x272>
 80014ec:	eb1c 0404 	adds.w	r4, ip, r4
 80014f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80014f4:	d213      	bcs.n	800151e <__udivmoddi4+0x292>
 80014f6:	42a3      	cmp	r3, r4
 80014f8:	d911      	bls.n	800151e <__udivmoddi4+0x292>
 80014fa:	3902      	subs	r1, #2
 80014fc:	4464      	add	r4, ip
 80014fe:	1ae4      	subs	r4, r4, r3
 8001500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001504:	e73b      	b.n	800137e <__udivmoddi4+0xf2>
 8001506:	4604      	mov	r4, r0
 8001508:	e6f2      	b.n	80012f0 <__udivmoddi4+0x64>
 800150a:	4608      	mov	r0, r1
 800150c:	e708      	b.n	8001320 <__udivmoddi4+0x94>
 800150e:	45c2      	cmp	sl, r8
 8001510:	d2af      	bcs.n	8001472 <__udivmoddi4+0x1e6>
 8001512:	ebb8 0e02 	subs.w	lr, r8, r2
 8001516:	eb63 060c 	sbc.w	r6, r3, ip
 800151a:	3801      	subs	r0, #1
 800151c:	e7a9      	b.n	8001472 <__udivmoddi4+0x1e6>
 800151e:	4631      	mov	r1, r6
 8001520:	e7ed      	b.n	80014fe <__udivmoddi4+0x272>
 8001522:	4603      	mov	r3, r0
 8001524:	e79a      	b.n	800145c <__udivmoddi4+0x1d0>
 8001526:	4630      	mov	r0, r6
 8001528:	e7d4      	b.n	80014d4 <__udivmoddi4+0x248>
 800152a:	46b0      	mov	r8, r6
 800152c:	e781      	b.n	8001432 <__udivmoddi4+0x1a6>
 800152e:	4463      	add	r3, ip
 8001530:	3802      	subs	r0, #2
 8001532:	e74f      	b.n	80013d4 <__udivmoddi4+0x148>
 8001534:	4606      	mov	r6, r0
 8001536:	4623      	mov	r3, r4
 8001538:	4608      	mov	r0, r1
 800153a:	e711      	b.n	8001360 <__udivmoddi4+0xd4>
 800153c:	3e02      	subs	r6, #2
 800153e:	4463      	add	r3, ip
 8001540:	e732      	b.n	80013a8 <__udivmoddi4+0x11c>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fae7 	bl	8001b30 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fb02 	bl	8001b70 <SX1278_hw_SPIReadByte>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fa9f 	bl	8001aba <SX1278_hw_SetNSS>
	return tmp;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	4613      	mov	r3, r2
 8001594:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa8c 	bl	8001aba <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f000 fabd 	bl	8001b30 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	78ba      	ldrb	r2, [r7, #2]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fab6 	bl	8001b30 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa75 	bl	8001aba <SX1278_hw_SetNSS>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	461a      	mov	r2, r3
 80015e4:	460b      	mov	r3, r1
 80015e6:	72fb      	strb	r3, [r7, #11]
 80015e8:	4613      	mov	r3, r2
 80015ea:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80015ec:	7abb      	ldrb	r3, [r7, #10]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d929      	bls.n	8001646 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fa5e 	bl	8001aba <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f000 fa8f 	bl	8001b30 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	e00b      	b.n	8001630 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f000 fa83 	bl	8001b30 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	3301      	adds	r3, #1
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	7dfa      	ldrb	r2, [r7, #23]
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3ef      	bcc.n	8001618 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fa3b 	bl	8001aba <SX1278_hw_SetNSS>
 8001644:	e000      	b.n	8001648 <SX1278_SPIBurstWrite+0x70>
		return;
 8001646:	bf00      	nop
	}
}
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f90d 	bl	8001878 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 faac 	bl	8001bbc <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f917 	bl	8001898 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	04d9      	lsls	r1, r3, #19
 800167a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800167e:	04d0      	lsls	r0, r2, #19
 8001680:	4a6f      	ldr	r2, [pc, #444]	@ (8001840 <SX1278_config+0x1f0>)
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f7ff fdb3 	bl	80011f0 <__aeabi_uldivmod>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8001692:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	0c02      	lsrs	r2, r0, #16
 80016a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016a4:	0c0b      	lsrs	r3, r1, #16
 80016a6:	b2d3      	uxtb	r3, r2
 80016a8:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80016aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	0a02      	lsrs	r2, r0, #8
 80016b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016bc:	0a0b      	lsrs	r3, r1, #8
 80016be:	b2d3      	uxtb	r3, r2
 80016c0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80016c2:	7c3b      	ldrb	r3, [r7, #16]
 80016c4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	2303      	movs	r3, #3
 80016cc:	2106      	movs	r1, #6
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff82 	bl	80015d8 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80016d4:	2234      	movs	r2, #52	@ 0x34
 80016d6:	2139      	movs	r1, #57	@ 0x39
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff54 	bl	8001586 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7c1b      	ldrb	r3, [r3, #16]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b57      	ldr	r3, [pc, #348]	@ (8001844 <SX1278_config+0x1f4>)
 80016e6:	5c9b      	ldrb	r3, [r3, r2]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2109      	movs	r1, #9
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff4a 	bl	8001586 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80016f2:	220b      	movs	r2, #11
 80016f4:	210b      	movs	r1, #11
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff45 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80016fc:	2223      	movs	r2, #35	@ 0x23
 80016fe:	210c      	movs	r1, #12
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff40 	bl	8001586 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7c5b      	ldrb	r3, [r3, #17]
 800170a:	461a      	mov	r2, r3
 800170c:	4b4e      	ldr	r3, [pc, #312]	@ (8001848 <SX1278_config+0x1f8>)
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d147      	bne.n	80017a4 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7c9b      	ldrb	r3, [r3, #18]
 8001718:	461a      	mov	r2, r3
 800171a:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <SX1278_config+0x1fc>)
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7cdb      	ldrb	r3, [r3, #19]
 8001726:	4619      	mov	r1, r3
 8001728:	4b49      	ldr	r3, [pc, #292]	@ (8001850 <SX1278_config+0x200>)
 800172a:	5c5b      	ldrb	r3, [r3, r1]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001734:	3301      	adds	r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	211d      	movs	r1, #29
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff22 	bl	8001586 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7c5b      	ldrb	r3, [r3, #17]
 8001746:	461a      	mov	r2, r3
 8001748:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <SX1278_config+0x1f8>)
 800174a:	5c9b      	ldrb	r3, [r3, r2]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7d1b      	ldrb	r3, [r3, #20]
 8001754:	4619      	mov	r1, r3
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <SX1278_config+0x204>)
 8001758:	5c5b      	ldrb	r3, [r3, r1]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001762:	3303      	adds	r3, #3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	211e      	movs	r1, #30
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff0b 	bl	8001586 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001770:	2131      	movs	r1, #49	@ 0x31
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fee8 	bl	8001548 <SX1278_SPIRead>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f043 0305 	orr.w	r3, r3, #5
 800178a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	461a      	mov	r2, r3
 8001790:	2131      	movs	r1, #49	@ 0x31
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fef7 	bl	8001586 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001798:	220c      	movs	r2, #12
 800179a:	2137      	movs	r1, #55	@ 0x37
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fef2 	bl	8001586 <SX1278_SPIWrite>
 80017a2:	e029      	b.n	80017f8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7c9b      	ldrb	r3, [r3, #18]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b28      	ldr	r3, [pc, #160]	@ (800184c <SX1278_config+0x1fc>)
 80017ac:	5c9b      	ldrb	r3, [r3, r2]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7cdb      	ldrb	r3, [r3, #19]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <SX1278_config+0x200>)
 80017ba:	5c5b      	ldrb	r3, [r3, r1]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80017c0:	4413      	add	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	211d      	movs	r1, #29
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fedc 	bl	8001586 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7c5b      	ldrb	r3, [r3, #17]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <SX1278_config+0x1f8>)
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7d1b      	ldrb	r3, [r3, #20]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <SX1278_config+0x204>)
 80017e4:	5c5b      	ldrb	r3, [r3, r1]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80017ea:	4413      	add	r3, r2
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	211e      	movs	r1, #30
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fec7 	bl	8001586 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80017f8:	2204      	movs	r2, #4
 80017fa:	2126      	movs	r1, #38	@ 0x26
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fec2 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001802:	2208      	movs	r2, #8
 8001804:	211f      	movs	r1, #31
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff febd 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff feb8 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001816:	2208      	movs	r2, #8
 8001818:	2121      	movs	r1, #33	@ 0x21
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff feb3 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001820:	2201      	movs	r2, #1
 8001822:	2141      	movs	r1, #65	@ 0x41
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff feae 	bl	8001586 <SX1278_SPIWrite>
	module->readBytes = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f810 	bl	8001858 <SX1278_standby>
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	01e84800 	.word	0x01e84800
 8001844:	0800ec10 	.word	0x0800ec10
 8001848:	0800ec14 	.word	0x0800ec14
 800184c:	0800ec1c 	.word	0x0800ec1c
 8001850:	0800ec28 	.word	0x0800ec28
 8001854:	0800ec2c 	.word	0x0800ec2c

08001858 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001860:	2209      	movs	r2, #9
 8001862:	2101      	movs	r1, #1
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fe8e 	bl	8001586 <SX1278_SPIWrite>
	module->status = STANDBY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	759a      	strb	r2, [r3, #22]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001880:	2208      	movs	r2, #8
 8001882:	2101      	movs	r1, #1
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fe7e 	bl	8001586 <SX1278_SPIWrite>
	module->status = SLEEP;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	759a      	strb	r2, [r3, #22]
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80018a0:	2288      	movs	r2, #136	@ 0x88
 80018a2:	2101      	movs	r1, #1
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe6e 	bl	8001586 <SX1278_SPIWrite>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80018ba:	22ff      	movs	r2, #255	@ 0xff
 80018bc:	2112      	movs	r1, #18
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fe61 	bl	8001586 <SX1278_SPIWrite>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	460b      	mov	r3, r1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7afa      	ldrb	r2, [r7, #11]
 80018de:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff feb5 	bl	8001650 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80018e6:	2287      	movs	r2, #135	@ 0x87
 80018e8:	214d      	movs	r1, #77	@ 0x4d
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fe4b 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80018f0:	2200      	movs	r2, #0
 80018f2:	2124      	movs	r1, #36	@ 0x24
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fe46 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80018fa:	2241      	movs	r2, #65	@ 0x41
 80018fc:	2140      	movs	r1, #64	@ 0x40
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fe41 	bl	8001586 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff ffd4 	bl	80018b2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800190a:	22f7      	movs	r2, #247	@ 0xf7
 800190c:	2111      	movs	r1, #17
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff fe39 	bl	8001586 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	461a      	mov	r2, r3
 8001918:	2122      	movs	r1, #34	@ 0x22
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fe33 	bl	8001586 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001920:	210e      	movs	r1, #14
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fe10 	bl	8001548 <SX1278_SPIRead>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	461a      	mov	r2, r3
 8001930:	210d      	movs	r1, #13
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fe27 	bl	8001586 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001938:	2122      	movs	r1, #34	@ 0x22
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fe04 	bl	8001548 <SX1278_SPIRead>
 8001940:	4603      	mov	r3, r0
 8001942:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001944:	7dba      	ldrb	r2, [r7, #22]
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	429a      	cmp	r2, r3
 800194a:	d104      	bne.n	8001956 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2202      	movs	r2, #2
 8001950:	759a      	strb	r2, [r3, #22]
			return 1;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3b01      	subs	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ea      	bne.n	8001938 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8be 	bl	8001ae8 <SX1278_hw_Reset>
			SX1278_config(module);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fe6f 	bl	8001650 <SX1278_config>
			return 0;
 8001972:	2300      	movs	r3, #0
		}
	}
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	2100      	movs	r1, #0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff fe20 	bl	80015d8 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001998:	228b      	movs	r2, #139	@ 0x8b
 800199a:	2101      	movs	r1, #1
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fdf2 	bl	8001586 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f913 	bl	8001bd2 <SX1278_hw_GetDIO0>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80019b2:	2112      	movs	r1, #18
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff fdc7 	bl	8001548 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff ff79 	bl	80018b2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff ff49 	bl	8001858 <SX1278_standby>
			return 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e013      	b.n	80019f2 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f884 	bl	8001ae8 <SX1278_hw_Reset>
			SX1278_config(module);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fe35 	bl	8001650 <SX1278_config>
			return 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e003      	b.n	80019f2 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 f8e6 	bl	8001bbc <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80019f0:	e7d7      	b.n	80019a2 <SX1278_LoRaTxPacket+0x26>
	}
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f840 	bl	8001a90 <SX1278_hw_init>
	module->frequency = frequency;
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7e3a      	ldrb	r2, [r7, #24]
 8001a1e:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	7f3a      	ldrb	r2, [r7, #28]
 8001a24:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a2c:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a34:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a3c:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001a44:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fe02 	bl	8001650 <SX1278_config>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ff2e 	bl	80018cc <SX1278_LoRaEntryTx>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff ff7d 	bl	800197c <SX1278_LoRaTxPacket>
 8001a82:	4603      	mov	r3, r0
 8001a84:	e000      	b.n	8001a88 <SX1278_transmit+0x34>
	}
	return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f80d 	bl	8001aba <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6858      	ldr	r0, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	f003 fb16 	bl	80050de <HAL_GPIO_WritePin>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6958      	ldr	r0, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b299      	uxth	r1, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	f003 faff 	bl	80050de <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001af0:	2101      	movs	r1, #1
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffe1 	bl	8001aba <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6858      	ldr	r0, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	f003 faea 	bl	80050de <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 f856 	bl	8001bbc <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f003 fade 	bl	80050de <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f000 f84a 	bl	8001bbc <SX1278_hw_DelayMs>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffbb 	bl	8001aba <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6998      	ldr	r0, [r3, #24]
 8001b48:	1cf9      	adds	r1, r7, #3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f005 fc86 	bl	8007460 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001b54:	bf00      	nop
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 ff73 	bl	8007a46 <HAL_SPI_GetState>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d1f7      	bne.n	8001b56 <SX1278_hw_SPICommand+0x26>
		;
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff99 	bl	8001aba <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6998      	ldr	r0, [r3, #24]
 8001b8c:	f107 020e 	add.w	r2, r7, #14
 8001b90:	f107 010f 	add.w	r1, r7, #15
 8001b94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f005 fda3 	bl	80076e6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001ba0:	bf00      	nop
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 ff4d 	bl	8007a46 <HAL_SPI_GetState>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d1f7      	bne.n	8001ba2 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f002 ffbd 	bl	8004b44 <HAL_Delay>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f003 fa62 	bl	80050b0 <HAL_GPIO_ReadPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	715a      	strb	r2, [r3, #5]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b08a      	sub	sp, #40	@ 0x28
 8001c3a:	af04      	add	r7, sp, #16
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	8af9      	ldrh	r1, [r7, #22]
 8001c56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	f003 fffa 	bl	8005c60 <HAL_I2C_Mem_Read>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001c72:	7d7b      	ldrb	r3, [r7, #21]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	7d3b      	ldrb	r3, [r7, #20]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	801a      	strh	r2, [r3, #0]
		return true;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <read_register16+0x56>
	} else
		return false;
 8001c8a:	2300      	movs	r3, #0

}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08b      	sub	sp, #44	@ 0x2c
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	72fb      	strb	r3, [r7, #11]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	7abb      	ldrb	r3, [r7, #10]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	8af9      	ldrh	r1, [r7, #22]
 8001cbe:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001cc2:	9402      	str	r4, [sp, #8]
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f003 ffc8 	bl	8005c60 <HAL_I2C_Mem_Read>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <read_data+0x46>
		return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <read_data+0x48>
	else
		return 1;
 8001cda:	2301      	movs	r3, #1

}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}

08001ce4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2188      	movs	r1, #136	@ 0x88
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff9f 	bl	8001c36 <read_register16>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06f      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3302      	adds	r3, #2
 8001d02:	461a      	mov	r2, r3
 8001d04:	218a      	movs	r1, #138	@ 0x8a
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff95 	bl	8001c36 <read_register16>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d065      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3304      	adds	r3, #4
 8001d16:	461a      	mov	r2, r3
 8001d18:	218c      	movs	r1, #140	@ 0x8c
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff8b 	bl	8001c36 <read_register16>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d05b      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3306      	adds	r3, #6
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	218e      	movs	r1, #142	@ 0x8e
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff81 	bl	8001c36 <read_register16>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d051      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2190      	movs	r1, #144	@ 0x90
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff77 	bl	8001c36 <read_register16>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d047      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	330a      	adds	r3, #10
 8001d52:	461a      	mov	r2, r3
 8001d54:	2192      	movs	r1, #146	@ 0x92
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff6d 	bl	8001c36 <read_register16>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03d      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	330c      	adds	r3, #12
 8001d66:	461a      	mov	r2, r3
 8001d68:	2194      	movs	r1, #148	@ 0x94
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff63 	bl	8001c36 <read_register16>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d033      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	330e      	adds	r3, #14
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2196      	movs	r1, #150	@ 0x96
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff59 	bl	8001c36 <read_register16>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d029      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3310      	adds	r3, #16
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2198      	movs	r1, #152	@ 0x98
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff4f 	bl	8001c36 <read_register16>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01f      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3312      	adds	r3, #18
 8001da2:	461a      	mov	r2, r3
 8001da4:	219a      	movs	r1, #154	@ 0x9a
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff45 	bl	8001c36 <read_register16>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3314      	adds	r3, #20
 8001db6:	461a      	mov	r2, r3
 8001db8:	219c      	movs	r1, #156	@ 0x9c
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff3b 	bl	8001c36 <read_register16>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001dca:	461a      	mov	r2, r3
 8001dcc:	219e      	movs	r1, #158	@ 0x9e
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff31 	bl	8001c36 <read_register16>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <read_calibration_data+0xfa>

		return true;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <read_calibration_data+0xfc>
	}

	return false;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f103 0218 	add.w	r2, r3, #24
 8001df6:	2301      	movs	r3, #1
 8001df8:	21a1      	movs	r1, #161	@ 0xa1
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4a 	bl	8001c94 <read_data>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d14b      	bne.n	8001e9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	331a      	adds	r3, #26
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21e1      	movs	r1, #225	@ 0xe1
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff11 	bl	8001c36 <read_register16>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d041      	beq.n	8001e9e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f103 021c 	add.w	r2, r3, #28
 8001e20:	2301      	movs	r3, #1
 8001e22:	21e3      	movs	r1, #227	@ 0xe3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff35 	bl	8001c94 <read_data>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d136      	bne.n	8001e9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001e30:	f107 030e 	add.w	r3, r7, #14
 8001e34:	461a      	mov	r2, r3
 8001e36:	21e4      	movs	r1, #228	@ 0xe4
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fefc 	bl	8001c36 <read_register16>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d02c      	beq.n	8001e9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	461a      	mov	r2, r3
 8001e4a:	21e5      	movs	r1, #229	@ 0xe5
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fef2 	bl	8001c36 <read_register16>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001e5e:	2301      	movs	r3, #1
 8001e60:	21e7      	movs	r1, #231	@ 0xe7
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ff16 	bl	8001c94 <read_data>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d117      	bne.n	8001e9e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	121b      	asrs	r3, r3, #8
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001e8e:	89bb      	ldrh	r3, [r7, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	841a      	strh	r2, [r3, #32]

		return true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	89f9      	ldrh	r1, [r7, #14]
 8001eca:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	1cbb      	adds	r3, r7, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f003 fdc7 	bl	8005a6c <HAL_I2C_Mem_Write>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <write_register8+0x40>
		return false;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <write_register8+0x42>
	else
		return true;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <bmp280_init>:

uint8_t bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001f00:	2b76      	cmp	r3, #118	@ 0x76
 8001f02:	d005      	beq.n	8001f10 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001f08:	2b77      	cmp	r3, #119	@ 0x77
 8001f0a:	d001      	beq.n	8001f10 <bmp280_init+0x1e>

		return 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e099      	b.n	8002044 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f16:	2301      	movs	r3, #1
 8001f18:	21d0      	movs	r1, #208	@ 0xd0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff feba 	bl	8001c94 <read_data>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <bmp280_init+0x38>
		return 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08c      	b.n	8002044 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f30:	2b58      	cmp	r3, #88	@ 0x58
 8001f32:	d006      	beq.n	8001f42 <bmp280_init+0x50>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f3a:	2b60      	cmp	r3, #96	@ 0x60
 8001f3c:	d001      	beq.n	8001f42 <bmp280_init+0x50>

		return 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e080      	b.n	8002044 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001f42:	22b6      	movs	r2, #182	@ 0xb6
 8001f44:	21e0      	movs	r1, #224	@ 0xe0
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffae 	bl	8001ea8 <write_register8>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <bmp280_init+0x64>
		return 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e076      	b.n	8002044 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	21f3      	movs	r1, #243	@ 0xf3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fe98 	bl	8001c94 <read_data>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f5      	bne.n	8001f56 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001f6a:	7b3b      	ldrb	r3, [r7, #12]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff feb5 	bl	8001ce4 <read_calibration_data>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d100      	bne.n	8001f88 <bmp280_init+0x96>
 8001f86:	e001      	b.n	8001f8c <bmp280_init+0x9a>
		return 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e05b      	b.n	8002044 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f92:	2b60      	cmp	r3, #96	@ 0x60
 8001f94:	d10a      	bne.n	8001fac <bmp280_init+0xba>
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff26 	bl	8001de8 <read_hum_calibration_data>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <bmp280_init+0xba>
		return 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e04b      	b.n	8002044 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	795b      	ldrb	r3, [r3, #5]
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	21f5      	movs	r1, #245	@ 0xf5
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff6d 	bl	8001ea8 <write_register8>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <bmp280_init+0xe6>
		return 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e035      	b.n	8002044 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25a      	sxtb	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002004:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800200c:	2b60      	cmp	r3, #96	@ 0x60
 800200e:	d10d      	bne.n	800202c <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	461a      	mov	r2, r3
 800201a:	21f2      	movs	r1, #242	@ 0xf2
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff43 	bl	8001ea8 <write_register8>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <bmp280_init+0x13a>
			return 1;
 8002028:	2301      	movs	r3, #1
 800202a:	e00b      	b.n	8002044 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	461a      	mov	r2, r3
 8002030:	21f4      	movs	r1, #244	@ 0xf4
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff38 	bl	8001ea8 <write_register8>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <bmp280_init+0x150>
		return 1;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <bmp280_init+0x152>
	}

	return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	10da      	asrs	r2, r3, #3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800206e:	12db      	asrs	r3, r3, #11
 8002070:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	111b      	asrs	r3, r3, #4
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	1112      	asrs	r2, r2, #4
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	8809      	ldrh	r1, [r1, #0]
 8002084:	1a52      	subs	r2, r2, r1
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002096:	139b      	asrs	r3, r3, #14
 8002098:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	441a      	add	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3380      	adds	r3, #128	@ 0x80
 80020b0:	121b      	asrs	r3, r3, #8
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80020bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c0:	b0cc      	sub	sp, #304	@ 0x130
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80020c8:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80020cc:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80020d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020d4:	17da      	asrs	r2, r3, #31
 80020d6:	461c      	mov	r4, r3
 80020d8:	4615      	mov	r5, r2
 80020da:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80020de:	f145 3bff 	adc.w	fp, r5, #4294967295
 80020e2:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80020e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80020ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020ee:	fb03 f102 	mul.w	r1, r3, r2
 80020f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80020f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	18ca      	adds	r2, r1, r3
 8002100:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002104:	fba3 8903 	umull	r8, r9, r3, r3
 8002108:	eb02 0309 	add.w	r3, r2, r9
 800210c:	4699      	mov	r9, r3
 800210e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002112:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002116:	b21b      	sxth	r3, r3
 8002118:	17da      	asrs	r2, r3, #31
 800211a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800211e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002122:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002126:	4603      	mov	r3, r0
 8002128:	fb03 f209 	mul.w	r2, r3, r9
 800212c:	460b      	mov	r3, r1
 800212e:	fb08 f303 	mul.w	r3, r8, r3
 8002132:	4413      	add	r3, r2
 8002134:	4602      	mov	r2, r0
 8002136:	fba8 2102 	umull	r2, r1, r8, r2
 800213a:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800213e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8002142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002146:	4413      	add	r3, r2
 8002148:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800214c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8002150:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8002154:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800215c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002160:	b21b      	sxth	r3, r3
 8002162:	17da      	asrs	r2, r3, #31
 8002164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002168:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800216c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002170:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002174:	462a      	mov	r2, r5
 8002176:	fb02 f203 	mul.w	r2, r2, r3
 800217a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800217e:	4621      	mov	r1, r4
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	441a      	add	r2, r3
 8002186:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800218a:	4621      	mov	r1, r4
 800218c:	fba3 3101 	umull	r3, r1, r3, r1
 8002190:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8002194:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80021ae:	462b      	mov	r3, r5
 80021b0:	0459      	lsls	r1, r3, #17
 80021b2:	4622      	mov	r2, r4
 80021b4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80021b8:	4623      	mov	r3, r4
 80021ba:	0458      	lsls	r0, r3, #17
 80021bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80021c0:	1814      	adds	r4, r2, r0
 80021c2:	643c      	str	r4, [r7, #64]	@ 0x40
 80021c4:	414b      	adcs	r3, r1
 80021c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80021c8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80021cc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80021d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	17da      	asrs	r2, r3, #31
 80021dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021f0:	00d9      	lsls	r1, r3, #3
 80021f2:	2000      	movs	r0, #0
 80021f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80021f8:	1814      	adds	r4, r2, r0
 80021fa:	63bc      	str	r4, [r7, #56]	@ 0x38
 80021fc:	414b      	adcs	r3, r1
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002200:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002204:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002208:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800220c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002210:	fb03 f102 	mul.w	r1, r3, r2
 8002214:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002218:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	18ca      	adds	r2, r1, r3
 8002222:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002226:	fba3 3103 	umull	r3, r1, r3, r3
 800222a:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800222e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800223c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002240:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002244:	b21b      	sxth	r3, r3
 8002246:	17da      	asrs	r2, r3, #31
 8002248:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800224c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002250:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8002254:	4622      	mov	r2, r4
 8002256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800225a:	4641      	mov	r1, r8
 800225c:	fb01 f202 	mul.w	r2, r1, r2
 8002260:	464d      	mov	r5, r9
 8002262:	4618      	mov	r0, r3
 8002264:	4621      	mov	r1, r4
 8002266:	4603      	mov	r3, r0
 8002268:	fb03 f305 	mul.w	r3, r3, r5
 800226c:	4413      	add	r3, r2
 800226e:	4602      	mov	r2, r0
 8002270:	4641      	mov	r1, r8
 8002272:	fba2 2101 	umull	r2, r1, r2, r1
 8002276:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 800227a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800227e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002282:	4413      	add	r3, r2
 8002284:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002288:	f04f 0000 	mov.w	r0, #0
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002294:	4623      	mov	r3, r4
 8002296:	0a18      	lsrs	r0, r3, #8
 8002298:	462a      	mov	r2, r5
 800229a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800229e:	462b      	mov	r3, r5
 80022a0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80022a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	17da      	asrs	r2, r3, #31
 80022ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022b2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022ba:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80022be:	464a      	mov	r2, r9
 80022c0:	fb02 f203 	mul.w	r2, r2, r3
 80022c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022c8:	4644      	mov	r4, r8
 80022ca:	fb04 f303 	mul.w	r3, r4, r3
 80022ce:	441a      	add	r2, r3
 80022d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022d4:	4644      	mov	r4, r8
 80022d6:	fba3 3404 	umull	r3, r4, r3, r4
 80022da:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 80022de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80022f8:	464c      	mov	r4, r9
 80022fa:	0323      	lsls	r3, r4, #12
 80022fc:	46c4      	mov	ip, r8
 80022fe:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8002302:	4644      	mov	r4, r8
 8002304:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002306:	1884      	adds	r4, r0, r2
 8002308:	633c      	str	r4, [r7, #48]	@ 0x30
 800230a:	eb41 0303 	adc.w	r3, r1, r3
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002310:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002314:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002318:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800231c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002320:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8002324:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800232c:	88db      	ldrh	r3, [r3, #6]
 800232e:	b29b      	uxth	r3, r3
 8002330:	2200      	movs	r2, #0
 8002332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002336:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800233a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800233e:	4622      	mov	r2, r4
 8002340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002344:	4641      	mov	r1, r8
 8002346:	fb01 f202 	mul.w	r2, r1, r2
 800234a:	464d      	mov	r5, r9
 800234c:	4618      	mov	r0, r3
 800234e:	4621      	mov	r1, r4
 8002350:	4603      	mov	r3, r0
 8002352:	fb03 f305 	mul.w	r3, r3, r5
 8002356:	4413      	add	r3, r2
 8002358:	4602      	mov	r2, r0
 800235a:	4641      	mov	r1, r8
 800235c:	fba2 2101 	umull	r2, r1, r2, r1
 8002360:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8002364:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002368:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800236c:	4413      	add	r3, r2
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800237e:	4629      	mov	r1, r5
 8002380:	104a      	asrs	r2, r1, #1
 8002382:	4629      	mov	r1, r5
 8002384:	17cb      	asrs	r3, r1, #31
 8002386:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800238a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800238e:	4313      	orrs	r3, r2
 8002390:	d101      	bne.n	8002396 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8002392:	2300      	movs	r3, #0
 8002394:	e146      	b.n	8002624 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8002396:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800239a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800239e:	17da      	asrs	r2, r3, #31
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80023a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80023ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023b0:	105b      	asrs	r3, r3, #1
 80023b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023ba:	07db      	lsls	r3, r3, #31
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80023c4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023c8:	4604      	mov	r4, r0
 80023ca:	1aa4      	subs	r4, r4, r2
 80023cc:	67bc      	str	r4, [r7, #120]	@ 0x78
 80023ce:	eb61 0303 	sbc.w	r3, r1, r3
 80023d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023d4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	1891      	adds	r1, r2, r2
 80023de:	6239      	str	r1, [r7, #32]
 80023e0:	415b      	adcs	r3, r3
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e8:	4621      	mov	r1, r4
 80023ea:	1851      	adds	r1, r2, r1
 80023ec:	61b9      	str	r1, [r7, #24]
 80023ee:	4629      	mov	r1, r5
 80023f0:	414b      	adcs	r3, r1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002400:	4649      	mov	r1, r9
 8002402:	018b      	lsls	r3, r1, #6
 8002404:	4641      	mov	r1, r8
 8002406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240a:	4641      	mov	r1, r8
 800240c:	018a      	lsls	r2, r1, #6
 800240e:	4641      	mov	r1, r8
 8002410:	1889      	adds	r1, r1, r2
 8002412:	6139      	str	r1, [r7, #16]
 8002414:	4649      	mov	r1, r9
 8002416:	eb43 0101 	adc.w	r1, r3, r1
 800241a:	6179      	str	r1, [r7, #20]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002428:	4649      	mov	r1, r9
 800242a:	008b      	lsls	r3, r1, #2
 800242c:	46c4      	mov	ip, r8
 800242e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002432:	4641      	mov	r1, r8
 8002434:	008a      	lsls	r2, r1, #2
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	4603      	mov	r3, r0
 800243c:	4622      	mov	r2, r4
 800243e:	189b      	adds	r3, r3, r2
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	460b      	mov	r3, r1
 8002444:	462a      	mov	r2, r5
 8002446:	eb42 0303 	adc.w	r3, r2, r3
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002458:	4649      	mov	r1, r9
 800245a:	008b      	lsls	r3, r1, #2
 800245c:	46c4      	mov	ip, r8
 800245e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002462:	4641      	mov	r1, r8
 8002464:	008a      	lsls	r2, r1, #2
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	4603      	mov	r3, r0
 800246c:	4622      	mov	r2, r4
 800246e:	189b      	adds	r3, r3, r2
 8002470:	673b      	str	r3, [r7, #112]	@ 0x70
 8002472:	462b      	mov	r3, r5
 8002474:	460a      	mov	r2, r1
 8002476:	eb42 0303 	adc.w	r3, r2, r3
 800247a:	677b      	str	r3, [r7, #116]	@ 0x74
 800247c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002480:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002484:	f7fe fe64 	bl	8001150 <__aeabi_ldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002494:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002498:	b21b      	sxth	r3, r3
 800249a:	17da      	asrs	r2, r3, #31
 800249c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800249e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80024a4:	f04f 0000 	mov.w	r0, #0
 80024a8:	f04f 0100 	mov.w	r1, #0
 80024ac:	0b50      	lsrs	r0, r2, #13
 80024ae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024b2:	1359      	asrs	r1, r3, #13
 80024b4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80024b8:	462b      	mov	r3, r5
 80024ba:	fb00 f203 	mul.w	r2, r0, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	fb03 f301 	mul.w	r3, r3, r1
 80024c4:	4413      	add	r3, r2
 80024c6:	4622      	mov	r2, r4
 80024c8:	fba2 2100 	umull	r2, r1, r2, r0
 80024cc:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80024d0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80024d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80024d8:	4413      	add	r3, r2
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80024de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	0b50      	lsrs	r0, r2, #13
 80024ec:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024f0:	1359      	asrs	r1, r3, #13
 80024f2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80024f6:	462b      	mov	r3, r5
 80024f8:	fb00 f203 	mul.w	r2, r0, r3
 80024fc:	4623      	mov	r3, r4
 80024fe:	fb03 f301 	mul.w	r3, r3, r1
 8002502:	4413      	add	r3, r2
 8002504:	4622      	mov	r2, r4
 8002506:	fba2 2100 	umull	r2, r1, r2, r0
 800250a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 800250e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002512:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002516:	4413      	add	r3, r2
 8002518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002528:	4621      	mov	r1, r4
 800252a:	0e4a      	lsrs	r2, r1, #25
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	460c      	mov	r4, r1
 8002532:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002536:	164b      	asrs	r3, r1, #25
 8002538:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800253c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002540:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002544:	b21b      	sxth	r3, r3
 8002546:	17da      	asrs	r2, r3, #31
 8002548:	663b      	str	r3, [r7, #96]	@ 0x60
 800254a:	667a      	str	r2, [r7, #100]	@ 0x64
 800254c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002550:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002554:	462a      	mov	r2, r5
 8002556:	fb02 f203 	mul.w	r2, r2, r3
 800255a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800255e:	4621      	mov	r1, r4
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800256a:	4621      	mov	r1, r4
 800256c:	fba2 2101 	umull	r2, r1, r2, r1
 8002570:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8002574:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002578:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800257c:	4413      	add	r3, r2
 800257e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800258e:	4621      	mov	r1, r4
 8002590:	0cca      	lsrs	r2, r1, #19
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	460c      	mov	r4, r1
 8002598:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800259c:	14cb      	asrs	r3, r1, #19
 800259e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80025a2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80025a6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80025aa:	1884      	adds	r4, r0, r2
 80025ac:	65bc      	str	r4, [r7, #88]	@ 0x58
 80025ae:	eb41 0303 	adc.w	r3, r1, r3
 80025b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80025b8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80025bc:	4621      	mov	r1, r4
 80025be:	1889      	adds	r1, r1, r2
 80025c0:	6539      	str	r1, [r7, #80]	@ 0x50
 80025c2:	4629      	mov	r1, r5
 80025c4:	eb43 0101 	adc.w	r1, r3, r1
 80025c8:	6579      	str	r1, [r7, #84]	@ 0x54
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80025d6:	4623      	mov	r3, r4
 80025d8:	0a18      	lsrs	r0, r3, #8
 80025da:	462a      	mov	r2, r5
 80025dc:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80025e0:	462b      	mov	r3, r5
 80025e2:	1219      	asrs	r1, r3, #8
 80025e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80025ec:	b21b      	sxth	r3, r3
 80025ee:	17da      	asrs	r2, r3, #31
 80025f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002600:	464c      	mov	r4, r9
 8002602:	0123      	lsls	r3, r4, #4
 8002604:	46c4      	mov	ip, r8
 8002606:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800260a:	4644      	mov	r4, r8
 800260c:	0122      	lsls	r2, r4, #4
 800260e:	1884      	adds	r4, r0, r2
 8002610:	603c      	str	r4, [r7, #0]
 8002612:	eb41 0303 	adc.w	r3, r1, r3
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	e9d7 3400 	ldrd	r3, r4, [r7]
 800261c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8002620:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8002624:	4618      	mov	r0, r3
 8002626:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002630 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002642:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	039a      	lsls	r2, r3, #14
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002658:	4619      	mov	r1, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002666:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800266e:	4611      	mov	r1, r2
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	fb01 f202 	mul.w	r2, r1, r2
 8002676:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	7f09      	ldrb	r1, [r1, #28]
 800267c:	4608      	mov	r0, r1
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	fb00 f101 	mul.w	r1, r0, r1
 8002684:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002686:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800268a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800268e:	1292      	asrs	r2, r2, #10
 8002690:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800269a:	fb01 f202 	mul.w	r2, r1, r2
 800269e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80026a2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	13db      	asrs	r3, r3, #15
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	13d2      	asrs	r2, r2, #15
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	7e12      	ldrb	r2, [r2, #24]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80026ce:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80026d6:	bfa8      	it	ge
 80026d8:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80026dc:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	131b      	asrs	r3, r3, #12
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	@ 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002700:	2b60      	cmp	r3, #96	@ 0x60
 8002702:	d007      	beq.n	8002714 <bmp280_read_fixed+0x28>
		if (humidity)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <bmp280_read_fixed+0x32>
 800271a:	2308      	movs	r3, #8
 800271c:	e000      	b.n	8002720 <bmp280_read_fixed+0x34>
 800271e:	2306      	movs	r3, #6
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f107 0218 	add.w	r2, r7, #24
 800272a:	21f7      	movs	r1, #247	@ 0xf7
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff fab1 	bl	8001c94 <read_data>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <bmp280_read_fixed+0x50>
		return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e038      	b.n	80027ae <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800273c:	7e3b      	ldrb	r3, [r7, #24]
 800273e:	031a      	lsls	r2, r3, #12
 8002740:	7e7b      	ldrb	r3, [r7, #25]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4313      	orrs	r3, r2
 8002746:	7eba      	ldrb	r2, [r7, #26]
 8002748:	0912      	lsrs	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4313      	orrs	r3, r2
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002750:	7efb      	ldrb	r3, [r7, #27]
 8002752:	031a      	lsls	r2, r3, #12
 8002754:	7f3b      	ldrb	r3, [r7, #28]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4313      	orrs	r3, r2
 800275a:	7f7a      	ldrb	r2, [r7, #29]
 800275c:	0912      	lsrs	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4313      	orrs	r3, r2
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	461a      	mov	r2, r3
 800276a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fc6d 	bl	800204c <compensate_temperature>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	461a      	mov	r2, r3
 800277c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fc9c 	bl	80020bc <compensate_pressure>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002790:	7fbb      	ldrb	r3, [r7, #30]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	7ffa      	ldrb	r2, [r7, #31]
 8002796:	4313      	orrs	r3, r2
 8002798:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	461a      	mov	r2, r3
 800279e:	6a39      	ldr	r1, [r7, #32]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff45 	bl	8002630 <compensate_humidity>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
	}

	return true;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3730      	adds	r7, #48	@ 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <bmp280_read_float>:

uint8_t bmp280_read_float(BMP280_HandleTypedef *dev, float *data) {
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, &fixed_humidity)) {
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	f107 0210 	add.w	r2, r7, #16
 80027ca:	f107 0114 	add.w	r1, r7, #20
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff8c 	bl	80026ec <bmp280_read_fixed>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02b      	beq.n	8002832 <bmp280_read_float+0x7a>
		data[0] = (float) fixed_temperature / 100;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa87 	bl	8000cf0 <__aeabi_i2f>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4915      	ldr	r1, [pc, #84]	@ (800283c <bmp280_read_float+0x84>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fb8a 	bl	8000f00 <__aeabi_fdiv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	601a      	str	r2, [r3, #0]
		data[1] = (float) fixed_pressure / 256;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fa76 	bl	8000ce8 <__aeabi_ui2f>
 80027fc:	4602      	mov	r2, r0
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	1d1c      	adds	r4, r3, #4
 8002802:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002806:	4610      	mov	r0, r2
 8002808:	f7fe fb7a 	bl	8000f00 <__aeabi_fdiv>
 800280c:	4603      	mov	r3, r0
 800280e:	6023      	str	r3, [r4, #0]
		data[2] = (float) fixed_humidity / 1024;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa68 	bl	8000ce8 <__aeabi_ui2f>
 8002818:	4602      	mov	r2, r0
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f103 0408 	add.w	r4, r3, #8
 8002820:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8002824:	4610      	mov	r0, r2
 8002826:	f7fe fb6b 	bl	8000f00 <__aeabi_fdiv>
 800282a:	4603      	mov	r3, r0
 800282c:	6023      	str	r3, [r4, #0]
		return 0;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <bmp280_read_float+0x7c>
	}

	return 1;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	42c80000 	.word	0x42c80000

08002840 <Crc16>:
uint16_t Crc16(uint8_t *pcBlock, uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Crc16(uint8_t *pcBlock, uint16_t len) {
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800284c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002850:	81fb      	strh	r3, [r7, #14]
    unsigned char i;
    while (len--) {
 8002852:	e025      	b.n	80028a0 <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21a      	sxth	r2, r3
 8002860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002864:	4053      	eors	r3, r2
 8002866:	b21b      	sxth	r3, r3
 8002868:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++) {
 800286a:	2300      	movs	r3, #0
 800286c:	737b      	strb	r3, [r7, #13]
 800286e:	e014      	b.n	800289a <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8002870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002874:	2b00      	cmp	r3, #0
 8002876:	da09      	bge.n	800288c <Crc16+0x4c>
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	b21b      	sxth	r3, r3
 800287e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b21b      	sxth	r3, r3
 8002888:	b29b      	uxth	r3, r3
 800288a:	e002      	b.n	8002892 <Crc16+0x52>
 800288c:	89fb      	ldrh	r3, [r7, #14]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++) {
 8002894:	7b7b      	ldrb	r3, [r7, #13]
 8002896:	3301      	adds	r3, #1
 8002898:	737b      	strb	r3, [r7, #13]
 800289a:	7b7b      	ldrb	r3, [r7, #13]
 800289c:	2b07      	cmp	r3, #7
 800289e:	d9e7      	bls.n	8002870 <Crc16+0x30>
    while (len--) {
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	807a      	strh	r2, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1d4      	bne.n	8002854 <Crc16+0x14>
        }
    }
    return crc;
 80028aa:	89fb      	ldrh	r3, [r7, #14]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <Get_MPU_Data>:

void Get_MPU_Data () {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	if (updateMPU(&mpu) == 0) {
 80028bc:	4819      	ldr	r0, [pc, #100]	@ (8002924 <Get_MPU_Data+0x6c>)
 80028be:	f000 fc9e 	bl	80031fe <updateMPU>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <Get_MPU_Data+0x1e>
		ERROR_REG = ERROR_REG | MPU_READ_ERROR;
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <Get_MPU_Data+0x70>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <Get_MPU_Data+0x70>)
 80028d4:	701a      	strb	r2, [r3, #0]
	}
	mpuData[0] = getAccX(&mpu);
 80028d6:	4813      	ldr	r0, [pc, #76]	@ (8002924 <Get_MPU_Data+0x6c>)
 80028d8:	f000 fcb9 	bl	800324e <getAccX>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a13      	ldr	r2, [pc, #76]	@ (800292c <Get_MPU_Data+0x74>)
 80028e0:	6013      	str	r3, [r2, #0]
	mpuData[1] = getAccY(&mpu);
 80028e2:	4810      	ldr	r0, [pc, #64]	@ (8002924 <Get_MPU_Data+0x6c>)
 80028e4:	f000 fcbe 	bl	8003264 <getAccY>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <Get_MPU_Data+0x74>)
 80028ec:	6053      	str	r3, [r2, #4]
	mpuData[2] = getAccZ(&mpu);
 80028ee:	480d      	ldr	r0, [pc, #52]	@ (8002924 <Get_MPU_Data+0x6c>)
 80028f0:	f000 fcc3 	bl	800327a <getAccZ>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <Get_MPU_Data+0x74>)
 80028f8:	6093      	str	r3, [r2, #8]
	mpuData[3] = getGyroX(&mpu);
 80028fa:	480a      	ldr	r0, [pc, #40]	@ (8002924 <Get_MPU_Data+0x6c>)
 80028fc:	f000 fcc8 	bl	8003290 <getGyroX>
 8002900:	4603      	mov	r3, r0
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <Get_MPU_Data+0x74>)
 8002904:	60d3      	str	r3, [r2, #12]
	mpuData[4] = getGyroY(&mpu);
 8002906:	4807      	ldr	r0, [pc, #28]	@ (8002924 <Get_MPU_Data+0x6c>)
 8002908:	f000 fccd 	bl	80032a6 <getGyroY>
 800290c:	4603      	mov	r3, r0
 800290e:	4a07      	ldr	r2, [pc, #28]	@ (800292c <Get_MPU_Data+0x74>)
 8002910:	6113      	str	r3, [r2, #16]
	mpuData[5] = getGyroZ(&mpu);
 8002912:	4804      	ldr	r0, [pc, #16]	@ (8002924 <Get_MPU_Data+0x6c>)
 8002914:	f000 fcd2 	bl	80032bc <getGyroZ>
 8002918:	4603      	mov	r3, r0
 800291a:	4a04      	ldr	r2, [pc, #16]	@ (800292c <Get_MPU_Data+0x74>)
 800291c:	6153      	str	r3, [r2, #20]
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000041c 	.word	0x2000041c
 8002928:	2000061d 	.word	0x2000061d
 800292c:	2000062c 	.word	0x2000062c

08002930 <Make_Tx_Packet>:

void Make_Tx_Packet(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	tx_packet[0] = 0xFF; // PREAMB
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <Make_Tx_Packet+0x64>)
 8002936:	22ff      	movs	r2, #255	@ 0xff
 8002938:	701a      	strb	r2, [r3, #0]
	tx_packet[1] = 0xFF; // PREAMB
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <Make_Tx_Packet+0x64>)
 800293c:	22ff      	movs	r2, #255	@ 0xff
 800293e:	705a      	strb	r2, [r3, #1]
	tx_packet[2] = 0x01; // ID
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <Make_Tx_Packet+0x64>)
 8002942:	2201      	movs	r2, #1
 8002944:	709a      	strb	r2, [r3, #2]
	tx_packet[3] = 0x00; // ID
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <Make_Tx_Packet+0x64>)
 8002948:	2200      	movs	r2, #0
 800294a:	70da      	strb	r2, [r3, #3]
	memcpy(tx_packet + 4, mpuData, sizeof(mpuData)); // MPU DATA 24 BYTES
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <Make_Tx_Packet+0x68>)
 800294e:	2218      	movs	r2, #24
 8002950:	4912      	ldr	r1, [pc, #72]	@ (800299c <Make_Tx_Packet+0x6c>)
 8002952:	4618      	mov	r0, r3
 8002954:	f008 fe09 	bl	800b56a <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData)), meteo, sizeof(meteo)); // METEO DATA 16 BYTES
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <Make_Tx_Packet+0x70>)
 800295a:	2210      	movs	r2, #16
 800295c:	4911      	ldr	r1, [pc, #68]	@ (80029a4 <Make_Tx_Packet+0x74>)
 800295e:	4618      	mov	r0, r3
 8002960:	f008 fe03 	bl	800b56a <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo)), &gps, sizeof(gps)); // GPS DATA 12 BYTES
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <Make_Tx_Packet+0x78>)
 8002966:	220c      	movs	r2, #12
 8002968:	4910      	ldr	r1, [pc, #64]	@ (80029ac <Make_Tx_Packet+0x7c>)
 800296a:	4618      	mov	r0, r3
 800296c:	f008 fdfd 	bl	800b56a <memcpy>
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps)), &ERROR_REG, sizeof(ERROR_REG)); // ERROR CODES 1 BYTE
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <Make_Tx_Packet+0x80>)
 8002972:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <Make_Tx_Packet+0x84>)
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
	crc = Crc16((uint8_t*)tx_packet, 4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps) + sizeof(ERROR_REG));
 8002978:	2139      	movs	r1, #57	@ 0x39
 800297a:	4806      	ldr	r0, [pc, #24]	@ (8002994 <Make_Tx_Packet+0x64>)
 800297c:	f7ff ff60 	bl	8002840 <Crc16>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <Make_Tx_Packet+0x88>)
 8002986:	801a      	strh	r2, [r3, #0]
	memcpy(tx_packet + (4 + sizeof(mpuData) + sizeof(meteo) + sizeof(gps) + sizeof(ERROR_REG)), &crc, sizeof(crc)); // CRC 2 BYTES
 8002988:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <Make_Tx_Packet+0x8c>)
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <Make_Tx_Packet+0x88>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	8013      	strh	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000654 	.word	0x20000654
 8002998:	20000658 	.word	0x20000658
 800299c:	2000062c 	.word	0x2000062c
 80029a0:	20000670 	.word	0x20000670
 80029a4:	20000644 	.word	0x20000644
 80029a8:	20000680 	.word	0x20000680
 80029ac:	20000610 	.word	0x20000610
 80029b0:	2000068c 	.word	0x2000068c
 80029b4:	2000061d 	.word	0x2000061d
 80029b8:	20000624 	.word	0x20000624
 80029bc:	2000068d 	.word	0x2000068d

080029c0 <Transmit_Packet>:

void Transmit_Packet(void) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	lora_status = SX1278_transmit(&SX1278, (uint8_t*) tx_packet, PACKET_LEN, 2000);
 80029c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029c8:	223b      	movs	r2, #59	@ 0x3b
 80029ca:	490a      	ldr	r1, [pc, #40]	@ (80029f4 <Transmit_Packet+0x34>)
 80029cc:	480a      	ldr	r0, [pc, #40]	@ (80029f8 <Transmit_Packet+0x38>)
 80029ce:	f7ff f841 	bl	8001a54 <SX1278_transmit>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a09      	ldr	r2, [pc, #36]	@ (80029fc <Transmit_Packet+0x3c>)
 80029d6:	6013      	str	r3, [r2, #0]
	if(lora_status <= 0) {
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <Transmit_Packet+0x3c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dc06      	bgt.n	80029ee <Transmit_Packet+0x2e>
		ERROR_REG = ERROR_REG | PACKET_TRANSMIT_ERROR;
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <Transmit_Packet+0x40>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <Transmit_Packet+0x40>)
 80029ec:	701a      	strb	r2, [r3, #0]
	}
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000654 	.word	0x20000654
 80029f8:	200004f8 	.word	0x200004f8
 80029fc:	20000620 	.word	0x20000620
 8002a00:	2000061d 	.word	0x2000061d

08002a04 <Get_BME_Data>:

void Get_BME_Data(void) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	if(bmp_status == 0) {
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <Get_BME_Data+0x2c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <Get_BME_Data+0x28>
		if(bmp280_read_float(&bmp280, meteo) != 0) {
 8002a10:	4908      	ldr	r1, [pc, #32]	@ (8002a34 <Get_BME_Data+0x30>)
 8002a12:	4809      	ldr	r0, [pc, #36]	@ (8002a38 <Get_BME_Data+0x34>)
 8002a14:	f7ff fed0 	bl	80027b8 <bmp280_read_float>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <Get_BME_Data+0x28>
			ERROR_REG = ERROR_REG | BMP_READ_ERROR;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <Get_BME_Data+0x38>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <Get_BME_Data+0x38>)
 8002a2a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2000061c 	.word	0x2000061c
 8002a34:	20000644 	.word	0x20000644
 8002a38:	200003e8 	.word	0x200003e8
 8002a3c:	2000061d 	.word	0x2000061d

08002a40 <Get_GPS_Data>:

void Get_GPS_Data()	{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, (uint8_t*)gps_input, 1024, 1000);
 8002a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a4c:	490a      	ldr	r1, [pc, #40]	@ (8002a78 <Get_GPS_Data+0x38>)
 8002a4e:	480b      	ldr	r0, [pc, #44]	@ (8002a7c <Get_GPS_Data+0x3c>)
 8002a50:	f006 f9b2 	bl	8008db8 <HAL_UART_Receive>
	if (parser(gps_input, 1024, &gps) != 'A') {
 8002a54:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <Get_GPS_Data+0x40>)
 8002a56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a5a:	4807      	ldr	r0, [pc, #28]	@ (8002a78 <Get_GPS_Data+0x38>)
 8002a5c:	f001 faf6 	bl	800404c <parser>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b41      	cmp	r3, #65	@ 0x41
 8002a64:	d006      	beq.n	8002a74 <Get_GPS_Data+0x34>
		ERROR_REG = ERROR_REG | GPS_NO_DATA;
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <Get_GPS_Data+0x44>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <Get_GPS_Data+0x44>)
 8002a72:	701a      	strb	r2, [r3, #0]
	}
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200006d4 	.word	0x200006d4
 8002a7c:	200003a0 	.word	0x200003a0
 8002a80:	20000610 	.word	0x20000610
 8002a84:	2000061d 	.word	0x2000061d

08002a88 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a25      	ldr	r2, [pc, #148]	@ (8002b2c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d143      	bne.n	8002b22 <HAL_TIM_IC_CaptureCallback+0x9a>
		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f005 fda7 	bl	80085f0 <HAL_TIM_ReadCapturedValue>
 8002aa2:	6138      	str	r0, [r7, #16]
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f005 fda2 	bl	80085f0 <HAL_TIM_ReadCapturedValue>
 8002aac:	60f8      	str	r0, [r7, #12]
		float duty = 100.0 * ch / cl;
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7fd fca2 	bl	80003f8 <__aeabi_ui2d>
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002aba:	f7fd fd17 	bl	80004ec <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	6938      	ldr	r0, [r7, #16]
 8002ac8:	f7fd fc96 	bl	80003f8 <__aeabi_ui2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fe34 	bl	8000740 <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fd fffc 	bl	8000adc <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	617b      	str	r3, [r7, #20]
		if (duty > 100.0) {
 8002ae8:	4912      	ldr	r1, [pc, #72]	@ (8002b34 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7fe fb10 	bl	8001110 <__aeabi_fcmpgt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_TIM_IC_CaptureCallback+0x80>
			duty = 100.0;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002af8:	617b      	str	r3, [r7, #20]
			ERROR_REG = ERROR_REG | CO2_DATA_ERROR;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002b06:	701a      	strb	r2, [r3, #0]
		}
		meteo[3] = 2000 * duty / 100;
 8002b08:	490c      	ldr	r1, [pc, #48]	@ (8002b3c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7fe f944 	bl	8000d98 <__aeabi_fmul>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4908      	ldr	r1, [pc, #32]	@ (8002b34 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f9f3 	bl	8000f00 <__aeabi_fdiv>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002b20:	60da      	str	r2, [r3, #12]
	}
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40590000 	.word	0x40590000
 8002b34:	42c80000 	.word	0x42c80000
 8002b38:	2000061d 	.word	0x2000061d
 8002b3c:	44fa0000 	.word	0x44fa0000
 8002b40:	20000644 	.word	0x20000644
 8002b44:	00000000 	.word	0x00000000

08002b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b4e:	f001 ff97 	bl	8004a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b52:	f000 f8b5 	bl	8002cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b56:	f000 fa49 	bl	8002fec <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b5a:	f000 f91b 	bl	8002d94 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002b5e:	f000 f8eb 	bl	8002d38 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b62:	f000 f9ed 	bl	8002f40 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002b66:	f000 f94b 	bl	8002e00 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002b6a:	f000 fa15 	bl	8002f98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4845      	ldr	r0, [pc, #276]	@ (8002c88 <main+0x140>)
 8002b72:	f005 f983 	bl	8007e7c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8002b76:	2104      	movs	r1, #4
 8002b78:	4843      	ldr	r0, [pc, #268]	@ (8002c88 <main+0x140>)
 8002b7a:	f005 f8bf 	bl	8007cfc <HAL_TIM_IC_Start>

  bmp280_init_default_params(&bmp280.params);
 8002b7e:	4843      	ldr	r0, [pc, #268]	@ (8002c8c <main+0x144>)
 8002b80:	f7ff f83e 	bl	8001c00 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002b84:	4b42      	ldr	r3, [pc, #264]	@ (8002c90 <main+0x148>)
 8002b86:	2276      	movs	r2, #118	@ 0x76
 8002b88:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <main+0x148>)
 8002b8c:	4a41      	ldr	r2, [pc, #260]	@ (8002c94 <main+0x14c>)
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp_status = bmp280_init(&bmp280, &bmp280.params);
 8002b90:	493e      	ldr	r1, [pc, #248]	@ (8002c8c <main+0x144>)
 8002b92:	483f      	ldr	r0, [pc, #252]	@ (8002c90 <main+0x148>)
 8002b94:	f7ff f9ad 	bl	8001ef2 <bmp280_init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <main+0x150>)
 8002b9e:	701a      	strb	r2, [r3, #0]
  if (bmp_status != 0) {
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <main+0x150>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <main+0x6e>
	 ERROR_REG = ERROR_REG | BMP_INIT_ERROR;
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8002c9c <main+0x154>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <main+0x154>)
 8002bb4:	701a      	strb	r2, [r3, #0]
  }

  MPU9250SetDefault(&mpu);
 8002bb6:	483a      	ldr	r0, [pc, #232]	@ (8002ca0 <main+0x158>)
 8002bb8:	f001 f8fe 	bl	8003db8 <MPU9250SetDefault>
  if (setupMPU(&mpu, MPU9250_ADDRESS) != 1) {
 8002bbc:	21d0      	movs	r1, #208	@ 0xd0
 8002bbe:	4838      	ldr	r0, [pc, #224]	@ (8002ca0 <main+0x158>)
 8002bc0:	f000 fa8a 	bl	80030d8 <setupMPU>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d006      	beq.n	8002bd8 <main+0x90>
	  ERROR_REG = ERROR_REG | MPU_INIT_ERROR;
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <main+0x154>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <main+0x154>)
 8002bd6:	701a      	strb	r2, [r3, #0]
  }

  SX1278_hw.dio0.port = LORA_DI0_GPIO_Port;
 8002bd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ca4 <main+0x15c>)
 8002bda:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <main+0x160>)
 8002bdc:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = LORA_DI0_Pin;
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <main+0x15c>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8002be4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca4 <main+0x15c>)
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <main+0x160>)
 8002be8:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8002bea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <main+0x15c>)
 8002bec:	2210      	movs	r2, #16
 8002bee:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <main+0x15c>)
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8002cac <main+0x164>)
 8002bf4:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <main+0x15c>)
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <main+0x15c>)
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb0 <main+0x168>)
 8002c00:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8002c02:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <main+0x16c>)
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <main+0x15c>)
 8002c06:	601a      	str	r2, [r3, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, PACKET_LEN);
 8002c08:	233b      	movs	r3, #59	@ 0x3b
 8002c0a:	9305      	str	r3, [sp, #20]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	2307      	movs	r3, #7
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	a317      	add	r3, pc, #92	@ (adr r3, 8002c80 <main+0x138>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	4823      	ldr	r0, [pc, #140]	@ (8002cb4 <main+0x16c>)
 8002c28:	f7fe fee7 	bl	80019fa <SX1278_init>
  lora_status = SX1278_LoRaEntryTx(&SX1278, PACKET_LEN, 2000);
 8002c2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002c30:	213b      	movs	r1, #59	@ 0x3b
 8002c32:	4820      	ldr	r0, [pc, #128]	@ (8002cb4 <main+0x16c>)
 8002c34:	f7fe fe4a 	bl	80018cc <SX1278_LoRaEntryTx>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb8 <main+0x170>)
 8002c3c:	6013      	str	r3, [r2, #0]

  start_cycle_time = HAL_GetTick();
 8002c3e:	f001 ff77 	bl	8004b30 <HAL_GetTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <main+0x174>)
 8002c46:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  Get_BME_Data();
 8002c48:	f7ff fedc 	bl	8002a04 <Get_BME_Data>
	  Get_MPU_Data();
 8002c4c:	f7ff fe34 	bl	80028b8 <Get_MPU_Data>
	  Get_GPS_Data();
 8002c50:	f7ff fef6 	bl	8002a40 <Get_GPS_Data>

	  if(HAL_GetTick() - start_cycle_time >= CYCLE_TIME) {
 8002c54:	f001 ff6c 	bl	8004b30 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <main+0x174>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c64:	d3f0      	bcc.n	8002c48 <main+0x100>
		  Make_Tx_Packet();
 8002c66:	f7ff fe63 	bl	8002930 <Make_Tx_Packet>
		  Transmit_Packet();
 8002c6a:	f7ff fea9 	bl	80029c0 <Transmit_Packet>

		  #ifdef _DEBUG
	  	  	  HAL_UART_Transmit(&huart1, (uint8_t*)gps_input, 1024, 1000);
	  	  #endif

		  start_cycle_time = HAL_GetTick();
 8002c6e:	f001 ff5f 	bl	8004b30 <HAL_GetTick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <main+0x174>)
 8002c76:	6013      	str	r3, [r2, #0]
	  Get_BME_Data();
 8002c78:	e7e6      	b.n	8002c48 <main+0x100>
 8002c7a:	bf00      	nop
 8002c7c:	f3af 8000 	nop.w
 8002c80:	19de5080 	.word	0x19de5080
 8002c84:	00000000 	.word	0x00000000
 8002c88:	20000310 	.word	0x20000310
 8002c8c:	20000414 	.word	0x20000414
 8002c90:	200003e8 	.word	0x200003e8
 8002c94:	20000264 	.word	0x20000264
 8002c98:	2000061c 	.word	0x2000061c
 8002c9c:	2000061d 	.word	0x2000061d
 8002ca0:	2000041c 	.word	0x2000041c
 8002ca4:	200004dc 	.word	0x200004dc
 8002ca8:	40010800 	.word	0x40010800
 8002cac:	40010c00 	.word	0x40010c00
 8002cb0:	200002b8 	.word	0x200002b8
 8002cb4:	200004f8 	.word	0x200004f8
 8002cb8:	20000620 	.word	0x20000620
 8002cbc:	20000628 	.word	0x20000628

08002cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b090      	sub	sp, #64	@ 0x40
 8002cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	2228      	movs	r2, #40	@ 0x28
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f007 fe3f 	bl	800a952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cea:	2310      	movs	r3, #16
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	f107 0318 	add.w	r3, r7, #24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 ff1e 	bl	8006b38 <HAL_RCC_OscConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002d02:	f000 f9dd 	bl	80030c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d06:	230f      	movs	r3, #15
 8002d08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 f98c 	bl	800703c <HAL_RCC_ClockConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002d2a:	f000 f9c9 	bl	80030c0 <Error_Handler>
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3740      	adds	r7, #64	@ 0x40
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d3e:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <MX_I2C1_Init+0x54>)
 8002d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d44:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <MX_I2C1_Init+0x58>)
 8002d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d74:	4804      	ldr	r0, [pc, #16]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d76:	f002 f9cb 	bl	8005110 <HAL_I2C_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d80:	f000 f99e 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000264 	.word	0x20000264
 8002d8c:	40005400 	.word	0x40005400
 8002d90:	000186a0 	.word	0x000186a0

08002d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <MX_SPI1_Init+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db2:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002de0:	220a      	movs	r2, #10
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002de4:	4804      	ldr	r0, [pc, #16]	@ (8002df8 <MX_SPI1_Init+0x64>)
 8002de6:	f004 fab7 	bl	8007358 <HAL_SPI_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002df0:	f000 f966 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200002b8 	.word	0x200002b8
 8002dfc:	40013000 	.word	0x40013000

08002e00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	@ 0x40
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f3c <MX_TIM1_Init+0x13c>)
 8002e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e40:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e46:	4b3c      	ldr	r3, [pc, #240]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e54:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e5a:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e60:	4b35      	ldr	r3, [pc, #212]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e66:	4834      	ldr	r0, [pc, #208]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e68:	f004 fea0 	bl	8007bac <HAL_TIM_Base_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e72:	f000 f925 	bl	80030c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e80:	4619      	mov	r1, r3
 8002e82:	482d      	ldr	r0, [pc, #180]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e84:	f005 faaa 	bl	80083dc <HAL_TIM_ConfigClockSource>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002e8e:	f000 f917 	bl	80030c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002e92:	4829      	ldr	r0, [pc, #164]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002e94:	f004 fed9 	bl	8007c4a <HAL_TIM_IC_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002e9e:	f000 f90f 	bl	80030c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002ea6:	2350      	movs	r3, #80	@ 0x50
 8002ea8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	481e      	ldr	r0, [pc, #120]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002ebe:	f005 fb54 	bl	800856a <HAL_TIM_SlaveConfigSynchro>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002ec8:	f000 f8fa 	bl	80030c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4814      	ldr	r0, [pc, #80]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002ee6:	f005 f9dd 	bl	80082a4 <HAL_TIM_IC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002ef0:	f000 f8e6 	bl	80030c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	2204      	movs	r2, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	480c      	ldr	r0, [pc, #48]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002f06:	f005 f9cd 	bl	80082a4 <HAL_TIM_IC_ConfigChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002f10:	f000 f8d6 	bl	80030c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	@ (8002f38 <MX_TIM1_Init+0x138>)
 8002f22:	f005 fe89 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002f2c:	f000 f8c8 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f30:	bf00      	nop
 8002f32:	3740      	adds	r7, #64	@ 0x40
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000310 	.word	0x20000310
 8002f3c:	40012c00 	.word	0x40012c00

08002f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <MX_USART1_UART_Init+0x54>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f4a:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002f52:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f58:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f68:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f7a:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <MX_USART1_UART_Init+0x50>)
 8002f7c:	f005 fecc 	bl	8008d18 <HAL_UART_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002f86:	f000 f89b 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000358 	.word	0x20000358
 8002f94:	40013800 	.word	0x40013800

08002f98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <MX_USART2_UART_Init+0x50>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <MX_USART2_UART_Init+0x4c>)
 8002fd0:	f005 fea2 	bl	8008d18 <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fda:	f000 f871 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200003a0 	.word	0x200003a0
 8002fe8:	40004400 	.word	0x40004400

08002fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003000:	4b2c      	ldr	r3, [pc, #176]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a2b      	ldr	r2, [pc, #172]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 8003006:	f043 0320 	orr.w	r3, r3, #32
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003018:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a25      	ldr	r2, [pc, #148]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003030:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <MX_GPIO_Init+0xc8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8003048:	2200      	movs	r2, #0
 800304a:	2110      	movs	r1, #16
 800304c:	481a      	ldr	r0, [pc, #104]	@ (80030b8 <MX_GPIO_Init+0xcc>)
 800304e:	f002 f846 	bl	80050de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8003052:	2200      	movs	r2, #0
 8003054:	2102      	movs	r1, #2
 8003056:	4819      	ldr	r0, [pc, #100]	@ (80030bc <MX_GPIO_Init+0xd0>)
 8003058:	f002 f841 	bl	80050de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LORA_DI0_Pin */
  GPIO_InitStruct.Pin = LORA_DI0_Pin;
 800305c:	2302      	movs	r3, #2
 800305e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_DI0_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4619      	mov	r1, r3
 800306e:	4812      	ldr	r0, [pc, #72]	@ (80030b8 <MX_GPIO_Init+0xcc>)
 8003070:	f001 fe9a 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8003074:	2310      	movs	r3, #16
 8003076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2302      	movs	r3, #2
 8003082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8003084:	f107 0310 	add.w	r3, r7, #16
 8003088:	4619      	mov	r1, r3
 800308a:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <MX_GPIO_Init+0xcc>)
 800308c:	f001 fe8c 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8003090:	2302      	movs	r3, #2
 8003092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2302      	movs	r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4619      	mov	r1, r3
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_GPIO_Init+0xd0>)
 80030a8:	f001 fe7e 	bl	8004da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010800 	.word	0x40010800
 80030bc:	40010c00 	.word	0x40010c00

080030c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c4:	b672      	cpsid	i
}
 80030c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  ERROR_REG = SYSTEM_ERROR;
 80030c8:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <Error_Handler+0x14>)
 80030ca:	22ff      	movs	r2, #255	@ 0xff
 80030cc:	701a      	strb	r2, [r3, #0]
  while (1)
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <Error_Handler+0xe>
 80030d2:	bf00      	nop
 80030d4:	2000061d 	.word	0x2000061d

080030d8 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b67      	cmp	r3, #103	@ 0x67
 80030ec:	d904      	bls.n	80030f8 <setupMPU+0x20>
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b6f      	cmp	r3, #111	@ 0x6f
 80030f6:	d901      	bls.n	80030fc <setupMPU+0x24>
            return 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e022      	b.n	8003142 <setupMPU+0x6a>
        }
        //mpu_i2c_addr = addr;


        if (isConnectedMPU9250(MPU9250)==1) {
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f824 	bl	800314a <isConnectedMPU9250>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d117      	bne.n	8003138 <setupMPU+0x60>
        	MPU9250_Init(MPU9250);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fcbb 	bl	8003a84 <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f848 	bl	80031a4 <isConnectedAK8963>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <setupMPU+0x54>
                initAK8963(MPU9250);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fc36 	bl	800398c <initAK8963>
            }
        } else {
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        return 1;
 8003128:	2301      	movs	r3, #1
 800312a:	e00a      	b.n	8003142 <setupMPU+0x6a>
            	MPU9250->has_connected = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                return 0;
 8003134:	2300      	movs	r3, #0
 8003136:	e004      	b.n	8003142 <setupMPU+0x6a>
        	MPU9250->has_connected = 0;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            return 0;
 8003140:	2300      	movs	r3, #0
    }
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 8003150:	2175      	movs	r1, #117	@ 0x75
 8003152:	20d0      	movs	r0, #208	@ 0xd0
 8003154:	f000 fdb0 	bl	8003cb8 <readByte>
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b71      	cmp	r3, #113	@ 0x71
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	2b73      	cmp	r3, #115	@ 0x73
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	b25a      	sxtb	r2, r3
 8003178:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800317c:	4313      	orrs	r3, r2
 800317e:	b25b      	sxtb	r3, r3
 8003180:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2b70      	cmp	r3, #112	@ 0x70
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	b25a      	sxtb	r2, r3
 8003190:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003194:	4313      	orrs	r3, r2
 8003196:	b25b      	sxtb	r3, r3
 8003198:	71bb      	strb	r3, [r7, #6]
	return b;
 800319a:	79bb      	ldrb	r3, [r7, #6]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 80031aa:	2100      	movs	r1, #0
 80031ac:	2018      	movs	r0, #24
 80031ae:	f000 fd83 	bl	8003cb8 <readByte>
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b48      	cmp	r3, #72	@ 0x48
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <MPUavailable+0x28>
 80031dc:	213a      	movs	r1, #58	@ 0x3a
 80031de:	20d0      	movs	r0, #208	@ 0xd0
 80031e0:	f000 fd6a 	bl	8003cb8 <readByte>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MPUavailable+0x28>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <MPUavailable+0x2a>
 80031f2:	2300      	movs	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af02      	add	r7, sp, #8
 8003204:	6078      	str	r0, [r7, #4]
	if (!MPUavailable(MPU9250)==1){
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffdf 	bl	80031ca <MPUavailable>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <updateMPU+0x18>
		return 0;
 8003212:	2300      	movs	r3, #0
 8003214:	e017      	b.n	8003246 <updateMPU+0x48>
	}

	update_accel_gyro(MPU9250);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9ba 	bl	8003590 <update_accel_gyro>
	update_mag(MPU9250);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fa53 	bl	80036c8 <update_mag>
    update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4603      	mov	r3, r0
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f84a 	bl	80032d8 <update_rpy>

	return 1;
 8003244:	2301      	movs	r3, #1
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <getAccX>:
float getAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->a[i] : 0.f; }
float getGyro(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->g[i] : 0.f; }
float getMag(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->m[i] : 0.f; }
float getLinearAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->lin_acc[i] : 0.f; }

float getAccX(MPU9250_t *MPU9250) { return MPU9250->a[0]; }
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <getAccY>:
float getAccY(MPU9250_t *MPU9250) { return MPU9250->a[1]; }
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <getAccZ>:
float getAccZ(MPU9250_t *MPU9250) { return MPU9250->a[2]; }
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <getGyroX>:
float getGyroX(MPU9250_t *MPU9250) { return MPU9250->g[0]; }
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <getGyroY>:
float getGyroY(MPU9250_t *MPU9250) { return MPU9250->g[1]; }
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <getGyroZ>:
float getGyroZ(MPU9250_t *MPU9250) { return MPU9250->g[2]; }
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	0000      	movs	r0, r0
	...

080032d8 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b08b      	sub	sp, #44	@ 0x2c
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fd fd55 	bl	8000d98 <__aeabi_fmul>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461c      	mov	r4, r3
 80032f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032f4:	68b8      	ldr	r0, [r7, #8]
 80032f6:	f7fd fd4f 	bl	8000d98 <__aeabi_fmul>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4619      	mov	r1, r3
 80032fe:	4620      	mov	r0, r4
 8003300:	f7fd fc42 	bl	8000b88 <__addsf3>
 8003304:	4603      	mov	r3, r0
 8003306:	4619      	mov	r1, r3
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fc3d 	bl	8000b88 <__addsf3>
 800330e:	4603      	mov	r3, r0
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f7fd fd3f 	bl	8000d98 <__aeabi_fmul>
 800331a:	4603      	mov	r3, r0
 800331c:	461c      	mov	r4, r3
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fd39 	bl	8000d98 <__aeabi_fmul>
 8003326:	4603      	mov	r3, r0
 8003328:	4619      	mov	r1, r3
 800332a:	4620      	mov	r0, r4
 800332c:	f7fd fc2c 	bl	8000b88 <__addsf3>
 8003330:	4603      	mov	r3, r0
 8003332:	461c      	mov	r4, r3
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f7fd fd2e 	bl	8000d98 <__aeabi_fmul>
 800333c:	4603      	mov	r3, r0
 800333e:	4619      	mov	r1, r3
 8003340:	4620      	mov	r0, r4
 8003342:	f7fd fc1f 	bl	8000b84 <__aeabi_fsub>
 8003346:	4603      	mov	r3, r0
 8003348:	461c      	mov	r4, r3
 800334a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800334c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800334e:	f7fd fd23 	bl	8000d98 <__aeabi_fmul>
 8003352:	4603      	mov	r3, r0
 8003354:	4619      	mov	r1, r3
 8003356:	4620      	mov	r0, r4
 8003358:	f7fd fc14 	bl	8000b84 <__aeabi_fsub>
 800335c:	4603      	mov	r3, r0
 800335e:	623b      	str	r3, [r7, #32]
	        a31 = 2.0f * (qw * qx + qy * qz);
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68b8      	ldr	r0, [r7, #8]
 8003364:	f7fd fd18 	bl	8000d98 <__aeabi_fmul>
 8003368:	4603      	mov	r3, r0
 800336a:	461c      	mov	r4, r3
 800336c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800336e:	6838      	ldr	r0, [r7, #0]
 8003370:	f7fd fd12 	bl	8000d98 <__aeabi_fmul>
 8003374:	4603      	mov	r3, r0
 8003376:	4619      	mov	r1, r3
 8003378:	4620      	mov	r0, r4
 800337a:	f7fd fc05 	bl	8000b88 <__addsf3>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fc00 	bl	8000b88 <__addsf3>
 8003388:	4603      	mov	r3, r0
 800338a:	61fb      	str	r3, [r7, #28]
	        a32 = 2.0f * (qx * qz - qw * qy);
 800338c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fd02 	bl	8000d98 <__aeabi_fmul>
 8003394:	4603      	mov	r3, r0
 8003396:	461c      	mov	r4, r3
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f7fd fcfc 	bl	8000d98 <__aeabi_fmul>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4619      	mov	r1, r3
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7fd fbed 	bl	8000b84 <__aeabi_fsub>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4619      	mov	r1, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fbea 	bl	8000b88 <__addsf3>
 80033b4:	4603      	mov	r3, r0
 80033b6:	61bb      	str	r3, [r7, #24]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f7fd fcec 	bl	8000d98 <__aeabi_fmul>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461c      	mov	r4, r3
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fce6 	bl	8000d98 <__aeabi_fmul>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4619      	mov	r1, r3
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7fd fbd7 	bl	8000b84 <__aeabi_fsub>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461c      	mov	r4, r3
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	6838      	ldr	r0, [r7, #0]
 80033de:	f7fd fcdb 	bl	8000d98 <__aeabi_fmul>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4619      	mov	r1, r3
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7fd fbcc 	bl	8000b84 <__aeabi_fsub>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461c      	mov	r4, r3
 80033f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80033f4:	f7fd fcd0 	bl	8000d98 <__aeabi_fmul>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7fd fbc3 	bl	8000b88 <__addsf3>
 8003402:	4603      	mov	r3, r0
 8003404:	617b      	str	r3, [r7, #20]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	69f8      	ldr	r0, [r7, #28]
 800340a:	f00b f89b 	bl	800e544 <atan2f>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 8003416:	69b8      	ldr	r0, [r7, #24]
 8003418:	f00b f874 	bl	800e504 <asinf>
 800341c:	4603      	mov	r3, r0
 800341e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800342c:	f00b f88a 	bl	800e544 <atan2f>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800343e:	4618      	mov	r0, r3
 8003440:	f7fc fffc 	bl	800043c <__aeabi_f2d>
 8003444:	a34c      	add	r3, pc, #304	@ (adr r3, 8003578 <update_rpy+0x2a0>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f84f 	bl	80004ec <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fb41 	bl	8000adc <__aeabi_d2f>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fc ffe7 	bl	800043c <__aeabi_f2d>
 800346e:	a342      	add	r3, pc, #264	@ (adr r3, 8003578 <update_rpy+0x2a0>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f83a 	bl	80004ec <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f7fd fb2c 	bl	8000adc <__aeabi_d2f>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003492:	4618      	mov	r0, r3
 8003494:	f7fc ffd2 	bl	800043c <__aeabi_f2d>
 8003498:	a337      	add	r3, pc, #220	@ (adr r3, 8003578 <update_rpy+0x2a0>)
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f7fd f825 	bl	80004ec <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fb17 	bl	8000adc <__aeabi_d2f>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7fd fb60 	bl	8000b88 <__addsf3>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034d8:	4929      	ldr	r1, [pc, #164]	@ (8003580 <update_rpy+0x2a8>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fe0e 	bl	80010fc <__aeabi_fcmpge>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <update_rpy+0x228>
	        	MPU9250->rpy[2] -= 360.f;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034ec:	4925      	ldr	r1, [pc, #148]	@ (8003584 <update_rpy+0x2ac>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fb48 	bl	8000b84 <__aeabi_fsub>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80034fe:	e015      	b.n	800352c <update_rpy+0x254>
	        else if (MPU9250->rpy[2] < -180.f)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003506:	4920      	ldr	r1, [pc, #128]	@ (8003588 <update_rpy+0x2b0>)
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fde3 	bl	80010d4 <__aeabi_fcmplt>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <update_rpy+0x254>
	        	MPU9250->rpy[2] += 360.f;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800351a:	491a      	ldr	r1, [pc, #104]	@ (8003584 <update_rpy+0x2ac>)
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fb33 	bl	8000b88 <__addsf3>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fb28 	bl	8000b88 <__addsf3>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fb1d 	bl	8000b88 <__addsf3>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	6979      	ldr	r1, [r7, #20]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fb10 	bl	8000b84 <__aeabi_fsub>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
}
 800356e:	bf00      	nop
 8003570:	372c      	adds	r7, #44	@ 0x2c
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	bf00      	nop
 8003578:	1a63c1f8 	.word	0x1a63c1f8
 800357c:	404ca5dc 	.word	0x404ca5dc
 8003580:	43340000 	.word	0x43340000
 8003584:	43b40000 	.word	0x43b40000
 8003588:	c3340000 	.word	0xc3340000
 800358c:	00000000 	.word	0x00000000

08003590 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f94b 	bl	8003838 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution;  // get actual g value, this depends on scale being set
 80035a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fba2 	bl	8000cf0 <__aeabi_i2f>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7fd fbef 	bl	8000d98 <__aeabi_fmul>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution;
 80035c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fb92 	bl	8000cf0 <__aeabi_i2f>
 80035cc:	4602      	mov	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fd fbdf 	bl	8000d98 <__aeabi_fmul>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	671a      	str	r2, [r3, #112]	@ 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution;
 80035e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fb82 	bl	8000cf0 <__aeabi_i2f>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fd fbcf 	bl	8000d98 <__aeabi_fmul>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	675a      	str	r2, [r3, #116]	@ 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 8003602:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb6c 	bl	8000cf0 <__aeabi_i2f>
 8003618:	4603      	mov	r3, r0
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ff0e 	bl	800043c <__aeabi_f2d>
 8003620:	a325      	add	r3, pc, #148	@ (adr r3, 80036b8 <update_accel_gyro+0x128>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f7fd f88b 	bl	8000740 <__aeabi_ddiv>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <update_accel_gyro+0x130>)
 8003638:	f7fc fda2 	bl	8000180 <__adddf3>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd fa4a 	bl	8000adc <__aeabi_d2f>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	651a      	str	r2, [r3, #80]	@ 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution;  // get actual gyro value, this depends on scale being set
 800364e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fb4c 	bl	8000cf0 <__aeabi_i2f>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fd fb99 	bl	8000d98 <__aeabi_fmul>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	679a      	str	r2, [r3, #120]	@ 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution;
 800366e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fb3c 	bl	8000cf0 <__aeabi_i2f>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fd fb89 	bl	8000d98 <__aeabi_fmul>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	67da      	str	r2, [r3, #124]	@ 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution;
 800368e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fb2c 	bl	8000cf0 <__aeabi_i2f>
 8003698:	4602      	mov	r2, r0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7fd fb79 	bl	8000d98 <__aeabi_fmul>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
 80036b0:	bf00      	nop
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	851eb852 	.word	0x851eb852
 80036bc:	4074ddeb 	.word	0x4074ddeb
 80036c0:	40350000 	.word	0x40350000
 80036c4:	00000000 	.word	0x00000000

080036c8 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 80036d0:	2300      	movs	r3, #0
 80036d2:	81bb      	strh	r3, [r7, #12]
 80036d4:	2300      	movs	r3, #0
 80036d6:	81fb      	strh	r3, [r7, #14]
 80036d8:	2300      	movs	r3, #0
 80036da:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f8fd 	bl	80038e0 <readMag>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f040 809c 	bne.w	8003826 <update_mag+0x15e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fea2 	bl	800043c <__aeabi_f2d>
 80036f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8003830 <update_mag+0x168>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fd f81f 	bl	8000740 <__aeabi_ddiv>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd f9e7 	bl	8000adc <__aeabi_d2f>
 800370e:	4603      	mov	r3, r0
 8003710:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 8003712:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd faea 	bl	8000cf0 <__aeabi_i2f>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7fd fb37 	bl	8000d98 <__aeabi_fmul>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f7fd fb2f 	bl	8000d98 <__aeabi_fmul>
 800373a:	4603      	mov	r3, r0
 800373c:	461c      	mov	r4, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	6979      	ldr	r1, [r7, #20]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fb27 	bl	8000d98 <__aeabi_fmul>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	4620      	mov	r0, r4
 8003750:	f7fd fa18 	bl	8000b84 <__aeabi_fsub>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fd fb1a 	bl	8000d98 <__aeabi_fmul>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 800376e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fabc 	bl	8000cf0 <__aeabi_i2f>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f7fd fb09 	bl	8000d98 <__aeabi_fmul>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fd fb01 	bl	8000d98 <__aeabi_fmul>
 8003796:	4603      	mov	r3, r0
 8003798:	461c      	mov	r4, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd faf9 	bl	8000d98 <__aeabi_fmul>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4619      	mov	r1, r3
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7fd f9ea 	bl	8000b84 <__aeabi_fsub>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7fd faec 	bl	8000d98 <__aeabi_fmul>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 80037ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fa8e 	bl	8000cf0 <__aeabi_i2f>
 80037d4:	4602      	mov	r2, r0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fd fadb 	bl	8000d98 <__aeabi_fmul>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fd fad3 	bl	8000d98 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461c      	mov	r4, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd facb 	bl	8000d98 <__aeabi_fmul>
 8003802:	4603      	mov	r3, r0
 8003804:	4619      	mov	r1, r3
 8003806:	4620      	mov	r0, r4
 8003808:	f7fd f9bc 	bl	8000b84 <__aeabi_fsub>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fd fabe 	bl	8000d98 <__aeabi_fmul>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
    }
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	d7fd7fd8 	.word	0xd7fd7fd8
 8003834:	3ff7fd7f 	.word	0x3ff7fd7f

08003838 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	220e      	movs	r2, #14
 8003846:	213b      	movs	r1, #59	@ 0x3b
 8003848:	20d0      	movs	r0, #208	@ 0xd0
 800384a:	f000 fa5b 	bl	8003d04 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 800384e:	7a3b      	ldrb	r3, [r7, #8]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	b21a      	sxth	r2, r3
 8003854:	7a7b      	ldrb	r3, [r7, #9]
 8003856:	b21b      	sxth	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b21a      	sxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8003860:	7abb      	ldrb	r3, [r7, #10]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	b219      	sxth	r1, r3
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	b21a      	sxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3302      	adds	r3, #2
 800386e:	430a      	orrs	r2, r1
 8003870:	b212      	sxth	r2, r2
 8003872:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 8003874:	7b3b      	ldrb	r3, [r7, #12]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	b219      	sxth	r1, r3
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	b21a      	sxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	430a      	orrs	r2, r1
 8003884:	b212      	sxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	b219      	sxth	r1, r3
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	b21a      	sxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3306      	adds	r3, #6
 8003896:	430a      	orrs	r2, r1
 8003898:	b212      	sxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 800389c:	7c3b      	ldrb	r3, [r7, #16]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	b219      	sxth	r1, r3
 80038a2:	7c7b      	ldrb	r3, [r7, #17]
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3308      	adds	r3, #8
 80038aa:	430a      	orrs	r2, r1
 80038ac:	b212      	sxth	r2, r2
 80038ae:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 80038b0:	7cbb      	ldrb	r3, [r7, #18]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	b219      	sxth	r1, r3
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	330a      	adds	r3, #10
 80038be:	430a      	orrs	r2, r1
 80038c0:	b212      	sxth	r2, r2
 80038c2:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 80038c4:	7d3b      	ldrb	r3, [r7, #20]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b219      	sxth	r1, r3
 80038ca:	7d7b      	ldrb	r3, [r7, #21]
 80038cc:	b21a      	sxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	330c      	adds	r3, #12
 80038d2:	430a      	orrs	r2, r1
 80038d4:	b212      	sxth	r2, r2
 80038d6:	801a      	strh	r2, [r3, #0]
}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <readMag>:


uint8_t readMag(int16_t* destination)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 80038e8:	2102      	movs	r1, #2
 80038ea:	2018      	movs	r0, #24
 80038ec:	f000 f9e4 	bl	8003cb8 <readByte>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03f      	beq.n	800397e <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	2207      	movs	r2, #7
 8003904:	2103      	movs	r1, #3
 8003906:	2018      	movs	r0, #24
 8003908:	f000 f9fc 	bl	8003d04 <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 800390c:	4b1e      	ldr	r3, [pc, #120]	@ (8003988 <readMag+0xa8>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d007      	beq.n	8003924 <readMag+0x44>
 8003914:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <readMag+0xa8>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d003      	beq.n	8003924 <readMag+0x44>
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <readMag+0xa8>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d106      	bne.n	8003932 <readMag+0x52>
	                if ((st1 & 0x02) != 0)                                       // check if data is not skipped
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 800392e:	2300      	movs	r3, #0
 8003930:	e026      	b.n	8003980 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 8003932:	7cbb      	ldrb	r3, [r7, #18]
 8003934:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8003936:	7dbb      	ldrb	r3, [r7, #22]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11e      	bne.n	800397e <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8003940:	7b7b      	ldrb	r3, [r7, #13]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	b21a      	sxth	r2, r3
 8003946:	7b3b      	ldrb	r3, [r7, #12]
 8003948:	b21b      	sxth	r3, r3
 800394a:	4313      	orrs	r3, r2
 800394c:	b21a      	sxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b219      	sxth	r1, r3
 8003958:	7bbb      	ldrb	r3, [r7, #14]
 800395a:	b21a      	sxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3302      	adds	r3, #2
 8003960:	430a      	orrs	r2, r1
 8003962:	b212      	sxth	r2, r2
 8003964:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8003966:	7c7b      	ldrb	r3, [r7, #17]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	b219      	sxth	r1, r3
 800396c:	7c3b      	ldrb	r3, [r7, #16]
 800396e:	b21a      	sxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	430a      	orrs	r2, r1
 8003976:	b212      	sxth	r2, r2
 8003978:	801a      	strh	r2, [r3, #0]
	                return 1;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <readMag+0xa0>
	            }
	        }
	        return 0;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000003 	.word	0x20000003

0800398c <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003994:	2200      	movs	r2, #0
 8003996:	210a      	movs	r1, #10
 8003998:	2018      	movs	r0, #24
 800399a:	f000 f9ef 	bl	8003d7c <writeByte>
  HAL_Delay(100);
 800399e:	2064      	movs	r0, #100	@ 0x64
 80039a0:	f001 f8d0 	bl	8004b44 <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80039a4:	220f      	movs	r2, #15
 80039a6:	210a      	movs	r1, #10
 80039a8:	2018      	movs	r0, #24
 80039aa:	f000 f9e7 	bl	8003d7c <writeByte>
  HAL_Delay(100);
 80039ae:	2064      	movs	r0, #100	@ 0x64
 80039b0:	f001 f8c8 	bl	8004b44 <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	2203      	movs	r2, #3
 80039ba:	2110      	movs	r1, #16
 80039bc:	2018      	movs	r0, #24
 80039be:	f000 f9a1 	bl	8003d04 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80039c2:	7b3b      	ldrb	r3, [r7, #12]
 80039c4:	3b80      	subs	r3, #128	@ 0x80
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f992 	bl	8000cf0 <__aeabi_i2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fa94 	bl	8000f00 <__aeabi_fdiv>
 80039d8:	4603      	mov	r3, r0
 80039da:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f8d2 	bl	8000b88 <__addsf3>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80039ec:	7b7b      	ldrb	r3, [r7, #13]
 80039ee:	3b80      	subs	r3, #128	@ 0x80
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd f97d 	bl	8000cf0 <__aeabi_i2f>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fa7f 	bl	8000f00 <__aeabi_fdiv>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd f8bd 	bl	8000b88 <__addsf3>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8003a16:	7bbb      	ldrb	r3, [r7, #14]
 8003a18:	3b80      	subs	r3, #128	@ 0x80
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f968 	bl	8000cf0 <__aeabi_i2f>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fa6a 	bl	8000f00 <__aeabi_fdiv>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd f8a8 	bl	8000b88 <__addsf3>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003a40:	2200      	movs	r2, #0
 8003a42:	210a      	movs	r1, #10
 8003a44:	2018      	movs	r0, #24
 8003a46:	f000 f999 	bl	8003d7c <writeByte>
  HAL_Delay(100);
 8003a4a:	2064      	movs	r0, #100	@ 0x64
 8003a4c:	f001 f87a 	bl	8004b44 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <initAK8963+0xf0>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	b25a      	sxtb	r2, r3
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <initAK8963+0xf4>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	210a      	movs	r1, #10
 8003a68:	2018      	movs	r0, #24
 8003a6a:	f000 f987 	bl	8003d7c <writeByte>
  HAL_Delay(100);
 8003a6e:	2064      	movs	r0, #100	@ 0x64
 8003a70:	f001 f868 	bl	8004b44 <HAL_Delay>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000002 	.word	0x20000002
 8003a80:	20000003 	.word	0x20000003

08003a84 <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8e3 	bl	8003c58 <getAres>
	getGres(MPU9250);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8ac 	bl	8003bf0 <getGres>
	getMres(MPU9250);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f88b 	bl	8003bb4 <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	216b      	movs	r1, #107	@ 0x6b
 8003aa2:	20d0      	movs	r0, #208	@ 0xd0
 8003aa4:	f000 f96a 	bl	8003d7c <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8003aa8:	2064      	movs	r0, #100	@ 0x64
 8003aaa:	f001 f84b 	bl	8004b44 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003aae:	2200      	movs	r2, #0
 8003ab0:	216b      	movs	r1, #107	@ 0x6b
 8003ab2:	20d0      	movs	r0, #208	@ 0xd0
 8003ab4:	f000 f962 	bl	8003d7c <writeByte>
	HAL_Delay(100);
 8003ab8:	2064      	movs	r0, #100	@ 0x64
 8003aba:	f001 f843 	bl	8004b44 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003abe:	2201      	movs	r2, #1
 8003ac0:	216b      	movs	r1, #107	@ 0x6b
 8003ac2:	20d0      	movs	r0, #208	@ 0xd0
 8003ac4:	f000 f95a 	bl	8003d7c <writeByte>
	HAL_Delay(100);
 8003ac8:	2064      	movs	r0, #100	@ 0x64
 8003aca:	f001 f83b 	bl	8004b44 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003ace:	2203      	movs	r2, #3
 8003ad0:	211a      	movs	r1, #26
 8003ad2:	20d0      	movs	r0, #208	@ 0xd0
 8003ad4:	f000 f952 	bl	8003d7c <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8003ad8:	2204      	movs	r2, #4
 8003ada:	2119      	movs	r1, #25
 8003adc:	20d0      	movs	r0, #208	@ 0xd0
 8003ade:	f000 f94d 	bl	8003d7c <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 8003ae2:	211b      	movs	r1, #27
 8003ae4:	20d0      	movs	r0, #208	@ 0xd0
 8003ae6:	f000 f8e7 	bl	8003cb8 <readByte>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	f023 0303 	bic.w	r3, r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	f023 0318 	bic.w	r3, r3, #24
 8003b04:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <MPU9250_Init+0x128>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	b25a      	sxtb	r2, r3
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	73fb      	strb	r3, [r7, #15]
	  c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	f043 0303 	orr.w	r3, r3, #3
 8003b1e:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	461a      	mov	r2, r3
 8003b24:	211b      	movs	r1, #27
 8003b26:	20d0      	movs	r0, #208	@ 0xd0
 8003b28:	f000 f928 	bl	8003d7c <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8003b2c:	211c      	movs	r1, #28
 8003b2e:	20d0      	movs	r0, #208	@ 0xd0
 8003b30:	f000 f8c2 	bl	8003cb8 <readByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	f023 0318 	bic.w	r3, r3, #24
 8003b46:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8003b48:	4b19      	ldr	r3, [pc, #100]	@ (8003bb0 <MPU9250_Init+0x12c>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	b25a      	sxtb	r2, r3
 8003b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	211c      	movs	r1, #28
 8003b60:	20d0      	movs	r0, #208	@ 0xd0
 8003b62:	f000 f90b 	bl	8003d7c <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8003b66:	211d      	movs	r1, #29
 8003b68:	20d0      	movs	r0, #208	@ 0xd0
 8003b6a:	f000 f8a5 	bl	8003cb8 <readByte>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	f023 030f 	bic.w	r3, r3, #15
 8003b78:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	f043 0303 	orr.w	r3, r3, #3
 8003b80:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	461a      	mov	r2, r3
 8003b86:	211d      	movs	r1, #29
 8003b88:	20d0      	movs	r0, #208	@ 0xd0
 8003b8a:	f000 f8f7 	bl	8003d7c <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8003b8e:	2222      	movs	r2, #34	@ 0x22
 8003b90:	2137      	movs	r1, #55	@ 0x37
 8003b92:	20d0      	movs	r0, #208	@ 0xd0
 8003b94:	f000 f8f2 	bl	8003d7c <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8003b98:	2201      	movs	r2, #1
 8003b9a:	2138      	movs	r1, #56	@ 0x38
 8003b9c:	20d0      	movs	r0, #208	@ 0xd0
 8003b9e:	f000 f8ed 	bl	8003d7c <writeByte>

}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000001 	.word	0x20000001
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <getMres+0x30>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <getMres+0x16>
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d004      	beq.n	8003bd2 <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8003bc8:	e007      	b.n	8003bda <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a06      	ldr	r2, [pc, #24]	@ (8003be8 <getMres+0x34>)
 8003bce:	609a      	str	r2, [r3, #8]
          break;
 8003bd0:	e003      	b.n	8003bda <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a05      	ldr	r2, [pc, #20]	@ (8003bec <getMres+0x38>)
 8003bd6:	609a      	str	r2, [r3, #8]
          break;
 8003bd8:	bf00      	nop
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	20000002 	.word	0x20000002
 8003be8:	40bfebff 	.word	0x40bfebff
 8003bec:	3fbfebff 	.word	0x3fbfebff

08003bf0 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8003bf8:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <getGres+0x54>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81a      	bhi.n	8003c38 <getGres+0x48>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <getGres+0x18>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c21 	.word	0x08003c21
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c31 	.word	0x08003c31
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <getGres+0x58>)
 8003c1c:	605a      	str	r2, [r3, #4]
          break;
 8003c1e:	e00b      	b.n	8003c38 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <getGres+0x5c>)
 8003c24:	605a      	str	r2, [r3, #4]
          break;
 8003c26:	e007      	b.n	8003c38 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <getGres+0x60>)
 8003c2c:	605a      	str	r2, [r3, #4]
          break;
 8003c2e:	e003      	b.n	8003c38 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <getGres+0x64>)
 8003c34:	605a      	str	r2, [r3, #4]
          break;
 8003c36:	bf00      	nop
  }
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000001 	.word	0x20000001
 8003c48:	3bfa0000 	.word	0x3bfa0000
 8003c4c:	3c7a0000 	.word	0x3c7a0000
 8003c50:	3cfa0000 	.word	0x3cfa0000
 8003c54:	3d7a0000 	.word	0x3d7a0000

08003c58 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8003c60:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <getAres+0x5c>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d81e      	bhi.n	8003ca8 <getAres+0x50>
 8003c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <getAres+0x18>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c8b 	.word	0x08003c8b
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	08003c9f 	.word	0x08003c9f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8003c86:	601a      	str	r2, [r3, #0]
          break;
 8003c88:	e00e      	b.n	8003ca8 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8003c90:	601a      	str	r2, [r3, #0]
          break;
 8003c92:	e009      	b.n	8003ca8 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8003c9a:	601a      	str	r2, [r3, #0]
          break;
 8003c9c:	e004      	b.n	8003ca8 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8003ca4:	601a      	str	r2, [r3, #0]
          break;
 8003ca6:	bf00      	nop
  }
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	71fb      	strb	r3, [r7, #7]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8003cc8:	79bb      	ldrb	r3, [r7, #6]
 8003cca:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	f107 0208 	add.w	r2, r7, #8
 8003cd4:	2364      	movs	r3, #100	@ 0x64
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4809      	ldr	r0, [pc, #36]	@ (8003d00 <readByte+0x48>)
 8003cdc:	f001 fb5c 	bl	8005398 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	b299      	uxth	r1, r3
 8003ce4:	f107 020c 	add.w	r2, r7, #12
 8003ce8:	2364      	movs	r3, #100	@ 0x64
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2301      	movs	r3, #1
 8003cee:	4804      	ldr	r0, [pc, #16]	@ (8003d00 <readByte+0x48>)
 8003cf0:	f001 fc50 	bl	8005594 <HAL_I2C_Master_Receive>

	return data[0];
 8003cf4:	7b3b      	ldrb	r3, [r7, #12]

}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000264 	.word	0x20000264

08003d04 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	460b      	mov	r3, r1
 8003d12:	71bb      	strb	r3, [r7, #6]
 8003d14:	4613      	mov	r3, r2
 8003d16:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8003d18:	79bb      	ldrb	r3, [r7, #6]
 8003d1a:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	b299      	uxth	r1, r3
 8003d20:	f107 0208 	add.w	r2, r7, #8
 8003d24:	2364      	movs	r3, #100	@ 0x64
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4813      	ldr	r0, [pc, #76]	@ (8003d78 <readBytes+0x74>)
 8003d2c:	f001 fb34 	bl	8005398 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	b299      	uxth	r1, r3
 8003d34:	797b      	ldrb	r3, [r7, #5]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f107 020c 	add.w	r2, r7, #12
 8003d3c:	2064      	movs	r0, #100	@ 0x64
 8003d3e:	9000      	str	r0, [sp, #0]
 8003d40:	480d      	ldr	r0, [pc, #52]	@ (8003d78 <readBytes+0x74>)
 8003d42:	f001 fc27 	bl	8005594 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e00b      	b.n	8003d64 <readBytes+0x60>
			dest[ii] = data[ii];
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	f107 010c 	add.w	r1, r7, #12
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	797b      	ldrb	r3, [r7, #5]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	dbef      	blt.n	8003d4c <readBytes+0x48>
		}

}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000264 	.word	0x20000264

08003d7c <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	460b      	mov	r3, r1
 8003d88:	71bb      	strb	r3, [r7, #6]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8003d8e:	79bb      	ldrb	r3, [r7, #6]
 8003d90:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8003d92:	797b      	ldrb	r3, [r7, #5]
 8003d94:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	b299      	uxth	r1, r3
 8003d9a:	f107 020c 	add.w	r2, r7, #12
 8003d9e:	2364      	movs	r3, #100	@ 0x64
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2302      	movs	r3, #2
 8003da4:	4803      	ldr	r0, [pc, #12]	@ (8003db4 <writeByte+0x38>)
 8003da6:	f001 faf7 	bl	8005398 <HAL_I2C_Master_Transmit>
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000264 	.word	0x20000264

08003db8 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	629a      	str	r2, [r3, #40]	@ 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a44      	ldr	r2, [pc, #272]	@ (8003f64 <MPU9250SetDefault+0x1ac>)
 8003e54:	649a      	str	r2, [r3, #72]	@ 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	651a      	str	r2, [r3, #80]	@ 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	659a      	str	r2, [r3, #88]	@ 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	661a      	str	r2, [r3, #96]	@ 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	665a      	str	r2, [r3, #100]	@ 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	669a      	str	r2, [r3, #104]	@ 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
	MPU9250 -> a[1] = 0.;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	671a      	str	r2, [r3, #112]	@ 0x70
	MPU9250 -> a[2] = 0.;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	675a      	str	r2, [r3, #116]	@ 0x74
	MPU9250 -> g[0] = 0.;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	679a      	str	r2, [r3, #120]	@ 0x78
	MPU9250 -> g[1] = 0.;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	67da      	str	r2, [r3, #124]	@ 0x7c
	MPU9250 -> g[2] = 0.;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MPU9250 -> m[0] = 0.;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MPU9250 -> m[1] = 0.;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MPU9250 -> m[2] = 0.;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	MPU9250 -> q[1] = 0.;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	MPU9250 -> q[2] = 0.;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MPU9250 -> q[3] = 0.;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MPU9250 -> rpy[0] = 0.;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU9250 -> rpy[1] = 0.;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	MPU9250 -> rpy[2] = 0.;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	MPU9250 -> has_connected = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	MPU9250 -> n_filter_iter = 1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	412e8f5c 	.word	0x412e8f5c

08003f68 <converter_time>:
#include <stdlib.h>
#include <string.h>
#include <time.h>


uint32_t converter_time(char* TimeStamp, char* date) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08e      	sub	sp, #56	@ 0x38
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
    struct tm tm_time = {0};  // Инициализируем структуру tm нулями
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	2224      	movs	r2, #36	@ 0x24
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f006 fce9 	bl	800a952 <memset>
    char buff[3] = {0};  // Временный буфер для преобразования
 8003f80:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <converter_time+0xe0>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	81bb      	strh	r3, [r7, #12]
 8003f86:	2300      	movs	r3, #0
 8003f88:	73bb      	strb	r3, [r7, #14]

    // Разбор даты (формат DDMMYY)
    buff[0] = date[0];
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	733b      	strb	r3, [r7, #12]
    buff[1] = date[1];
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	737b      	strb	r3, [r7, #13]
    tm_time.tm_mday = atoi(buff);  // День
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f005 f89a 	bl	80090d4 <atoi>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	61fb      	str	r3, [r7, #28]

    buff[0] = date[2];
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	789b      	ldrb	r3, [r3, #2]
 8003fa8:	733b      	strb	r3, [r7, #12]
    buff[1] = date[3];
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	78db      	ldrb	r3, [r3, #3]
 8003fae:	737b      	strb	r3, [r7, #13]
    tm_time.tm_mon = atoi(buff) - 1;  // Месяц (0-11, поэтому нужно вычесть 1)
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f005 f88d 	bl	80090d4 <atoi>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	623b      	str	r3, [r7, #32]

    buff[0] = date[4];
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	791b      	ldrb	r3, [r3, #4]
 8003fc4:	733b      	strb	r3, [r7, #12]
    buff[1] = date[5];
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	795b      	ldrb	r3, [r3, #5]
 8003fca:	737b      	strb	r3, [r7, #13]
    tm_time.tm_year = atoi(buff) + 100;  // Год с учетом 1900, поэтому добавляем 100
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f005 f87f 	bl	80090d4 <atoi>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	3364      	adds	r3, #100	@ 0x64
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24

    // Разбор времени (формат HHMMSS)
    buff[0] = TimeStamp[0];
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[1];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	737b      	strb	r3, [r7, #13]
    tm_time.tm_hour = atoi(buff);  // Часы
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	4618      	mov	r0, r3
 8003fee:	f005 f871 	bl	80090d4 <atoi>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	61bb      	str	r3, [r7, #24]

    buff[0] = TimeStamp[2];
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[3];
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	78db      	ldrb	r3, [r3, #3]
 8004000:	737b      	strb	r3, [r7, #13]
    tm_time.tm_min = atoi(buff);  // Минуты
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4618      	mov	r0, r3
 8004008:	f005 f864 	bl	80090d4 <atoi>
 800400c:	4603      	mov	r3, r0
 800400e:	617b      	str	r3, [r7, #20]

    buff[0] = TimeStamp[4];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	733b      	strb	r3, [r7, #12]
    buff[1] = TimeStamp[5];
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	795b      	ldrb	r3, [r3, #5]
 800401a:	737b      	strb	r3, [r7, #13]
    tm_time.tm_sec = atoi(buff);  // Секунды
 800401c:	f107 030c 	add.w	r3, r7, #12
 8004020:	4618      	mov	r0, r3
 8004022:	f005 f857 	bl	80090d4 <atoi>
 8004026:	4603      	mov	r3, r0
 8004028:	613b      	str	r3, [r7, #16]

    // Преобразуем tm в количество секунд с 1 января 1970 года
    uint32_t seconds = mktime(&tm_time);
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f006 fd7e 	bl	800ab30 <mktime>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34

    return seconds;
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800403e:	4618      	mov	r0, r3
 8004040:	3738      	adds	r7, #56	@ 0x38
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	0800ebf8 	.word	0x0800ebf8

0800404c <parser>:

uint8_t parser(char *inpString, uint16_t len, GPS* gps) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b0bc      	sub	sp, #240	@ 0xf0
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	460b      	mov	r3, r1
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	817b      	strh	r3, [r7, #10]
	
	char buff_for_init_data[6] = {0};  // Буфер для поиска строки "GNRMC"
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004060:	2300      	movs	r3, #0
 8004062:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    int start_index = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    char c;
	
	// Поиск строки "GNRMC"
    for (int k = 0; k < len; k++) {
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004072:	e03b      	b.n	80040ec <parser+0xa0>
        for (int i = 0; i < 5 && k + i < len; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800407a:	e014      	b.n	80040a6 <parser+0x5a>
            buff_for_init_data[i] = inpString[k + i];
 800407c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	4413      	add	r3, r2
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	7819      	ldrb	r1, [r3, #0]
 800408e:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004096:	4413      	add	r3, r2
 8004098:	460a      	mov	r2, r1
 800409a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 5 && k + i < len; i++) {
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	3301      	adds	r3, #1
 80040a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	dc07      	bgt.n	80040be <parser+0x72>
 80040ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b6:	441a      	add	r2, r3
 80040b8:	897b      	ldrh	r3, [r7, #10]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	dbde      	blt.n	800407c <parser+0x30>
        }
        buff_for_init_data[5] = '\0';
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
        if (strcmp(buff_for_init_data, "GNRMC") == 0) {
 80040c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80040c8:	49cb      	ldr	r1, [pc, #812]	@ (80043f8 <parser+0x3ac>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc f840 	bl	8000150 <strcmp>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <parser+0x96>
            start_index = k + 5;  // Начинаем после "GNRMC,"
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040da:	3305      	adds	r3, #5
 80040dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            break;
 80040e0:	e009      	b.n	80040f6 <parser+0xaa>
    for (int k = 0; k < len; k++) {
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e6:	3301      	adds	r3, #1
 80040e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040f2:	429a      	cmp	r2, r3
 80040f4:	dbbe      	blt.n	8004074 <parser+0x28>
        }
    }
	
	if (start_index == 0) {
 80040f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <parser+0xb6>
        return 2;
 80040fe:	2302      	movs	r3, #2
 8004100:	e1da      	b.n	80044b8 <parser+0x46c>
    }
	
	if (start_index > 1022) {
 8004102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004106:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800410a:	4293      	cmp	r3, r2
 800410c:	dd01      	ble.n	8004112 <parser+0xc6>
	        return 3;
 800410e:	2303      	movs	r3, #3
 8004110:	e1d2      	b.n	80044b8 <parser+0x46c>
	}

	// Выделение строки после "GNRMC,"
    char for_tokens[128];
	
	int i = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (inpString[start_index] != '\n' && inpString[start_index] != '\r') {
 8004118:	e011      	b.n	800413e <parser+0xf2>
        for_tokens[i++] = inpString[start_index++];
 800411a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004124:	461a      	mov	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	441a      	add	r2, r3
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	33f0      	adds	r3, #240	@ 0xf0
 8004138:	443b      	add	r3, r7
 800413a:	f803 2ca4 	strb.w	r2, [r3, #-164]
    while (inpString[start_index] != '\n' && inpString[start_index] != '\r') {
 800413e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b0a      	cmp	r3, #10
 800414a:	d006      	beq.n	800415a <parser+0x10e>
 800414c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b0d      	cmp	r3, #13
 8004158:	d1df      	bne.n	800411a <parser+0xce>
    }
    for_tokens[i] = '\0';
 800415a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004162:	4413      	add	r3, r2
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]

    // Парсинг строки для извлечения данных
    char timeStamp[11] = {0}, status[2] = {0}, latitude[12] = {0}, ns[2] = {0};
 8004168:	2300      	movs	r3, #0
 800416a:	643b      	str	r3, [r7, #64]	@ 0x40
 800416c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f8c3 2003 	str.w	r2, [r3, #3]
 8004178:	2300      	movs	r3, #0
 800417a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800417c:	2300      	movs	r3, #0
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004180:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	2300      	movs	r3, #0
 800418c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    char longitude[13] = {0}, ew[2] = {0}, date[7] = {0};
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	f107 0320 	add.w	r3, r7, #32
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	721a      	strb	r2, [r3, #8]
 800419e:	2300      	movs	r3, #0
 80041a0:	833b      	strh	r3, [r7, #24]
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	2100      	movs	r1, #0
 80041ac:	460a      	mov	r2, r1
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	460a      	mov	r2, r1
 80041b2:	709a      	strb	r2, [r3, #2]
	unsigned char ts = 0, lt = 0, lg = 0, dt = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
	
	
	i = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	int count = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    
    while(((c = for_tokens[i]) != '\n') && (c != '\r') && (i <= 126)) {
 80041d8:	e136      	b.n	8004448 <parser+0x3fc>

		if (c == ','){
 80041da:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80041de:	2b2c      	cmp	r3, #44	@ 0x2c
 80041e0:	d10a      	bne.n	80041f8 <parser+0x1ac>
			count++;
 80041e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041e6:	3301      	adds	r3, #1
 80041e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			i++;
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f0:	3301      	adds	r3, #1
 80041f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 80041f6:	e127      	b.n	8004448 <parser+0x3fc>
		}
		if (count > 9){
 80041f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	f300 8139 	bgt.w	8004474 <parser+0x428>
			break;
		}
		if (count == 0){
 8004202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8136 	beq.w	8004478 <parser+0x42c>
			break;
		}
		if (count == 1){
 800420c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004210:	2b01      	cmp	r3, #1
 8004212:	d12c      	bne.n	800426e <parser+0x222>
			while(c != ',' && c != '\n' && c != '\r'){
 8004214:	e017      	b.n	8004246 <parser+0x1fa>
				timeStamp[ts++] = c;
 8004216:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	f887 20db 	strb.w	r2, [r7, #219]	@ 0xdb
 8004220:	33f0      	adds	r3, #240	@ 0xf0
 8004222:	443b      	add	r3, r7
 8004224:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8004228:	f803 2cb0 	strb.w	r2, [r3, #-176]
				c = for_tokens[++i];
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004230:	3301      	adds	r3, #1
 8004232:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004236:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423e:	4413      	add	r3, r2
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 8004246:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800424a:	2b2c      	cmp	r3, #44	@ 0x2c
 800424c:	d007      	beq.n	800425e <parser+0x212>
 800424e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004252:	2b0a      	cmp	r3, #10
 8004254:	d003      	beq.n	800425e <parser+0x212>
 8004256:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800425a:	2b0d      	cmp	r3, #13
 800425c:	d1db      	bne.n	8004216 <parser+0x1ca>
			}
			timeStamp[ts] = '\0';
 800425e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004262:	33f0      	adds	r3, #240	@ 0xf0
 8004264:	443b      	add	r3, r7
 8004266:	2200      	movs	r2, #0
 8004268:	f803 2cb0 	strb.w	r2, [r3, #-176]
 800426c:	e0ec      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 2){
 800426e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004272:	2b02      	cmp	r3, #2
 8004274:	d10c      	bne.n	8004290 <parser+0x244>
			status[0] = c;
 8004276:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800427a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			status[1] = '\0';
 800427e:	2300      	movs	r3, #0
 8004280:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			i++;
 8004284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004288:	3301      	adds	r3, #1
 800428a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800428e:	e0db      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 3){
 8004290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004294:	2b03      	cmp	r3, #3
 8004296:	d12c      	bne.n	80042f2 <parser+0x2a6>
			while(c != ',' && c != '\n' && c != '\r'){
 8004298:	e017      	b.n	80042ca <parser+0x27e>
				latitude[lt++] = c;
 800429a:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	f887 20da 	strb.w	r2, [r7, #218]	@ 0xda
 80042a4:	33f0      	adds	r3, #240	@ 0xf0
 80042a6:	443b      	add	r3, r7
 80042a8:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 80042ac:	f803 2cc0 	strb.w	r2, [r3, #-192]
				c = for_tokens[++i];
 80042b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b4:	3301      	adds	r3, #1
 80042b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042ba:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80042be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 80042ca:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80042d0:	d007      	beq.n	80042e2 <parser+0x296>
 80042d2:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042d6:	2b0a      	cmp	r3, #10
 80042d8:	d003      	beq.n	80042e2 <parser+0x296>
 80042da:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042de:	2b0d      	cmp	r3, #13
 80042e0:	d1db      	bne.n	800429a <parser+0x24e>
			}
			latitude[lt] = '\0';
 80042e2:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80042e6:	33f0      	adds	r3, #240	@ 0xf0
 80042e8:	443b      	add	r3, r7
 80042ea:	2200      	movs	r2, #0
 80042ec:	f803 2cc0 	strb.w	r2, [r3, #-192]
 80042f0:	e0aa      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 4){
 80042f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d10c      	bne.n	8004314 <parser+0x2c8>
			ns[0] = c;
 80042fa:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80042fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			ns[1] = '\0';
 8004302:	2300      	movs	r3, #0
 8004304:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			i++;
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430c:	3301      	adds	r3, #1
 800430e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004312:	e099      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 5){
 8004314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004318:	2b05      	cmp	r3, #5
 800431a:	d12c      	bne.n	8004376 <parser+0x32a>
			while(c != ',' && c != '\n' && c != '\r'){
 800431c:	e017      	b.n	800434e <parser+0x302>
				longitude[lg++] = c;
 800431e:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	f887 20d9 	strb.w	r2, [r7, #217]	@ 0xd9
 8004328:	33f0      	adds	r3, #240	@ 0xf0
 800432a:	443b      	add	r3, r7
 800432c:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8004330:	f803 2cd4 	strb.w	r2, [r3, #-212]
				c = for_tokens[++i];
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800433e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 800434e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004352:	2b2c      	cmp	r3, #44	@ 0x2c
 8004354:	d007      	beq.n	8004366 <parser+0x31a>
 8004356:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800435a:	2b0a      	cmp	r3, #10
 800435c:	d003      	beq.n	8004366 <parser+0x31a>
 800435e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004362:	2b0d      	cmp	r3, #13
 8004364:	d1db      	bne.n	800431e <parser+0x2d2>
			}
			longitude[lg] = '\0';
 8004366:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800436a:	33f0      	adds	r3, #240	@ 0xf0
 800436c:	443b      	add	r3, r7
 800436e:	2200      	movs	r2, #0
 8004370:	f803 2cd4 	strb.w	r2, [r3, #-212]
 8004374:	e068      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 6){
 8004376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800437a:	2b06      	cmp	r3, #6
 800437c:	d10a      	bne.n	8004394 <parser+0x348>
			ew[0] = c;
 800437e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004382:	763b      	strb	r3, [r7, #24]
			ew[1] = '\0';
 8004384:	2300      	movs	r3, #0
 8004386:	767b      	strb	r3, [r7, #25]
			i++;
 8004388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800438c:	3301      	adds	r3, #1
 800438e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004392:	e059      	b.n	8004448 <parser+0x3fc>
		}
		else if (count == 9){
 8004394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004398:	2b09      	cmp	r3, #9
 800439a:	d12f      	bne.n	80043fc <parser+0x3b0>
			while(c != ',' && c != '\n' && c != '\r'){
 800439c:	e017      	b.n	80043ce <parser+0x382>
				date[dt++] = c;
 800439e:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	f887 20d8 	strb.w	r2, [r7, #216]	@ 0xd8
 80043a8:	33f0      	adds	r3, #240	@ 0xf0
 80043aa:	443b      	add	r3, r7
 80043ac:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 80043b0:	f803 2ce0 	strb.w	r2, [r3, #-224]
				c = for_tokens[++i];
 80043b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b8:	3301      	adds	r3, #1
 80043ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043be:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80043c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 80043ce:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043d2:	2b2c      	cmp	r3, #44	@ 0x2c
 80043d4:	d007      	beq.n	80043e6 <parser+0x39a>
 80043d6:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043da:	2b0a      	cmp	r3, #10
 80043dc:	d003      	beq.n	80043e6 <parser+0x39a>
 80043de:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80043e2:	2b0d      	cmp	r3, #13
 80043e4:	d1db      	bne.n	800439e <parser+0x352>
			}
			date[dt] = '\0';
 80043e6:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 80043ea:	33f0      	adds	r3, #240	@ 0xf0
 80043ec:	443b      	add	r3, r7
 80043ee:	2200      	movs	r2, #0
 80043f0:	f803 2ce0 	strb.w	r2, [r3, #-224]
 80043f4:	e028      	b.n	8004448 <parser+0x3fc>
 80043f6:	bf00      	nop
 80043f8:	0800ebfc 	.word	0x0800ebfc
		}
		else if ( count > 6 && count < 9){
 80043fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004400:	2b06      	cmp	r3, #6
 8004402:	dd1e      	ble.n	8004442 <parser+0x3f6>
 8004404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004408:	2b08      	cmp	r3, #8
 800440a:	dc1a      	bgt.n	8004442 <parser+0x3f6>
			while(c != ',' && c != '\n' && c != '\r'){
 800440c:	e00c      	b.n	8004428 <parser+0x3dc>
				c = for_tokens[++i];
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004412:	3301      	adds	r3, #1
 8004414:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004418:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800441c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004420:	4413      	add	r3, r2
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			while(c != ',' && c != '\n' && c != '\r'){
 8004428:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800442c:	2b2c      	cmp	r3, #44	@ 0x2c
 800442e:	d00a      	beq.n	8004446 <parser+0x3fa>
 8004430:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004434:	2b0a      	cmp	r3, #10
 8004436:	d006      	beq.n	8004446 <parser+0x3fa>
 8004438:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800443c:	2b0d      	cmp	r3, #13
 800443e:	d1e6      	bne.n	800440e <parser+0x3c2>
			}
			continue;
 8004440:	e001      	b.n	8004446 <parser+0x3fa>
		} else {
			continue;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <parser+0x3fc>
			continue;
 8004446:	bf00      	nop
    while(((c = for_tokens[i]) != '\n') && (c != '\r') && (i <= 126)) {
 8004448:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800444c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004450:	4413      	add	r3, r2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 8004458:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800445c:	2b0a      	cmp	r3, #10
 800445e:	d00c      	beq.n	800447a <parser+0x42e>
 8004460:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8004464:	2b0d      	cmp	r3, #13
 8004466:	d008      	beq.n	800447a <parser+0x42e>
 8004468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446c:	2b7e      	cmp	r3, #126	@ 0x7e
 800446e:	f77f aeb4 	ble.w	80041da <parser+0x18e>
 8004472:	e002      	b.n	800447a <parser+0x42e>
			break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <parser+0x42e>
			break;
 8004478:	bf00      	nop
		}
	}
	
	gps->lat = strtof(latitude, NULL); // Готовые данные
 800447a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f005 fc25 	bl	8009cd0 <strtof>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
	gps->lon = strtof(longitude, NULL); // Готовые данные
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f005 fc1c 	bl	8009cd0 <strtof>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	605a      	str	r2, [r3, #4]
	gps->secs = converter_time(timeStamp, date); // Время
 800449e:	f107 0210 	add.w	r2, r7, #16
 80044a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fd5d 	bl	8003f68 <converter_time>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]

	return (uint8_t)status[0];
 80044b4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c

	
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	37f0      	adds	r7, #240	@ 0xf0
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044c6:	4b15      	ldr	r3, [pc, #84]	@ (800451c <HAL_MspInit+0x5c>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	4a14      	ldr	r2, [pc, #80]	@ (800451c <HAL_MspInit+0x5c>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6193      	str	r3, [r2, #24]
 80044d2:	4b12      	ldr	r3, [pc, #72]	@ (800451c <HAL_MspInit+0x5c>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <HAL_MspInit+0x5c>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <HAL_MspInit+0x5c>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <HAL_MspInit+0x5c>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <HAL_MspInit+0x60>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4a04      	ldr	r2, [pc, #16]	@ (8004520 <HAL_MspInit+0x60>)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	40021000 	.word	0x40021000
 8004520:	40010000 	.word	0x40010000

08004524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_I2C_MspInit+0x70>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d123      	bne.n	800458c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004544:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4a13      	ldr	r2, [pc, #76]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	6193      	str	r3, [r2, #24]
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800455c:	23c0      	movs	r3, #192	@ 0xc0
 800455e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004560:	2312      	movs	r3, #18
 8004562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	4619      	mov	r1, r3
 800456e:	480b      	ldr	r0, [pc, #44]	@ (800459c <HAL_I2C_MspInit+0x78>)
 8004570:	f000 fc1a 	bl	8004da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	4a07      	ldr	r2, [pc, #28]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 800457a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800457e:	61d3      	str	r3, [r2, #28]
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_I2C_MspInit+0x74>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800458c:	bf00      	nop
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40005400 	.word	0x40005400
 8004598:	40021000 	.word	0x40021000
 800459c:	40010c00 	.word	0x40010c00

080045a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004628 <HAL_SPI_MspInit+0x88>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d12f      	bne.n	8004620 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045c0:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a19      	ldr	r2, [pc, #100]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b17      	ldr	r3, [pc, #92]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d8:	4b14      	ldr	r3, [pc, #80]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a13      	ldr	r2, [pc, #76]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b11      	ldr	r3, [pc, #68]	@ (800462c <HAL_SPI_MspInit+0x8c>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80045f0:	23a0      	movs	r3, #160	@ 0xa0
 80045f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	4619      	mov	r1, r3
 8004602:	480b      	ldr	r0, [pc, #44]	@ (8004630 <HAL_SPI_MspInit+0x90>)
 8004604:	f000 fbd0 	bl	8004da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004608:	2340      	movs	r3, #64	@ 0x40
 800460a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f107 0310 	add.w	r3, r7, #16
 8004618:	4619      	mov	r1, r3
 800461a:	4805      	ldr	r0, [pc, #20]	@ (8004630 <HAL_SPI_MspInit+0x90>)
 800461c:	f000 fbc4 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004620:	bf00      	nop
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40013000 	.word	0x40013000
 800462c:	40021000 	.word	0x40021000
 8004630:	40010800 	.word	0x40010800

08004634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a26      	ldr	r2, [pc, #152]	@ (80046e8 <HAL_TIM_Base_MspInit+0xb4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d144      	bne.n	80046de <HAL_TIM_Base_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004654:	4b25      	ldr	r3, [pc, #148]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 800465a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800465e:	6193      	str	r3, [r2, #24]
 8004660:	4b22      	ldr	r3, [pc, #136]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466c:	4b1f      	ldr	r3, [pc, #124]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 8004672:	f043 0304 	orr.w	r3, r3, #4
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b1c      	ldr	r3, [pc, #112]	@ (80046ec <HAL_TIM_Base_MspInit+0xb8>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004684:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004692:	f107 0310 	add.w	r3, r7, #16
 8004696:	4619      	mov	r1, r3
 8004698:	4815      	ldr	r0, [pc, #84]	@ (80046f0 <HAL_TIM_Base_MspInit+0xbc>)
 800469a:	f000 fb85 	bl	8004da8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	2018      	movs	r0, #24
 80046a4:	f000 fb49 	bl	8004d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80046a8:	2018      	movs	r0, #24
 80046aa:	f000 fb62 	bl	8004d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	2019      	movs	r0, #25
 80046b4:	f000 fb41 	bl	8004d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80046b8:	2019      	movs	r0, #25
 80046ba:	f000 fb5a 	bl	8004d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	201a      	movs	r0, #26
 80046c4:	f000 fb39 	bl	8004d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80046c8:	201a      	movs	r0, #26
 80046ca:	f000 fb52 	bl	8004d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	201b      	movs	r0, #27
 80046d4:	f000 fb31 	bl	8004d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80046d8:	201b      	movs	r0, #27
 80046da:	f000 fb4a 	bl	8004d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80046de:	bf00      	nop
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40010800 	.word	0x40010800

080046f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0318 	add.w	r3, r7, #24
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a37      	ldr	r2, [pc, #220]	@ (80047ec <HAL_UART_MspInit+0xf8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d132      	bne.n	800477a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004714:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	4a35      	ldr	r2, [pc, #212]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 800471a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800471e:	6193      	str	r3, [r2, #24]
 8004720:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472c:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6193      	str	r3, [r2, #24]
 8004738:	4b2d      	ldr	r3, [pc, #180]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474e:	2303      	movs	r3, #3
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	f107 0318 	add.w	r3, r7, #24
 8004756:	4619      	mov	r1, r3
 8004758:	4826      	ldr	r0, [pc, #152]	@ (80047f4 <HAL_UART_MspInit+0x100>)
 800475a:	f000 fb25 	bl	8004da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800475e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476c:	f107 0318 	add.w	r3, r7, #24
 8004770:	4619      	mov	r1, r3
 8004772:	4820      	ldr	r0, [pc, #128]	@ (80047f4 <HAL_UART_MspInit+0x100>)
 8004774:	f000 fb18 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004778:	e034      	b.n	80047e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <HAL_UART_MspInit+0x104>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d12f      	bne.n	80047e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004784:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4a19      	ldr	r2, [pc, #100]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478e:	61d3      	str	r3, [r2, #28]
 8004790:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479c:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	6193      	str	r3, [r2, #24]
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_UART_MspInit+0xfc>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047b4:	2304      	movs	r3, #4
 80047b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	2302      	movs	r3, #2
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	4619      	mov	r1, r3
 80047c6:	480b      	ldr	r0, [pc, #44]	@ (80047f4 <HAL_UART_MspInit+0x100>)
 80047c8:	f000 faee 	bl	8004da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047cc:	2308      	movs	r3, #8
 80047ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d8:	f107 0318 	add.w	r3, r7, #24
 80047dc:	4619      	mov	r1, r3
 80047de:	4805      	ldr	r0, [pc, #20]	@ (80047f4 <HAL_UART_MspInit+0x100>)
 80047e0:	f000 fae2 	bl	8004da8 <HAL_GPIO_Init>
}
 80047e4:	bf00      	nop
 80047e6:	3728      	adds	r7, #40	@ 0x28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40010800 	.word	0x40010800
 80047f8:	40004400 	.word	0x40004400

080047fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <NMI_Handler+0x4>

08004804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <HardFault_Handler+0x4>

0800480c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <MemManage_Handler+0x4>

08004814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <BusFault_Handler+0x4>

0800481c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <UsageFault_Handler+0x4>

08004824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800484c:	f000 f95e 	bl	8004b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004850:	bf00      	nop
 8004852:	bd80      	pop	{r7, pc}

08004854 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004858:	4802      	ldr	r0, [pc, #8]	@ (8004864 <TIM1_BRK_IRQHandler+0x10>)
 800485a:	f003 fc1b 	bl	8008094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000310 	.word	0x20000310

08004868 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800486c:	4802      	ldr	r0, [pc, #8]	@ (8004878 <TIM1_UP_IRQHandler+0x10>)
 800486e:	f003 fc11 	bl	8008094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000310 	.word	0x20000310

0800487c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004880:	4802      	ldr	r0, [pc, #8]	@ (800488c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004882:	f003 fc07 	bl	8008094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000310 	.word	0x20000310

08004890 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004894:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <TIM1_CC_IRQHandler+0x10>)
 8004896:	f003 fbfd 	bl	8008094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000310 	.word	0x20000310

080048a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return 1;
 80048a8:	2301      	movs	r3, #1
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <_kill>:

int _kill(int pid, int sig)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048bc:	f006 fe10 	bl	800b4e0 <__errno>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2216      	movs	r2, #22
 80048c4:	601a      	str	r2, [r3, #0]
  return -1;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <_exit>:

void _exit (int status)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048da:	f04f 31ff 	mov.w	r1, #4294967295
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffe7 	bl	80048b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <_exit+0x12>

080048e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e00a      	b.n	8004910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048fa:	f3af 8000 	nop.w
 80048fe:	4601      	mov	r1, r0
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	60ba      	str	r2, [r7, #8]
 8004906:	b2ca      	uxtb	r2, r1
 8004908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3301      	adds	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	dbf0      	blt.n	80048fa <_read+0x12>
  }

  return len;
 8004918:	687b      	ldr	r3, [r7, #4]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e009      	b.n	8004948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	60ba      	str	r2, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3301      	adds	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	dbf1      	blt.n	8004934 <_write+0x12>
  }
  return len;
 8004950:	687b      	ldr	r3, [r7, #4]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <_close>:

int _close(int file)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004980:	605a      	str	r2, [r3, #4]
  return 0;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <_isatty>:

int _isatty(int file)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004996:	2301      	movs	r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
	...

080049bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c4:	4a14      	ldr	r2, [pc, #80]	@ (8004a18 <_sbrk+0x5c>)
 80049c6:	4b15      	ldr	r3, [pc, #84]	@ (8004a1c <_sbrk+0x60>)
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d0:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <_sbrk+0x64>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <_sbrk+0x64>)
 80049da:	4a12      	ldr	r2, [pc, #72]	@ (8004a24 <_sbrk+0x68>)
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049de:	4b10      	ldr	r3, [pc, #64]	@ (8004a20 <_sbrk+0x64>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d207      	bcs.n	80049fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049ec:	f006 fd78 	bl	800b4e0 <__errno>
 80049f0:	4603      	mov	r3, r0
 80049f2:	220c      	movs	r2, #12
 80049f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e009      	b.n	8004a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049fc:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <_sbrk+0x64>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a02:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a05      	ldr	r2, [pc, #20]	@ (8004a20 <_sbrk+0x64>)
 8004a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20005000 	.word	0x20005000
 8004a1c:	00000400 	.word	0x00000400
 8004a20:	20000ad8 	.word	0x20000ad8
 8004a24:	20000c50 	.word	0x20000c50

08004a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a34:	f7ff fff8 	bl	8004a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a38:	480b      	ldr	r0, [pc, #44]	@ (8004a68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004a3a:	490c      	ldr	r1, [pc, #48]	@ (8004a6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a40:	e002      	b.n	8004a48 <LoopCopyDataInit>

08004a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a46:	3304      	adds	r3, #4

08004a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a4c:	d3f9      	bcc.n	8004a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a4e:	4a09      	ldr	r2, [pc, #36]	@ (8004a74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004a50:	4c09      	ldr	r4, [pc, #36]	@ (8004a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a54:	e001      	b.n	8004a5a <LoopFillZerobss>

08004a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a58:	3204      	adds	r2, #4

08004a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a5c:	d3fb      	bcc.n	8004a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a5e:	f006 fd45 	bl	800b4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a62:	f7fe f871 	bl	8002b48 <main>
  bx lr
 8004a66:	4770      	bx	lr
  ldr r0, =_sdata
 8004a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a6c:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004a70:	0800f1f0 	.word	0x0800f1f0
  ldr r2, =_sbss
 8004a74:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004a78:	20000c50 	.word	0x20000c50

08004a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a7c:	e7fe      	b.n	8004a7c <ADC1_2_IRQHandler>
	...

08004a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a84:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <HAL_Init+0x28>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a07      	ldr	r2, [pc, #28]	@ (8004aa8 <HAL_Init+0x28>)
 8004a8a:	f043 0310 	orr.w	r3, r3, #16
 8004a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a90:	2003      	movs	r0, #3
 8004a92:	f000 f947 	bl	8004d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a96:	200f      	movs	r0, #15
 8004a98:	f000 f808 	bl	8004aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a9c:	f7ff fd10 	bl	80044c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40022000 	.word	0x40022000

08004aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <HAL_InitTick+0x54>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_InitTick+0x58>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f95f 	bl	8004d8e <HAL_SYSTICK_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00e      	b.n	8004af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0f      	cmp	r3, #15
 8004ade:	d80a      	bhi.n	8004af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f000 f927 	bl	8004d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004aec:	4a06      	ldr	r2, [pc, #24]	@ (8004b08 <HAL_InitTick+0x5c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000008 	.word	0x20000008
 8004b04:	20000010 	.word	0x20000010
 8004b08:	2000000c 	.word	0x2000000c

08004b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_IncTick+0x1c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_IncTick+0x20>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a03      	ldr	r2, [pc, #12]	@ (8004b2c <HAL_IncTick+0x20>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	20000010 	.word	0x20000010
 8004b2c:	20000adc 	.word	0x20000adc

08004b30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return uwTick;
 8004b34:	4b02      	ldr	r3, [pc, #8]	@ (8004b40 <HAL_GetTick+0x10>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000adc 	.word	0x20000adc

08004b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_GetTick>
 8004b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d005      	beq.n	8004b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <HAL_Delay+0x44>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b6a:	bf00      	nop
 8004b6c:	f7ff ffe0 	bl	8004b30 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d8f7      	bhi.n	8004b6c <HAL_Delay+0x28>
  {
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000010 	.word	0x20000010

08004b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bbe:	4a04      	ldr	r2, [pc, #16]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	60d3      	str	r3, [r2, #12]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__NVIC_GetPriorityGrouping+0x18>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	f003 0307 	and.w	r3, r3, #7
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	db0b      	blt.n	8004c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	4906      	ldr	r1, [pc, #24]	@ (8004c24 <__NVIC_EnableIRQ+0x34>)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2001      	movs	r0, #1
 8004c12:	fa00 f202 	lsl.w	r2, r0, r2
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	e000e100 	.word	0xe000e100

08004c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db0a      	blt.n	8004c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	490c      	ldr	r1, [pc, #48]	@ (8004c74 <__NVIC_SetPriority+0x4c>)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	0112      	lsls	r2, r2, #4
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c50:	e00a      	b.n	8004c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4908      	ldr	r1, [pc, #32]	@ (8004c78 <__NVIC_SetPriority+0x50>)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	3b04      	subs	r3, #4
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	440b      	add	r3, r1
 8004c66:	761a      	strb	r2, [r3, #24]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000e100 	.word	0xe000e100
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	@ 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f1c3 0307 	rsb	r3, r3, #7
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	bf28      	it	cs
 8004c9a:	2304      	movcs	r3, #4
 8004c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d902      	bls.n	8004cac <NVIC_EncodePriority+0x30>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3b03      	subs	r3, #3
 8004caa:	e000      	b.n	8004cae <NVIC_EncodePriority+0x32>
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	43d9      	mvns	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd4:	4313      	orrs	r3, r2
         );
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3724      	adds	r7, #36	@ 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf0:	d301      	bcc.n	8004cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00f      	b.n	8004d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d20 <SysTick_Config+0x40>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cfe:	210f      	movs	r1, #15
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	f7ff ff90 	bl	8004c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <SysTick_Config+0x40>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <SysTick_Config+0x40>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010

08004d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff2d 	bl	8004b8c <__NVIC_SetPriorityGrouping>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d4c:	f7ff ff42 	bl	8004bd4 <__NVIC_GetPriorityGrouping>
 8004d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	f7ff ff90 	bl	8004c7c <NVIC_EncodePriority>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff5f 	bl	8004c28 <__NVIC_SetPriority>
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	4603      	mov	r3, r0
 8004d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff35 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ffa2 	bl	8004ce0 <SysTick_Config>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b08b      	sub	sp, #44	@ 0x2c
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004db6:	2300      	movs	r3, #0
 8004db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dba:	e169      	b.n	8005090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f040 8158 	bne.w	800508a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a9a      	ldr	r2, [pc, #616]	@ (8005048 <HAL_GPIO_Init+0x2a0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d05e      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
 8004de4:	4a98      	ldr	r2, [pc, #608]	@ (8005048 <HAL_GPIO_Init+0x2a0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d875      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004dea:	4a98      	ldr	r2, [pc, #608]	@ (800504c <HAL_GPIO_Init+0x2a4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d058      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
 8004df0:	4a96      	ldr	r2, [pc, #600]	@ (800504c <HAL_GPIO_Init+0x2a4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d86f      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004df6:	4a96      	ldr	r2, [pc, #600]	@ (8005050 <HAL_GPIO_Init+0x2a8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d052      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
 8004dfc:	4a94      	ldr	r2, [pc, #592]	@ (8005050 <HAL_GPIO_Init+0x2a8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d869      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004e02:	4a94      	ldr	r2, [pc, #592]	@ (8005054 <HAL_GPIO_Init+0x2ac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d04c      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
 8004e08:	4a92      	ldr	r2, [pc, #584]	@ (8005054 <HAL_GPIO_Init+0x2ac>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d863      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004e0e:	4a92      	ldr	r2, [pc, #584]	@ (8005058 <HAL_GPIO_Init+0x2b0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d046      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
 8004e14:	4a90      	ldr	r2, [pc, #576]	@ (8005058 <HAL_GPIO_Init+0x2b0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d85d      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004e1a:	2b12      	cmp	r3, #18
 8004e1c:	d82a      	bhi.n	8004e74 <HAL_GPIO_Init+0xcc>
 8004e1e:	2b12      	cmp	r3, #18
 8004e20:	d859      	bhi.n	8004ed6 <HAL_GPIO_Init+0x12e>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_GPIO_Init+0x80>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004ea3 	.word	0x08004ea3
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004e8f 	.word	0x08004e8f
 8004e34:	08004ed1 	.word	0x08004ed1
 8004e38:	08004ed7 	.word	0x08004ed7
 8004e3c:	08004ed7 	.word	0x08004ed7
 8004e40:	08004ed7 	.word	0x08004ed7
 8004e44:	08004ed7 	.word	0x08004ed7
 8004e48:	08004ed7 	.word	0x08004ed7
 8004e4c:	08004ed7 	.word	0x08004ed7
 8004e50:	08004ed7 	.word	0x08004ed7
 8004e54:	08004ed7 	.word	0x08004ed7
 8004e58:	08004ed7 	.word	0x08004ed7
 8004e5c:	08004ed7 	.word	0x08004ed7
 8004e60:	08004ed7 	.word	0x08004ed7
 8004e64:	08004ed7 	.word	0x08004ed7
 8004e68:	08004ed7 	.word	0x08004ed7
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	4a79      	ldr	r2, [pc, #484]	@ (800505c <HAL_GPIO_Init+0x2b4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e7a:	e02c      	b.n	8004ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	623b      	str	r3, [r7, #32]
          break;
 8004e82:	e029      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	623b      	str	r3, [r7, #32]
          break;
 8004e8c:	e024      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	3308      	adds	r3, #8
 8004e94:	623b      	str	r3, [r7, #32]
          break;
 8004e96:	e01f      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	623b      	str	r3, [r7, #32]
          break;
 8004ea0:	e01a      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004eaa:	2304      	movs	r3, #4
 8004eac:	623b      	str	r3, [r7, #32]
          break;
 8004eae:	e013      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004eb8:	2308      	movs	r3, #8
 8004eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	611a      	str	r2, [r3, #16]
          break;
 8004ec2:	e009      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	615a      	str	r2, [r3, #20]
          break;
 8004ece:	e003      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	623b      	str	r3, [r7, #32]
          break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_GPIO_Init+0x130>
          break;
 8004ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2bff      	cmp	r3, #255	@ 0xff
 8004edc:	d801      	bhi.n	8004ee2 <HAL_GPIO_Init+0x13a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	e001      	b.n	8004ee6 <HAL_GPIO_Init+0x13e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2bff      	cmp	r3, #255	@ 0xff
 8004eec:	d802      	bhi.n	8004ef4 <HAL_GPIO_Init+0x14c>
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	e002      	b.n	8004efa <HAL_GPIO_Init+0x152>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	3b08      	subs	r3, #8
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	210f      	movs	r1, #15
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80b1 	beq.w	800508a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f28:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6193      	str	r3, [r2, #24]
 8004f34:	4b4a      	ldr	r3, [pc, #296]	@ (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f40:	4a48      	ldr	r2, [pc, #288]	@ (8005064 <HAL_GPIO_Init+0x2bc>)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	3302      	adds	r3, #2
 8004f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	220f      	movs	r2, #15
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	@ (8005068 <HAL_GPIO_Init+0x2c0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_GPIO_Init+0x1ec>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800506c <HAL_GPIO_Init+0x2c4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00d      	beq.n	8004f90 <HAL_GPIO_Init+0x1e8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3e      	ldr	r2, [pc, #248]	@ (8005070 <HAL_GPIO_Init+0x2c8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <HAL_GPIO_Init+0x1e4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005074 <HAL_GPIO_Init+0x2cc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <HAL_GPIO_Init+0x1e0>
 8004f84:	2303      	movs	r3, #3
 8004f86:	e006      	b.n	8004f96 <HAL_GPIO_Init+0x1ee>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e004      	b.n	8004f96 <HAL_GPIO_Init+0x1ee>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e002      	b.n	8004f96 <HAL_GPIO_Init+0x1ee>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_GPIO_Init+0x1ee>
 8004f94:	2300      	movs	r3, #0
 8004f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f98:	f002 0203 	and.w	r2, r2, #3
 8004f9c:	0092      	lsls	r2, r2, #2
 8004f9e:	4093      	lsls	r3, r2
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fa6:	492f      	ldr	r1, [pc, #188]	@ (8005064 <HAL_GPIO_Init+0x2bc>)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	492c      	ldr	r1, [pc, #176]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fce:	4b2a      	ldr	r3, [pc, #168]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	4928      	ldr	r1, [pc, #160]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004fe8:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	4922      	ldr	r1, [pc, #136]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60cb      	str	r3, [r1, #12]
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	491e      	ldr	r1, [pc, #120]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8005000:	4013      	ands	r3, r2
 8005002:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005010:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4918      	ldr	r1, [pc, #96]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	e006      	b.n	800502c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800501e:	4b16      	ldr	r3, [pc, #88]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	43db      	mvns	r3, r3
 8005026:	4914      	ldr	r1, [pc, #80]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 8005028:	4013      	ands	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d021      	beq.n	800507c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005038:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	490e      	ldr	r1, [pc, #56]	@ (8005078 <HAL_GPIO_Init+0x2d0>)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	e021      	b.n	800508a <HAL_GPIO_Init+0x2e2>
 8005046:	bf00      	nop
 8005048:	10320000 	.word	0x10320000
 800504c:	10310000 	.word	0x10310000
 8005050:	10220000 	.word	0x10220000
 8005054:	10210000 	.word	0x10210000
 8005058:	10120000 	.word	0x10120000
 800505c:	10110000 	.word	0x10110000
 8005060:	40021000 	.word	0x40021000
 8005064:	40010000 	.word	0x40010000
 8005068:	40010800 	.word	0x40010800
 800506c:	40010c00 	.word	0x40010c00
 8005070:	40011000 	.word	0x40011000
 8005074:	40011400 	.word	0x40011400
 8005078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800507c:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_GPIO_Init+0x304>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	43db      	mvns	r3, r3
 8005084:	4909      	ldr	r1, [pc, #36]	@ (80050ac <HAL_GPIO_Init+0x304>)
 8005086:	4013      	ands	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	3301      	adds	r3, #1
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	f47f ae8e 	bne.w	8004dbc <HAL_GPIO_Init+0x14>
  }
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	372c      	adds	r7, #44	@ 0x2c
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40010400 	.word	0x40010400

080050b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
 80050cc:	e001      	b.n	80050d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]
 80050ea:	4613      	mov	r3, r2
 80050ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ee:	787b      	ldrb	r3, [r7, #1]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050fa:	e003      	b.n	8005104 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	041a      	lsls	r2, r3, #16
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	611a      	str	r2, [r3, #16]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr
	...

08005110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e12b      	b.n	800537a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff f9f4 	bl	8004524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005174:	f002 f8aa 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a81      	ldr	r2, [pc, #516]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d807      	bhi.n	8005194 <HAL_I2C_Init+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a80      	ldr	r2, [pc, #512]	@ (8005388 <HAL_I2C_Init+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	bf94      	ite	ls
 800518c:	2301      	movls	r3, #1
 800518e:	2300      	movhi	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e006      	b.n	80051a2 <HAL_I2C_Init+0x92>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a7d      	ldr	r2, [pc, #500]	@ (800538c <HAL_I2C_Init+0x27c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0e7      	b.n	800537a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a78      	ldr	r2, [pc, #480]	@ (8005390 <HAL_I2C_Init+0x280>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0c9b      	lsrs	r3, r3, #18
 80051b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_I2C_Init+0x274>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <HAL_I2C_Init+0xd4>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	e009      	b.n	80051f8 <HAL_I2C_Init+0xe8>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	4a69      	ldr	r2, [pc, #420]	@ (8005394 <HAL_I2C_Init+0x284>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	3301      	adds	r3, #1
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800520a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	495c      	ldr	r1, [pc, #368]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005214:	428b      	cmp	r3, r1
 8005216:	d819      	bhi.n	800524c <HAL_I2C_Init+0x13c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e59      	subs	r1, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	fbb1 f3f3 	udiv	r3, r1, r3
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800522c:	400b      	ands	r3, r1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_I2C_Init+0x138>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e59      	subs	r1, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005240:	3301      	adds	r3, #1
 8005242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005246:	e051      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 8005248:	2304      	movs	r3, #4
 800524a:	e04f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <HAL_I2C_Init+0x168>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e012      	b.n	800529e <HAL_I2C_Init+0x18e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x196>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_I2C_Init+0x1bc>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e58      	subs	r0, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ca:	e00f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6809      	ldr	r1, [r1, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800531a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6911      	ldr	r1, [r2, #16]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	4311      	orrs	r1, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	000186a0 	.word	0x000186a0
 8005388:	001e847f 	.word	0x001e847f
 800538c:	003d08ff 	.word	0x003d08ff
 8005390:	431bde83 	.word	0x431bde83
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	461a      	mov	r2, r3
 80053a4:	460b      	mov	r3, r1
 80053a6:	817b      	strh	r3, [r7, #10]
 80053a8:	4613      	mov	r3, r2
 80053aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ac:	f7ff fbc0 	bl	8004b30 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	f040 80e0 	bne.w	8005580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2319      	movs	r3, #25
 80053c6:	2201      	movs	r2, #1
 80053c8:	4970      	ldr	r1, [pc, #448]	@ (800558c <HAL_I2C_Master_Transmit+0x1f4>)
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f001 f97e 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0d3      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_I2C_Master_Transmit+0x50>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e0cc      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d007      	beq.n	800540e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800541c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2221      	movs	r2, #33	@ 0x21
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2210      	movs	r2, #16
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	893a      	ldrh	r2, [r7, #8]
 800543e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a50      	ldr	r2, [pc, #320]	@ (8005590 <HAL_I2C_Master_Transmit+0x1f8>)
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005450:	8979      	ldrh	r1, [r7, #10]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fe6a 	bl	8006130 <I2C_MasterRequestWrite>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e08d      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800547c:	e066      	b.n	800554c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6a39      	ldr	r1, [r7, #32]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f001 fa3c 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2b04      	cmp	r3, #4
 8005494:	d107      	bne.n	80054a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06b      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d11b      	bne.n	8005520 <HAL_I2C_Master_Transmit+0x188>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	6a39      	ldr	r1, [r7, #32]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f001 fa33 	bl	8006990 <I2C_WaitOnBTFFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e01a      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d194      	bne.n	800547e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	00100002 	.word	0x00100002
 8005590:	ffff0000 	.word	0xffff0000

08005594 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	@ 0x30
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	461a      	mov	r2, r3
 80055a0:	460b      	mov	r3, r1
 80055a2:	817b      	strh	r3, [r7, #10]
 80055a4:	4613      	mov	r3, r2
 80055a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055ac:	f7ff fac0 	bl	8004b30 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	f040 824b 	bne.w	8005a56 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2319      	movs	r3, #25
 80055c6:	2201      	movs	r2, #1
 80055c8:	497f      	ldr	r1, [pc, #508]	@ (80057c8 <HAL_I2C_Master_Receive+0x234>)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f001 f87e 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e23e      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_I2C_Master_Receive+0x54>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e237      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d007      	beq.n	800560e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800561c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2222      	movs	r2, #34	@ 0x22
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2210      	movs	r2, #16
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	893a      	ldrh	r2, [r7, #8]
 800563e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a5f      	ldr	r2, [pc, #380]	@ (80057cc <HAL_I2C_Master_Receive+0x238>)
 800564e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005650:	8979      	ldrh	r1, [r7, #10]
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fdec 	bl	8006234 <I2C_MasterRequestRead>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e1f8      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d113      	bne.n	8005696 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e1cc      	b.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d11e      	bne.n	80056dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056ae:	b672      	cpsid	i
}
 80056b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056d8:	b662      	cpsie	i
}
 80056da:	e035      	b.n	8005748 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11e      	bne.n	8005722 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f4:	b672      	cpsid	i
}
 80056f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800571e:	b662      	cpsie	i
}
 8005720:	e012      	b.n	8005748 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005748:	e172      	b.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800574e:	2b03      	cmp	r3, #3
 8005750:	f200 811f 	bhi.w	8005992 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005758:	2b01      	cmp	r3, #1
 800575a:	d123      	bne.n	80057a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f001 f95d 	bl	8006a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e173      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057a2:	e145      	b.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d152      	bne.n	8005852 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	2200      	movs	r2, #0
 80057b4:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <HAL_I2C_Master_Receive+0x23c>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 ff88 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e148      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
 80057c6:	bf00      	nop
 80057c8:	00100002 	.word	0x00100002
 80057cc:	ffff0000 	.word	0xffff0000
 80057d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80057d4:	b672      	cpsid	i
}
 80057d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800581a:	b662      	cpsie	i
}
 800581c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005850:	e0ee      	b.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	4981      	ldr	r1, [pc, #516]	@ (8005a60 <HAL_I2C_Master_Receive+0x4cc>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 ff35 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0f5      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800587c:	b672      	cpsid	i
}
 800587e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005a64 <HAL_I2C_Master_Receive+0x4d0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005a68 <HAL_I2C_Master_Receive+0x4d4>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a1a      	lsrs	r2, r3, #8
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00da      	lsls	r2, r3, #3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80058fa:	b662      	cpsie	i
}
 80058fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e0a6      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d1d9      	bne.n	80058cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800595a:	b662      	cpsie	i
}
 800595c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005990:	e04e      	b.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f001 f842 	bl	8006a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e058      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d124      	bne.n	8005a30 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d107      	bne.n	80059fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f ae88 	bne.w	800574a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e000      	b.n	8005a58 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
  }
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3728      	adds	r7, #40	@ 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	00010004 	.word	0x00010004
 8005a64:	20000008 	.word	0x20000008
 8005a68:	14f8b589 	.word	0x14f8b589

08005a6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a86:	f7ff f853 	bl	8004b30 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	f040 80d9 	bne.w	8005c4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2319      	movs	r3, #25
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	496d      	ldr	r1, [pc, #436]	@ (8005c58 <HAL_I2C_Mem_Write+0x1ec>)
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fe11 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e0cc      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_I2C_Mem_Write+0x56>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0c5      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d007      	beq.n	8005ae8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2221      	movs	r2, #33	@ 0x21
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2240      	movs	r2, #64	@ 0x40
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a4d      	ldr	r2, [pc, #308]	@ (8005c5c <HAL_I2C_Mem_Write+0x1f0>)
 8005b28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b2a:	88f8      	ldrh	r0, [r7, #6]
 8005b2c:	893a      	ldrh	r2, [r7, #8]
 8005b2e:	8979      	ldrh	r1, [r7, #10]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4603      	mov	r3, r0
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fc48 	bl	80063d0 <I2C_RequestMemoryWrite>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d052      	beq.n	8005bec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e081      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fed6 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d107      	bne.n	8005b72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e06b      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d11b      	bne.n	8005bec <HAL_I2C_Mem_Write+0x180>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d017      	beq.n	8005bec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1aa      	bne.n	8005b4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fec9 	bl	8006990 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e016      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	00100002 	.word	0x00100002
 8005c5c:	ffff0000 	.word	0xffff0000

08005c60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	@ 0x30
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	817b      	strh	r3, [r7, #10]
 8005c72:	460b      	mov	r3, r1
 8005c74:	813b      	strh	r3, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c7e:	f7fe ff57 	bl	8004b30 <HAL_GetTick>
 8005c82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	f040 8244 	bne.w	800611a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	2319      	movs	r3, #25
 8005c98:	2201      	movs	r2, #1
 8005c9a:	4982      	ldr	r1, [pc, #520]	@ (8005ea4 <HAL_I2C_Mem_Read+0x244>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fd15 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e237      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_I2C_Mem_Read+0x5a>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e230      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d007      	beq.n	8005ce0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2222      	movs	r2, #34	@ 0x22
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2240      	movs	r2, #64	@ 0x40
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a62      	ldr	r2, [pc, #392]	@ (8005ea8 <HAL_I2C_Mem_Read+0x248>)
 8005d20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d22:	88f8      	ldrh	r0, [r7, #6]
 8005d24:	893a      	ldrh	r2, [r7, #8]
 8005d26:	8979      	ldrh	r1, [r7, #10]
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4603      	mov	r3, r0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fbe2 	bl	80064fc <I2C_RequestMemoryRead>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e1ec      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d113      	bne.n	8005d72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e1c0      	b.n	80060f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d11e      	bne.n	8005db8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d8a:	b672      	cpsid	i
}
 8005d8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005db4:	b662      	cpsie	i
}
 8005db6:	e035      	b.n	8005e24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d11e      	bne.n	8005dfe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd0:	b672      	cpsid	i
}
 8005dd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dfa:	b662      	cpsie	i
}
 8005dfc:	e012      	b.n	8005e24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e24:	e166      	b.n	80060f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	f200 811f 	bhi.w	800606e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d123      	bne.n	8005e80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fdef 	bl	8006a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e167      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e7e:	e139      	b.n	80060f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d152      	bne.n	8005f2e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8e:	2200      	movs	r2, #0
 8005e90:	4906      	ldr	r1, [pc, #24]	@ (8005eac <HAL_I2C_Mem_Read+0x24c>)
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fc1a 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e13c      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
 8005ea2:	bf00      	nop
 8005ea4:	00100002 	.word	0x00100002
 8005ea8:	ffff0000 	.word	0xffff0000
 8005eac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005eb0:	b672      	cpsid	i
}
 8005eb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef6:	b662      	cpsie	i
}
 8005ef8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f2c:	e0e2      	b.n	80060f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	2200      	movs	r2, #0
 8005f36:	497b      	ldr	r1, [pc, #492]	@ (8006124 <HAL_I2C_Mem_Read+0x4c4>)
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fbc7 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0e9      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f58:	b672      	cpsid	i
}
 8005f5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f8e:	4b66      	ldr	r3, [pc, #408]	@ (8006128 <HAL_I2C_Mem_Read+0x4c8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	4a65      	ldr	r2, [pc, #404]	@ (800612c <HAL_I2C_Mem_Read+0x4cc>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	0a1a      	lsrs	r2, r3, #8
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00da      	lsls	r2, r3, #3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d118      	bne.n	8005fe6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005fd6:	b662      	cpsie	i
}
 8005fd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e09a      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d1d9      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006036:	b662      	cpsie	i
}
 8006038:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800606c:	e042      	b.n	80060f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006070:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fcd4 	bl	8006a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e04c      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d118      	bne.n	80060f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f ae94 	bne.w	8005e26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	@ 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	00010004 	.word	0x00010004
 8006128:	20000008 	.word	0x20000008
 800612c:	14f8b589 	.word	0x14f8b589

08006130 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	460b      	mov	r3, r1
 800613e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d006      	beq.n	800615a <I2C_MasterRequestWrite+0x2a>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d003      	beq.n	800615a <I2C_MasterRequestWrite+0x2a>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006158:	d108      	bne.n	800616c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e00b      	b.n	8006184 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006170:	2b12      	cmp	r3, #18
 8006172:	d107      	bne.n	8006184 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fa9b 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061aa:	d103      	bne.n	80061b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e035      	b.n	8006224 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061c0:	d108      	bne.n	80061d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061d0:	611a      	str	r2, [r3, #16]
 80061d2:	e01b      	b.n	800620c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061d4:	897b      	ldrh	r3, [r7, #10]
 80061d6:	11db      	asrs	r3, r3, #7
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f063 030f 	orn	r3, r3, #15
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	490e      	ldr	r1, [pc, #56]	@ (800622c <I2C_MasterRequestWrite+0xfc>)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fae4 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e010      	b.n	8006224 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006202:	897b      	ldrh	r3, [r7, #10]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4907      	ldr	r1, [pc, #28]	@ (8006230 <I2C_MasterRequestWrite+0x100>)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fad4 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	00010008 	.word	0x00010008
 8006230:	00010002 	.word	0x00010002

08006234 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	460b      	mov	r3, r1
 8006242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006258:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d006      	beq.n	800626e <I2C_MasterRequestRead+0x3a>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d003      	beq.n	800626e <I2C_MasterRequestRead+0x3a>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800626c:	d108      	bne.n	8006280 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e00b      	b.n	8006298 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006284:	2b11      	cmp	r3, #17
 8006286:	d107      	bne.n	8006298 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fa11 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00d      	beq.n	80062cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062be:	d103      	bne.n	80062c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e079      	b.n	80063c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d4:	d108      	bne.n	80062e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	611a      	str	r2, [r3, #16]
 80062e6:	e05f      	b.n	80063a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062e8:	897b      	ldrh	r3, [r7, #10]
 80062ea:	11db      	asrs	r3, r3, #7
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0306 	and.w	r3, r3, #6
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f063 030f 	orn	r3, r3, #15
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4930      	ldr	r1, [pc, #192]	@ (80063c8 <I2C_MasterRequestRead+0x194>)
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa5a 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e054      	b.n	80063c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4929      	ldr	r1, [pc, #164]	@ (80063cc <I2C_MasterRequestRead+0x198>)
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa4a 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e044      	b.n	80063c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800635a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f9af 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006382:	d103      	bne.n	800638c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e017      	b.n	80063c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006390:	897b      	ldrh	r3, [r7, #10]
 8006392:	11db      	asrs	r3, r3, #7
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0306 	and.w	r3, r3, #6
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f063 030e 	orn	r3, r3, #14
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4907      	ldr	r1, [pc, #28]	@ (80063cc <I2C_MasterRequestRead+0x198>)
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa06 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	00010008 	.word	0x00010008
 80063cc:	00010002 	.word	0x00010002

080063d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	817b      	strh	r3, [r7, #10]
 80063e2:	460b      	mov	r3, r1
 80063e4:	813b      	strh	r3, [r7, #8]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	2200      	movs	r2, #0
 8006402:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f960 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006420:	d103      	bne.n	800642a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006428:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e05f      	b.n	80064ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800643c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	6a3a      	ldr	r2, [r7, #32]
 8006442:	492d      	ldr	r1, [pc, #180]	@ (80064f8 <I2C_RequestMemoryWrite+0x128>)
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f9bb 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e04c      	b.n	80064ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800646a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646c:	6a39      	ldr	r1, [r7, #32]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fa46 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	2b04      	cmp	r3, #4
 8006480:	d107      	bne.n	8006492 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e02b      	b.n	80064ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d105      	bne.n	80064a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800649c:	893b      	ldrh	r3, [r7, #8]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	e021      	b.n	80064ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064a8:	893b      	ldrh	r3, [r7, #8]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	6a39      	ldr	r1, [r7, #32]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fa20 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00d      	beq.n	80064e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d107      	bne.n	80064de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e005      	b.n	80064ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	00010002 	.word	0x00010002

080064fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	460b      	mov	r3, r1
 8006510:	813b      	strh	r3, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2200      	movs	r2, #0
 800653e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f8c2 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800655c:	d103      	bne.n	8006566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0aa      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	4952      	ldr	r1, [pc, #328]	@ (80066c8 <I2C_RequestMemoryRead+0x1cc>)
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f91d 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e097      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f9a8 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e076      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d8:	893b      	ldrh	r3, [r7, #8]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	611a      	str	r2, [r3, #16]
 80065e2:	e021      	b.n	8006628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065e4:	893b      	ldrh	r3, [r7, #8]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	6a39      	ldr	r1, [r7, #32]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f982 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	2b04      	cmp	r3, #4
 8006608:	d107      	bne.n	800661a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e050      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662a:	6a39      	ldr	r1, [r7, #32]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f967 	bl	8006900 <I2C_WaitOnTXEFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	2b04      	cmp	r3, #4
 800663e:	d107      	bne.n	8006650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800664e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e035      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2200      	movs	r2, #0
 800666c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f82b 	bl	80066cc <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668a:	d103      	bne.n	8006694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e013      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	4906      	ldr	r1, [pc, #24]	@ (80066c8 <I2C_RequestMemoryRead+0x1cc>)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f886 	bl	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	00010002 	.word	0x00010002

080066cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066dc:	e048      	b.n	8006770 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d044      	beq.n	8006770 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e6:	f7fe fa23 	bl	8004b30 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d139      	bne.n	8006770 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10d      	bne.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	43da      	mvns	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	e00c      	b.n	800673c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	43da      	mvns	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4013      	ands	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	429a      	cmp	r2, r3
 8006740:	d116      	bne.n	8006770 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e023      	b.n	80067b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10d      	bne.n	8006796 <I2C_WaitOnFlagUntilTimeout+0xca>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	43da      	mvns	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4013      	ands	r3, r2
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	e00c      	b.n	80067b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	43da      	mvns	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d093      	beq.n	80066de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ce:	e071      	b.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067de:	d123      	bne.n	8006828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	f043 0204 	orr.w	r2, r3, #4
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e067      	b.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d041      	beq.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006830:	f7fe f97e 	bl	8004b30 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d302      	bcc.n	8006846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d136      	bne.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10c      	bne.n	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	43da      	mvns	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	e00b      	b.n	8006882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	43da      	mvns	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4013      	ands	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e021      	b.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10c      	bne.n	80068d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	43da      	mvns	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4013      	ands	r3, r2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e00b      	b.n	80068f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	43da      	mvns	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4013      	ands	r3, r2
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f47f af6d 	bne.w	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800690c:	e034      	b.n	8006978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f8e3 	bl	8006ada <I2C_IsAcknowledgeFailed>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e034      	b.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d028      	beq.n	8006978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fe f903 	bl	8004b30 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11d      	bne.n	8006978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d016      	beq.n	8006978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006982:	2b80      	cmp	r3, #128	@ 0x80
 8006984:	d1c3      	bne.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800699c:	e034      	b.n	8006a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f89b 	bl	8006ada <I2C_IsAcknowledgeFailed>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e034      	b.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d028      	beq.n	8006a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fe f8bb 	bl	8004b30 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11d      	bne.n	8006a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d016      	beq.n	8006a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e007      	b.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d1c3      	bne.n	800699e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a2c:	e049      	b.n	8006ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d119      	bne.n	8006a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0210 	mvn.w	r2, #16
 8006a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e030      	b.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fe f85e 	bl	8004b30 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11d      	bne.n	8006ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a90:	2b40      	cmp	r3, #64	@ 0x40
 8006a92:	d016      	beq.n	8006ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e007      	b.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d1ae      	bne.n	8006a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af0:	d11b      	bne.n	8006b2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006afa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b16:	f043 0204 	orr.w	r2, r3, #4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e272      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8087 	beq.w	8006c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b58:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d00c      	beq.n	8006b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b64:	4b8f      	ldr	r3, [pc, #572]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d112      	bne.n	8006b96 <HAL_RCC_OscConfig+0x5e>
 8006b70:	4b8c      	ldr	r3, [pc, #560]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b7c:	d10b      	bne.n	8006b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7e:	4b89      	ldr	r3, [pc, #548]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d06c      	beq.n	8006c64 <HAL_RCC_OscConfig+0x12c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d168      	bne.n	8006c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e24c      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9e:	d106      	bne.n	8006bae <HAL_RCC_OscConfig+0x76>
 8006ba0:	4b80      	ldr	r3, [pc, #512]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	e02e      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7a      	ldr	r2, [pc, #488]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b78      	ldr	r3, [pc, #480]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a77      	ldr	r2, [pc, #476]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e01d      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0xbc>
 8006bda:	4b72      	ldr	r3, [pc, #456]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a71      	ldr	r2, [pc, #452]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b6f      	ldr	r3, [pc, #444]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a6e      	ldr	r2, [pc, #440]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b68      	ldr	r3, [pc, #416]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a67      	ldr	r2, [pc, #412]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d013      	beq.n	8006c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fd ff8c 	bl	8004b30 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c1c:	f7fd ff88 	bl	8004b30 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b64      	cmp	r3, #100	@ 0x64
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e200      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0xe4>
 8006c3a:	e014      	b.n	8006c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fd ff78 	bl	8004b30 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fd ff74 	bl	8004b30 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	@ 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e1ec      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	4b53      	ldr	r3, [pc, #332]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x10c>
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d063      	beq.n	8006d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c72:	4b4c      	ldr	r3, [pc, #304]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c7e:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d11c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x18c>
 8006c8a:	4b46      	ldr	r3, [pc, #280]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d116      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c96:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_RCC_OscConfig+0x176>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e1c0      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	4b3d      	ldr	r3, [pc, #244]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4939      	ldr	r1, [pc, #228]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc2:	e03a      	b.n	8006d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d020      	beq.n	8006d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ccc:	4b36      	ldr	r3, [pc, #216]	@ (8006da8 <HAL_RCC_OscConfig+0x270>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7fd ff2d 	bl	8004b30 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cda:	f7fd ff29 	bl	8004b30 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e1a1      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cec:	4b2d      	ldr	r3, [pc, #180]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4927      	ldr	r1, [pc, #156]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	e015      	b.n	8006d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d0e:	4b26      	ldr	r3, [pc, #152]	@ (8006da8 <HAL_RCC_OscConfig+0x270>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fd ff0c 	bl	8004b30 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1c:	f7fd ff08 	bl	8004b30 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e180      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d03a      	beq.n	8006dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d019      	beq.n	8006d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d4e:	4b17      	ldr	r3, [pc, #92]	@ (8006dac <HAL_RCC_OscConfig+0x274>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d54:	f7fd feec 	bl	8004b30 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fd fee8 	bl	8004b30 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e160      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <HAL_RCC_OscConfig+0x26c>)
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f000 face 	bl	800731c <RCC_Delay>
 8006d80:	e01c      	b.n	8006dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d82:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <HAL_RCC_OscConfig+0x274>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d88:	f7fd fed2 	bl	8004b30 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d8e:	e00f      	b.n	8006db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fd fece 	bl	8004b30 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d908      	bls.n	8006db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e146      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
 8006da8:	42420000 	.word	0x42420000
 8006dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db0:	4b92      	ldr	r3, [pc, #584]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e9      	bne.n	8006d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80a6 	beq.w	8006f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dce:	4b8b      	ldr	r3, [pc, #556]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10d      	bne.n	8006df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dda:	4b88      	ldr	r3, [pc, #544]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	4a87      	ldr	r2, [pc, #540]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	61d3      	str	r3, [r2, #28]
 8006de6:	4b85      	ldr	r3, [pc, #532]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df2:	2301      	movs	r3, #1
 8006df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df6:	4b82      	ldr	r3, [pc, #520]	@ (8007000 <HAL_RCC_OscConfig+0x4c8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d118      	bne.n	8006e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e02:	4b7f      	ldr	r3, [pc, #508]	@ (8007000 <HAL_RCC_OscConfig+0x4c8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7e      	ldr	r2, [pc, #504]	@ (8007000 <HAL_RCC_OscConfig+0x4c8>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e0e:	f7fd fe8f 	bl	8004b30 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e16:	f7fd fe8b 	bl	8004b30 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b64      	cmp	r3, #100	@ 0x64
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e103      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	4b75      	ldr	r3, [pc, #468]	@ (8007000 <HAL_RCC_OscConfig+0x4c8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCC_OscConfig+0x312>
 8006e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	4a6e      	ldr	r2, [pc, #440]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	6213      	str	r3, [r2, #32]
 8006e48:	e02d      	b.n	8006ea6 <HAL_RCC_OscConfig+0x36e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10c      	bne.n	8006e6c <HAL_RCC_OscConfig+0x334>
 8006e52:	4b6a      	ldr	r3, [pc, #424]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	4a69      	ldr	r2, [pc, #420]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	6213      	str	r3, [r2, #32]
 8006e5e:	4b67      	ldr	r3, [pc, #412]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	4a66      	ldr	r2, [pc, #408]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	6213      	str	r3, [r2, #32]
 8006e6a:	e01c      	b.n	8006ea6 <HAL_RCC_OscConfig+0x36e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d10c      	bne.n	8006e8e <HAL_RCC_OscConfig+0x356>
 8006e74:	4b61      	ldr	r3, [pc, #388]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	4a60      	ldr	r2, [pc, #384]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e7a:	f043 0304 	orr.w	r3, r3, #4
 8006e7e:	6213      	str	r3, [r2, #32]
 8006e80:	4b5e      	ldr	r3, [pc, #376]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	4a5d      	ldr	r2, [pc, #372]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	6213      	str	r3, [r2, #32]
 8006e8c:	e00b      	b.n	8006ea6 <HAL_RCC_OscConfig+0x36e>
 8006e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	4a5a      	ldr	r2, [pc, #360]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	6213      	str	r3, [r2, #32]
 8006e9a:	4b58      	ldr	r3, [pc, #352]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4a57      	ldr	r2, [pc, #348]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eae:	f7fd fe3f 	bl	8004b30 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb6:	f7fd fe3b 	bl	8004b30 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0b1      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0ee      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x37e>
 8006ed8:	e014      	b.n	8006f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fd fe29 	bl	8004b30 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fd fe25 	bl	8004b30 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e09b      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef8:	4b40      	ldr	r3, [pc, #256]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ee      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d105      	bne.n	8006f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8087 	beq.w	800702e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f20:	4b36      	ldr	r3, [pc, #216]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d061      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d146      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f34:	4b33      	ldr	r3, [pc, #204]	@ (8007004 <HAL_RCC_OscConfig+0x4cc>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fd fdf9 	bl	8004b30 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fd fdf5 	bl	8004b30 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e06d      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f54:	4b29      	ldr	r3, [pc, #164]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f68:	d108      	bne.n	8006f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f6a:	4b24      	ldr	r3, [pc, #144]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	4921      	ldr	r1, [pc, #132]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a19      	ldr	r1, [r3, #32]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	491b      	ldr	r1, [pc, #108]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f94:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <HAL_RCC_OscConfig+0x4cc>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9a:	f7fd fdc9 	bl	8004b30 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa2:	f7fd fdc5 	bl	8004b30 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e03d      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fb4:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0f0      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x46a>
 8006fc0:	e035      	b.n	800702e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <HAL_RCC_OscConfig+0x4cc>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc8:	f7fd fdb2 	bl	8004b30 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd0:	f7fd fdae 	bl	8004b30 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e026      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe2:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <HAL_RCC_OscConfig+0x4c4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x498>
 8006fee:	e01e      	b.n	800702e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d107      	bne.n	8007008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e019      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
 8006ffc:	40021000 	.word	0x40021000
 8007000:	40007000 	.word	0x40007000
 8007004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007008:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCC_OscConfig+0x500>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	429a      	cmp	r2, r3
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d001      	beq.n	800702e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000

0800703c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0d0      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007050:	4b6a      	ldr	r3, [pc, #424]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d910      	bls.n	8007080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705e:	4b67      	ldr	r3, [pc, #412]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 0207 	bic.w	r2, r3, #7
 8007066:	4965      	ldr	r1, [pc, #404]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b63      	ldr	r3, [pc, #396]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0b8      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d020      	beq.n	80070ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007098:	4b59      	ldr	r3, [pc, #356]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a58      	ldr	r2, [pc, #352]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800709e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070b0:	4b53      	ldr	r3, [pc, #332]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4a52      	ldr	r2, [pc, #328]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80070ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070bc:	4b50      	ldr	r3, [pc, #320]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	494d      	ldr	r1, [pc, #308]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d040      	beq.n	800715c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e2:	4b47      	ldr	r3, [pc, #284]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d115      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e07f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d107      	bne.n	800710a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fa:	4b41      	ldr	r3, [pc, #260]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e073      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710a:	4b3d      	ldr	r3, [pc, #244]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e06b      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800711a:	4b39      	ldr	r3, [pc, #228]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f023 0203 	bic.w	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4936      	ldr	r1, [pc, #216]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800712c:	f7fd fd00 	bl	8004b30 <HAL_GetTick>
 8007130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	e00a      	b.n	800714a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007134:	f7fd fcfc 	bl	8004b30 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e053      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714a:	4b2d      	ldr	r3, [pc, #180]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 020c 	and.w	r2, r3, #12
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	429a      	cmp	r2, r3
 800715a:	d1eb      	bne.n	8007134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800715c:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d210      	bcs.n	800718c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716a:	4b24      	ldr	r3, [pc, #144]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f023 0207 	bic.w	r2, r3, #7
 8007172:	4922      	ldr	r1, [pc, #136]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	4313      	orrs	r3, r2
 8007178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717a:	4b20      	ldr	r3, [pc, #128]	@ (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d001      	beq.n	800718c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e032      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007198:	4b19      	ldr	r3, [pc, #100]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4916      	ldr	r1, [pc, #88]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071b6:	4b12      	ldr	r3, [pc, #72]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	490e      	ldr	r1, [pc, #56]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071ca:	f000 f821 	bl	8007210 <HAL_RCC_GetSysClockFreq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007200 <HAL_RCC_ClockConfig+0x1c4>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	490a      	ldr	r1, [pc, #40]	@ (8007204 <HAL_RCC_ClockConfig+0x1c8>)
 80071dc:	5ccb      	ldrb	r3, [r1, r3]
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	4a09      	ldr	r2, [pc, #36]	@ (8007208 <HAL_RCC_ClockConfig+0x1cc>)
 80071e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071e6:	4b09      	ldr	r3, [pc, #36]	@ (800720c <HAL_RCC_ClockConfig+0x1d0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fd fc5e 	bl	8004aac <HAL_InitTick>

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40022000 	.word	0x40022000
 8007200:	40021000 	.word	0x40021000
 8007204:	0800ec30 	.word	0x0800ec30
 8007208:	20000008 	.word	0x20000008
 800720c:	2000000c 	.word	0x2000000c

08007210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800722a:	4b1e      	ldr	r3, [pc, #120]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 030c 	and.w	r3, r3, #12
 8007236:	2b04      	cmp	r3, #4
 8007238:	d002      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x30>
 800723a:	2b08      	cmp	r3, #8
 800723c:	d003      	beq.n	8007246 <HAL_RCC_GetSysClockFreq+0x36>
 800723e:	e027      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007240:	4b19      	ldr	r3, [pc, #100]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007242:	613b      	str	r3, [r7, #16]
      break;
 8007244:	e027      	b.n	8007296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	0c9b      	lsrs	r3, r3, #18
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	4a17      	ldr	r2, [pc, #92]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8007250:	5cd3      	ldrb	r3, [r2, r3]
 8007252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800725e:	4b11      	ldr	r3, [pc, #68]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	0c5b      	lsrs	r3, r3, #17
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	4a11      	ldr	r2, [pc, #68]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800726a:	5cd3      	ldrb	r3, [r2, r3]
 800726c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007272:	fb03 f202 	mul.w	r2, r3, r2
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e004      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	613b      	str	r3, [r7, #16]
      break;
 800728e:	e002      	b.n	8007296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007290:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007292:	613b      	str	r3, [r7, #16]
      break;
 8007294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007296:	693b      	ldr	r3, [r7, #16]
}
 8007298:	4618      	mov	r0, r3
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	007a1200 	.word	0x007a1200
 80072ac:	0800ec48 	.word	0x0800ec48
 80072b0:	0800ec58 	.word	0x0800ec58
 80072b4:	003d0900 	.word	0x003d0900

080072b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072bc:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr
 80072c8:	20000008 	.word	0x20000008

080072cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072d0:	f7ff fff2 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	4903      	ldr	r1, [pc, #12]	@ (80072f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40021000 	.word	0x40021000
 80072f0:	0800ec40 	.word	0x0800ec40

080072f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072f8:	f7ff ffde 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b05      	ldr	r3, [pc, #20]	@ (8007314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	0adb      	lsrs	r3, r3, #11
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4903      	ldr	r1, [pc, #12]	@ (8007318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40021000 	.word	0x40021000
 8007318:	0800ec40 	.word	0x0800ec40

0800731c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007324:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <RCC_Delay+0x34>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a0a      	ldr	r2, [pc, #40]	@ (8007354 <RCC_Delay+0x38>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	0a5b      	lsrs	r3, r3, #9
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007338:	bf00      	nop
  }
  while (Delay --);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1e5a      	subs	r2, r3, #1
 800733e:	60fa      	str	r2, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1f9      	bne.n	8007338 <RCC_Delay+0x1c>
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	20000008 	.word	0x20000008
 8007354:	10624dd3 	.word	0x10624dd3

08007358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e076      	b.n	8007458 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d108      	bne.n	8007384 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737a:	d009      	beq.n	8007390 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	61da      	str	r2, [r3, #28]
 8007382:	e005      	b.n	8007390 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fd f8f8 	bl	80045a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007414:	ea42 0103 	orr.w	r1, r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	0c1a      	lsrs	r2, r3, #16
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f002 0204 	and.w	r2, r2, #4
 8007436:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_SPI_Transmit+0x22>
 800747e:	2302      	movs	r3, #2
 8007480:	e12d      	b.n	80076de <HAL_SPI_Transmit+0x27e>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748a:	f7fd fb51 	bl	8004b30 <HAL_GetTick>
 800748e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d002      	beq.n	80074a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
 80074a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a4:	e116      	b.n	80076d4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Transmit+0x52>
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b6:	e10d      	b.n	80076d4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2203      	movs	r2, #3
 80074bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fe:	d10f      	bne.n	8007520 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800750e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800751e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752a:	2b40      	cmp	r3, #64	@ 0x40
 800752c:	d007      	beq.n	800753e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800753c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007546:	d14f      	bne.n	80075e8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_SPI_Transmit+0xf6>
 8007550:	8afb      	ldrh	r3, [r7, #22]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d142      	bne.n	80075dc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800757a:	e02f      	b.n	80075dc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b02      	cmp	r3, #2
 8007588:	d112      	bne.n	80075b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075ae:	e015      	b.n	80075dc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b0:	f7fd fabe 	bl	8004b30 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d803      	bhi.n	80075c8 <HAL_SPI_Transmit+0x168>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x16e>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80075da:	e07b      	b.n	80076d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1ca      	bne.n	800757c <HAL_SPI_Transmit+0x11c>
 80075e6:	e050      	b.n	800768a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_SPI_Transmit+0x196>
 80075f0:	8afb      	ldrh	r3, [r7, #22]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d144      	bne.n	8007680 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	330c      	adds	r3, #12
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800761c:	e030      	b.n	8007680 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b02      	cmp	r3, #2
 800762a:	d113      	bne.n	8007654 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	330c      	adds	r3, #12
 8007636:	7812      	ldrb	r2, [r2, #0]
 8007638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007652:	e015      	b.n	8007680 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007654:	f7fd fa6c 	bl	8004b30 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d803      	bhi.n	800766c <HAL_SPI_Transmit+0x20c>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d102      	bne.n	8007672 <HAL_SPI_Transmit+0x212>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800767e:	e029      	b.n	80076d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1c9      	bne.n	800761e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fa6e 	bl	8007b70 <SPI_EndRxTxTransaction>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	77fb      	strb	r3, [r7, #31]
 80076ca:	e003      	b.n	80076d4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08c      	sub	sp, #48	@ 0x30
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076f4:	2301      	movs	r3, #1
 80076f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_SPI_TransmitReceive+0x26>
 8007708:	2302      	movs	r3, #2
 800770a:	e198      	b.n	8007a3e <HAL_SPI_TransmitReceive+0x358>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007714:	f7fd fa0c 	bl	8004b30 <HAL_GetTick>
 8007718:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007732:	2b01      	cmp	r3, #1
 8007734:	d00f      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x70>
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800773c:	d107      	bne.n	800774e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <HAL_SPI_TransmitReceive+0x68>
 8007746:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800774a:	2b04      	cmp	r3, #4
 800774c:	d003      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800774e:	2302      	movs	r3, #2
 8007750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007754:	e16d      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x82>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x82>
 8007762:	887b      	ldrh	r3, [r7, #2]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800776e:	e160      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b04      	cmp	r3, #4
 800777a:	d003      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2205      	movs	r2, #5
 8007780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	887a      	ldrh	r2, [r7, #2]
 80077a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	887a      	ldrh	r2, [r7, #2]
 80077ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c4:	2b40      	cmp	r3, #64	@ 0x40
 80077c6:	d007      	beq.n	80077d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e0:	d17c      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x10a>
 80077ea:	8b7b      	ldrh	r3, [r7, #26]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d16a      	bne.n	80078c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007814:	e057      	b.n	80078c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b02      	cmp	r3, #2
 8007822:	d11b      	bne.n	800785c <HAL_SPI_TransmitReceive+0x176>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <HAL_SPI_TransmitReceive+0x176>
 800782e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d113      	bne.n	800785c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d119      	bne.n	800789e <HAL_SPI_TransmitReceive+0x1b8>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d014      	beq.n	800789e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	b292      	uxth	r2, r2
 8007880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800789a:	2301      	movs	r3, #1
 800789c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800789e:	f7fd f947 	bl	8004b30 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d80b      	bhi.n	80078c6 <HAL_SPI_TransmitReceive+0x1e0>
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d007      	beq.n	80078c6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80078c4:	e0b5      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1a2      	bne.n	8007816 <HAL_SPI_TransmitReceive+0x130>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d19d      	bne.n	8007816 <HAL_SPI_TransmitReceive+0x130>
 80078da:	e080      	b.n	80079de <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x204>
 80078e4:	8b7b      	ldrh	r3, [r7, #26]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d16f      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007910:	e05b      	b.n	80079ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b02      	cmp	r3, #2
 800791e:	d11c      	bne.n	800795a <HAL_SPI_TransmitReceive+0x274>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d017      	beq.n	800795a <HAL_SPI_TransmitReceive+0x274>
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d114      	bne.n	800795a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d119      	bne.n	800799c <HAL_SPI_TransmitReceive+0x2b6>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800799c:	f7fd f8c8 	bl	8004b30 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d803      	bhi.n	80079b4 <HAL_SPI_TransmitReceive+0x2ce>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d102      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x2d4>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d107      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80079c8:	e033      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d19e      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x22c>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d199      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f8c4 	bl	8007b70 <SPI_EndRxTxTransaction>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80079fa:	e01a      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a28:	e003      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3730      	adds	r7, #48	@ 0x30
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a54:	b2db      	uxtb	r3, r3
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bc80      	pop	{r7}
 8007a5e:	4770      	bx	lr

08007a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a70:	f7fd f85e 	bl	8004b30 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a80:	f7fd f856 	bl	8004b30 <HAL_GetTick>
 8007a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a86:	4b39      	ldr	r3, [pc, #228]	@ (8007b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	015b      	lsls	r3, r3, #5
 8007a8c:	0d1b      	lsrs	r3, r3, #20
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	fb02 f303 	mul.w	r3, r2, r3
 8007a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a96:	e054      	b.n	8007b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d050      	beq.n	8007b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aa0:	f7fd f846 	bl	8004b30 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d902      	bls.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d13d      	bne.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ace:	d111      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ad8:	d004      	beq.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae2:	d107      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007afc:	d10f      	bne.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e017      	b.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	bf0c      	ite	eq
 8007b52:	2301      	moveq	r3, #1
 8007b54:	2300      	movne	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d19b      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000008 	.word	0x20000008

08007b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	2180      	movs	r1, #128	@ 0x80
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff ff6a 	bl	8007a60 <SPI_WaitFlagStateUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e000      	b.n	8007ba4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e041      	b.n	8007c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fc fd2e 	bl	8004634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f000 fd68 	bl	80086c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e041      	b.n	8007ce0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f839 	bl	8007ce8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 fd19 	bl	80086c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
	...

08007cfc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_IC_Start+0x1a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	e013      	b.n	8007d3e <HAL_TIM_IC_Start+0x42>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IC_Start+0x2a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	e00b      	b.n	8007d3e <HAL_TIM_IC_Start+0x42>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_IC_Start+0x3a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	e003      	b.n	8007d3e <HAL_TIM_IC_Start+0x42>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_TIM_IC_Start+0x54>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e013      	b.n	8007d78 <HAL_TIM_IC_Start+0x7c>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d104      	bne.n	8007d60 <HAL_TIM_IC_Start+0x64>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e00b      	b.n	8007d78 <HAL_TIM_IC_Start+0x7c>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d104      	bne.n	8007d70 <HAL_TIM_IC_Start+0x74>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	e003      	b.n	8007d78 <HAL_TIM_IC_Start+0x7c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d102      	bne.n	8007d86 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d001      	beq.n	8007d8a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e06d      	b.n	8007e66 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start+0x9e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d98:	e013      	b.n	8007dc2 <HAL_TIM_IC_Start+0xc6>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start+0xae>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007da8:	e00b      	b.n	8007dc2 <HAL_TIM_IC_Start+0xc6>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_IC_Start+0xbe>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007db8:	e003      	b.n	8007dc2 <HAL_TIM_IC_Start+0xc6>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_IC_Start+0xd6>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dd0:	e013      	b.n	8007dfa <HAL_TIM_IC_Start+0xfe>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_IC_Start+0xe6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007de0:	e00b      	b.n	8007dfa <HAL_TIM_IC_Start+0xfe>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_IC_Start+0xf6>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df0:	e003      	b.n	8007dfa <HAL_TIM_IC_Start+0xfe>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fef3 	bl	8008bee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <HAL_TIM_IC_Start+0x174>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <HAL_TIM_IC_Start+0x134>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1a:	d009      	beq.n	8007e30 <HAL_TIM_IC_Start+0x134>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a14      	ldr	r2, [pc, #80]	@ (8007e74 <HAL_TIM_IC_Start+0x178>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_IC_Start+0x134>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a13      	ldr	r2, [pc, #76]	@ (8007e78 <HAL_TIM_IC_Start+0x17c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d111      	bne.n	8007e54 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d010      	beq.n	8007e64 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e52:	e007      	b.n	8007e64 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800

08007e7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <HAL_TIM_IC_Start_IT+0x1e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	e013      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x46>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d104      	bne.n	8007eaa <HAL_TIM_IC_Start_IT+0x2e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	e00b      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x46>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_IC_Start_IT+0x3e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	e003      	b.n	8007ec2 <HAL_TIM_IC_Start_IT+0x46>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <HAL_TIM_IC_Start_IT+0x58>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e013      	b.n	8007efc <HAL_TIM_IC_Start_IT+0x80>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d104      	bne.n	8007ee4 <HAL_TIM_IC_Start_IT+0x68>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e00b      	b.n	8007efc <HAL_TIM_IC_Start_IT+0x80>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d104      	bne.n	8007ef4 <HAL_TIM_IC_Start_IT+0x78>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	e003      	b.n	8007efc <HAL_TIM_IC_Start_IT+0x80>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d102      	bne.n	8007f0a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f04:	7b7b      	ldrb	r3, [r7, #13]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d001      	beq.n	8007f0e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0b8      	b.n	8008080 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_IC_Start_IT+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f1c:	e013      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0xca>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_IC_Start_IT+0xb2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2c:	e00b      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0xca>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_IC_Start_IT+0xc2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f3c:	e003      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0xca>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_IC_Start_IT+0xda>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f54:	e013      	b.n	8007f7e <HAL_TIM_IC_Start_IT+0x102>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_IC_Start_IT+0xea>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f64:	e00b      	b.n	8007f7e <HAL_TIM_IC_Start_IT+0x102>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d104      	bne.n	8007f76 <HAL_TIM_IC_Start_IT+0xfa>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f74:	e003      	b.n	8007f7e <HAL_TIM_IC_Start_IT+0x102>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d841      	bhi.n	8008008 <HAL_TIM_IC_Start_IT+0x18c>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_TIM_IC_Start_IT+0x110>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08008009 	.word	0x08008009
 8007f94:	08008009 	.word	0x08008009
 8007f98:	08008009 	.word	0x08008009
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	08008009 	.word	0x08008009
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08008009 	.word	0x08008009
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08007ff7 	.word	0x08007ff7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0202 	orr.w	r2, r2, #2
 8007fce:	60da      	str	r2, [r3, #12]
      break;
 8007fd0:	e01d      	b.n	800800e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0204 	orr.w	r2, r2, #4
 8007fe0:	60da      	str	r2, [r3, #12]
      break;
 8007fe2:	e014      	b.n	800800e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0208 	orr.w	r2, r2, #8
 8007ff2:	60da      	str	r2, [r3, #12]
      break;
 8007ff4:	e00b      	b.n	800800e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0210 	orr.w	r2, r2, #16
 8008004:	60da      	str	r2, [r3, #12]
      break;
 8008006:	e002      	b.n	800800e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
      break;
 800800c:	bf00      	nop
  }

  if (status == HAL_OK)
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d134      	bne.n	800807e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2201      	movs	r2, #1
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fde6 	bl	8008bee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	@ (8008088 <HAL_TIM_IC_Start_IT+0x20c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00e      	beq.n	800804a <HAL_TIM_IC_Start_IT+0x1ce>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008034:	d009      	beq.n	800804a <HAL_TIM_IC_Start_IT+0x1ce>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a14      	ldr	r2, [pc, #80]	@ (800808c <HAL_TIM_IC_Start_IT+0x210>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <HAL_TIM_IC_Start_IT+0x1ce>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a12      	ldr	r2, [pc, #72]	@ (8008090 <HAL_TIM_IC_Start_IT+0x214>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d111      	bne.n	800806e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b06      	cmp	r3, #6
 800805a:	d010      	beq.n	800807e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806c:	e007      	b.n	800807e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800

08008094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d122      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d11b      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0202 	mvn.w	r2, #2
 80080c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fa fcd6 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fad3 	bl	800868a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fad9 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d122      	bne.n	8008144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b04      	cmp	r3, #4
 800810a:	d11b      	bne.n	8008144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0204 	mvn.w	r2, #4
 8008114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fa fcac 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 8008130:	e005      	b.n	800813e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 faa9 	bl	800868a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 faaf 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b08      	cmp	r3, #8
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b08      	cmp	r3, #8
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0208 	mvn.w	r2, #8
 8008168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2204      	movs	r2, #4
 800816e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fa fc82 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa7f 	bl	800868a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa85 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	2b10      	cmp	r3, #16
 80081a4:	d122      	bne.n	80081ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b10      	cmp	r3, #16
 80081b2:	d11b      	bne.n	80081ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0210 	mvn.w	r2, #16
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2208      	movs	r2, #8
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fa fc58 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa55 	bl	800868a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa5b 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b01      	cmp	r3, #1
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0201 	mvn.w	r2, #1
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa30 	bl	8008678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008222:	2b80      	cmp	r3, #128	@ 0x80
 8008224:	d10e      	bne.n	8008244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008230:	2b80      	cmp	r3, #128	@ 0x80
 8008232:	d107      	bne.n	8008244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800823c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fd61 	bl	8008d06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	d10e      	bne.n	8008270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825c:	2b40      	cmp	r3, #64	@ 0x40
 800825e:	d107      	bne.n	8008270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa1f 	bl	80086ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b20      	cmp	r3, #32
 800827c:	d10e      	bne.n	800829c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b20      	cmp	r3, #32
 800828a:	d107      	bne.n	800829c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0220 	mvn.w	r2, #32
 8008294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fd2c 	bl	8008cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80082be:	2302      	movs	r3, #2
 80082c0:	e088      	b.n	80083d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11b      	bne.n	8008308 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80082e0:	f000 fae2 	bl	80088a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 020c 	bic.w	r2, r2, #12
 80082f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6999      	ldr	r1, [r3, #24]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	619a      	str	r2, [r3, #24]
 8008306:	e060      	b.n	80083ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b04      	cmp	r3, #4
 800830c:	d11c      	bne.n	8008348 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800831e:	f000 fb4b 	bl	80089b8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008330:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6999      	ldr	r1, [r3, #24]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	021a      	lsls	r2, r3, #8
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	619a      	str	r2, [r3, #24]
 8008346:	e040      	b.n	80083ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b08      	cmp	r3, #8
 800834c:	d11b      	bne.n	8008386 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800835e:	f000 fb96 	bl	8008a8e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 020c 	bic.w	r2, r2, #12
 8008370:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69d9      	ldr	r1, [r3, #28]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	61da      	str	r2, [r3, #28]
 8008384:	e021      	b.n	80083ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b0c      	cmp	r3, #12
 800838a:	d11c      	bne.n	80083c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800839c:	f000 fbb2 	bl	8008b04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69da      	ldr	r2, [r3, #28]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80083ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69d9      	ldr	r1, [r3, #28]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	021a      	lsls	r2, r3, #8
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	61da      	str	r2, [r3, #28]
 80083c4:	e001      	b.n	80083ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_TIM_ConfigClockSource+0x1c>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e0b4      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x186>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800841e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008430:	d03e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0xd4>
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008436:	f200 8087 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843e:	f000 8086 	beq.w	800854e <HAL_TIM_ConfigClockSource+0x172>
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008446:	d87f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b70      	cmp	r3, #112	@ 0x70
 800844a:	d01a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xa6>
 800844c:	2b70      	cmp	r3, #112	@ 0x70
 800844e:	d87b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b60      	cmp	r3, #96	@ 0x60
 8008452:	d050      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x11a>
 8008454:	2b60      	cmp	r3, #96	@ 0x60
 8008456:	d877      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b50      	cmp	r3, #80	@ 0x50
 800845a:	d03c      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0xfa>
 800845c:	2b50      	cmp	r3, #80	@ 0x50
 800845e:	d873      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	d058      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x13a>
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	d86f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d064      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d86b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d060      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d867      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d05a      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 8008480:	e062      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008492:	f000 fb8d 	bl	8008bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	609a      	str	r2, [r3, #8]
      break;
 80084ae:	e04f      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084c0:	f000 fb76 	bl	8008bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084d2:	609a      	str	r2, [r3, #8]
      break;
 80084d4:	e03c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e2:	461a      	mov	r2, r3
 80084e4:	f000 fa3a 	bl	800895c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2150      	movs	r1, #80	@ 0x50
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb44 	bl	8008b7c <TIM_ITRx_SetConfig>
      break;
 80084f4:	e02c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fa94 	bl	8008a30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2160      	movs	r1, #96	@ 0x60
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fb34 	bl	8008b7c <TIM_ITRx_SetConfig>
      break;
 8008514:	e01c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fa1a 	bl	800895c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2140      	movs	r1, #64	@ 0x40
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fb24 	bl	8008b7c <TIM_ITRx_SetConfig>
      break;
 8008534:	e00c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fb1b 	bl	8008b7c <TIM_ITRx_SetConfig>
      break;
 8008546:	e003      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e000      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800854e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_TIM_SlaveConfigSynchro+0x18>
 800857e:	2302      	movs	r3, #2
 8008580:	e031      	b.n	80085e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f8f5 	bl	8008784 <TIM_SlaveTimer_SetConfig>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e018      	b.n	80085e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085c2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085d2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b0c      	cmp	r3, #12
 8008602:	d831      	bhi.n	8008668 <HAL_TIM_ReadCapturedValue+0x78>
 8008604:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008641 	.word	0x08008641
 8008610:	08008669 	.word	0x08008669
 8008614:	08008669 	.word	0x08008669
 8008618:	08008669 	.word	0x08008669
 800861c:	0800864b 	.word	0x0800864b
 8008620:	08008669 	.word	0x08008669
 8008624:	08008669 	.word	0x08008669
 8008628:	08008669 	.word	0x08008669
 800862c:	08008655 	.word	0x08008655
 8008630:	08008669 	.word	0x08008669
 8008634:	08008669 	.word	0x08008669
 8008638:	08008669 	.word	0x08008669
 800863c:	0800865f 	.word	0x0800865f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008646:	60fb      	str	r3, [r7, #12]

      break;
 8008648:	e00f      	b.n	800866a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008650:	60fb      	str	r3, [r7, #12]

      break;
 8008652:	e00a      	b.n	800866a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865a:	60fb      	str	r3, [r7, #12]

      break;
 800865c:	e005      	b.n	800866a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008664:	60fb      	str	r3, [r7, #12]

      break;
 8008666:	e000      	b.n	800866a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008668:	bf00      	nop
  }

  return tmpreg;
 800866a:	68fb      	ldr	r3, [r7, #12]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop

08008678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a29      	ldr	r2, [pc, #164]	@ (8008778 <TIM_Base_SetConfig+0xb8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00b      	beq.n	80086f0 <TIM_Base_SetConfig+0x30>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086de:	d007      	beq.n	80086f0 <TIM_Base_SetConfig+0x30>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a26      	ldr	r2, [pc, #152]	@ (800877c <TIM_Base_SetConfig+0xbc>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_Base_SetConfig+0x30>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a25      	ldr	r2, [pc, #148]	@ (8008780 <TIM_Base_SetConfig+0xc0>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d108      	bne.n	8008702 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1c      	ldr	r2, [pc, #112]	@ (8008778 <TIM_Base_SetConfig+0xb8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_Base_SetConfig+0x62>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008710:	d007      	beq.n	8008722 <TIM_Base_SetConfig+0x62>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a19      	ldr	r2, [pc, #100]	@ (800877c <TIM_Base_SetConfig+0xbc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_Base_SetConfig+0x62>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a18      	ldr	r2, [pc, #96]	@ (8008780 <TIM_Base_SetConfig+0xc0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a07      	ldr	r2, [pc, #28]	@ (8008778 <TIM_Base_SetConfig+0xb8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d103      	bne.n	8008768 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	615a      	str	r2, [r3, #20]
}
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr
 8008778:	40012c00 	.word	0x40012c00
 800877c:	40000400 	.word	0x40000400
 8008780:	40000800 	.word	0x40000800

08008784 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f023 0307 	bic.w	r3, r3, #7
 80087b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b70      	cmp	r3, #112	@ 0x70
 80087cc:	d01a      	beq.n	8008804 <TIM_SlaveTimer_SetConfig+0x80>
 80087ce:	2b70      	cmp	r3, #112	@ 0x70
 80087d0:	d860      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087d2:	2b60      	cmp	r3, #96	@ 0x60
 80087d4:	d054      	beq.n	8008880 <TIM_SlaveTimer_SetConfig+0xfc>
 80087d6:	2b60      	cmp	r3, #96	@ 0x60
 80087d8:	d85c      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087da:	2b50      	cmp	r3, #80	@ 0x50
 80087dc:	d046      	beq.n	800886c <TIM_SlaveTimer_SetConfig+0xe8>
 80087de:	2b50      	cmp	r3, #80	@ 0x50
 80087e0:	d858      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087e2:	2b40      	cmp	r3, #64	@ 0x40
 80087e4:	d019      	beq.n	800881a <TIM_SlaveTimer_SetConfig+0x96>
 80087e6:	2b40      	cmp	r3, #64	@ 0x40
 80087e8:	d854      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087ea:	2b30      	cmp	r3, #48	@ 0x30
 80087ec:	d055      	beq.n	800889a <TIM_SlaveTimer_SetConfig+0x116>
 80087ee:	2b30      	cmp	r3, #48	@ 0x30
 80087f0:	d850      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d051      	beq.n	800889a <TIM_SlaveTimer_SetConfig+0x116>
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d84c      	bhi.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d04d      	beq.n	800889a <TIM_SlaveTimer_SetConfig+0x116>
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d04b      	beq.n	800889a <TIM_SlaveTimer_SetConfig+0x116>
 8008802:	e047      	b.n	8008894 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008814:	f000 f9cc 	bl	8008bb0 <TIM_ETR_SetConfig>
      break;
 8008818:	e040      	b.n	800889c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b05      	cmp	r3, #5
 8008820:	d101      	bne.n	8008826 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e03b      	b.n	800889e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800884c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	4313      	orrs	r3, r2
 8008858:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	621a      	str	r2, [r3, #32]
      break;
 800886a:	e017      	b.n	800889c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008878:	461a      	mov	r2, r3
 800887a:	f000 f86f 	bl	800895c <TIM_TI1_ConfigInputStage>
      break;
 800887e:	e00d      	b.n	800889c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800888c:	461a      	mov	r2, r3
 800888e:	f000 f8cf 	bl	8008a30 <TIM_TI2_ConfigInputStage>
      break;
 8008892:	e003      	b.n	800889c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
      break;
 8008898:	e000      	b.n	800889c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800889a:	bf00      	nop
  }

  return status;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	f023 0201 	bic.w	r2, r3, #1
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008950 <TIM_TI1_SetConfig+0xa8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00b      	beq.n	80088ee <TIM_TI1_SetConfig+0x46>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088dc:	d007      	beq.n	80088ee <TIM_TI1_SetConfig+0x46>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <TIM_TI1_SetConfig+0xac>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_TI1_SetConfig+0x46>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <TIM_TI1_SetConfig+0xb0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d101      	bne.n	80088f2 <TIM_TI1_SetConfig+0x4a>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <TIM_TI1_SetConfig+0x4c>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d008      	beq.n	800890a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e003      	b.n	8008912 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	b2db      	uxtb	r3, r3
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f023 030a 	bic.w	r3, r3, #10
 800892c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f003 030a 	and.w	r3, r3, #10
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4313      	orrs	r3, r2
 8008938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800

0800895c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f023 0201 	bic.w	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 030a 	bic.w	r3, r3, #10
 8008998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f023 0210 	bic.w	r2, r3, #16
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	031b      	lsls	r3, r3, #12
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bc80      	pop	{r7}
 8008a2e:	4770      	bx	lr

08008a30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f023 0210 	bic.w	r2, r3, #16
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	031b      	lsls	r3, r3, #12
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	621a      	str	r2, [r3, #32]
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr

08008a8e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b087      	sub	sp, #28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ade:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	031b      	lsls	r3, r3, #12
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	031b      	lsls	r3, r3, #12
 8008b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f043 0307 	orr.w	r3, r3, #7
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	609a      	str	r2, [r3, #8]
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	021a      	lsls	r2, r3, #8
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	609a      	str	r2, [r3, #8]
}
 8008be4:	bf00      	nop
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr

08008bee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f003 031f 	and.w	r3, r3, #31
 8008c00:	2201      	movs	r2, #1
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a1a      	ldr	r2, [r3, #32]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	43db      	mvns	r3, r3
 8008c10:	401a      	ands	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	fa01 f303 	lsl.w	r3, r1, r3
 8008c26:	431a      	orrs	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	621a      	str	r2, [r3, #32]
}
 8008c2c:	bf00      	nop
 8008c2e:	371c      	adds	r7, #28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e046      	b.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00e      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a12      	ldr	r2, [pc, #72]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a10      	ldr	r2, [pc, #64]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10c      	bne.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr
 8008ce8:	40012c00 	.word	0x40012c00
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800

08008cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr

08008d06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e042      	b.n	8008db0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7fb fcd8 	bl	80046f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2224      	movs	r2, #36	@ 0x24
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f92b 	bl	8008fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	@ 0x28
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d17c      	bne.n	8008ed2 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <HAL_UART_Receive+0x2c>
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e075      	b.n	8008ed4 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2222      	movs	r2, #34	@ 0x22
 8008df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dfc:	f7fb fe98 	bl	8004b30 <HAL_GetTick>
 8008e00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e16:	d108      	bne.n	8008e2a <HAL_UART_Receive+0x72>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	e003      	b.n	8008e32 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008e32:	e043      	b.n	8008ebc <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2120      	movs	r1, #32
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f84c 	bl	8008edc <UART_WaitOnFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e042      	b.n	8008ed4 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10c      	bne.n	8008e6e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	3302      	adds	r3, #2
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	e01f      	b.n	8008eae <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e76:	d007      	beq.n	8008e88 <HAL_UART_Receive+0xd0>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <HAL_UART_Receive+0xde>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e008      	b.n	8008ea8 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1b6      	bne.n	8008e34 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e000      	b.n	8008ed4 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
  }
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b090      	sub	sp, #64	@ 0x40
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eec:	e050      	b.n	8008f90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d04c      	beq.n	8008f90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8008efc:	f7fb fe18 	bl	8004b30 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d241      	bcs.n	8008f90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	330c      	adds	r3, #12
 8008f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f2c:	637a      	str	r2, [r7, #52]	@ 0x34
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e5      	bne.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3314      	adds	r3, #20
 8008f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3314      	adds	r3, #20
 8008f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f60:	623a      	str	r2, [r7, #32]
 8008f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	6a3a      	ldr	r2, [r7, #32]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e5      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e00f      	b.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4013      	ands	r3, r2
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2301      	moveq	r3, #1
 8008fa2:	2300      	movne	r3, #0
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d09f      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3740      	adds	r7, #64	@ 0x40
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008ff2:	f023 030c 	bic.w	r3, r3, #12
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a2c      	ldr	r2, [pc, #176]	@ (80090cc <UART_SetConfig+0x114>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d103      	bne.n	8009028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009020:	f7fe f968 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	e002      	b.n	800902e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009028:	f7fe f950 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 800902c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009a      	lsls	r2, r3, #2
 8009038:	441a      	add	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	fbb2 f3f3 	udiv	r3, r2, r3
 8009044:	4a22      	ldr	r2, [pc, #136]	@ (80090d0 <UART_SetConfig+0x118>)
 8009046:	fba2 2303 	umull	r2, r3, r2, r3
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	0119      	lsls	r1, r3, #4
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009a      	lsls	r2, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	fbb2 f2f3 	udiv	r2, r2, r3
 8009064:	4b1a      	ldr	r3, [pc, #104]	@ (80090d0 <UART_SetConfig+0x118>)
 8009066:	fba3 0302 	umull	r0, r3, r3, r2
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	2064      	movs	r0, #100	@ 0x64
 800906e:	fb00 f303 	mul.w	r3, r0, r3
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	3332      	adds	r3, #50	@ 0x32
 8009078:	4a15      	ldr	r2, [pc, #84]	@ (80090d0 <UART_SetConfig+0x118>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009084:	4419      	add	r1, r3
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009a      	lsls	r2, r3, #2
 8009090:	441a      	add	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	fbb2 f2f3 	udiv	r2, r2, r3
 800909c:	4b0c      	ldr	r3, [pc, #48]	@ (80090d0 <UART_SetConfig+0x118>)
 800909e:	fba3 0302 	umull	r0, r3, r3, r2
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	2064      	movs	r0, #100	@ 0x64
 80090a6:	fb00 f303 	mul.w	r3, r0, r3
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	3332      	adds	r3, #50	@ 0x32
 80090b0:	4a07      	ldr	r2, [pc, #28]	@ (80090d0 <UART_SetConfig+0x118>)
 80090b2:	fba2 2303 	umull	r2, r3, r2, r3
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	440a      	add	r2, r1
 80090c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40013800 	.word	0x40013800
 80090d0:	51eb851f 	.word	0x51eb851f

080090d4 <atoi>:
 80090d4:	220a      	movs	r2, #10
 80090d6:	2100      	movs	r1, #0
 80090d8:	f000 bece 	b.w	8009e78 <strtol>

080090dc <sulp>:
 80090dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e0:	460f      	mov	r7, r1
 80090e2:	4690      	mov	r8, r2
 80090e4:	f004 f8bc 	bl	800d260 <__ulp>
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	f1b8 0f00 	cmp.w	r8, #0
 80090f0:	d011      	beq.n	8009116 <sulp+0x3a>
 80090f2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80090f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	dd0b      	ble.n	8009116 <sulp+0x3a>
 80090fe:	2400      	movs	r4, #0
 8009100:	051b      	lsls	r3, r3, #20
 8009102:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009106:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800910a:	4622      	mov	r2, r4
 800910c:	462b      	mov	r3, r5
 800910e:	f7f7 f9ed 	bl	80004ec <__aeabi_dmul>
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009120 <_strtod_l>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	b09f      	sub	sp, #124	@ 0x7c
 8009126:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009128:	2200      	movs	r2, #0
 800912a:	460c      	mov	r4, r1
 800912c:	921a      	str	r2, [sp, #104]	@ 0x68
 800912e:	f04f 0a00 	mov.w	sl, #0
 8009132:	f04f 0b00 	mov.w	fp, #0
 8009136:	460a      	mov	r2, r1
 8009138:	9005      	str	r0, [sp, #20]
 800913a:	9219      	str	r2, [sp, #100]	@ 0x64
 800913c:	7811      	ldrb	r1, [r2, #0]
 800913e:	292b      	cmp	r1, #43	@ 0x2b
 8009140:	d048      	beq.n	80091d4 <_strtod_l+0xb4>
 8009142:	d836      	bhi.n	80091b2 <_strtod_l+0x92>
 8009144:	290d      	cmp	r1, #13
 8009146:	d830      	bhi.n	80091aa <_strtod_l+0x8a>
 8009148:	2908      	cmp	r1, #8
 800914a:	d830      	bhi.n	80091ae <_strtod_l+0x8e>
 800914c:	2900      	cmp	r1, #0
 800914e:	d039      	beq.n	80091c4 <_strtod_l+0xa4>
 8009150:	2200      	movs	r2, #0
 8009152:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009154:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009156:	782a      	ldrb	r2, [r5, #0]
 8009158:	2a30      	cmp	r2, #48	@ 0x30
 800915a:	f040 80b1 	bne.w	80092c0 <_strtod_l+0x1a0>
 800915e:	786a      	ldrb	r2, [r5, #1]
 8009160:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009164:	2a58      	cmp	r2, #88	@ 0x58
 8009166:	d16c      	bne.n	8009242 <_strtod_l+0x122>
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800916c:	4a8e      	ldr	r2, [pc, #568]	@ (80093a8 <_strtod_l+0x288>)
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	ab1a      	add	r3, sp, #104	@ 0x68
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009178:	a919      	add	r1, sp, #100	@ 0x64
 800917a:	f003 f919 	bl	800c3b0 <__gethex>
 800917e:	f010 060f 	ands.w	r6, r0, #15
 8009182:	4604      	mov	r4, r0
 8009184:	d005      	beq.n	8009192 <_strtod_l+0x72>
 8009186:	2e06      	cmp	r6, #6
 8009188:	d126      	bne.n	80091d8 <_strtod_l+0xb8>
 800918a:	2300      	movs	r3, #0
 800918c:	3501      	adds	r5, #1
 800918e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 8584 	bne.w	8009ca2 <_strtod_l+0xb82>
 800919a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800919c:	b1bb      	cbz	r3, 80091ce <_strtod_l+0xae>
 800919e:	4650      	mov	r0, sl
 80091a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80091a4:	b01f      	add	sp, #124	@ 0x7c
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	2920      	cmp	r1, #32
 80091ac:	d1d0      	bne.n	8009150 <_strtod_l+0x30>
 80091ae:	3201      	adds	r2, #1
 80091b0:	e7c3      	b.n	800913a <_strtod_l+0x1a>
 80091b2:	292d      	cmp	r1, #45	@ 0x2d
 80091b4:	d1cc      	bne.n	8009150 <_strtod_l+0x30>
 80091b6:	2101      	movs	r1, #1
 80091b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091ba:	1c51      	adds	r1, r2, #1
 80091bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80091be:	7852      	ldrb	r2, [r2, #1]
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	d1c7      	bne.n	8009154 <_strtod_l+0x34>
 80091c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091c6:	9419      	str	r4, [sp, #100]	@ 0x64
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f040 8568 	bne.w	8009c9e <_strtod_l+0xb7e>
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	e7e7      	b.n	80091a4 <_strtod_l+0x84>
 80091d4:	2100      	movs	r1, #0
 80091d6:	e7ef      	b.n	80091b8 <_strtod_l+0x98>
 80091d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091da:	b13a      	cbz	r2, 80091ec <_strtod_l+0xcc>
 80091dc:	2135      	movs	r1, #53	@ 0x35
 80091de:	a81c      	add	r0, sp, #112	@ 0x70
 80091e0:	f004 f92e 	bl	800d440 <__copybits>
 80091e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091e6:	9805      	ldr	r0, [sp, #20]
 80091e8:	f003 fd08 	bl	800cbfc <_Bfree>
 80091ec:	3e01      	subs	r6, #1
 80091ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091f0:	2e04      	cmp	r6, #4
 80091f2:	d806      	bhi.n	8009202 <_strtod_l+0xe2>
 80091f4:	e8df f006 	tbb	[pc, r6]
 80091f8:	201d0314 	.word	0x201d0314
 80091fc:	14          	.byte	0x14
 80091fd:	00          	.byte	0x00
 80091fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009202:	05e1      	lsls	r1, r4, #23
 8009204:	bf48      	it	mi
 8009206:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800920a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800920e:	0d1b      	lsrs	r3, r3, #20
 8009210:	051b      	lsls	r3, r3, #20
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1bd      	bne.n	8009192 <_strtod_l+0x72>
 8009216:	f002 f963 	bl	800b4e0 <__errno>
 800921a:	2322      	movs	r3, #34	@ 0x22
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	e7b8      	b.n	8009192 <_strtod_l+0x72>
 8009220:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009224:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009228:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800922c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009230:	e7e7      	b.n	8009202 <_strtod_l+0xe2>
 8009232:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80093ac <_strtod_l+0x28c>
 8009236:	e7e4      	b.n	8009202 <_strtod_l+0xe2>
 8009238:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800923c:	f04f 3aff 	mov.w	sl, #4294967295
 8009240:	e7df      	b.n	8009202 <_strtod_l+0xe2>
 8009242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	9219      	str	r2, [sp, #100]	@ 0x64
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b30      	cmp	r3, #48	@ 0x30
 800924c:	d0f9      	beq.n	8009242 <_strtod_l+0x122>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d09f      	beq.n	8009192 <_strtod_l+0x72>
 8009252:	2301      	movs	r3, #1
 8009254:	9309      	str	r3, [sp, #36]	@ 0x24
 8009256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009258:	220a      	movs	r2, #10
 800925a:	930c      	str	r3, [sp, #48]	@ 0x30
 800925c:	2300      	movs	r3, #0
 800925e:	461f      	mov	r7, r3
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	930a      	str	r3, [sp, #40]	@ 0x28
 8009264:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009266:	7805      	ldrb	r5, [r0, #0]
 8009268:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800926c:	b2d9      	uxtb	r1, r3
 800926e:	2909      	cmp	r1, #9
 8009270:	d928      	bls.n	80092c4 <_strtod_l+0x1a4>
 8009272:	2201      	movs	r2, #1
 8009274:	494e      	ldr	r1, [pc, #312]	@ (80093b0 <_strtod_l+0x290>)
 8009276:	f001 fb74 	bl	800a962 <strncmp>
 800927a:	2800      	cmp	r0, #0
 800927c:	d032      	beq.n	80092e4 <_strtod_l+0x1c4>
 800927e:	2000      	movs	r0, #0
 8009280:	462a      	mov	r2, r5
 8009282:	4681      	mov	r9, r0
 8009284:	463d      	mov	r5, r7
 8009286:	4603      	mov	r3, r0
 8009288:	2a65      	cmp	r2, #101	@ 0x65
 800928a:	d001      	beq.n	8009290 <_strtod_l+0x170>
 800928c:	2a45      	cmp	r2, #69	@ 0x45
 800928e:	d114      	bne.n	80092ba <_strtod_l+0x19a>
 8009290:	b91d      	cbnz	r5, 800929a <_strtod_l+0x17a>
 8009292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009294:	4302      	orrs	r2, r0
 8009296:	d095      	beq.n	80091c4 <_strtod_l+0xa4>
 8009298:	2500      	movs	r5, #0
 800929a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800929c:	1c62      	adds	r2, r4, #1
 800929e:	9219      	str	r2, [sp, #100]	@ 0x64
 80092a0:	7862      	ldrb	r2, [r4, #1]
 80092a2:	2a2b      	cmp	r2, #43	@ 0x2b
 80092a4:	d077      	beq.n	8009396 <_strtod_l+0x276>
 80092a6:	2a2d      	cmp	r2, #45	@ 0x2d
 80092a8:	d07b      	beq.n	80093a2 <_strtod_l+0x282>
 80092aa:	f04f 0c00 	mov.w	ip, #0
 80092ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092b2:	2909      	cmp	r1, #9
 80092b4:	f240 8082 	bls.w	80093bc <_strtod_l+0x29c>
 80092b8:	9419      	str	r4, [sp, #100]	@ 0x64
 80092ba:	f04f 0800 	mov.w	r8, #0
 80092be:	e0a2      	b.n	8009406 <_strtod_l+0x2e6>
 80092c0:	2300      	movs	r3, #0
 80092c2:	e7c7      	b.n	8009254 <_strtod_l+0x134>
 80092c4:	2f08      	cmp	r7, #8
 80092c6:	bfd5      	itete	le
 80092c8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092ca:	9908      	ldrgt	r1, [sp, #32]
 80092cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80092d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092d4:	f100 0001 	add.w	r0, r0, #1
 80092d8:	bfd4      	ite	le
 80092da:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092dc:	9308      	strgt	r3, [sp, #32]
 80092de:	3701      	adds	r7, #1
 80092e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80092e2:	e7bf      	b.n	8009264 <_strtod_l+0x144>
 80092e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ea:	785a      	ldrb	r2, [r3, #1]
 80092ec:	b37f      	cbz	r7, 800934e <_strtod_l+0x22e>
 80092ee:	4681      	mov	r9, r0
 80092f0:	463d      	mov	r5, r7
 80092f2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d912      	bls.n	8009320 <_strtod_l+0x200>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7c4      	b.n	8009288 <_strtod_l+0x168>
 80092fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009300:	3001      	adds	r0, #1
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	9219      	str	r2, [sp, #100]	@ 0x64
 8009306:	785a      	ldrb	r2, [r3, #1]
 8009308:	2a30      	cmp	r2, #48	@ 0x30
 800930a:	d0f8      	beq.n	80092fe <_strtod_l+0x1de>
 800930c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009310:	2b08      	cmp	r3, #8
 8009312:	f200 84cb 	bhi.w	8009cac <_strtod_l+0xb8c>
 8009316:	4681      	mov	r9, r0
 8009318:	2000      	movs	r0, #0
 800931a:	4605      	mov	r5, r0
 800931c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800931e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009320:	3a30      	subs	r2, #48	@ 0x30
 8009322:	f100 0301 	add.w	r3, r0, #1
 8009326:	d02a      	beq.n	800937e <_strtod_l+0x25e>
 8009328:	4499      	add	r9, r3
 800932a:	210a      	movs	r1, #10
 800932c:	462b      	mov	r3, r5
 800932e:	eb00 0c05 	add.w	ip, r0, r5
 8009332:	4563      	cmp	r3, ip
 8009334:	d10d      	bne.n	8009352 <_strtod_l+0x232>
 8009336:	1c69      	adds	r1, r5, #1
 8009338:	4401      	add	r1, r0
 800933a:	4428      	add	r0, r5
 800933c:	2808      	cmp	r0, #8
 800933e:	dc16      	bgt.n	800936e <_strtod_l+0x24e>
 8009340:	230a      	movs	r3, #10
 8009342:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009344:	fb03 2300 	mla	r3, r3, r0, r2
 8009348:	930a      	str	r3, [sp, #40]	@ 0x28
 800934a:	2300      	movs	r3, #0
 800934c:	e018      	b.n	8009380 <_strtod_l+0x260>
 800934e:	4638      	mov	r0, r7
 8009350:	e7da      	b.n	8009308 <_strtod_l+0x1e8>
 8009352:	2b08      	cmp	r3, #8
 8009354:	f103 0301 	add.w	r3, r3, #1
 8009358:	dc03      	bgt.n	8009362 <_strtod_l+0x242>
 800935a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800935c:	434e      	muls	r6, r1
 800935e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009360:	e7e7      	b.n	8009332 <_strtod_l+0x212>
 8009362:	2b10      	cmp	r3, #16
 8009364:	bfde      	ittt	le
 8009366:	9e08      	ldrle	r6, [sp, #32]
 8009368:	434e      	mulle	r6, r1
 800936a:	9608      	strle	r6, [sp, #32]
 800936c:	e7e1      	b.n	8009332 <_strtod_l+0x212>
 800936e:	280f      	cmp	r0, #15
 8009370:	dceb      	bgt.n	800934a <_strtod_l+0x22a>
 8009372:	230a      	movs	r3, #10
 8009374:	9808      	ldr	r0, [sp, #32]
 8009376:	fb03 2300 	mla	r3, r3, r0, r2
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	e7e5      	b.n	800934a <_strtod_l+0x22a>
 800937e:	4629      	mov	r1, r5
 8009380:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009382:	460d      	mov	r5, r1
 8009384:	1c50      	adds	r0, r2, #1
 8009386:	9019      	str	r0, [sp, #100]	@ 0x64
 8009388:	7852      	ldrb	r2, [r2, #1]
 800938a:	4618      	mov	r0, r3
 800938c:	e7b1      	b.n	80092f2 <_strtod_l+0x1d2>
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	2301      	movs	r3, #1
 8009394:	e77d      	b.n	8009292 <_strtod_l+0x172>
 8009396:	f04f 0c00 	mov.w	ip, #0
 800939a:	1ca2      	adds	r2, r4, #2
 800939c:	9219      	str	r2, [sp, #100]	@ 0x64
 800939e:	78a2      	ldrb	r2, [r4, #2]
 80093a0:	e785      	b.n	80092ae <_strtod_l+0x18e>
 80093a2:	f04f 0c01 	mov.w	ip, #1
 80093a6:	e7f8      	b.n	800939a <_strtod_l+0x27a>
 80093a8:	0800ec70 	.word	0x0800ec70
 80093ac:	7ff00000 	.word	0x7ff00000
 80093b0:	0800ec5a 	.word	0x0800ec5a
 80093b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093b6:	1c51      	adds	r1, r2, #1
 80093b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ba:	7852      	ldrb	r2, [r2, #1]
 80093bc:	2a30      	cmp	r2, #48	@ 0x30
 80093be:	d0f9      	beq.n	80093b4 <_strtod_l+0x294>
 80093c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093c4:	2908      	cmp	r1, #8
 80093c6:	f63f af78 	bhi.w	80092ba <_strtod_l+0x19a>
 80093ca:	f04f 080a 	mov.w	r8, #10
 80093ce:	3a30      	subs	r2, #48	@ 0x30
 80093d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093d8:	1c56      	adds	r6, r2, #1
 80093da:	9619      	str	r6, [sp, #100]	@ 0x64
 80093dc:	7852      	ldrb	r2, [r2, #1]
 80093de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093e2:	f1be 0f09 	cmp.w	lr, #9
 80093e6:	d939      	bls.n	800945c <_strtod_l+0x33c>
 80093e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093ee:	1a76      	subs	r6, r6, r1
 80093f0:	2e08      	cmp	r6, #8
 80093f2:	dc03      	bgt.n	80093fc <_strtod_l+0x2dc>
 80093f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80093f6:	4588      	cmp	r8, r1
 80093f8:	bfa8      	it	ge
 80093fa:	4688      	movge	r8, r1
 80093fc:	f1bc 0f00 	cmp.w	ip, #0
 8009400:	d001      	beq.n	8009406 <_strtod_l+0x2e6>
 8009402:	f1c8 0800 	rsb	r8, r8, #0
 8009406:	2d00      	cmp	r5, #0
 8009408:	d14e      	bne.n	80094a8 <_strtod_l+0x388>
 800940a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800940c:	4308      	orrs	r0, r1
 800940e:	f47f aec0 	bne.w	8009192 <_strtod_l+0x72>
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f aed6 	bne.w	80091c4 <_strtod_l+0xa4>
 8009418:	2a69      	cmp	r2, #105	@ 0x69
 800941a:	d028      	beq.n	800946e <_strtod_l+0x34e>
 800941c:	dc25      	bgt.n	800946a <_strtod_l+0x34a>
 800941e:	2a49      	cmp	r2, #73	@ 0x49
 8009420:	d025      	beq.n	800946e <_strtod_l+0x34e>
 8009422:	2a4e      	cmp	r2, #78	@ 0x4e
 8009424:	f47f aece 	bne.w	80091c4 <_strtod_l+0xa4>
 8009428:	499a      	ldr	r1, [pc, #616]	@ (8009694 <_strtod_l+0x574>)
 800942a:	a819      	add	r0, sp, #100	@ 0x64
 800942c:	f003 f9e2 	bl	800c7f4 <__match>
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f aec7 	beq.w	80091c4 <_strtod_l+0xa4>
 8009436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b28      	cmp	r3, #40	@ 0x28
 800943c:	d12e      	bne.n	800949c <_strtod_l+0x37c>
 800943e:	4996      	ldr	r1, [pc, #600]	@ (8009698 <_strtod_l+0x578>)
 8009440:	aa1c      	add	r2, sp, #112	@ 0x70
 8009442:	a819      	add	r0, sp, #100	@ 0x64
 8009444:	f003 f9ea 	bl	800c81c <__hexnan>
 8009448:	2805      	cmp	r0, #5
 800944a:	d127      	bne.n	800949c <_strtod_l+0x37c>
 800944c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800944e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009452:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009456:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800945a:	e69a      	b.n	8009192 <_strtod_l+0x72>
 800945c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800945e:	fb08 2101 	mla	r1, r8, r1, r2
 8009462:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009466:	920e      	str	r2, [sp, #56]	@ 0x38
 8009468:	e7b5      	b.n	80093d6 <_strtod_l+0x2b6>
 800946a:	2a6e      	cmp	r2, #110	@ 0x6e
 800946c:	e7da      	b.n	8009424 <_strtod_l+0x304>
 800946e:	498b      	ldr	r1, [pc, #556]	@ (800969c <_strtod_l+0x57c>)
 8009470:	a819      	add	r0, sp, #100	@ 0x64
 8009472:	f003 f9bf 	bl	800c7f4 <__match>
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f aea4 	beq.w	80091c4 <_strtod_l+0xa4>
 800947c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800947e:	4988      	ldr	r1, [pc, #544]	@ (80096a0 <_strtod_l+0x580>)
 8009480:	3b01      	subs	r3, #1
 8009482:	a819      	add	r0, sp, #100	@ 0x64
 8009484:	9319      	str	r3, [sp, #100]	@ 0x64
 8009486:	f003 f9b5 	bl	800c7f4 <__match>
 800948a:	b910      	cbnz	r0, 8009492 <_strtod_l+0x372>
 800948c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948e:	3301      	adds	r3, #1
 8009490:	9319      	str	r3, [sp, #100]	@ 0x64
 8009492:	f04f 0a00 	mov.w	sl, #0
 8009496:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80096a4 <_strtod_l+0x584>
 800949a:	e67a      	b.n	8009192 <_strtod_l+0x72>
 800949c:	4882      	ldr	r0, [pc, #520]	@ (80096a8 <_strtod_l+0x588>)
 800949e:	f002 f873 	bl	800b588 <nan>
 80094a2:	4682      	mov	sl, r0
 80094a4:	468b      	mov	fp, r1
 80094a6:	e674      	b.n	8009192 <_strtod_l+0x72>
 80094a8:	eba8 0309 	sub.w	r3, r8, r9
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	bf08      	it	eq
 80094b0:	462f      	moveq	r7, r5
 80094b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094b4:	2d10      	cmp	r5, #16
 80094b6:	462c      	mov	r4, r5
 80094b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ba:	bfa8      	it	ge
 80094bc:	2410      	movge	r4, #16
 80094be:	f7f6 ff9b 	bl	80003f8 <__aeabi_ui2d>
 80094c2:	2d09      	cmp	r5, #9
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	dc11      	bgt.n	80094ee <_strtod_l+0x3ce>
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f43f ae60 	beq.w	8009192 <_strtod_l+0x72>
 80094d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d4:	dd76      	ble.n	80095c4 <_strtod_l+0x4a4>
 80094d6:	2b16      	cmp	r3, #22
 80094d8:	dc5d      	bgt.n	8009596 <_strtod_l+0x476>
 80094da:	4974      	ldr	r1, [pc, #464]	@ (80096ac <_strtod_l+0x58c>)
 80094dc:	4652      	mov	r2, sl
 80094de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094e2:	465b      	mov	r3, fp
 80094e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e8:	f7f7 f800 	bl	80004ec <__aeabi_dmul>
 80094ec:	e7d9      	b.n	80094a2 <_strtod_l+0x382>
 80094ee:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <_strtod_l+0x58c>)
 80094f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80094f8:	f7f6 fff8 	bl	80004ec <__aeabi_dmul>
 80094fc:	4682      	mov	sl, r0
 80094fe:	9808      	ldr	r0, [sp, #32]
 8009500:	468b      	mov	fp, r1
 8009502:	f7f6 ff79 	bl	80003f8 <__aeabi_ui2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	f7f6 fe37 	bl	8000180 <__adddf3>
 8009512:	2d0f      	cmp	r5, #15
 8009514:	4682      	mov	sl, r0
 8009516:	468b      	mov	fp, r1
 8009518:	ddd7      	ble.n	80094ca <_strtod_l+0x3aa>
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	1b2c      	subs	r4, r5, r4
 800951e:	441c      	add	r4, r3
 8009520:	2c00      	cmp	r4, #0
 8009522:	f340 8096 	ble.w	8009652 <_strtod_l+0x532>
 8009526:	f014 030f 	ands.w	r3, r4, #15
 800952a:	d00a      	beq.n	8009542 <_strtod_l+0x422>
 800952c:	495f      	ldr	r1, [pc, #380]	@ (80096ac <_strtod_l+0x58c>)
 800952e:	4652      	mov	r2, sl
 8009530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009538:	465b      	mov	r3, fp
 800953a:	f7f6 ffd7 	bl	80004ec <__aeabi_dmul>
 800953e:	4682      	mov	sl, r0
 8009540:	468b      	mov	fp, r1
 8009542:	f034 040f 	bics.w	r4, r4, #15
 8009546:	d073      	beq.n	8009630 <_strtod_l+0x510>
 8009548:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800954c:	dd48      	ble.n	80095e0 <_strtod_l+0x4c0>
 800954e:	2400      	movs	r4, #0
 8009550:	46a0      	mov	r8, r4
 8009552:	46a1      	mov	r9, r4
 8009554:	940a      	str	r4, [sp, #40]	@ 0x28
 8009556:	2322      	movs	r3, #34	@ 0x22
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	9a05      	ldr	r2, [sp, #20]
 800955e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80096a4 <_strtod_l+0x584>
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	f43f ae13 	beq.w	8009192 <_strtod_l+0x72>
 800956c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800956e:	9805      	ldr	r0, [sp, #20]
 8009570:	f003 fb44 	bl	800cbfc <_Bfree>
 8009574:	4649      	mov	r1, r9
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f003 fb40 	bl	800cbfc <_Bfree>
 800957c:	4641      	mov	r1, r8
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f003 fb3c 	bl	800cbfc <_Bfree>
 8009584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f003 fb38 	bl	800cbfc <_Bfree>
 800958c:	4621      	mov	r1, r4
 800958e:	9805      	ldr	r0, [sp, #20]
 8009590:	f003 fb34 	bl	800cbfc <_Bfree>
 8009594:	e5fd      	b.n	8009192 <_strtod_l+0x72>
 8009596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009598:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800959c:	4293      	cmp	r3, r2
 800959e:	dbbc      	blt.n	800951a <_strtod_l+0x3fa>
 80095a0:	4c42      	ldr	r4, [pc, #264]	@ (80096ac <_strtod_l+0x58c>)
 80095a2:	f1c5 050f 	rsb	r5, r5, #15
 80095a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095aa:	4652      	mov	r2, sl
 80095ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b0:	465b      	mov	r3, fp
 80095b2:	f7f6 ff9b 	bl	80004ec <__aeabi_dmul>
 80095b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b8:	1b5d      	subs	r5, r3, r5
 80095ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095c2:	e791      	b.n	80094e8 <_strtod_l+0x3c8>
 80095c4:	3316      	adds	r3, #22
 80095c6:	dba8      	blt.n	800951a <_strtod_l+0x3fa>
 80095c8:	4b38      	ldr	r3, [pc, #224]	@ (80096ac <_strtod_l+0x58c>)
 80095ca:	eba9 0808 	sub.w	r8, r9, r8
 80095ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095d2:	4650      	mov	r0, sl
 80095d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f7 f8b1 	bl	8000740 <__aeabi_ddiv>
 80095de:	e760      	b.n	80094a2 <_strtod_l+0x382>
 80095e0:	4b33      	ldr	r3, [pc, #204]	@ (80096b0 <_strtod_l+0x590>)
 80095e2:	4650      	mov	r0, sl
 80095e4:	9308      	str	r3, [sp, #32]
 80095e6:	2300      	movs	r3, #0
 80095e8:	4659      	mov	r1, fp
 80095ea:	461e      	mov	r6, r3
 80095ec:	1124      	asrs	r4, r4, #4
 80095ee:	2c01      	cmp	r4, #1
 80095f0:	dc21      	bgt.n	8009636 <_strtod_l+0x516>
 80095f2:	b10b      	cbz	r3, 80095f8 <_strtod_l+0x4d8>
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	492d      	ldr	r1, [pc, #180]	@ (80096b0 <_strtod_l+0x590>)
 80095fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80095fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009602:	4652      	mov	r2, sl
 8009604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009608:	465b      	mov	r3, fp
 800960a:	f7f6 ff6f 	bl	80004ec <__aeabi_dmul>
 800960e:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <_strtod_l+0x584>)
 8009610:	460a      	mov	r2, r1
 8009612:	400b      	ands	r3, r1
 8009614:	4927      	ldr	r1, [pc, #156]	@ (80096b4 <_strtod_l+0x594>)
 8009616:	4682      	mov	sl, r0
 8009618:	428b      	cmp	r3, r1
 800961a:	d898      	bhi.n	800954e <_strtod_l+0x42e>
 800961c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009620:	428b      	cmp	r3, r1
 8009622:	bf86      	itte	hi
 8009624:	f04f 3aff 	movhi.w	sl, #4294967295
 8009628:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80096b8 <_strtod_l+0x598>
 800962c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009630:	2300      	movs	r3, #0
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	e07a      	b.n	800972c <_strtod_l+0x60c>
 8009636:	07e2      	lsls	r2, r4, #31
 8009638:	d505      	bpl.n	8009646 <_strtod_l+0x526>
 800963a:	9b08      	ldr	r3, [sp, #32]
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7f6 ff54 	bl	80004ec <__aeabi_dmul>
 8009644:	2301      	movs	r3, #1
 8009646:	9a08      	ldr	r2, [sp, #32]
 8009648:	3601      	adds	r6, #1
 800964a:	3208      	adds	r2, #8
 800964c:	1064      	asrs	r4, r4, #1
 800964e:	9208      	str	r2, [sp, #32]
 8009650:	e7cd      	b.n	80095ee <_strtod_l+0x4ce>
 8009652:	d0ed      	beq.n	8009630 <_strtod_l+0x510>
 8009654:	4264      	negs	r4, r4
 8009656:	f014 020f 	ands.w	r2, r4, #15
 800965a:	d00a      	beq.n	8009672 <_strtod_l+0x552>
 800965c:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <_strtod_l+0x58c>)
 800965e:	4650      	mov	r0, sl
 8009660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009664:	4659      	mov	r1, fp
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f7 f869 	bl	8000740 <__aeabi_ddiv>
 800966e:	4682      	mov	sl, r0
 8009670:	468b      	mov	fp, r1
 8009672:	1124      	asrs	r4, r4, #4
 8009674:	d0dc      	beq.n	8009630 <_strtod_l+0x510>
 8009676:	2c1f      	cmp	r4, #31
 8009678:	dd20      	ble.n	80096bc <_strtod_l+0x59c>
 800967a:	2400      	movs	r4, #0
 800967c:	46a0      	mov	r8, r4
 800967e:	46a1      	mov	r9, r4
 8009680:	940a      	str	r4, [sp, #40]	@ 0x28
 8009682:	2322      	movs	r3, #34	@ 0x22
 8009684:	9a05      	ldr	r2, [sp, #20]
 8009686:	f04f 0a00 	mov.w	sl, #0
 800968a:	f04f 0b00 	mov.w	fp, #0
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	e768      	b.n	8009564 <_strtod_l+0x444>
 8009692:	bf00      	nop
 8009694:	0800edbe 	.word	0x0800edbe
 8009698:	0800ec5c 	.word	0x0800ec5c
 800969c:	0800edb6 	.word	0x0800edb6
 80096a0:	0800ee9d 	.word	0x0800ee9d
 80096a4:	7ff00000 	.word	0x7ff00000
 80096a8:	0800f17b 	.word	0x0800f17b
 80096ac:	0800f018 	.word	0x0800f018
 80096b0:	0800eff0 	.word	0x0800eff0
 80096b4:	7ca00000 	.word	0x7ca00000
 80096b8:	7fefffff 	.word	0x7fefffff
 80096bc:	f014 0310 	ands.w	r3, r4, #16
 80096c0:	bf18      	it	ne
 80096c2:	236a      	movne	r3, #106	@ 0x6a
 80096c4:	4650      	mov	r0, sl
 80096c6:	9308      	str	r3, [sp, #32]
 80096c8:	4659      	mov	r1, fp
 80096ca:	2300      	movs	r3, #0
 80096cc:	4ea9      	ldr	r6, [pc, #676]	@ (8009974 <_strtod_l+0x854>)
 80096ce:	07e2      	lsls	r2, r4, #31
 80096d0:	d504      	bpl.n	80096dc <_strtod_l+0x5bc>
 80096d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096d6:	f7f6 ff09 	bl	80004ec <__aeabi_dmul>
 80096da:	2301      	movs	r3, #1
 80096dc:	1064      	asrs	r4, r4, #1
 80096de:	f106 0608 	add.w	r6, r6, #8
 80096e2:	d1f4      	bne.n	80096ce <_strtod_l+0x5ae>
 80096e4:	b10b      	cbz	r3, 80096ea <_strtod_l+0x5ca>
 80096e6:	4682      	mov	sl, r0
 80096e8:	468b      	mov	fp, r1
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	b1b3      	cbz	r3, 800971c <_strtod_l+0x5fc>
 80096ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80096f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	4659      	mov	r1, fp
 80096fa:	dd0f      	ble.n	800971c <_strtod_l+0x5fc>
 80096fc:	2b1f      	cmp	r3, #31
 80096fe:	dd57      	ble.n	80097b0 <_strtod_l+0x690>
 8009700:	2b34      	cmp	r3, #52	@ 0x34
 8009702:	bfd8      	it	le
 8009704:	f04f 33ff 	movle.w	r3, #4294967295
 8009708:	f04f 0a00 	mov.w	sl, #0
 800970c:	bfcf      	iteee	gt
 800970e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009712:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009716:	4093      	lslle	r3, r2
 8009718:	ea03 0b01 	andle.w	fp, r3, r1
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	4650      	mov	r0, sl
 8009722:	4659      	mov	r1, fp
 8009724:	f7f7 f94a 	bl	80009bc <__aeabi_dcmpeq>
 8009728:	2800      	cmp	r0, #0
 800972a:	d1a6      	bne.n	800967a <_strtod_l+0x55a>
 800972c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800972e:	463a      	mov	r2, r7
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009734:	462b      	mov	r3, r5
 8009736:	9805      	ldr	r0, [sp, #20]
 8009738:	f003 fac8 	bl	800cccc <__s2b>
 800973c:	900a      	str	r0, [sp, #40]	@ 0x28
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f af05 	beq.w	800954e <_strtod_l+0x42e>
 8009744:	2400      	movs	r4, #0
 8009746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009748:	eba9 0308 	sub.w	r3, r9, r8
 800974c:	2a00      	cmp	r2, #0
 800974e:	bfa8      	it	ge
 8009750:	2300      	movge	r3, #0
 8009752:	46a0      	mov	r8, r4
 8009754:	9312      	str	r3, [sp, #72]	@ 0x48
 8009756:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800975a:	9316      	str	r3, [sp, #88]	@ 0x58
 800975c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800975e:	9805      	ldr	r0, [sp, #20]
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	f003 fa0b 	bl	800cb7c <_Balloc>
 8009766:	4681      	mov	r9, r0
 8009768:	2800      	cmp	r0, #0
 800976a:	f43f aef4 	beq.w	8009556 <_strtod_l+0x436>
 800976e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009770:	300c      	adds	r0, #12
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	f103 010c 	add.w	r1, r3, #12
 8009778:	3202      	adds	r2, #2
 800977a:	0092      	lsls	r2, r2, #2
 800977c:	f001 fef5 	bl	800b56a <memcpy>
 8009780:	ab1c      	add	r3, sp, #112	@ 0x70
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4652      	mov	r2, sl
 800978a:	465b      	mov	r3, fp
 800978c:	9805      	ldr	r0, [sp, #20]
 800978e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009792:	f003 fdcd 	bl	800d330 <__d2b>
 8009796:	901a      	str	r0, [sp, #104]	@ 0x68
 8009798:	2800      	cmp	r0, #0
 800979a:	f43f aedc 	beq.w	8009556 <_strtod_l+0x436>
 800979e:	2101      	movs	r1, #1
 80097a0:	9805      	ldr	r0, [sp, #20]
 80097a2:	f003 fb29 	bl	800cdf8 <__i2b>
 80097a6:	4680      	mov	r8, r0
 80097a8:	b948      	cbnz	r0, 80097be <_strtod_l+0x69e>
 80097aa:	f04f 0800 	mov.w	r8, #0
 80097ae:	e6d2      	b.n	8009556 <_strtod_l+0x436>
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	fa02 f303 	lsl.w	r3, r2, r3
 80097b8:	ea03 0a0a 	and.w	sl, r3, sl
 80097bc:	e7ae      	b.n	800971c <_strtod_l+0x5fc>
 80097be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	bfab      	itete	ge
 80097c6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097c8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097ca:	18ef      	addge	r7, r5, r3
 80097cc:	1b5e      	sublt	r6, r3, r5
 80097ce:	9b08      	ldr	r3, [sp, #32]
 80097d0:	bfa8      	it	ge
 80097d2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097d4:	eba5 0503 	sub.w	r5, r5, r3
 80097d8:	4415      	add	r5, r2
 80097da:	4b67      	ldr	r3, [pc, #412]	@ (8009978 <_strtod_l+0x858>)
 80097dc:	f105 35ff 	add.w	r5, r5, #4294967295
 80097e0:	bfb8      	it	lt
 80097e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097e4:	429d      	cmp	r5, r3
 80097e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097ea:	da50      	bge.n	800988e <_strtod_l+0x76e>
 80097ec:	1b5b      	subs	r3, r3, r5
 80097ee:	2b1f      	cmp	r3, #31
 80097f0:	f04f 0101 	mov.w	r1, #1
 80097f4:	eba2 0203 	sub.w	r2, r2, r3
 80097f8:	dc3d      	bgt.n	8009876 <_strtod_l+0x756>
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009800:	2300      	movs	r3, #0
 8009802:	9310      	str	r3, [sp, #64]	@ 0x40
 8009804:	18bd      	adds	r5, r7, r2
 8009806:	9b08      	ldr	r3, [sp, #32]
 8009808:	42af      	cmp	r7, r5
 800980a:	4416      	add	r6, r2
 800980c:	441e      	add	r6, r3
 800980e:	463b      	mov	r3, r7
 8009810:	bfa8      	it	ge
 8009812:	462b      	movge	r3, r5
 8009814:	42b3      	cmp	r3, r6
 8009816:	bfa8      	it	ge
 8009818:	4633      	movge	r3, r6
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfc2      	ittt	gt
 800981e:	1aed      	subgt	r5, r5, r3
 8009820:	1af6      	subgt	r6, r6, r3
 8009822:	1aff      	subgt	r7, r7, r3
 8009824:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd16      	ble.n	8009858 <_strtod_l+0x738>
 800982a:	4641      	mov	r1, r8
 800982c:	461a      	mov	r2, r3
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f003 fba0 	bl	800cf74 <__pow5mult>
 8009834:	4680      	mov	r8, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d0b7      	beq.n	80097aa <_strtod_l+0x68a>
 800983a:	4601      	mov	r1, r0
 800983c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f003 faf0 	bl	800ce24 <__multiply>
 8009844:	900e      	str	r0, [sp, #56]	@ 0x38
 8009846:	2800      	cmp	r0, #0
 8009848:	f43f ae85 	beq.w	8009556 <_strtod_l+0x436>
 800984c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f003 f9d4 	bl	800cbfc <_Bfree>
 8009854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009856:	931a      	str	r3, [sp, #104]	@ 0x68
 8009858:	2d00      	cmp	r5, #0
 800985a:	dc1d      	bgt.n	8009898 <_strtod_l+0x778>
 800985c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd23      	ble.n	80098aa <_strtod_l+0x78a>
 8009862:	4649      	mov	r1, r9
 8009864:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009866:	9805      	ldr	r0, [sp, #20]
 8009868:	f003 fb84 	bl	800cf74 <__pow5mult>
 800986c:	4681      	mov	r9, r0
 800986e:	b9e0      	cbnz	r0, 80098aa <_strtod_l+0x78a>
 8009870:	f04f 0900 	mov.w	r9, #0
 8009874:	e66f      	b.n	8009556 <_strtod_l+0x436>
 8009876:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800987a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800987e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009882:	35e2      	adds	r5, #226	@ 0xe2
 8009884:	fa01 f305 	lsl.w	r3, r1, r5
 8009888:	9310      	str	r3, [sp, #64]	@ 0x40
 800988a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800988c:	e7ba      	b.n	8009804 <_strtod_l+0x6e4>
 800988e:	2300      	movs	r3, #0
 8009890:	9310      	str	r3, [sp, #64]	@ 0x40
 8009892:	2301      	movs	r3, #1
 8009894:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009896:	e7b5      	b.n	8009804 <_strtod_l+0x6e4>
 8009898:	462a      	mov	r2, r5
 800989a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	f003 fbc3 	bl	800d028 <__lshift>
 80098a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1d9      	bne.n	800985c <_strtod_l+0x73c>
 80098a8:	e655      	b.n	8009556 <_strtod_l+0x436>
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	dd07      	ble.n	80098be <_strtod_l+0x79e>
 80098ae:	4649      	mov	r1, r9
 80098b0:	4632      	mov	r2, r6
 80098b2:	9805      	ldr	r0, [sp, #20]
 80098b4:	f003 fbb8 	bl	800d028 <__lshift>
 80098b8:	4681      	mov	r9, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d0d8      	beq.n	8009870 <_strtod_l+0x750>
 80098be:	2f00      	cmp	r7, #0
 80098c0:	dd08      	ble.n	80098d4 <_strtod_l+0x7b4>
 80098c2:	4641      	mov	r1, r8
 80098c4:	463a      	mov	r2, r7
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	f003 fbae 	bl	800d028 <__lshift>
 80098cc:	4680      	mov	r8, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f ae41 	beq.w	8009556 <_strtod_l+0x436>
 80098d4:	464a      	mov	r2, r9
 80098d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098d8:	9805      	ldr	r0, [sp, #20]
 80098da:	f003 fc2d 	bl	800d138 <__mdiff>
 80098de:	4604      	mov	r4, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f43f ae38 	beq.w	8009556 <_strtod_l+0x436>
 80098e6:	68c3      	ldr	r3, [r0, #12]
 80098e8:	4641      	mov	r1, r8
 80098ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098ec:	2300      	movs	r3, #0
 80098ee:	60c3      	str	r3, [r0, #12]
 80098f0:	f003 fc06 	bl	800d100 <__mcmp>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	da45      	bge.n	8009984 <_strtod_l+0x864>
 80098f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fa:	ea53 030a 	orrs.w	r3, r3, sl
 80098fe:	d16b      	bne.n	80099d8 <_strtod_l+0x8b8>
 8009900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009904:	2b00      	cmp	r3, #0
 8009906:	d167      	bne.n	80099d8 <_strtod_l+0x8b8>
 8009908:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800990c:	0d1b      	lsrs	r3, r3, #20
 800990e:	051b      	lsls	r3, r3, #20
 8009910:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009914:	d960      	bls.n	80099d8 <_strtod_l+0x8b8>
 8009916:	6963      	ldr	r3, [r4, #20]
 8009918:	b913      	cbnz	r3, 8009920 <_strtod_l+0x800>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	2b01      	cmp	r3, #1
 800991e:	dd5b      	ble.n	80099d8 <_strtod_l+0x8b8>
 8009920:	4621      	mov	r1, r4
 8009922:	2201      	movs	r2, #1
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	f003 fb7f 	bl	800d028 <__lshift>
 800992a:	4641      	mov	r1, r8
 800992c:	4604      	mov	r4, r0
 800992e:	f003 fbe7 	bl	800d100 <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	dd50      	ble.n	80099d8 <_strtod_l+0x8b8>
 8009936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800993a:	9a08      	ldr	r2, [sp, #32]
 800993c:	0d1b      	lsrs	r3, r3, #20
 800993e:	051b      	lsls	r3, r3, #20
 8009940:	2a00      	cmp	r2, #0
 8009942:	d06a      	beq.n	8009a1a <_strtod_l+0x8fa>
 8009944:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009948:	d867      	bhi.n	8009a1a <_strtod_l+0x8fa>
 800994a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800994e:	f67f ae98 	bls.w	8009682 <_strtod_l+0x562>
 8009952:	4650      	mov	r0, sl
 8009954:	4659      	mov	r1, fp
 8009956:	4b09      	ldr	r3, [pc, #36]	@ (800997c <_strtod_l+0x85c>)
 8009958:	2200      	movs	r2, #0
 800995a:	f7f6 fdc7 	bl	80004ec <__aeabi_dmul>
 800995e:	4b08      	ldr	r3, [pc, #32]	@ (8009980 <_strtod_l+0x860>)
 8009960:	4682      	mov	sl, r0
 8009962:	400b      	ands	r3, r1
 8009964:	468b      	mov	fp, r1
 8009966:	2b00      	cmp	r3, #0
 8009968:	f47f ae00 	bne.w	800956c <_strtod_l+0x44c>
 800996c:	2322      	movs	r3, #34	@ 0x22
 800996e:	9a05      	ldr	r2, [sp, #20]
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	e5fb      	b.n	800956c <_strtod_l+0x44c>
 8009974:	0800ec88 	.word	0x0800ec88
 8009978:	fffffc02 	.word	0xfffffc02
 800997c:	39500000 	.word	0x39500000
 8009980:	7ff00000 	.word	0x7ff00000
 8009984:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009988:	d165      	bne.n	8009a56 <_strtod_l+0x936>
 800998a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800998c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009990:	b35a      	cbz	r2, 80099ea <_strtod_l+0x8ca>
 8009992:	4a99      	ldr	r2, [pc, #612]	@ (8009bf8 <_strtod_l+0xad8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d12b      	bne.n	80099f0 <_strtod_l+0x8d0>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	4651      	mov	r1, sl
 800999c:	b303      	cbz	r3, 80099e0 <_strtod_l+0x8c0>
 800999e:	465a      	mov	r2, fp
 80099a0:	4b96      	ldr	r3, [pc, #600]	@ (8009bfc <_strtod_l+0xadc>)
 80099a2:	4013      	ands	r3, r2
 80099a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	d81b      	bhi.n	80099e6 <_strtod_l+0x8c6>
 80099ae:	0d1b      	lsrs	r3, r3, #20
 80099b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	4299      	cmp	r1, r3
 80099ba:	d119      	bne.n	80099f0 <_strtod_l+0x8d0>
 80099bc:	4b90      	ldr	r3, [pc, #576]	@ (8009c00 <_strtod_l+0xae0>)
 80099be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d102      	bne.n	80099ca <_strtod_l+0x8aa>
 80099c4:	3101      	adds	r1, #1
 80099c6:	f43f adc6 	beq.w	8009556 <_strtod_l+0x436>
 80099ca:	f04f 0a00 	mov.w	sl, #0
 80099ce:	4b8b      	ldr	r3, [pc, #556]	@ (8009bfc <_strtod_l+0xadc>)
 80099d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d2:	401a      	ands	r2, r3
 80099d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1b9      	bne.n	8009952 <_strtod_l+0x832>
 80099de:	e5c5      	b.n	800956c <_strtod_l+0x44c>
 80099e0:	f04f 33ff 	mov.w	r3, #4294967295
 80099e4:	e7e8      	b.n	80099b8 <_strtod_l+0x898>
 80099e6:	4613      	mov	r3, r2
 80099e8:	e7e6      	b.n	80099b8 <_strtod_l+0x898>
 80099ea:	ea53 030a 	orrs.w	r3, r3, sl
 80099ee:	d0a2      	beq.n	8009936 <_strtod_l+0x816>
 80099f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099f2:	b1db      	cbz	r3, 8009a2c <_strtod_l+0x90c>
 80099f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099f6:	4213      	tst	r3, r2
 80099f8:	d0ee      	beq.n	80099d8 <_strtod_l+0x8b8>
 80099fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	9a08      	ldr	r2, [sp, #32]
 8009a02:	b1bb      	cbz	r3, 8009a34 <_strtod_l+0x914>
 8009a04:	f7ff fb6a 	bl	80090dc <sulp>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a10:	f7f6 fbb6 	bl	8000180 <__adddf3>
 8009a14:	4682      	mov	sl, r0
 8009a16:	468b      	mov	fp, r1
 8009a18:	e7de      	b.n	80099d8 <_strtod_l+0x8b8>
 8009a1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a22:	f04f 3aff 	mov.w	sl, #4294967295
 8009a26:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2a:	e7d5      	b.n	80099d8 <_strtod_l+0x8b8>
 8009a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a2e:	ea13 0f0a 	tst.w	r3, sl
 8009a32:	e7e1      	b.n	80099f8 <_strtod_l+0x8d8>
 8009a34:	f7ff fb52 	bl	80090dc <sulp>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a40:	f7f6 fb9c 	bl	800017c <__aeabi_dsub>
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4682      	mov	sl, r0
 8009a4a:	468b      	mov	fp, r1
 8009a4c:	f7f6 ffb6 	bl	80009bc <__aeabi_dcmpeq>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d0c1      	beq.n	80099d8 <_strtod_l+0x8b8>
 8009a54:	e615      	b.n	8009682 <_strtod_l+0x562>
 8009a56:	4641      	mov	r1, r8
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f003 fcc1 	bl	800d3e0 <__ratio>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a64:	4606      	mov	r6, r0
 8009a66:	460f      	mov	r7, r1
 8009a68:	f7f6 ffbc 	bl	80009e4 <__aeabi_dcmple>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d06d      	beq.n	8009b4c <_strtod_l+0xa2c>
 8009a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d178      	bne.n	8009b68 <_strtod_l+0xa48>
 8009a76:	f1ba 0f00 	cmp.w	sl, #0
 8009a7a:	d156      	bne.n	8009b2a <_strtod_l+0xa0a>
 8009a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d158      	bne.n	8009b38 <_strtod_l+0xa18>
 8009a86:	2200      	movs	r2, #0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009c04 <_strtod_l+0xae4>)
 8009a8e:	f7f6 ff9f 	bl	80009d0 <__aeabi_dcmplt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d157      	bne.n	8009b46 <_strtod_l+0xa26>
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009c08 <_strtod_l+0xae8>)
 8009a9e:	f7f6 fd25 	bl	80004ec <__aeabi_dmul>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009aaa:	9606      	str	r6, [sp, #24]
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ab2:	4d52      	ldr	r5, [pc, #328]	@ (8009bfc <_strtod_l+0xadc>)
 8009ab4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aba:	401d      	ands	r5, r3
 8009abc:	4b53      	ldr	r3, [pc, #332]	@ (8009c0c <_strtod_l+0xaec>)
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	f040 80aa 	bne.w	8009c18 <_strtod_l+0xaf8>
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009acc:	4659      	mov	r1, fp
 8009ace:	f003 fbc7 	bl	800d260 <__ulp>
 8009ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ad6:	f7f6 fd09 	bl	80004ec <__aeabi_dmul>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	f7f6 fb4f 	bl	8000180 <__adddf3>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4945      	ldr	r1, [pc, #276]	@ (8009bfc <_strtod_l+0xadc>)
 8009ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8009c10 <_strtod_l+0xaf0>)
 8009ae8:	4019      	ands	r1, r3
 8009aea:	4291      	cmp	r1, r2
 8009aec:	4682      	mov	sl, r0
 8009aee:	d942      	bls.n	8009b76 <_strtod_l+0xa56>
 8009af0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009af2:	4b43      	ldr	r3, [pc, #268]	@ (8009c00 <_strtod_l+0xae0>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d103      	bne.n	8009b00 <_strtod_l+0x9e0>
 8009af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009afa:	3301      	adds	r3, #1
 8009afc:	f43f ad2b 	beq.w	8009556 <_strtod_l+0x436>
 8009b00:	f04f 3aff 	mov.w	sl, #4294967295
 8009b04:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009c00 <_strtod_l+0xae0>
 8009b08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	f003 f876 	bl	800cbfc <_Bfree>
 8009b10:	4649      	mov	r1, r9
 8009b12:	9805      	ldr	r0, [sp, #20]
 8009b14:	f003 f872 	bl	800cbfc <_Bfree>
 8009b18:	4641      	mov	r1, r8
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f003 f86e 	bl	800cbfc <_Bfree>
 8009b20:	4621      	mov	r1, r4
 8009b22:	9805      	ldr	r0, [sp, #20]
 8009b24:	f003 f86a 	bl	800cbfc <_Bfree>
 8009b28:	e618      	b.n	800975c <_strtod_l+0x63c>
 8009b2a:	f1ba 0f01 	cmp.w	sl, #1
 8009b2e:	d103      	bne.n	8009b38 <_strtod_l+0xa18>
 8009b30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f43f ada5 	beq.w	8009682 <_strtod_l+0x562>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4b36      	ldr	r3, [pc, #216]	@ (8009c14 <_strtod_l+0xaf4>)
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b42:	4f30      	ldr	r7, [pc, #192]	@ (8009c04 <_strtod_l+0xae4>)
 8009b44:	e7b3      	b.n	8009aae <_strtod_l+0x98e>
 8009b46:	2600      	movs	r6, #0
 8009b48:	4f2f      	ldr	r7, [pc, #188]	@ (8009c08 <_strtod_l+0xae8>)
 8009b4a:	e7ac      	b.n	8009aa6 <_strtod_l+0x986>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4b2d      	ldr	r3, [pc, #180]	@ (8009c08 <_strtod_l+0xae8>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fcca 	bl	80004ec <__aeabi_dmul>
 8009b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0a1      	beq.n	8009aa6 <_strtod_l+0x986>
 8009b62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b66:	e7a2      	b.n	8009aae <_strtod_l+0x98e>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <_strtod_l+0xae4>)
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	461f      	mov	r7, r3
 8009b70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b74:	e79b      	b.n	8009aae <_strtod_l+0x98e>
 8009b76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b7a:	9b08      	ldr	r3, [sp, #32]
 8009b7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1c1      	bne.n	8009b08 <_strtod_l+0x9e8>
 8009b84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b88:	0d1b      	lsrs	r3, r3, #20
 8009b8a:	051b      	lsls	r3, r3, #20
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	d1bb      	bne.n	8009b08 <_strtod_l+0x9e8>
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f7 fb44 	bl	8001220 <__aeabi_d2lz>
 8009b98:	f7f6 fc7a 	bl	8000490 <__aeabi_l2d>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 faea 	bl	800017c <__aeabi_dsub>
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4602      	mov	r2, r0
 8009bac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb6:	ea46 060a 	orr.w	r6, r6, sl
 8009bba:	431e      	orrs	r6, r3
 8009bbc:	d069      	beq.n	8009c92 <_strtod_l+0xb72>
 8009bbe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009be8 <_strtod_l+0xac8>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 ff04 	bl	80009d0 <__aeabi_dcmplt>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f47f accf 	bne.w	800956c <_strtod_l+0x44c>
 8009bce:	a308      	add	r3, pc, #32	@ (adr r3, 8009bf0 <_strtod_l+0xad0>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bd8:	f7f6 ff18 	bl	8000a0c <__aeabi_dcmpgt>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d093      	beq.n	8009b08 <_strtod_l+0x9e8>
 8009be0:	e4c4      	b.n	800956c <_strtod_l+0x44c>
 8009be2:	bf00      	nop
 8009be4:	f3af 8000 	nop.w
 8009be8:	94a03595 	.word	0x94a03595
 8009bec:	3fdfffff 	.word	0x3fdfffff
 8009bf0:	35afe535 	.word	0x35afe535
 8009bf4:	3fe00000 	.word	0x3fe00000
 8009bf8:	000fffff 	.word	0x000fffff
 8009bfc:	7ff00000 	.word	0x7ff00000
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	7fe00000 	.word	0x7fe00000
 8009c10:	7c9fffff 	.word	0x7c9fffff
 8009c14:	bff00000 	.word	0xbff00000
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	b323      	cbz	r3, 8009c66 <_strtod_l+0xb46>
 8009c1c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c20:	d821      	bhi.n	8009c66 <_strtod_l+0xb46>
 8009c22:	a327      	add	r3, pc, #156	@ (adr r3, 8009cc0 <_strtod_l+0xba0>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 feda 	bl	80009e4 <__aeabi_dcmple>
 8009c30:	b1a0      	cbz	r0, 8009c5c <_strtod_l+0xb3c>
 8009c32:	4639      	mov	r1, r7
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7f6 ff31 	bl	8000a9c <__aeabi_d2uiz>
 8009c3a:	2801      	cmp	r0, #1
 8009c3c:	bf38      	it	cc
 8009c3e:	2001      	movcc	r0, #1
 8009c40:	f7f6 fbda 	bl	80003f8 <__aeabi_ui2d>
 8009c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	b9fb      	cbnz	r3, 8009c8c <_strtod_l+0xb6c>
 8009c4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c50:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c52:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c5e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c62:	1b5b      	subs	r3, r3, r5
 8009c64:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c6a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c6e:	f003 faf7 	bl	800d260 <__ulp>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fc37 	bl	80004ec <__aeabi_dmul>
 8009c7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c82:	f7f6 fa7d 	bl	8000180 <__adddf3>
 8009c86:	4682      	mov	sl, r0
 8009c88:	468b      	mov	fp, r1
 8009c8a:	e776      	b.n	8009b7a <_strtod_l+0xa5a>
 8009c8c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c90:	e7e0      	b.n	8009c54 <_strtod_l+0xb34>
 8009c92:	a30d      	add	r3, pc, #52	@ (adr r3, 8009cc8 <_strtod_l+0xba8>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fe9a 	bl	80009d0 <__aeabi_dcmplt>
 8009c9c:	e79e      	b.n	8009bdc <_strtod_l+0xabc>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ca4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	f7ff ba77 	b.w	800919a <_strtod_l+0x7a>
 8009cac:	2a65      	cmp	r2, #101	@ 0x65
 8009cae:	f43f ab6e 	beq.w	800938e <_strtod_l+0x26e>
 8009cb2:	2a45      	cmp	r2, #69	@ 0x45
 8009cb4:	f43f ab6b 	beq.w	800938e <_strtod_l+0x26e>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f7ff bba6 	b.w	800940a <_strtod_l+0x2ea>
 8009cbe:	bf00      	nop
 8009cc0:	ffc00000 	.word	0xffc00000
 8009cc4:	41dfffff 	.word	0x41dfffff
 8009cc8:	94a03595 	.word	0x94a03595
 8009ccc:	3fcfffff 	.word	0x3fcfffff

08009cd0 <strtof>:
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	4d24      	ldr	r5, [pc, #144]	@ (8009d68 <strtof+0x98>)
 8009cd6:	460a      	mov	r2, r1
 8009cd8:	4b24      	ldr	r3, [pc, #144]	@ (8009d6c <strtof+0x9c>)
 8009cda:	4601      	mov	r1, r0
 8009cdc:	6828      	ldr	r0, [r5, #0]
 8009cde:	f7ff fa1f 	bl	8009120 <_strtod_l>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	f7f6 fe99 	bl	8000a20 <__aeabi_dcmpun>
 8009cee:	b168      	cbz	r0, 8009d0c <strtof+0x3c>
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	481f      	ldr	r0, [pc, #124]	@ (8009d70 <strtof+0xa0>)
 8009cf4:	da06      	bge.n	8009d04 <strtof+0x34>
 8009cf6:	f001 fc4d 	bl	800b594 <nanf>
 8009cfa:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009cfe:	4620      	mov	r0, r4
 8009d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	f001 bc44 	b.w	800b594 <nanf>
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7f6 fee4 	bl	8000adc <__aeabi_d2f>
 8009d14:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4916      	ldr	r1, [pc, #88]	@ (8009d74 <strtof+0xa4>)
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	f7f7 fa01 	bl	8001124 <__aeabi_fcmpun>
 8009d22:	b9b0      	cbnz	r0, 8009d52 <strtof+0x82>
 8009d24:	4640      	mov	r0, r8
 8009d26:	4913      	ldr	r1, [pc, #76]	@ (8009d74 <strtof+0xa4>)
 8009d28:	f7f7 f9de 	bl	80010e8 <__aeabi_fcmple>
 8009d2c:	b988      	cbnz	r0, 8009d52 <strtof+0x82>
 8009d2e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	4630      	mov	r0, r6
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <strtof+0xa8>)
 8009d3c:	f7f6 fe70 	bl	8000a20 <__aeabi_dcmpun>
 8009d40:	b970      	cbnz	r0, 8009d60 <strtof+0x90>
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	4630      	mov	r0, r6
 8009d48:	4649      	mov	r1, r9
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d78 <strtof+0xa8>)
 8009d4c:	f7f6 fe4a 	bl	80009e4 <__aeabi_dcmple>
 8009d50:	b930      	cbnz	r0, 8009d60 <strtof+0x90>
 8009d52:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8009d56:	d1d2      	bne.n	8009cfe <strtof+0x2e>
 8009d58:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <strtof+0xac>)
 8009d5a:	403b      	ands	r3, r7
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0ce      	beq.n	8009cfe <strtof+0x2e>
 8009d60:	2222      	movs	r2, #34	@ 0x22
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	e7ca      	b.n	8009cfe <strtof+0x2e>
 8009d68:	20000194 	.word	0x20000194
 8009d6c:	20000028 	.word	0x20000028
 8009d70:	0800f17b 	.word	0x0800f17b
 8009d74:	7f7fffff 	.word	0x7f7fffff
 8009d78:	7fefffff 	.word	0x7fefffff
 8009d7c:	7ff00000 	.word	0x7ff00000

08009d80 <_strtol_l.constprop.0>:
 8009d80:	2b24      	cmp	r3, #36	@ 0x24
 8009d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d86:	4686      	mov	lr, r0
 8009d88:	4690      	mov	r8, r2
 8009d8a:	d801      	bhi.n	8009d90 <_strtol_l.constprop.0+0x10>
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d106      	bne.n	8009d9e <_strtol_l.constprop.0+0x1e>
 8009d90:	f001 fba6 	bl	800b4e0 <__errno>
 8009d94:	2316      	movs	r3, #22
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9e:	460d      	mov	r5, r1
 8009da0:	4833      	ldr	r0, [pc, #204]	@ (8009e70 <_strtol_l.constprop.0+0xf0>)
 8009da2:	462a      	mov	r2, r5
 8009da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da8:	5d06      	ldrb	r6, [r0, r4]
 8009daa:	f016 0608 	ands.w	r6, r6, #8
 8009dae:	d1f8      	bne.n	8009da2 <_strtol_l.constprop.0+0x22>
 8009db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009db2:	d12d      	bne.n	8009e10 <_strtol_l.constprop.0+0x90>
 8009db4:	2601      	movs	r6, #1
 8009db6:	782c      	ldrb	r4, [r5, #0]
 8009db8:	1c95      	adds	r5, r2, #2
 8009dba:	f033 0210 	bics.w	r2, r3, #16
 8009dbe:	d109      	bne.n	8009dd4 <_strtol_l.constprop.0+0x54>
 8009dc0:	2c30      	cmp	r4, #48	@ 0x30
 8009dc2:	d12a      	bne.n	8009e1a <_strtol_l.constprop.0+0x9a>
 8009dc4:	782a      	ldrb	r2, [r5, #0]
 8009dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dca:	2a58      	cmp	r2, #88	@ 0x58
 8009dcc:	d125      	bne.n	8009e1a <_strtol_l.constprop.0+0x9a>
 8009dce:	2310      	movs	r3, #16
 8009dd0:	786c      	ldrb	r4, [r5, #1]
 8009dd2:	3502      	adds	r5, #2
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dde:	fbbc f9f3 	udiv	r9, ip, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009de8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009dec:	2f09      	cmp	r7, #9
 8009dee:	d81b      	bhi.n	8009e28 <_strtol_l.constprop.0+0xa8>
 8009df0:	463c      	mov	r4, r7
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	dd27      	ble.n	8009e46 <_strtol_l.constprop.0+0xc6>
 8009df6:	1c57      	adds	r7, r2, #1
 8009df8:	d007      	beq.n	8009e0a <_strtol_l.constprop.0+0x8a>
 8009dfa:	4581      	cmp	r9, r0
 8009dfc:	d320      	bcc.n	8009e40 <_strtol_l.constprop.0+0xc0>
 8009dfe:	d101      	bne.n	8009e04 <_strtol_l.constprop.0+0x84>
 8009e00:	45a2      	cmp	sl, r4
 8009e02:	db1d      	blt.n	8009e40 <_strtol_l.constprop.0+0xc0>
 8009e04:	2201      	movs	r2, #1
 8009e06:	fb00 4003 	mla	r0, r0, r3, r4
 8009e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e0e:	e7eb      	b.n	8009de8 <_strtol_l.constprop.0+0x68>
 8009e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e12:	bf04      	itt	eq
 8009e14:	782c      	ldrbeq	r4, [r5, #0]
 8009e16:	1c95      	addeq	r5, r2, #2
 8009e18:	e7cf      	b.n	8009dba <_strtol_l.constprop.0+0x3a>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1da      	bne.n	8009dd4 <_strtol_l.constprop.0+0x54>
 8009e1e:	2c30      	cmp	r4, #48	@ 0x30
 8009e20:	bf0c      	ite	eq
 8009e22:	2308      	moveq	r3, #8
 8009e24:	230a      	movne	r3, #10
 8009e26:	e7d5      	b.n	8009dd4 <_strtol_l.constprop.0+0x54>
 8009e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e2c:	2f19      	cmp	r7, #25
 8009e2e:	d801      	bhi.n	8009e34 <_strtol_l.constprop.0+0xb4>
 8009e30:	3c37      	subs	r4, #55	@ 0x37
 8009e32:	e7de      	b.n	8009df2 <_strtol_l.constprop.0+0x72>
 8009e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e38:	2f19      	cmp	r7, #25
 8009e3a:	d804      	bhi.n	8009e46 <_strtol_l.constprop.0+0xc6>
 8009e3c:	3c57      	subs	r4, #87	@ 0x57
 8009e3e:	e7d8      	b.n	8009df2 <_strtol_l.constprop.0+0x72>
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	e7e1      	b.n	8009e0a <_strtol_l.constprop.0+0x8a>
 8009e46:	1c53      	adds	r3, r2, #1
 8009e48:	d108      	bne.n	8009e5c <_strtol_l.constprop.0+0xdc>
 8009e4a:	2322      	movs	r3, #34	@ 0x22
 8009e4c:	4660      	mov	r0, ip
 8009e4e:	f8ce 3000 	str.w	r3, [lr]
 8009e52:	f1b8 0f00 	cmp.w	r8, #0
 8009e56:	d0a0      	beq.n	8009d9a <_strtol_l.constprop.0+0x1a>
 8009e58:	1e69      	subs	r1, r5, #1
 8009e5a:	e006      	b.n	8009e6a <_strtol_l.constprop.0+0xea>
 8009e5c:	b106      	cbz	r6, 8009e60 <_strtol_l.constprop.0+0xe0>
 8009e5e:	4240      	negs	r0, r0
 8009e60:	f1b8 0f00 	cmp.w	r8, #0
 8009e64:	d099      	beq.n	8009d9a <_strtol_l.constprop.0+0x1a>
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	d1f6      	bne.n	8009e58 <_strtol_l.constprop.0+0xd8>
 8009e6a:	f8c8 1000 	str.w	r1, [r8]
 8009e6e:	e794      	b.n	8009d9a <_strtol_l.constprop.0+0x1a>
 8009e70:	0800ecb1 	.word	0x0800ecb1

08009e74 <_strtol_r>:
 8009e74:	f7ff bf84 	b.w	8009d80 <_strtol_l.constprop.0>

08009e78 <strtol>:
 8009e78:	4613      	mov	r3, r2
 8009e7a:	460a      	mov	r2, r1
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	4802      	ldr	r0, [pc, #8]	@ (8009e88 <strtol+0x10>)
 8009e80:	6800      	ldr	r0, [r0, #0]
 8009e82:	f7ff bf7d 	b.w	8009d80 <_strtol_l.constprop.0>
 8009e86:	bf00      	nop
 8009e88:	20000194 	.word	0x20000194

08009e8c <__cvt>:
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e92:	461d      	mov	r5, r3
 8009e94:	bfbb      	ittet	lt
 8009e96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009e9a:	461d      	movlt	r5, r3
 8009e9c:	2300      	movge	r3, #0
 8009e9e:	232d      	movlt	r3, #45	@ 0x2d
 8009ea0:	b088      	sub	sp, #32
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	bfb8      	it	lt
 8009ea6:	4614      	movlt	r4, r2
 8009ea8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009eaa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009eac:	7013      	strb	r3, [r2, #0]
 8009eae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009eb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009eb4:	f023 0820 	bic.w	r8, r3, #32
 8009eb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ebc:	d005      	beq.n	8009eca <__cvt+0x3e>
 8009ebe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ec2:	d100      	bne.n	8009ec6 <__cvt+0x3a>
 8009ec4:	3601      	adds	r6, #1
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e000      	b.n	8009ecc <__cvt+0x40>
 8009eca:	2303      	movs	r3, #3
 8009ecc:	aa07      	add	r2, sp, #28
 8009ece:	9204      	str	r2, [sp, #16]
 8009ed0:	aa06      	add	r2, sp, #24
 8009ed2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ed6:	e9cd 3600 	strd	r3, r6, [sp]
 8009eda:	4622      	mov	r2, r4
 8009edc:	462b      	mov	r3, r5
 8009ede:	f001 fbef 	bl	800b6c0 <_dtoa_r>
 8009ee2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	d119      	bne.n	8009f1e <__cvt+0x92>
 8009eea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009eec:	07db      	lsls	r3, r3, #31
 8009eee:	d50e      	bpl.n	8009f0e <__cvt+0x82>
 8009ef0:	eb00 0906 	add.w	r9, r0, r6
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 fd5e 	bl	80009bc <__aeabi_dcmpeq>
 8009f00:	b108      	cbz	r0, 8009f06 <__cvt+0x7a>
 8009f02:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f06:	2230      	movs	r2, #48	@ 0x30
 8009f08:	9b07      	ldr	r3, [sp, #28]
 8009f0a:	454b      	cmp	r3, r9
 8009f0c:	d31e      	bcc.n	8009f4c <__cvt+0xc0>
 8009f0e:	4638      	mov	r0, r7
 8009f10:	9b07      	ldr	r3, [sp, #28]
 8009f12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009f14:	1bdb      	subs	r3, r3, r7
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	b008      	add	sp, #32
 8009f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f22:	eb00 0906 	add.w	r9, r0, r6
 8009f26:	d1e5      	bne.n	8009ef4 <__cvt+0x68>
 8009f28:	7803      	ldrb	r3, [r0, #0]
 8009f2a:	2b30      	cmp	r3, #48	@ 0x30
 8009f2c:	d10a      	bne.n	8009f44 <__cvt+0xb8>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2300      	movs	r3, #0
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 fd41 	bl	80009bc <__aeabi_dcmpeq>
 8009f3a:	b918      	cbnz	r0, 8009f44 <__cvt+0xb8>
 8009f3c:	f1c6 0601 	rsb	r6, r6, #1
 8009f40:	f8ca 6000 	str.w	r6, [sl]
 8009f44:	f8da 3000 	ldr.w	r3, [sl]
 8009f48:	4499      	add	r9, r3
 8009f4a:	e7d3      	b.n	8009ef4 <__cvt+0x68>
 8009f4c:	1c59      	adds	r1, r3, #1
 8009f4e:	9107      	str	r1, [sp, #28]
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	e7d9      	b.n	8009f08 <__cvt+0x7c>

08009f54 <__exponent>:
 8009f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f56:	2900      	cmp	r1, #0
 8009f58:	bfb6      	itet	lt
 8009f5a:	232d      	movlt	r3, #45	@ 0x2d
 8009f5c:	232b      	movge	r3, #43	@ 0x2b
 8009f5e:	4249      	neglt	r1, r1
 8009f60:	2909      	cmp	r1, #9
 8009f62:	7002      	strb	r2, [r0, #0]
 8009f64:	7043      	strb	r3, [r0, #1]
 8009f66:	dd29      	ble.n	8009fbc <__exponent+0x68>
 8009f68:	f10d 0307 	add.w	r3, sp, #7
 8009f6c:	461d      	mov	r5, r3
 8009f6e:	270a      	movs	r7, #10
 8009f70:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f74:	461a      	mov	r2, r3
 8009f76:	fb07 1416 	mls	r4, r7, r6, r1
 8009f7a:	3430      	adds	r4, #48	@ 0x30
 8009f7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f80:	460c      	mov	r4, r1
 8009f82:	2c63      	cmp	r4, #99	@ 0x63
 8009f84:	4631      	mov	r1, r6
 8009f86:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f8a:	dcf1      	bgt.n	8009f70 <__exponent+0x1c>
 8009f8c:	3130      	adds	r1, #48	@ 0x30
 8009f8e:	1e94      	subs	r4, r2, #2
 8009f90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f94:	4623      	mov	r3, r4
 8009f96:	1c41      	adds	r1, r0, #1
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	d30a      	bcc.n	8009fb2 <__exponent+0x5e>
 8009f9c:	f10d 0309 	add.w	r3, sp, #9
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	42ac      	cmp	r4, r5
 8009fa4:	bf88      	it	hi
 8009fa6:	2300      	movhi	r3, #0
 8009fa8:	3302      	adds	r3, #2
 8009faa:	4403      	add	r3, r0
 8009fac:	1a18      	subs	r0, r3, r0
 8009fae:	b003      	add	sp, #12
 8009fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fba:	e7ed      	b.n	8009f98 <__exponent+0x44>
 8009fbc:	2330      	movs	r3, #48	@ 0x30
 8009fbe:	3130      	adds	r1, #48	@ 0x30
 8009fc0:	7083      	strb	r3, [r0, #2]
 8009fc2:	70c1      	strb	r1, [r0, #3]
 8009fc4:	1d03      	adds	r3, r0, #4
 8009fc6:	e7f1      	b.n	8009fac <__exponent+0x58>

08009fc8 <_printf_float>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	b091      	sub	sp, #68	@ 0x44
 8009fce:	460c      	mov	r4, r1
 8009fd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009fd4:	4616      	mov	r6, r2
 8009fd6:	461f      	mov	r7, r3
 8009fd8:	4605      	mov	r5, r0
 8009fda:	f001 fa37 	bl	800b44c <_localeconv_r>
 8009fde:	6803      	ldr	r3, [r0, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	9308      	str	r3, [sp, #32]
 8009fe4:	f7f6 f8be 	bl	8000164 <strlen>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fec:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff0:	9009      	str	r0, [sp, #36]	@ 0x24
 8009ff2:	3307      	adds	r3, #7
 8009ff4:	f023 0307 	bic.w	r3, r3, #7
 8009ff8:	f103 0208 	add.w	r2, r3, #8
 8009ffc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a000:	f8d4 b000 	ldr.w	fp, [r4]
 800a004:	f8c8 2000 	str.w	r2, [r8]
 800a008:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a00c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a012:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a01e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a022:	4b9c      	ldr	r3, [pc, #624]	@ (800a294 <_printf_float+0x2cc>)
 800a024:	f7f6 fcfc 	bl	8000a20 <__aeabi_dcmpun>
 800a028:	bb70      	cbnz	r0, 800a088 <_printf_float+0xc0>
 800a02a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	4b98      	ldr	r3, [pc, #608]	@ (800a294 <_printf_float+0x2cc>)
 800a034:	f7f6 fcd6 	bl	80009e4 <__aeabi_dcmple>
 800a038:	bb30      	cbnz	r0, 800a088 <_printf_float+0xc0>
 800a03a:	2200      	movs	r2, #0
 800a03c:	2300      	movs	r3, #0
 800a03e:	4640      	mov	r0, r8
 800a040:	4649      	mov	r1, r9
 800a042:	f7f6 fcc5 	bl	80009d0 <__aeabi_dcmplt>
 800a046:	b110      	cbz	r0, 800a04e <_printf_float+0x86>
 800a048:	232d      	movs	r3, #45	@ 0x2d
 800a04a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a04e:	4a92      	ldr	r2, [pc, #584]	@ (800a298 <_printf_float+0x2d0>)
 800a050:	4b92      	ldr	r3, [pc, #584]	@ (800a29c <_printf_float+0x2d4>)
 800a052:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a056:	bf94      	ite	ls
 800a058:	4690      	movls	r8, r2
 800a05a:	4698      	movhi	r8, r3
 800a05c:	2303      	movs	r3, #3
 800a05e:	f04f 0900 	mov.w	r9, #0
 800a062:	6123      	str	r3, [r4, #16]
 800a064:	f02b 0304 	bic.w	r3, fp, #4
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	4633      	mov	r3, r6
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	9700      	str	r7, [sp, #0]
 800a072:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a074:	f000 f9d4 	bl	800a420 <_printf_common>
 800a078:	3001      	adds	r0, #1
 800a07a:	f040 8090 	bne.w	800a19e <_printf_float+0x1d6>
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	b011      	add	sp, #68	@ 0x44
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 fcc6 	bl	8000a20 <__aeabi_dcmpun>
 800a094:	b148      	cbz	r0, 800a0aa <_printf_float+0xe2>
 800a096:	464b      	mov	r3, r9
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfb8      	it	lt
 800a09c:	232d      	movlt	r3, #45	@ 0x2d
 800a09e:	4a80      	ldr	r2, [pc, #512]	@ (800a2a0 <_printf_float+0x2d8>)
 800a0a0:	bfb8      	it	lt
 800a0a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0a6:	4b7f      	ldr	r3, [pc, #508]	@ (800a2a4 <_printf_float+0x2dc>)
 800a0a8:	e7d3      	b.n	800a052 <_printf_float+0x8a>
 800a0aa:	6863      	ldr	r3, [r4, #4]
 800a0ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	d13f      	bne.n	800a134 <_printf_float+0x16c>
 800a0b4:	2306      	movs	r3, #6
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	9206      	str	r2, [sp, #24]
 800a0c2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a0c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a0c8:	aa0d      	add	r2, sp, #52	@ 0x34
 800a0ca:	9203      	str	r2, [sp, #12]
 800a0cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a0d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4628      	mov	r0, r5
 800a0dc:	464b      	mov	r3, r9
 800a0de:	910a      	str	r1, [sp, #40]	@ 0x28
 800a0e0:	f7ff fed4 	bl	8009e8c <__cvt>
 800a0e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	2947      	cmp	r1, #71	@ 0x47
 800a0ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a0ec:	d128      	bne.n	800a140 <_printf_float+0x178>
 800a0ee:	1cc8      	adds	r0, r1, #3
 800a0f0:	db02      	blt.n	800a0f8 <_printf_float+0x130>
 800a0f2:	6863      	ldr	r3, [r4, #4]
 800a0f4:	4299      	cmp	r1, r3
 800a0f6:	dd40      	ble.n	800a17a <_printf_float+0x1b2>
 800a0f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0fc:	fa5f fa8a 	uxtb.w	sl, sl
 800a100:	4652      	mov	r2, sl
 800a102:	3901      	subs	r1, #1
 800a104:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a108:	910d      	str	r1, [sp, #52]	@ 0x34
 800a10a:	f7ff ff23 	bl	8009f54 <__exponent>
 800a10e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a110:	4681      	mov	r9, r0
 800a112:	1813      	adds	r3, r2, r0
 800a114:	2a01      	cmp	r2, #1
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	dc02      	bgt.n	800a120 <_printf_float+0x158>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	07d2      	lsls	r2, r2, #31
 800a11e:	d501      	bpl.n	800a124 <_printf_float+0x15c>
 800a120:	3301      	adds	r3, #1
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d09e      	beq.n	800a06a <_printf_float+0xa2>
 800a12c:	232d      	movs	r3, #45	@ 0x2d
 800a12e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a132:	e79a      	b.n	800a06a <_printf_float+0xa2>
 800a134:	2947      	cmp	r1, #71	@ 0x47
 800a136:	d1bf      	bne.n	800a0b8 <_printf_float+0xf0>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1bd      	bne.n	800a0b8 <_printf_float+0xf0>
 800a13c:	2301      	movs	r3, #1
 800a13e:	e7ba      	b.n	800a0b6 <_printf_float+0xee>
 800a140:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a144:	d9dc      	bls.n	800a100 <_printf_float+0x138>
 800a146:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a14a:	d118      	bne.n	800a17e <_printf_float+0x1b6>
 800a14c:	2900      	cmp	r1, #0
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	dd0b      	ble.n	800a16a <_printf_float+0x1a2>
 800a152:	6121      	str	r1, [r4, #16]
 800a154:	b913      	cbnz	r3, 800a15c <_printf_float+0x194>
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	07d0      	lsls	r0, r2, #31
 800a15a:	d502      	bpl.n	800a162 <_printf_float+0x19a>
 800a15c:	3301      	adds	r3, #1
 800a15e:	440b      	add	r3, r1
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	f04f 0900 	mov.w	r9, #0
 800a166:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a168:	e7dc      	b.n	800a124 <_printf_float+0x15c>
 800a16a:	b913      	cbnz	r3, 800a172 <_printf_float+0x1aa>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	07d2      	lsls	r2, r2, #31
 800a170:	d501      	bpl.n	800a176 <_printf_float+0x1ae>
 800a172:	3302      	adds	r3, #2
 800a174:	e7f4      	b.n	800a160 <_printf_float+0x198>
 800a176:	2301      	movs	r3, #1
 800a178:	e7f2      	b.n	800a160 <_printf_float+0x198>
 800a17a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a180:	4299      	cmp	r1, r3
 800a182:	db05      	blt.n	800a190 <_printf_float+0x1c8>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	6121      	str	r1, [r4, #16]
 800a188:	07d8      	lsls	r0, r3, #31
 800a18a:	d5ea      	bpl.n	800a162 <_printf_float+0x19a>
 800a18c:	1c4b      	adds	r3, r1, #1
 800a18e:	e7e7      	b.n	800a160 <_printf_float+0x198>
 800a190:	2900      	cmp	r1, #0
 800a192:	bfcc      	ite	gt
 800a194:	2201      	movgt	r2, #1
 800a196:	f1c1 0202 	rsble	r2, r1, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	e7e0      	b.n	800a160 <_printf_float+0x198>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	055a      	lsls	r2, r3, #21
 800a1a2:	d407      	bmi.n	800a1b4 <_printf_float+0x1ec>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d12b      	bne.n	800a20a <_printf_float+0x242>
 800a1b2:	e764      	b.n	800a07e <_printf_float+0xb6>
 800a1b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1b8:	f240 80dc 	bls.w	800a374 <_printf_float+0x3ac>
 800a1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f7f6 fbfa 	bl	80009bc <__aeabi_dcmpeq>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d033      	beq.n	800a234 <_printf_float+0x26c>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	4a35      	ldr	r2, [pc, #212]	@ (800a2a8 <_printf_float+0x2e0>)
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	f43f af51 	beq.w	800a07e <_printf_float+0xb6>
 800a1dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a1e0:	4543      	cmp	r3, r8
 800a1e2:	db02      	blt.n	800a1ea <_printf_float+0x222>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	07d8      	lsls	r0, r3, #31
 800a1e8:	d50f      	bpl.n	800a20a <_printf_float+0x242>
 800a1ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b8      	blx	r7
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f43f af42 	beq.w	800a07e <_printf_float+0xb6>
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800a202:	f104 0a1a 	add.w	sl, r4, #26
 800a206:	45c8      	cmp	r8, r9
 800a208:	dc09      	bgt.n	800a21e <_printf_float+0x256>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	079b      	lsls	r3, r3, #30
 800a20e:	f100 8102 	bmi.w	800a416 <_printf_float+0x44e>
 800a212:	68e0      	ldr	r0, [r4, #12]
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	4298      	cmp	r0, r3
 800a218:	bfb8      	it	lt
 800a21a:	4618      	movlt	r0, r3
 800a21c:	e731      	b.n	800a082 <_printf_float+0xba>
 800a21e:	2301      	movs	r3, #1
 800a220:	4652      	mov	r2, sl
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f af28 	beq.w	800a07e <_printf_float+0xb6>
 800a22e:	f109 0901 	add.w	r9, r9, #1
 800a232:	e7e8      	b.n	800a206 <_printf_float+0x23e>
 800a234:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a236:	2b00      	cmp	r3, #0
 800a238:	dc38      	bgt.n	800a2ac <_printf_float+0x2e4>
 800a23a:	2301      	movs	r3, #1
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	4a19      	ldr	r2, [pc, #100]	@ (800a2a8 <_printf_float+0x2e0>)
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	f43f af1a 	beq.w	800a07e <_printf_float+0xb6>
 800a24a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a24e:	ea59 0303 	orrs.w	r3, r9, r3
 800a252:	d102      	bne.n	800a25a <_printf_float+0x292>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	07d9      	lsls	r1, r3, #31
 800a258:	d5d7      	bpl.n	800a20a <_printf_float+0x242>
 800a25a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f af0a 	beq.w	800a07e <_printf_float+0xb6>
 800a26a:	f04f 0a00 	mov.w	sl, #0
 800a26e:	f104 0b1a 	add.w	fp, r4, #26
 800a272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a274:	425b      	negs	r3, r3
 800a276:	4553      	cmp	r3, sl
 800a278:	dc01      	bgt.n	800a27e <_printf_float+0x2b6>
 800a27a:	464b      	mov	r3, r9
 800a27c:	e793      	b.n	800a1a6 <_printf_float+0x1de>
 800a27e:	2301      	movs	r3, #1
 800a280:	465a      	mov	r2, fp
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f aef8 	beq.w	800a07e <_printf_float+0xb6>
 800a28e:	f10a 0a01 	add.w	sl, sl, #1
 800a292:	e7ee      	b.n	800a272 <_printf_float+0x2aa>
 800a294:	7fefffff 	.word	0x7fefffff
 800a298:	0800edb1 	.word	0x0800edb1
 800a29c:	0800edb5 	.word	0x0800edb5
 800a2a0:	0800edb9 	.word	0x0800edb9
 800a2a4:	0800edbd 	.word	0x0800edbd
 800a2a8:	0800f196 	.word	0x0800f196
 800a2ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a2b2:	4553      	cmp	r3, sl
 800a2b4:	bfa8      	it	ge
 800a2b6:	4653      	movge	r3, sl
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	4699      	mov	r9, r3
 800a2bc:	dc36      	bgt.n	800a32c <_printf_float+0x364>
 800a2be:	f04f 0b00 	mov.w	fp, #0
 800a2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2c6:	f104 021a 	add.w	r2, r4, #26
 800a2ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ce:	eba3 0309 	sub.w	r3, r3, r9
 800a2d2:	455b      	cmp	r3, fp
 800a2d4:	dc31      	bgt.n	800a33a <_printf_float+0x372>
 800a2d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2d8:	459a      	cmp	sl, r3
 800a2da:	dc3a      	bgt.n	800a352 <_printf_float+0x38a>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	07da      	lsls	r2, r3, #31
 800a2e0:	d437      	bmi.n	800a352 <_printf_float+0x38a>
 800a2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2e4:	ebaa 0903 	sub.w	r9, sl, r3
 800a2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ea:	ebaa 0303 	sub.w	r3, sl, r3
 800a2ee:	4599      	cmp	r9, r3
 800a2f0:	bfa8      	it	ge
 800a2f2:	4699      	movge	r9, r3
 800a2f4:	f1b9 0f00 	cmp.w	r9, #0
 800a2f8:	dc33      	bgt.n	800a362 <_printf_float+0x39a>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a302:	f104 0b1a 	add.w	fp, r4, #26
 800a306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a308:	ebaa 0303 	sub.w	r3, sl, r3
 800a30c:	eba3 0309 	sub.w	r3, r3, r9
 800a310:	4543      	cmp	r3, r8
 800a312:	f77f af7a 	ble.w	800a20a <_printf_float+0x242>
 800a316:	2301      	movs	r3, #1
 800a318:	465a      	mov	r2, fp
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f aeac 	beq.w	800a07e <_printf_float+0xb6>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	e7ec      	b.n	800a306 <_printf_float+0x33e>
 800a32c:	4642      	mov	r2, r8
 800a32e:	4631      	mov	r1, r6
 800a330:	4628      	mov	r0, r5
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	d1c2      	bne.n	800a2be <_printf_float+0x2f6>
 800a338:	e6a1      	b.n	800a07e <_printf_float+0xb6>
 800a33a:	2301      	movs	r3, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	920a      	str	r2, [sp, #40]	@ 0x28
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f ae9a 	beq.w	800a07e <_printf_float+0xb6>
 800a34a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a34c:	f10b 0b01 	add.w	fp, fp, #1
 800a350:	e7bb      	b.n	800a2ca <_printf_float+0x302>
 800a352:	4631      	mov	r1, r6
 800a354:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1c0      	bne.n	800a2e2 <_printf_float+0x31a>
 800a360:	e68d      	b.n	800a07e <_printf_float+0xb6>
 800a362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a364:	464b      	mov	r3, r9
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	4442      	add	r2, r8
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	d1c3      	bne.n	800a2fa <_printf_float+0x332>
 800a372:	e684      	b.n	800a07e <_printf_float+0xb6>
 800a374:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a378:	f1ba 0f01 	cmp.w	sl, #1
 800a37c:	dc01      	bgt.n	800a382 <_printf_float+0x3ba>
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d536      	bpl.n	800a3f0 <_printf_float+0x428>
 800a382:	2301      	movs	r3, #1
 800a384:	4642      	mov	r2, r8
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae76 	beq.w	800a07e <_printf_float+0xb6>
 800a392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f ae6e 	beq.w	800a07e <_printf_float+0xb6>
 800a3a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ae:	f7f6 fb05 	bl	80009bc <__aeabi_dcmpeq>
 800a3b2:	b9c0      	cbnz	r0, 800a3e6 <_printf_float+0x41e>
 800a3b4:	4653      	mov	r3, sl
 800a3b6:	f108 0201 	add.w	r2, r8, #1
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d10c      	bne.n	800a3de <_printf_float+0x416>
 800a3c4:	e65b      	b.n	800a07e <_printf_float+0xb6>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	465a      	mov	r2, fp
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f43f ae54 	beq.w	800a07e <_printf_float+0xb6>
 800a3d6:	f108 0801 	add.w	r8, r8, #1
 800a3da:	45d0      	cmp	r8, sl
 800a3dc:	dbf3      	blt.n	800a3c6 <_printf_float+0x3fe>
 800a3de:	464b      	mov	r3, r9
 800a3e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3e4:	e6e0      	b.n	800a1a8 <_printf_float+0x1e0>
 800a3e6:	f04f 0800 	mov.w	r8, #0
 800a3ea:	f104 0b1a 	add.w	fp, r4, #26
 800a3ee:	e7f4      	b.n	800a3da <_printf_float+0x412>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	4642      	mov	r2, r8
 800a3f4:	e7e1      	b.n	800a3ba <_printf_float+0x3f2>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	464a      	mov	r2, r9
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	f43f ae3c 	beq.w	800a07e <_printf_float+0xb6>
 800a406:	f108 0801 	add.w	r8, r8, #1
 800a40a:	68e3      	ldr	r3, [r4, #12]
 800a40c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a40e:	1a5b      	subs	r3, r3, r1
 800a410:	4543      	cmp	r3, r8
 800a412:	dcf0      	bgt.n	800a3f6 <_printf_float+0x42e>
 800a414:	e6fd      	b.n	800a212 <_printf_float+0x24a>
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	f104 0919 	add.w	r9, r4, #25
 800a41e:	e7f4      	b.n	800a40a <_printf_float+0x442>

0800a420 <_printf_common>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	4616      	mov	r6, r2
 800a426:	4698      	mov	r8, r3
 800a428:	688a      	ldr	r2, [r1, #8]
 800a42a:	690b      	ldr	r3, [r1, #16]
 800a42c:	4607      	mov	r7, r0
 800a42e:	4293      	cmp	r3, r2
 800a430:	bfb8      	it	lt
 800a432:	4613      	movlt	r3, r2
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a43a:	460c      	mov	r4, r1
 800a43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a440:	b10a      	cbz	r2, 800a446 <_printf_common+0x26>
 800a442:	3301      	adds	r3, #1
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	0699      	lsls	r1, r3, #26
 800a44a:	bf42      	ittt	mi
 800a44c:	6833      	ldrmi	r3, [r6, #0]
 800a44e:	3302      	addmi	r3, #2
 800a450:	6033      	strmi	r3, [r6, #0]
 800a452:	6825      	ldr	r5, [r4, #0]
 800a454:	f015 0506 	ands.w	r5, r5, #6
 800a458:	d106      	bne.n	800a468 <_printf_common+0x48>
 800a45a:	f104 0a19 	add.w	sl, r4, #25
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	6832      	ldr	r2, [r6, #0]
 800a462:	1a9b      	subs	r3, r3, r2
 800a464:	42ab      	cmp	r3, r5
 800a466:	dc2b      	bgt.n	800a4c0 <_printf_common+0xa0>
 800a468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a46c:	6822      	ldr	r2, [r4, #0]
 800a46e:	3b00      	subs	r3, #0
 800a470:	bf18      	it	ne
 800a472:	2301      	movne	r3, #1
 800a474:	0692      	lsls	r2, r2, #26
 800a476:	d430      	bmi.n	800a4da <_printf_common+0xba>
 800a478:	4641      	mov	r1, r8
 800a47a:	4638      	mov	r0, r7
 800a47c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a480:	47c8      	blx	r9
 800a482:	3001      	adds	r0, #1
 800a484:	d023      	beq.n	800a4ce <_printf_common+0xae>
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	f003 0306 	and.w	r3, r3, #6
 800a48e:	2b04      	cmp	r3, #4
 800a490:	bf14      	ite	ne
 800a492:	2500      	movne	r5, #0
 800a494:	6833      	ldreq	r3, [r6, #0]
 800a496:	f04f 0600 	mov.w	r6, #0
 800a49a:	bf08      	it	eq
 800a49c:	68e5      	ldreq	r5, [r4, #12]
 800a49e:	f104 041a 	add.w	r4, r4, #26
 800a4a2:	bf08      	it	eq
 800a4a4:	1aed      	subeq	r5, r5, r3
 800a4a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a4aa:	bf08      	it	eq
 800a4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	bfc4      	itt	gt
 800a4b4:	1a9b      	subgt	r3, r3, r2
 800a4b6:	18ed      	addgt	r5, r5, r3
 800a4b8:	42b5      	cmp	r5, r6
 800a4ba:	d11a      	bne.n	800a4f2 <_printf_common+0xd2>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	e008      	b.n	800a4d2 <_printf_common+0xb2>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	4641      	mov	r1, r8
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	47c8      	blx	r9
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	d103      	bne.n	800a4d6 <_printf_common+0xb6>
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	e7c1      	b.n	800a45e <_printf_common+0x3e>
 800a4da:	2030      	movs	r0, #48	@ 0x30
 800a4dc:	18e1      	adds	r1, r4, r3
 800a4de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4e8:	4422      	add	r2, r4
 800a4ea:	3302      	adds	r3, #2
 800a4ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f0:	e7c2      	b.n	800a478 <_printf_common+0x58>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	4641      	mov	r1, r8
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	47c8      	blx	r9
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0e6      	beq.n	800a4ce <_printf_common+0xae>
 800a500:	3601      	adds	r6, #1
 800a502:	e7d9      	b.n	800a4b8 <_printf_common+0x98>

0800a504 <_printf_i>:
 800a504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	7e0f      	ldrb	r7, [r1, #24]
 800a50a:	4691      	mov	r9, r2
 800a50c:	2f78      	cmp	r7, #120	@ 0x78
 800a50e:	4680      	mov	r8, r0
 800a510:	460c      	mov	r4, r1
 800a512:	469a      	mov	sl, r3
 800a514:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a51a:	d807      	bhi.n	800a52c <_printf_i+0x28>
 800a51c:	2f62      	cmp	r7, #98	@ 0x62
 800a51e:	d80a      	bhi.n	800a536 <_printf_i+0x32>
 800a520:	2f00      	cmp	r7, #0
 800a522:	f000 80d3 	beq.w	800a6cc <_printf_i+0x1c8>
 800a526:	2f58      	cmp	r7, #88	@ 0x58
 800a528:	f000 80ba 	beq.w	800a6a0 <_printf_i+0x19c>
 800a52c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a534:	e03a      	b.n	800a5ac <_printf_i+0xa8>
 800a536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a53a:	2b15      	cmp	r3, #21
 800a53c:	d8f6      	bhi.n	800a52c <_printf_i+0x28>
 800a53e:	a101      	add	r1, pc, #4	@ (adr r1, 800a544 <_printf_i+0x40>)
 800a540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a544:	0800a59d 	.word	0x0800a59d
 800a548:	0800a5b1 	.word	0x0800a5b1
 800a54c:	0800a52d 	.word	0x0800a52d
 800a550:	0800a52d 	.word	0x0800a52d
 800a554:	0800a52d 	.word	0x0800a52d
 800a558:	0800a52d 	.word	0x0800a52d
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a52d 	.word	0x0800a52d
 800a564:	0800a52d 	.word	0x0800a52d
 800a568:	0800a52d 	.word	0x0800a52d
 800a56c:	0800a52d 	.word	0x0800a52d
 800a570:	0800a6b3 	.word	0x0800a6b3
 800a574:	0800a5db 	.word	0x0800a5db
 800a578:	0800a66d 	.word	0x0800a66d
 800a57c:	0800a52d 	.word	0x0800a52d
 800a580:	0800a52d 	.word	0x0800a52d
 800a584:	0800a6d5 	.word	0x0800a6d5
 800a588:	0800a52d 	.word	0x0800a52d
 800a58c:	0800a5db 	.word	0x0800a5db
 800a590:	0800a52d 	.word	0x0800a52d
 800a594:	0800a52d 	.word	0x0800a52d
 800a598:	0800a675 	.word	0x0800a675
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	1d1a      	adds	r2, r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6032      	str	r2, [r6, #0]
 800a5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e09e      	b.n	800a6ee <_printf_i+0x1ea>
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	1d19      	adds	r1, r3, #4
 800a5b6:	6031      	str	r1, [r6, #0]
 800a5b8:	0606      	lsls	r6, r0, #24
 800a5ba:	d501      	bpl.n	800a5c0 <_printf_i+0xbc>
 800a5bc:	681d      	ldr	r5, [r3, #0]
 800a5be:	e003      	b.n	800a5c8 <_printf_i+0xc4>
 800a5c0:	0645      	lsls	r5, r0, #25
 800a5c2:	d5fb      	bpl.n	800a5bc <_printf_i+0xb8>
 800a5c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5c8:	2d00      	cmp	r5, #0
 800a5ca:	da03      	bge.n	800a5d4 <_printf_i+0xd0>
 800a5cc:	232d      	movs	r3, #45	@ 0x2d
 800a5ce:	426d      	negs	r5, r5
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5d4:	230a      	movs	r3, #10
 800a5d6:	4859      	ldr	r0, [pc, #356]	@ (800a73c <_printf_i+0x238>)
 800a5d8:	e011      	b.n	800a5fe <_printf_i+0xfa>
 800a5da:	6821      	ldr	r1, [r4, #0]
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	0608      	lsls	r0, r1, #24
 800a5e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5e4:	d402      	bmi.n	800a5ec <_printf_i+0xe8>
 800a5e6:	0649      	lsls	r1, r1, #25
 800a5e8:	bf48      	it	mi
 800a5ea:	b2ad      	uxthmi	r5, r5
 800a5ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5ee:	6033      	str	r3, [r6, #0]
 800a5f0:	bf14      	ite	ne
 800a5f2:	230a      	movne	r3, #10
 800a5f4:	2308      	moveq	r3, #8
 800a5f6:	4851      	ldr	r0, [pc, #324]	@ (800a73c <_printf_i+0x238>)
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5fe:	6866      	ldr	r6, [r4, #4]
 800a600:	2e00      	cmp	r6, #0
 800a602:	bfa8      	it	ge
 800a604:	6821      	ldrge	r1, [r4, #0]
 800a606:	60a6      	str	r6, [r4, #8]
 800a608:	bfa4      	itt	ge
 800a60a:	f021 0104 	bicge.w	r1, r1, #4
 800a60e:	6021      	strge	r1, [r4, #0]
 800a610:	b90d      	cbnz	r5, 800a616 <_printf_i+0x112>
 800a612:	2e00      	cmp	r6, #0
 800a614:	d04b      	beq.n	800a6ae <_printf_i+0x1aa>
 800a616:	4616      	mov	r6, r2
 800a618:	fbb5 f1f3 	udiv	r1, r5, r3
 800a61c:	fb03 5711 	mls	r7, r3, r1, r5
 800a620:	5dc7      	ldrb	r7, [r0, r7]
 800a622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a626:	462f      	mov	r7, r5
 800a628:	42bb      	cmp	r3, r7
 800a62a:	460d      	mov	r5, r1
 800a62c:	d9f4      	bls.n	800a618 <_printf_i+0x114>
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d10b      	bne.n	800a64a <_printf_i+0x146>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	07df      	lsls	r7, r3, #31
 800a636:	d508      	bpl.n	800a64a <_printf_i+0x146>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	6861      	ldr	r1, [r4, #4]
 800a63c:	4299      	cmp	r1, r3
 800a63e:	bfde      	ittt	le
 800a640:	2330      	movle	r3, #48	@ 0x30
 800a642:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a646:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a64a:	1b92      	subs	r2, r2, r6
 800a64c:	6122      	str	r2, [r4, #16]
 800a64e:	464b      	mov	r3, r9
 800a650:	4621      	mov	r1, r4
 800a652:	4640      	mov	r0, r8
 800a654:	f8cd a000 	str.w	sl, [sp]
 800a658:	aa03      	add	r2, sp, #12
 800a65a:	f7ff fee1 	bl	800a420 <_printf_common>
 800a65e:	3001      	adds	r0, #1
 800a660:	d14a      	bne.n	800a6f8 <_printf_i+0x1f4>
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	b004      	add	sp, #16
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	f043 0320 	orr.w	r3, r3, #32
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	2778      	movs	r7, #120	@ 0x78
 800a676:	4832      	ldr	r0, [pc, #200]	@ (800a740 <_printf_i+0x23c>)
 800a678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	6831      	ldr	r1, [r6, #0]
 800a680:	061f      	lsls	r7, r3, #24
 800a682:	f851 5b04 	ldr.w	r5, [r1], #4
 800a686:	d402      	bmi.n	800a68e <_printf_i+0x18a>
 800a688:	065f      	lsls	r7, r3, #25
 800a68a:	bf48      	it	mi
 800a68c:	b2ad      	uxthmi	r5, r5
 800a68e:	6031      	str	r1, [r6, #0]
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	bf44      	itt	mi
 800a694:	f043 0320 	orrmi.w	r3, r3, #32
 800a698:	6023      	strmi	r3, [r4, #0]
 800a69a:	b11d      	cbz	r5, 800a6a4 <_printf_i+0x1a0>
 800a69c:	2310      	movs	r3, #16
 800a69e:	e7ab      	b.n	800a5f8 <_printf_i+0xf4>
 800a6a0:	4826      	ldr	r0, [pc, #152]	@ (800a73c <_printf_i+0x238>)
 800a6a2:	e7e9      	b.n	800a678 <_printf_i+0x174>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	f023 0320 	bic.w	r3, r3, #32
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	e7f6      	b.n	800a69c <_printf_i+0x198>
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	e7bd      	b.n	800a62e <_printf_i+0x12a>
 800a6b2:	6833      	ldr	r3, [r6, #0]
 800a6b4:	6825      	ldr	r5, [r4, #0]
 800a6b6:	1d18      	adds	r0, r3, #4
 800a6b8:	6961      	ldr	r1, [r4, #20]
 800a6ba:	6030      	str	r0, [r6, #0]
 800a6bc:	062e      	lsls	r6, r5, #24
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	d501      	bpl.n	800a6c6 <_printf_i+0x1c2>
 800a6c2:	6019      	str	r1, [r3, #0]
 800a6c4:	e002      	b.n	800a6cc <_printf_i+0x1c8>
 800a6c6:	0668      	lsls	r0, r5, #25
 800a6c8:	d5fb      	bpl.n	800a6c2 <_printf_i+0x1be>
 800a6ca:	8019      	strh	r1, [r3, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	e7bc      	b.n	800a64e <_printf_i+0x14a>
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	6032      	str	r2, [r6, #0]
 800a6dc:	681e      	ldr	r6, [r3, #0]
 800a6de:	6862      	ldr	r2, [r4, #4]
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 ff34 	bl	800b54e <memchr>
 800a6e6:	b108      	cbz	r0, 800a6ec <_printf_i+0x1e8>
 800a6e8:	1b80      	subs	r0, r0, r6
 800a6ea:	6060      	str	r0, [r4, #4]
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6f6:	e7aa      	b.n	800a64e <_printf_i+0x14a>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	47d0      	blx	sl
 800a702:	3001      	adds	r0, #1
 800a704:	d0ad      	beq.n	800a662 <_printf_i+0x15e>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	079b      	lsls	r3, r3, #30
 800a70a:	d413      	bmi.n	800a734 <_printf_i+0x230>
 800a70c:	68e0      	ldr	r0, [r4, #12]
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	4298      	cmp	r0, r3
 800a712:	bfb8      	it	lt
 800a714:	4618      	movlt	r0, r3
 800a716:	e7a6      	b.n	800a666 <_printf_i+0x162>
 800a718:	2301      	movs	r3, #1
 800a71a:	4632      	mov	r2, r6
 800a71c:	4649      	mov	r1, r9
 800a71e:	4640      	mov	r0, r8
 800a720:	47d0      	blx	sl
 800a722:	3001      	adds	r0, #1
 800a724:	d09d      	beq.n	800a662 <_printf_i+0x15e>
 800a726:	3501      	adds	r5, #1
 800a728:	68e3      	ldr	r3, [r4, #12]
 800a72a:	9903      	ldr	r1, [sp, #12]
 800a72c:	1a5b      	subs	r3, r3, r1
 800a72e:	42ab      	cmp	r3, r5
 800a730:	dcf2      	bgt.n	800a718 <_printf_i+0x214>
 800a732:	e7eb      	b.n	800a70c <_printf_i+0x208>
 800a734:	2500      	movs	r5, #0
 800a736:	f104 0619 	add.w	r6, r4, #25
 800a73a:	e7f5      	b.n	800a728 <_printf_i+0x224>
 800a73c:	0800edc1 	.word	0x0800edc1
 800a740:	0800edd2 	.word	0x0800edd2

0800a744 <std>:
 800a744:	2300      	movs	r3, #0
 800a746:	b510      	push	{r4, lr}
 800a748:	4604      	mov	r4, r0
 800a74a:	e9c0 3300 	strd	r3, r3, [r0]
 800a74e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a752:	6083      	str	r3, [r0, #8]
 800a754:	8181      	strh	r1, [r0, #12]
 800a756:	6643      	str	r3, [r0, #100]	@ 0x64
 800a758:	81c2      	strh	r2, [r0, #14]
 800a75a:	6183      	str	r3, [r0, #24]
 800a75c:	4619      	mov	r1, r3
 800a75e:	2208      	movs	r2, #8
 800a760:	305c      	adds	r0, #92	@ 0x5c
 800a762:	f000 f8f6 	bl	800a952 <memset>
 800a766:	4b0d      	ldr	r3, [pc, #52]	@ (800a79c <std+0x58>)
 800a768:	6224      	str	r4, [r4, #32]
 800a76a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a76c:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a0 <std+0x5c>)
 800a76e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a770:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <std+0x60>)
 800a772:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a774:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a8 <std+0x64>)
 800a776:	6323      	str	r3, [r4, #48]	@ 0x30
 800a778:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <std+0x68>)
 800a77a:	429c      	cmp	r4, r3
 800a77c:	d006      	beq.n	800a78c <std+0x48>
 800a77e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a782:	4294      	cmp	r4, r2
 800a784:	d002      	beq.n	800a78c <std+0x48>
 800a786:	33d0      	adds	r3, #208	@ 0xd0
 800a788:	429c      	cmp	r4, r3
 800a78a:	d105      	bne.n	800a798 <std+0x54>
 800a78c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a794:	f000 bece 	b.w	800b534 <__retarget_lock_init_recursive>
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	bf00      	nop
 800a79c:	0800a8c9 	.word	0x0800a8c9
 800a7a0:	0800a8ef 	.word	0x0800a8ef
 800a7a4:	0800a927 	.word	0x0800a927
 800a7a8:	0800a94b 	.word	0x0800a94b
 800a7ac:	20000ae0 	.word	0x20000ae0

0800a7b0 <stdio_exit_handler>:
 800a7b0:	4a02      	ldr	r2, [pc, #8]	@ (800a7bc <stdio_exit_handler+0xc>)
 800a7b2:	4903      	ldr	r1, [pc, #12]	@ (800a7c0 <stdio_exit_handler+0x10>)
 800a7b4:	4803      	ldr	r0, [pc, #12]	@ (800a7c4 <stdio_exit_handler+0x14>)
 800a7b6:	f000 b869 	b.w	800a88c <_fwalk_sglue>
 800a7ba:	bf00      	nop
 800a7bc:	20000014 	.word	0x20000014
 800a7c0:	0800d6d9 	.word	0x0800d6d9
 800a7c4:	20000198 	.word	0x20000198

0800a7c8 <cleanup_stdio>:
 800a7c8:	6841      	ldr	r1, [r0, #4]
 800a7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a7fc <cleanup_stdio+0x34>)
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	d001      	beq.n	800a7d8 <cleanup_stdio+0x10>
 800a7d4:	f002 ff80 	bl	800d6d8 <_fflush_r>
 800a7d8:	68a1      	ldr	r1, [r4, #8]
 800a7da:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <cleanup_stdio+0x38>)
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	d002      	beq.n	800a7e6 <cleanup_stdio+0x1e>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f002 ff79 	bl	800d6d8 <_fflush_r>
 800a7e6:	68e1      	ldr	r1, [r4, #12]
 800a7e8:	4b06      	ldr	r3, [pc, #24]	@ (800a804 <cleanup_stdio+0x3c>)
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	d004      	beq.n	800a7f8 <cleanup_stdio+0x30>
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f4:	f002 bf70 	b.w	800d6d8 <_fflush_r>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000ae0 	.word	0x20000ae0
 800a800:	20000b48 	.word	0x20000b48
 800a804:	20000bb0 	.word	0x20000bb0

0800a808 <global_stdio_init.part.0>:
 800a808:	b510      	push	{r4, lr}
 800a80a:	4b0b      	ldr	r3, [pc, #44]	@ (800a838 <global_stdio_init.part.0+0x30>)
 800a80c:	4c0b      	ldr	r4, [pc, #44]	@ (800a83c <global_stdio_init.part.0+0x34>)
 800a80e:	4a0c      	ldr	r2, [pc, #48]	@ (800a840 <global_stdio_init.part.0+0x38>)
 800a810:	4620      	mov	r0, r4
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2104      	movs	r1, #4
 800a816:	2200      	movs	r2, #0
 800a818:	f7ff ff94 	bl	800a744 <std>
 800a81c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a820:	2201      	movs	r2, #1
 800a822:	2109      	movs	r1, #9
 800a824:	f7ff ff8e 	bl	800a744 <std>
 800a828:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a82c:	2202      	movs	r2, #2
 800a82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a832:	2112      	movs	r1, #18
 800a834:	f7ff bf86 	b.w	800a744 <std>
 800a838:	20000c18 	.word	0x20000c18
 800a83c:	20000ae0 	.word	0x20000ae0
 800a840:	0800a7b1 	.word	0x0800a7b1

0800a844 <__sfp_lock_acquire>:
 800a844:	4801      	ldr	r0, [pc, #4]	@ (800a84c <__sfp_lock_acquire+0x8>)
 800a846:	f000 be77 	b.w	800b538 <__retarget_lock_acquire_recursive>
 800a84a:	bf00      	nop
 800a84c:	20000c47 	.word	0x20000c47

0800a850 <__sfp_lock_release>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__sfp_lock_release+0x8>)
 800a852:	f000 be73 	b.w	800b53c <__retarget_lock_release_recursive>
 800a856:	bf00      	nop
 800a858:	20000c47 	.word	0x20000c47

0800a85c <__sinit>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	4604      	mov	r4, r0
 800a860:	f7ff fff0 	bl	800a844 <__sfp_lock_acquire>
 800a864:	6a23      	ldr	r3, [r4, #32]
 800a866:	b11b      	cbz	r3, 800a870 <__sinit+0x14>
 800a868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a86c:	f7ff bff0 	b.w	800a850 <__sfp_lock_release>
 800a870:	4b04      	ldr	r3, [pc, #16]	@ (800a884 <__sinit+0x28>)
 800a872:	6223      	str	r3, [r4, #32]
 800a874:	4b04      	ldr	r3, [pc, #16]	@ (800a888 <__sinit+0x2c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f5      	bne.n	800a868 <__sinit+0xc>
 800a87c:	f7ff ffc4 	bl	800a808 <global_stdio_init.part.0>
 800a880:	e7f2      	b.n	800a868 <__sinit+0xc>
 800a882:	bf00      	nop
 800a884:	0800a7c9 	.word	0x0800a7c9
 800a888:	20000c18 	.word	0x20000c18

0800a88c <_fwalk_sglue>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4607      	mov	r7, r0
 800a892:	4688      	mov	r8, r1
 800a894:	4614      	mov	r4, r2
 800a896:	2600      	movs	r6, #0
 800a898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a89c:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a0:	d505      	bpl.n	800a8ae <_fwalk_sglue+0x22>
 800a8a2:	6824      	ldr	r4, [r4, #0]
 800a8a4:	2c00      	cmp	r4, #0
 800a8a6:	d1f7      	bne.n	800a898 <_fwalk_sglue+0xc>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d907      	bls.n	800a8c4 <_fwalk_sglue+0x38>
 800a8b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	d003      	beq.n	800a8c4 <_fwalk_sglue+0x38>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4638      	mov	r0, r7
 800a8c0:	47c0      	blx	r8
 800a8c2:	4306      	orrs	r6, r0
 800a8c4:	3568      	adds	r5, #104	@ 0x68
 800a8c6:	e7e9      	b.n	800a89c <_fwalk_sglue+0x10>

0800a8c8 <__sread>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	f000 fde2 	bl	800b498 <_read_r>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	bfab      	itete	ge
 800a8d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8da:	89a3      	ldrhlt	r3, [r4, #12]
 800a8dc:	181b      	addge	r3, r3, r0
 800a8de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8e2:	bfac      	ite	ge
 800a8e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8e6:	81a3      	strhlt	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__seofread>:
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	4770      	bx	lr

0800a8ee <__swrite>:
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	898b      	ldrh	r3, [r1, #12]
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	05db      	lsls	r3, r3, #23
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	d505      	bpl.n	800a90c <__swrite+0x1e>
 800a900:	2302      	movs	r3, #2
 800a902:	2200      	movs	r2, #0
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	f000 fdb4 	bl	800b474 <_lseek_r>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	4632      	mov	r2, r6
 800a910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	4628      	mov	r0, r5
 800a918:	463b      	mov	r3, r7
 800a91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	f000 bdcb 	b.w	800b4bc <_write_r>

0800a926 <__sseek>:
 800a926:	b510      	push	{r4, lr}
 800a928:	460c      	mov	r4, r1
 800a92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92e:	f000 fda1 	bl	800b474 <_lseek_r>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	bf15      	itete	ne
 800a938:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a93a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a93e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a942:	81a3      	strheq	r3, [r4, #12]
 800a944:	bf18      	it	ne
 800a946:	81a3      	strhne	r3, [r4, #12]
 800a948:	bd10      	pop	{r4, pc}

0800a94a <__sclose>:
 800a94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94e:	f000 bd81 	b.w	800b454 <_close_r>

0800a952 <memset>:
 800a952:	4603      	mov	r3, r0
 800a954:	4402      	add	r2, r0
 800a956:	4293      	cmp	r3, r2
 800a958:	d100      	bne.n	800a95c <memset+0xa>
 800a95a:	4770      	bx	lr
 800a95c:	f803 1b01 	strb.w	r1, [r3], #1
 800a960:	e7f9      	b.n	800a956 <memset+0x4>

0800a962 <strncmp>:
 800a962:	b510      	push	{r4, lr}
 800a964:	b16a      	cbz	r2, 800a982 <strncmp+0x20>
 800a966:	3901      	subs	r1, #1
 800a968:	1884      	adds	r4, r0, r2
 800a96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a96e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a972:	429a      	cmp	r2, r3
 800a974:	d103      	bne.n	800a97e <strncmp+0x1c>
 800a976:	42a0      	cmp	r0, r4
 800a978:	d001      	beq.n	800a97e <strncmp+0x1c>
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	d1f5      	bne.n	800a96a <strncmp+0x8>
 800a97e:	1ad0      	subs	r0, r2, r3
 800a980:	bd10      	pop	{r4, pc}
 800a982:	4610      	mov	r0, r2
 800a984:	e7fc      	b.n	800a980 <strncmp+0x1e>
	...

0800a988 <validate_structure>:
 800a988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a98a:	6801      	ldr	r1, [r0, #0]
 800a98c:	4604      	mov	r4, r0
 800a98e:	293b      	cmp	r1, #59	@ 0x3b
 800a990:	d911      	bls.n	800a9b6 <validate_structure+0x2e>
 800a992:	223c      	movs	r2, #60	@ 0x3c
 800a994:	4668      	mov	r0, sp
 800a996:	f000 fe01 	bl	800b59c <div>
 800a99a:	9a01      	ldr	r2, [sp, #4]
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	9900      	ldr	r1, [sp, #0]
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	440b      	add	r3, r1
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	bfbb      	ittet	lt
 800a9a8:	323c      	addlt	r2, #60	@ 0x3c
 800a9aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a9ae:	6022      	strge	r2, [r4, #0]
 800a9b0:	6022      	strlt	r2, [r4, #0]
 800a9b2:	bfb8      	it	lt
 800a9b4:	6063      	strlt	r3, [r4, #4]
 800a9b6:	6861      	ldr	r1, [r4, #4]
 800a9b8:	293b      	cmp	r1, #59	@ 0x3b
 800a9ba:	d911      	bls.n	800a9e0 <validate_structure+0x58>
 800a9bc:	223c      	movs	r2, #60	@ 0x3c
 800a9be:	4668      	mov	r0, sp
 800a9c0:	f000 fdec 	bl	800b59c <div>
 800a9c4:	9a01      	ldr	r2, [sp, #4]
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	9900      	ldr	r1, [sp, #0]
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	440b      	add	r3, r1
 800a9ce:	60a3      	str	r3, [r4, #8]
 800a9d0:	bfbb      	ittet	lt
 800a9d2:	323c      	addlt	r2, #60	@ 0x3c
 800a9d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a9d8:	6062      	strge	r2, [r4, #4]
 800a9da:	6062      	strlt	r2, [r4, #4]
 800a9dc:	bfb8      	it	lt
 800a9de:	60a3      	strlt	r3, [r4, #8]
 800a9e0:	68a1      	ldr	r1, [r4, #8]
 800a9e2:	2917      	cmp	r1, #23
 800a9e4:	d911      	bls.n	800aa0a <validate_structure+0x82>
 800a9e6:	2218      	movs	r2, #24
 800a9e8:	4668      	mov	r0, sp
 800a9ea:	f000 fdd7 	bl	800b59c <div>
 800a9ee:	9a01      	ldr	r2, [sp, #4]
 800a9f0:	68e3      	ldr	r3, [r4, #12]
 800a9f2:	9900      	ldr	r1, [sp, #0]
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	440b      	add	r3, r1
 800a9f8:	60e3      	str	r3, [r4, #12]
 800a9fa:	bfbb      	ittet	lt
 800a9fc:	3218      	addlt	r2, #24
 800a9fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa02:	60a2      	strge	r2, [r4, #8]
 800aa04:	60a2      	strlt	r2, [r4, #8]
 800aa06:	bfb8      	it	lt
 800aa08:	60e3      	strlt	r3, [r4, #12]
 800aa0a:	6921      	ldr	r1, [r4, #16]
 800aa0c:	290b      	cmp	r1, #11
 800aa0e:	d911      	bls.n	800aa34 <validate_structure+0xac>
 800aa10:	220c      	movs	r2, #12
 800aa12:	4668      	mov	r0, sp
 800aa14:	f000 fdc2 	bl	800b59c <div>
 800aa18:	9a01      	ldr	r2, [sp, #4]
 800aa1a:	6963      	ldr	r3, [r4, #20]
 800aa1c:	9900      	ldr	r1, [sp, #0]
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	440b      	add	r3, r1
 800aa22:	6163      	str	r3, [r4, #20]
 800aa24:	bfbb      	ittet	lt
 800aa26:	320c      	addlt	r2, #12
 800aa28:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa2c:	6122      	strge	r2, [r4, #16]
 800aa2e:	6122      	strlt	r2, [r4, #16]
 800aa30:	bfb8      	it	lt
 800aa32:	6163      	strlt	r3, [r4, #20]
 800aa34:	6963      	ldr	r3, [r4, #20]
 800aa36:	079a      	lsls	r2, r3, #30
 800aa38:	d11c      	bne.n	800aa74 <validate_structure+0xec>
 800aa3a:	2164      	movs	r1, #100	@ 0x64
 800aa3c:	fb93 f2f1 	sdiv	r2, r3, r1
 800aa40:	fb01 3212 	mls	r2, r1, r2, r3
 800aa44:	b9c2      	cbnz	r2, 800aa78 <validate_structure+0xf0>
 800aa46:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aa4a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800aa4e:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa52:	fb02 3311 	mls	r3, r2, r1, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	bf14      	ite	ne
 800aa5a:	231c      	movne	r3, #28
 800aa5c:	231d      	moveq	r3, #29
 800aa5e:	68e2      	ldr	r2, [r4, #12]
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	dc0b      	bgt.n	800aa7c <validate_structure+0xf4>
 800aa64:	200b      	movs	r0, #11
 800aa66:	2164      	movs	r1, #100	@ 0x64
 800aa68:	4d30      	ldr	r5, [pc, #192]	@ (800ab2c <validate_structure+0x1a4>)
 800aa6a:	68e6      	ldr	r6, [r4, #12]
 800aa6c:	2e00      	cmp	r6, #0
 800aa6e:	dd30      	ble.n	800aad2 <validate_structure+0x14a>
 800aa70:	b003      	add	sp, #12
 800aa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa74:	231c      	movs	r3, #28
 800aa76:	e7f2      	b.n	800aa5e <validate_structure+0xd6>
 800aa78:	231d      	movs	r3, #29
 800aa7a:	e7f0      	b.n	800aa5e <validate_structure+0xd6>
 800aa7c:	4d2b      	ldr	r5, [pc, #172]	@ (800ab2c <validate_structure+0x1a4>)
 800aa7e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800aa82:	2a01      	cmp	r2, #1
 800aa84:	bf0c      	ite	eq
 800aa86:	4618      	moveq	r0, r3
 800aa88:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800aa8c:	4281      	cmp	r1, r0
 800aa8e:	ddef      	ble.n	800aa70 <validate_structure+0xe8>
 800aa90:	3201      	adds	r2, #1
 800aa92:	1a09      	subs	r1, r1, r0
 800aa94:	2a0c      	cmp	r2, #12
 800aa96:	60e1      	str	r1, [r4, #12]
 800aa98:	6122      	str	r2, [r4, #16]
 800aa9a:	d1f0      	bne.n	800aa7e <validate_structure+0xf6>
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6963      	ldr	r3, [r4, #20]
 800aaa0:	6121      	str	r1, [r4, #16]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	0791      	lsls	r1, r2, #30
 800aaa6:	6162      	str	r2, [r4, #20]
 800aaa8:	d13c      	bne.n	800ab24 <validate_structure+0x19c>
 800aaaa:	2164      	movs	r1, #100	@ 0x64
 800aaac:	fb92 f0f1 	sdiv	r0, r2, r1
 800aab0:	fb01 2210 	mls	r2, r1, r0, r2
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	d137      	bne.n	800ab28 <validate_structure+0x1a0>
 800aab8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aabc:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800aac0:	fb93 f1f2 	sdiv	r1, r3, r2
 800aac4:	fb02 3311 	mls	r3, r2, r1, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bf14      	ite	ne
 800aacc:	231c      	movne	r3, #28
 800aace:	231d      	moveq	r3, #29
 800aad0:	e7d5      	b.n	800aa7e <validate_structure+0xf6>
 800aad2:	6922      	ldr	r2, [r4, #16]
 800aad4:	3a01      	subs	r2, #1
 800aad6:	6122      	str	r2, [r4, #16]
 800aad8:	3201      	adds	r2, #1
 800aada:	d116      	bne.n	800ab0a <validate_structure+0x182>
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	1e5a      	subs	r2, r3, #1
 800aae0:	0797      	lsls	r7, r2, #30
 800aae2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800aae6:	d119      	bne.n	800ab1c <validate_structure+0x194>
 800aae8:	fb92 f7f1 	sdiv	r7, r2, r1
 800aaec:	fb01 2217 	mls	r2, r1, r7, r2
 800aaf0:	b9b2      	cbnz	r2, 800ab20 <validate_structure+0x198>
 800aaf2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aaf6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800aafa:	fb93 f7f2 	sdiv	r7, r3, r2
 800aafe:	fb02 3317 	mls	r3, r2, r7, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	231c      	movne	r3, #28
 800ab08:	231d      	moveq	r3, #29
 800ab0a:	6922      	ldr	r2, [r4, #16]
 800ab0c:	2a01      	cmp	r2, #1
 800ab0e:	bf0c      	ite	eq
 800ab10:	461a      	moveq	r2, r3
 800ab12:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800ab16:	4432      	add	r2, r6
 800ab18:	60e2      	str	r2, [r4, #12]
 800ab1a:	e7a6      	b.n	800aa6a <validate_structure+0xe2>
 800ab1c:	231c      	movs	r3, #28
 800ab1e:	e7f4      	b.n	800ab0a <validate_structure+0x182>
 800ab20:	231d      	movs	r3, #29
 800ab22:	e7f2      	b.n	800ab0a <validate_structure+0x182>
 800ab24:	231c      	movs	r3, #28
 800ab26:	e7aa      	b.n	800aa7e <validate_structure+0xf6>
 800ab28:	231d      	movs	r3, #29
 800ab2a:	e7a8      	b.n	800aa7e <validate_structure+0xf6>
 800ab2c:	0800ee14 	.word	0x0800ee14

0800ab30 <mktime>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	b085      	sub	sp, #20
 800ab36:	4607      	mov	r7, r0
 800ab38:	f002 fe20 	bl	800d77c <__gettzinfo>
 800ab3c:	4681      	mov	r9, r0
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f7ff ff22 	bl	800a988 <validate_structure>
 800ab44:	e9d7 4300 	ldrd	r4, r3, [r7]
 800ab48:	223c      	movs	r2, #60	@ 0x3c
 800ab4a:	fb02 4403 	mla	r4, r2, r3, r4
 800ab4e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	697d      	ldr	r5, [r7, #20]
 800ab56:	fb02 4403 	mla	r4, r2, r3, r4
 800ab5a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800ab5e:	4ac1      	ldr	r2, [pc, #772]	@ (800ae64 <mktime+0x334>)
 800ab60:	3e01      	subs	r6, #1
 800ab62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	4416      	add	r6, r2
 800ab6a:	dd11      	ble.n	800ab90 <mktime+0x60>
 800ab6c:	07a9      	lsls	r1, r5, #30
 800ab6e:	d10f      	bne.n	800ab90 <mktime+0x60>
 800ab70:	2264      	movs	r2, #100	@ 0x64
 800ab72:	fb95 f3f2 	sdiv	r3, r5, r2
 800ab76:	fb02 5313 	mls	r3, r2, r3, r5
 800ab7a:	b943      	cbnz	r3, 800ab8e <mktime+0x5e>
 800ab7c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ab80:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ab84:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab88:	fb02 3311 	mls	r3, r2, r1, r3
 800ab8c:	b903      	cbnz	r3, 800ab90 <mktime+0x60>
 800ab8e:	3601      	adds	r6, #1
 800ab90:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ab94:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800ab98:	3310      	adds	r3, #16
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	61fe      	str	r6, [r7, #28]
 800ab9e:	f200 8167 	bhi.w	800ae70 <mktime+0x340>
 800aba2:	2d46      	cmp	r5, #70	@ 0x46
 800aba4:	f340 808e 	ble.w	800acc4 <mktime+0x194>
 800aba8:	2346      	movs	r3, #70	@ 0x46
 800abaa:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800abae:	2164      	movs	r1, #100	@ 0x64
 800abb0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800abb4:	079a      	lsls	r2, r3, #30
 800abb6:	d17f      	bne.n	800acb8 <mktime+0x188>
 800abb8:	fb93 f2f1 	sdiv	r2, r3, r1
 800abbc:	fb01 3212 	mls	r2, r1, r2, r3
 800abc0:	2a00      	cmp	r2, #0
 800abc2:	d17c      	bne.n	800acbe <mktime+0x18e>
 800abc4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800abc8:	fb92 fef0 	sdiv	lr, r2, r0
 800abcc:	fb00 221e 	mls	r2, r0, lr, r2
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	bf14      	ite	ne
 800abd4:	4662      	movne	r2, ip
 800abd6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800abda:	3301      	adds	r3, #1
 800abdc:	429d      	cmp	r5, r3
 800abde:	4416      	add	r6, r2
 800abe0:	d1e8      	bne.n	800abb4 <mktime+0x84>
 800abe2:	4ba1      	ldr	r3, [pc, #644]	@ (800ae68 <mktime+0x338>)
 800abe4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800abe8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800abec:	f000 f9f8 	bl	800afe0 <__tz_lock>
 800abf0:	f000 fa02 	bl	800aff8 <_tzset_unlocked>
 800abf4:	4b9d      	ldr	r3, [pc, #628]	@ (800ae6c <mktime+0x33c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8140 	beq.w	800ae7e <mktime+0x34e>
 800abfe:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800ac02:	6978      	ldr	r0, [r7, #20]
 800ac04:	4653      	mov	r3, sl
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	bfa8      	it	ge
 800ac0a:	2301      	movge	r3, #1
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac12:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800ac16:	4283      	cmp	r3, r0
 800ac18:	f040 8096 	bne.w	800ad48 <mktime+0x218>
 800ac1c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800ac20:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800ac24:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800ac28:	1a13      	subs	r3, r2, r0
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800ac30:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	9a02      	ldr	r2, [sp, #8]
 800ac38:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ac3c:	ebb2 0e03 	subs.w	lr, r2, r3
 800ac40:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800ac44:	4574      	cmp	r4, lr
 800ac46:	eb78 0201 	sbcs.w	r2, r8, r1
 800ac4a:	f280 8085 	bge.w	800ad58 <mktime+0x228>
 800ac4e:	f8d9 2000 	ldr.w	r2, [r9]
 800ac52:	2a00      	cmp	r2, #0
 800ac54:	f000 808d 	beq.w	800ad72 <mktime+0x242>
 800ac58:	9a03      	ldr	r2, [sp, #12]
 800ac5a:	4294      	cmp	r4, r2
 800ac5c:	eb78 020b 	sbcs.w	r2, r8, fp
 800ac60:	f2c0 810a 	blt.w	800ae78 <mktime+0x348>
 800ac64:	4574      	cmp	r4, lr
 800ac66:	eb78 0101 	sbcs.w	r1, r8, r1
 800ac6a:	bfb4      	ite	lt
 800ac6c:	f04f 0b01 	movlt.w	fp, #1
 800ac70:	f04f 0b00 	movge.w	fp, #0
 800ac74:	f1ba 0f00 	cmp.w	sl, #0
 800ac78:	f280 8087 	bge.w	800ad8a <mktime+0x25a>
 800ac7c:	f1bb 0f01 	cmp.w	fp, #1
 800ac80:	f040 80ff 	bne.w	800ae82 <mktime+0x352>
 800ac84:	f04f 0b01 	mov.w	fp, #1
 800ac88:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ac8c:	191c      	adds	r4, r3, r4
 800ac8e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ac92:	f000 f9ab 	bl	800afec <__tz_unlock>
 800ac96:	2307      	movs	r3, #7
 800ac98:	3604      	adds	r6, #4
 800ac9a:	fb96 f3f3 	sdiv	r3, r6, r3
 800ac9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800aca2:	1af6      	subs	r6, r6, r3
 800aca4:	f100 80db 	bmi.w	800ae5e <mktime+0x32e>
 800aca8:	f8c7 b020 	str.w	fp, [r7, #32]
 800acac:	61be      	str	r6, [r7, #24]
 800acae:	4620      	mov	r0, r4
 800acb0:	4641      	mov	r1, r8
 800acb2:	b005      	add	sp, #20
 800acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb8:	f240 126d 	movw	r2, #365	@ 0x16d
 800acbc:	e78d      	b.n	800abda <mktime+0xaa>
 800acbe:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800acc2:	e78a      	b.n	800abda <mktime+0xaa>
 800acc4:	d08d      	beq.n	800abe2 <mktime+0xb2>
 800acc6:	2345      	movs	r3, #69	@ 0x45
 800acc8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800accc:	2164      	movs	r1, #100	@ 0x64
 800acce:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800acd2:	e012      	b.n	800acfa <mktime+0x1ca>
 800acd4:	bb62      	cbnz	r2, 800ad30 <mktime+0x200>
 800acd6:	fb93 f2f1 	sdiv	r2, r3, r1
 800acda:	fb01 3212 	mls	r2, r1, r2, r3
 800acde:	bb52      	cbnz	r2, 800ad36 <mktime+0x206>
 800ace0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ace4:	fb92 fef0 	sdiv	lr, r2, r0
 800ace8:	fb00 221e 	mls	r2, r0, lr, r2
 800acec:	2a00      	cmp	r2, #0
 800acee:	bf14      	ite	ne
 800acf0:	4662      	movne	r2, ip
 800acf2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800acf6:	1ab6      	subs	r6, r6, r2
 800acf8:	3b01      	subs	r3, #1
 800acfa:	429d      	cmp	r5, r3
 800acfc:	f003 0203 	and.w	r2, r3, #3
 800ad00:	dbe8      	blt.n	800acd4 <mktime+0x1a4>
 800ad02:	b9da      	cbnz	r2, 800ad3c <mktime+0x20c>
 800ad04:	2264      	movs	r2, #100	@ 0x64
 800ad06:	fb95 f3f2 	sdiv	r3, r5, r2
 800ad0a:	fb02 5313 	mls	r3, r2, r3, r5
 800ad0e:	b9c3      	cbnz	r3, 800ad42 <mktime+0x212>
 800ad10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ad14:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ad18:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad1c:	fb02 3311 	mls	r3, r2, r1, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f240 136d 	movw	r3, #365	@ 0x16d
 800ad26:	bf08      	it	eq
 800ad28:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800ad2c:	1af6      	subs	r6, r6, r3
 800ad2e:	e758      	b.n	800abe2 <mktime+0xb2>
 800ad30:	f240 126d 	movw	r2, #365	@ 0x16d
 800ad34:	e7df      	b.n	800acf6 <mktime+0x1c6>
 800ad36:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ad3a:	e7dc      	b.n	800acf6 <mktime+0x1c6>
 800ad3c:	f240 136d 	movw	r3, #365	@ 0x16d
 800ad40:	e7f4      	b.n	800ad2c <mktime+0x1fc>
 800ad42:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800ad46:	e7f1      	b.n	800ad2c <mktime+0x1fc>
 800ad48:	f000 f8a2 	bl	800ae90 <__tzcalc_limits>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f47f af65 	bne.w	800ac1c <mktime+0xec>
 800ad52:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ad56:	e791      	b.n	800ac7c <mktime+0x14c>
 800ad58:	9a02      	ldr	r2, [sp, #8]
 800ad5a:	1a12      	subs	r2, r2, r0
 800ad5c:	9202      	str	r2, [sp, #8]
 800ad5e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800ad62:	eb6c 0c02 	sbc.w	ip, ip, r2
 800ad66:	9a02      	ldr	r2, [sp, #8]
 800ad68:	4294      	cmp	r4, r2
 800ad6a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800ad6e:	dbf0      	blt.n	800ad52 <mktime+0x222>
 800ad70:	e76d      	b.n	800ac4e <mktime+0x11e>
 800ad72:	9a03      	ldr	r2, [sp, #12]
 800ad74:	4294      	cmp	r4, r2
 800ad76:	eb78 020b 	sbcs.w	r2, r8, fp
 800ad7a:	f6ff af73 	blt.w	800ac64 <mktime+0x134>
 800ad7e:	f1ba 0f00 	cmp.w	sl, #0
 800ad82:	f6ff af7f 	blt.w	800ac84 <mktime+0x154>
 800ad86:	f04f 0b01 	mov.w	fp, #1
 800ad8a:	9a01      	ldr	r2, [sp, #4]
 800ad8c:	ea82 020b 	eor.w	r2, r2, fp
 800ad90:	2a01      	cmp	r2, #1
 800ad92:	f47f af73 	bne.w	800ac7c <mktime+0x14c>
 800ad96:	f1bb 0f00 	cmp.w	fp, #0
 800ad9a:	d035      	beq.n	800ae08 <mktime+0x2d8>
 800ad9c:	1a1b      	subs	r3, r3, r0
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	191c      	adds	r4, r3, r4
 800ada2:	441a      	add	r2, r3
 800ada4:	603a      	str	r2, [r7, #0]
 800ada6:	4638      	mov	r0, r7
 800ada8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800adac:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800adb0:	f7ff fdea 	bl	800a988 <validate_structure>
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	ebb2 020a 	subs.w	r2, r2, sl
 800adba:	f43f af5f 	beq.w	800ac7c <mktime+0x14c>
 800adbe:	2a01      	cmp	r2, #1
 800adc0:	dc24      	bgt.n	800ae0c <mktime+0x2dc>
 800adc2:	1c93      	adds	r3, r2, #2
 800adc4:	bfd8      	it	le
 800adc6:	2201      	movle	r2, #1
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	18d3      	adds	r3, r2, r3
 800adcc:	d527      	bpl.n	800ae1e <mktime+0x2ee>
 800adce:	1e6b      	subs	r3, r5, #1
 800add0:	0798      	lsls	r0, r3, #30
 800add2:	d11e      	bne.n	800ae12 <mktime+0x2e2>
 800add4:	2164      	movs	r1, #100	@ 0x64
 800add6:	fb93 f0f1 	sdiv	r0, r3, r1
 800adda:	fb01 3310 	mls	r3, r1, r0, r3
 800adde:	b9db      	cbnz	r3, 800ae18 <mktime+0x2e8>
 800ade0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ade4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800ade8:	fb95 f1f3 	sdiv	r1, r5, r3
 800adec:	fb03 5511 	mls	r5, r3, r1, r5
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	f240 136d 	movw	r3, #365	@ 0x16d
 800adf6:	bf18      	it	ne
 800adf8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800adfc:	61fb      	str	r3, [r7, #28]
 800adfe:	4416      	add	r6, r2
 800ae00:	e73c      	b.n	800ac7c <mktime+0x14c>
 800ae02:	f04f 0b00 	mov.w	fp, #0
 800ae06:	e7c0      	b.n	800ad8a <mktime+0x25a>
 800ae08:	1ac3      	subs	r3, r0, r3
 800ae0a:	e7c8      	b.n	800ad9e <mktime+0x26e>
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	e7da      	b.n	800adc8 <mktime+0x298>
 800ae12:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800ae16:	e7f1      	b.n	800adfc <mktime+0x2cc>
 800ae18:	f240 136d 	movw	r3, #365	@ 0x16d
 800ae1c:	e7ee      	b.n	800adfc <mktime+0x2cc>
 800ae1e:	07a9      	lsls	r1, r5, #30
 800ae20:	d117      	bne.n	800ae52 <mktime+0x322>
 800ae22:	2064      	movs	r0, #100	@ 0x64
 800ae24:	fb95 f1f0 	sdiv	r1, r5, r0
 800ae28:	fb00 5111 	mls	r1, r0, r1, r5
 800ae2c:	b9a1      	cbnz	r1, 800ae58 <mktime+0x328>
 800ae2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800ae32:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800ae36:	fb95 f0f1 	sdiv	r0, r5, r1
 800ae3a:	fb01 5510 	mls	r5, r1, r0, r5
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	f240 116d 	movw	r1, #365	@ 0x16d
 800ae44:	bf08      	it	eq
 800ae46:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800ae4a:	428b      	cmp	r3, r1
 800ae4c:	bfa8      	it	ge
 800ae4e:	1a5b      	subge	r3, r3, r1
 800ae50:	e7d4      	b.n	800adfc <mktime+0x2cc>
 800ae52:	f240 116d 	movw	r1, #365	@ 0x16d
 800ae56:	e7f8      	b.n	800ae4a <mktime+0x31a>
 800ae58:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800ae5c:	e7f5      	b.n	800ae4a <mktime+0x31a>
 800ae5e:	3607      	adds	r6, #7
 800ae60:	e722      	b.n	800aca8 <mktime+0x178>
 800ae62:	bf00      	nop
 800ae64:	0800ede4 	.word	0x0800ede4
 800ae68:	00015180 	.word	0x00015180
 800ae6c:	20000c3c 	.word	0x20000c3c
 800ae70:	f04f 34ff 	mov.w	r4, #4294967295
 800ae74:	46a0      	mov	r8, r4
 800ae76:	e71a      	b.n	800acae <mktime+0x17e>
 800ae78:	f1ba 0f00 	cmp.w	sl, #0
 800ae7c:	dac1      	bge.n	800ae02 <mktime+0x2d2>
 800ae7e:	f04f 0b00 	mov.w	fp, #0
 800ae82:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ae86:	191c      	adds	r4, r3, r4
 800ae88:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ae8c:	e701      	b.n	800ac92 <mktime+0x162>
 800ae8e:	bf00      	nop

0800ae90 <__tzcalc_limits>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	f002 fc71 	bl	800d77c <__gettzinfo>
 800ae9a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800ae9e:	429c      	cmp	r4, r3
 800aea0:	f340 8098 	ble.w	800afd4 <__tzcalc_limits+0x144>
 800aea4:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800aea8:	f240 126d 	movw	r2, #365	@ 0x16d
 800aeac:	19e5      	adds	r5, r4, r7
 800aeae:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800aeb2:	10ad      	asrs	r5, r5, #2
 800aeb4:	fb02 5503 	mla	r5, r2, r3, r5
 800aeb8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800aebc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800aec0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aec4:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800aec8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aecc:	441d      	add	r5, r3
 800aece:	eb04 030c 	add.w	r3, r4, ip
 800aed2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed6:	4601      	mov	r1, r0
 800aed8:	4f3f      	ldr	r7, [pc, #252]	@ (800afd8 <__tzcalc_limits+0x148>)
 800aeda:	6044      	str	r4, [r0, #4]
 800aedc:	441d      	add	r5, r3
 800aede:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800aee2:	7a0b      	ldrb	r3, [r1, #8]
 800aee4:	694a      	ldr	r2, [r1, #20]
 800aee6:	2b4a      	cmp	r3, #74	@ 0x4a
 800aee8:	d133      	bne.n	800af52 <__tzcalc_limits+0xc2>
 800aeea:	07a6      	lsls	r6, r4, #30
 800aeec:	eb05 0302 	add.w	r3, r5, r2
 800aef0:	d106      	bne.n	800af00 <__tzcalc_limits+0x70>
 800aef2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800aef6:	fb94 f6fe 	sdiv	r6, r4, lr
 800aefa:	fb0e 4616 	mls	r6, lr, r6, r4
 800aefe:	b936      	cbnz	r6, 800af0e <__tzcalc_limits+0x7e>
 800af00:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800af04:	fb94 f6fe 	sdiv	r6, r4, lr
 800af08:	fb0e 4616 	mls	r6, lr, r6, r4
 800af0c:	b9fe      	cbnz	r6, 800af4e <__tzcalc_limits+0xbe>
 800af0e:	2a3b      	cmp	r2, #59	@ 0x3b
 800af10:	bfd4      	ite	le
 800af12:	2200      	movle	r2, #0
 800af14:	2201      	movgt	r2, #1
 800af16:	4413      	add	r3, r2
 800af18:	3b01      	subs	r3, #1
 800af1a:	698a      	ldr	r2, [r1, #24]
 800af1c:	17d6      	asrs	r6, r2, #31
 800af1e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800af22:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800af24:	18d2      	adds	r2, r2, r3
 800af26:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800af2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800af2e:	3128      	adds	r1, #40	@ 0x28
 800af30:	458c      	cmp	ip, r1
 800af32:	d1d6      	bne.n	800aee2 <__tzcalc_limits+0x52>
 800af34:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800af38:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800af3c:	428c      	cmp	r4, r1
 800af3e:	4193      	sbcs	r3, r2
 800af40:	bfb4      	ite	lt
 800af42:	2301      	movlt	r3, #1
 800af44:	2300      	movge	r3, #0
 800af46:	6003      	str	r3, [r0, #0]
 800af48:	2001      	movs	r0, #1
 800af4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4e:	2200      	movs	r2, #0
 800af50:	e7e1      	b.n	800af16 <__tzcalc_limits+0x86>
 800af52:	2b44      	cmp	r3, #68	@ 0x44
 800af54:	d101      	bne.n	800af5a <__tzcalc_limits+0xca>
 800af56:	18ab      	adds	r3, r5, r2
 800af58:	e7df      	b.n	800af1a <__tzcalc_limits+0x8a>
 800af5a:	07a3      	lsls	r3, r4, #30
 800af5c:	d105      	bne.n	800af6a <__tzcalc_limits+0xda>
 800af5e:	2664      	movs	r6, #100	@ 0x64
 800af60:	fb94 f3f6 	sdiv	r3, r4, r6
 800af64:	fb06 4313 	mls	r3, r6, r3, r4
 800af68:	bb73      	cbnz	r3, 800afc8 <__tzcalc_limits+0x138>
 800af6a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800af6e:	fb94 f6f3 	sdiv	r6, r4, r3
 800af72:	fb03 4616 	mls	r6, r3, r6, r4
 800af76:	fab6 f686 	clz	r6, r6
 800af7a:	0976      	lsrs	r6, r6, #5
 800af7c:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800af80:	462b      	mov	r3, r5
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800afdc <__tzcalc_limits+0x14c>
 800af8a:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800af8e:	fb0a e606 	mla	r6, sl, r6, lr
 800af92:	f108 0801 	add.w	r8, r8, #1
 800af96:	45c1      	cmp	r9, r8
 800af98:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800af9c:	dc16      	bgt.n	800afcc <__tzcalc_limits+0x13c>
 800af9e:	2607      	movs	r6, #7
 800afa0:	f103 0804 	add.w	r8, r3, #4
 800afa4:	fb98 f6f6 	sdiv	r6, r8, r6
 800afa8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800afac:	eba8 0606 	sub.w	r6, r8, r6
 800afb0:	1b92      	subs	r2, r2, r6
 800afb2:	690e      	ldr	r6, [r1, #16]
 800afb4:	bf48      	it	mi
 800afb6:	3207      	addmi	r2, #7
 800afb8:	3e01      	subs	r6, #1
 800afba:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800afbe:	4432      	add	r2, r6
 800afc0:	4572      	cmp	r2, lr
 800afc2:	da05      	bge.n	800afd0 <__tzcalc_limits+0x140>
 800afc4:	4413      	add	r3, r2
 800afc6:	e7a8      	b.n	800af1a <__tzcalc_limits+0x8a>
 800afc8:	2601      	movs	r6, #1
 800afca:	e7d7      	b.n	800af7c <__tzcalc_limits+0xec>
 800afcc:	4473      	add	r3, lr
 800afce:	e7e0      	b.n	800af92 <__tzcalc_limits+0x102>
 800afd0:	3a07      	subs	r2, #7
 800afd2:	e7f5      	b.n	800afc0 <__tzcalc_limits+0x130>
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7b8      	b.n	800af4a <__tzcalc_limits+0xba>
 800afd8:	00015180 	.word	0x00015180
 800afdc:	0800f0dc 	.word	0x0800f0dc

0800afe0 <__tz_lock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	@ (800afe8 <__tz_lock+0x8>)
 800afe2:	f000 baa8 	b.w	800b536 <__retarget_lock_acquire>
 800afe6:	bf00      	nop
 800afe8:	20000c44 	.word	0x20000c44

0800afec <__tz_unlock>:
 800afec:	4801      	ldr	r0, [pc, #4]	@ (800aff4 <__tz_unlock+0x8>)
 800afee:	f000 baa4 	b.w	800b53a <__retarget_lock_release>
 800aff2:	bf00      	nop
 800aff4:	20000c44 	.word	0x20000c44

0800aff8 <_tzset_unlocked>:
 800aff8:	4b01      	ldr	r3, [pc, #4]	@ (800b000 <_tzset_unlocked+0x8>)
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	f000 b802 	b.w	800b004 <_tzset_unlocked_r>
 800b000:	20000194 	.word	0x20000194

0800b004 <_tzset_unlocked_r>:
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	b08d      	sub	sp, #52	@ 0x34
 800b00a:	4607      	mov	r7, r0
 800b00c:	f002 fbb6 	bl	800d77c <__gettzinfo>
 800b010:	496d      	ldr	r1, [pc, #436]	@ (800b1c8 <_tzset_unlocked_r+0x1c4>)
 800b012:	4604      	mov	r4, r0
 800b014:	4638      	mov	r0, r7
 800b016:	f001 fcd9 	bl	800c9cc <_getenv_r>
 800b01a:	4d6c      	ldr	r5, [pc, #432]	@ (800b1cc <_tzset_unlocked_r+0x1c8>)
 800b01c:	4606      	mov	r6, r0
 800b01e:	bb10      	cbnz	r0, 800b066 <_tzset_unlocked_r+0x62>
 800b020:	4b6b      	ldr	r3, [pc, #428]	@ (800b1d0 <_tzset_unlocked_r+0x1cc>)
 800b022:	4a6c      	ldr	r2, [pc, #432]	@ (800b1d4 <_tzset_unlocked_r+0x1d0>)
 800b024:	6018      	str	r0, [r3, #0]
 800b026:	4b6c      	ldr	r3, [pc, #432]	@ (800b1d8 <_tzset_unlocked_r+0x1d4>)
 800b028:	214a      	movs	r1, #74	@ 0x4a
 800b02a:	6018      	str	r0, [r3, #0]
 800b02c:	4b6b      	ldr	r3, [pc, #428]	@ (800b1dc <_tzset_unlocked_r+0x1d8>)
 800b02e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b032:	e9c3 2200 	strd	r2, r2, [r3]
 800b036:	2200      	movs	r2, #0
 800b038:	2300      	movs	r3, #0
 800b03a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b03e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b042:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b046:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b048:	6520      	str	r0, [r4, #80]	@ 0x50
 800b04a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b04e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b052:	6828      	ldr	r0, [r5, #0]
 800b054:	7221      	strb	r1, [r4, #8]
 800b056:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b05a:	f001 fcc7 	bl	800c9ec <free>
 800b05e:	602e      	str	r6, [r5, #0]
 800b060:	b00d      	add	sp, #52	@ 0x34
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	6829      	ldr	r1, [r5, #0]
 800b068:	2900      	cmp	r1, #0
 800b06a:	f040 808e 	bne.w	800b18a <_tzset_unlocked_r+0x186>
 800b06e:	6828      	ldr	r0, [r5, #0]
 800b070:	f001 fcbc 	bl	800c9ec <free>
 800b074:	4630      	mov	r0, r6
 800b076:	f7f5 f875 	bl	8000164 <strlen>
 800b07a:	1c41      	adds	r1, r0, #1
 800b07c:	4638      	mov	r0, r7
 800b07e:	f001 fcdf 	bl	800ca40 <_malloc_r>
 800b082:	6028      	str	r0, [r5, #0]
 800b084:	2800      	cmp	r0, #0
 800b086:	f040 8086 	bne.w	800b196 <_tzset_unlocked_r+0x192>
 800b08a:	2300      	movs	r3, #0
 800b08c:	4a52      	ldr	r2, [pc, #328]	@ (800b1d8 <_tzset_unlocked_r+0x1d4>)
 800b08e:	2000      	movs	r0, #0
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	2100      	movs	r1, #0
 800b094:	4a52      	ldr	r2, [pc, #328]	@ (800b1e0 <_tzset_unlocked_r+0x1dc>)
 800b096:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800b1dc <_tzset_unlocked_r+0x1d8>
 800b09a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b09e:	e9c8 2200 	strd	r2, r2, [r8]
 800b0a2:	224a      	movs	r2, #74	@ 0x4a
 800b0a4:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b0a8:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b0ac:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b0b0:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b0b4:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b0b8:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800b1d0 <_tzset_unlocked_r+0x1cc>
 800b0bc:	7222      	strb	r2, [r4, #8]
 800b0be:	f8ca 3000 	str.w	r3, [sl]
 800b0c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0c4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b0c8:	6523      	str	r3, [r4, #80]	@ 0x50
 800b0ca:	7833      	ldrb	r3, [r6, #0]
 800b0cc:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0ce:	bf08      	it	eq
 800b0d0:	3601      	addeq	r6, #1
 800b0d2:	7833      	ldrb	r3, [r6, #0]
 800b0d4:	2b3c      	cmp	r3, #60	@ 0x3c
 800b0d6:	d162      	bne.n	800b19e <_tzset_unlocked_r+0x19a>
 800b0d8:	1c75      	adds	r5, r6, #1
 800b0da:	4628      	mov	r0, r5
 800b0dc:	4a41      	ldr	r2, [pc, #260]	@ (800b1e4 <_tzset_unlocked_r+0x1e0>)
 800b0de:	4942      	ldr	r1, [pc, #264]	@ (800b1e8 <_tzset_unlocked_r+0x1e4>)
 800b0e0:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0e2:	f002 fb21 	bl	800d728 <siscanf>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	ddba      	ble.n	800b060 <_tzset_unlocked_r+0x5c>
 800b0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ec:	1eda      	subs	r2, r3, #3
 800b0ee:	2a07      	cmp	r2, #7
 800b0f0:	d8b6      	bhi.n	800b060 <_tzset_unlocked_r+0x5c>
 800b0f2:	5ceb      	ldrb	r3, [r5, r3]
 800b0f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0f6:	d1b3      	bne.n	800b060 <_tzset_unlocked_r+0x5c>
 800b0f8:	3602      	adds	r6, #2
 800b0fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0fc:	18f5      	adds	r5, r6, r3
 800b0fe:	5cf3      	ldrb	r3, [r6, r3]
 800b100:	2b2d      	cmp	r3, #45	@ 0x2d
 800b102:	d15a      	bne.n	800b1ba <_tzset_unlocked_r+0x1b6>
 800b104:	f04f 39ff 	mov.w	r9, #4294967295
 800b108:	3501      	adds	r5, #1
 800b10a:	2300      	movs	r3, #0
 800b10c:	af08      	add	r7, sp, #32
 800b10e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b112:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b116:	ab0a      	add	r3, sp, #40	@ 0x28
 800b118:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	f10d 031e 	add.w	r3, sp, #30
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	4628      	mov	r0, r5
 800b126:	4931      	ldr	r1, [pc, #196]	@ (800b1ec <_tzset_unlocked_r+0x1e8>)
 800b128:	ab0a      	add	r3, sp, #40	@ 0x28
 800b12a:	aa07      	add	r2, sp, #28
 800b12c:	f002 fafc 	bl	800d728 <siscanf>
 800b130:	2800      	cmp	r0, #0
 800b132:	dd95      	ble.n	800b060 <_tzset_unlocked_r+0x5c>
 800b134:	223c      	movs	r2, #60	@ 0x3c
 800b136:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b13a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b13e:	fb02 6603 	mla	r6, r2, r3, r6
 800b142:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b146:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b14a:	fb02 6603 	mla	r6, r2, r3, r6
 800b14e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b150:	fb09 f606 	mul.w	r6, r9, r6
 800b154:	eb05 0903 	add.w	r9, r5, r3
 800b158:	5ceb      	ldrb	r3, [r5, r3]
 800b15a:	2b3c      	cmp	r3, #60	@ 0x3c
 800b15c:	f040 80e8 	bne.w	800b330 <_tzset_unlocked_r+0x32c>
 800b160:	f109 0501 	add.w	r5, r9, #1
 800b164:	4628      	mov	r0, r5
 800b166:	4a22      	ldr	r2, [pc, #136]	@ (800b1f0 <_tzset_unlocked_r+0x1ec>)
 800b168:	491f      	ldr	r1, [pc, #124]	@ (800b1e8 <_tzset_unlocked_r+0x1e4>)
 800b16a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b16c:	f002 fadc 	bl	800d728 <siscanf>
 800b170:	2800      	cmp	r0, #0
 800b172:	dc41      	bgt.n	800b1f8 <_tzset_unlocked_r+0x1f4>
 800b174:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b178:	2b3e      	cmp	r3, #62	@ 0x3e
 800b17a:	d13d      	bne.n	800b1f8 <_tzset_unlocked_r+0x1f4>
 800b17c:	4b19      	ldr	r3, [pc, #100]	@ (800b1e4 <_tzset_unlocked_r+0x1e0>)
 800b17e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b180:	e9c8 3300 	strd	r3, r3, [r8]
 800b184:	f8ca 6000 	str.w	r6, [sl]
 800b188:	e76a      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b18a:	f7f4 ffe1 	bl	8000150 <strcmp>
 800b18e:	2800      	cmp	r0, #0
 800b190:	f47f af6d 	bne.w	800b06e <_tzset_unlocked_r+0x6a>
 800b194:	e764      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b196:	4631      	mov	r1, r6
 800b198:	f000 f9d1 	bl	800b53e <strcpy>
 800b19c:	e775      	b.n	800b08a <_tzset_unlocked_r+0x86>
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4a10      	ldr	r2, [pc, #64]	@ (800b1e4 <_tzset_unlocked_r+0x1e0>)
 800b1a2:	4914      	ldr	r1, [pc, #80]	@ (800b1f4 <_tzset_unlocked_r+0x1f0>)
 800b1a4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1a6:	f002 fabf 	bl	800d728 <siscanf>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f77f af58 	ble.w	800b060 <_tzset_unlocked_r+0x5c>
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b2:	3b03      	subs	r3, #3
 800b1b4:	2b07      	cmp	r3, #7
 800b1b6:	d9a0      	bls.n	800b0fa <_tzset_unlocked_r+0xf6>
 800b1b8:	e752      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b1ba:	2b2b      	cmp	r3, #43	@ 0x2b
 800b1bc:	f04f 0901 	mov.w	r9, #1
 800b1c0:	bf08      	it	eq
 800b1c2:	3501      	addeq	r5, #1
 800b1c4:	e7a1      	b.n	800b10a <_tzset_unlocked_r+0x106>
 800b1c6:	bf00      	nop
 800b1c8:	0800ee44 	.word	0x0800ee44
 800b1cc:	20000c1c 	.word	0x20000c1c
 800b1d0:	20000c38 	.word	0x20000c38
 800b1d4:	0800ee47 	.word	0x0800ee47
 800b1d8:	20000c3c 	.word	0x20000c3c
 800b1dc:	20000020 	.word	0x20000020
 800b1e0:	0800f17b 	.word	0x0800f17b
 800b1e4:	20000c2c 	.word	0x20000c2c
 800b1e8:	0800ee4b 	.word	0x0800ee4b
 800b1ec:	0800ee80 	.word	0x0800ee80
 800b1f0:	20000c20 	.word	0x20000c20
 800b1f4:	0800ee5e 	.word	0x0800ee5e
 800b1f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1fa:	1eda      	subs	r2, r3, #3
 800b1fc:	2a07      	cmp	r2, #7
 800b1fe:	f63f af2f 	bhi.w	800b060 <_tzset_unlocked_r+0x5c>
 800b202:	5ceb      	ldrb	r3, [r5, r3]
 800b204:	2b3e      	cmp	r3, #62	@ 0x3e
 800b206:	f47f af2b 	bne.w	800b060 <_tzset_unlocked_r+0x5c>
 800b20a:	f109 0902 	add.w	r9, r9, #2
 800b20e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b210:	eb09 0503 	add.w	r5, r9, r3
 800b214:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b218:	2b2d      	cmp	r3, #45	@ 0x2d
 800b21a:	f040 8098 	bne.w	800b34e <_tzset_unlocked_r+0x34a>
 800b21e:	f04f 39ff 	mov.w	r9, #4294967295
 800b222:	3501      	adds	r5, #1
 800b224:	2300      	movs	r3, #0
 800b226:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b22a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b22e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b232:	930a      	str	r3, [sp, #40]	@ 0x28
 800b234:	ab0a      	add	r3, sp, #40	@ 0x28
 800b236:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	f10d 031e 	add.w	r3, sp, #30
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4628      	mov	r0, r5
 800b244:	497a      	ldr	r1, [pc, #488]	@ (800b430 <_tzset_unlocked_r+0x42c>)
 800b246:	ab0a      	add	r3, sp, #40	@ 0x28
 800b248:	aa07      	add	r2, sp, #28
 800b24a:	f002 fa6d 	bl	800d728 <siscanf>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f300 8083 	bgt.w	800b35a <_tzset_unlocked_r+0x356>
 800b254:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b258:	4627      	mov	r7, r4
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b262:	441d      	add	r5, r3
 800b264:	782b      	ldrb	r3, [r5, #0]
 800b266:	2b2c      	cmp	r3, #44	@ 0x2c
 800b268:	bf08      	it	eq
 800b26a:	3501      	addeq	r5, #1
 800b26c:	f895 9000 	ldrb.w	r9, [r5]
 800b270:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b274:	f040 8084 	bne.w	800b380 <_tzset_unlocked_r+0x37c>
 800b278:	ab0a      	add	r3, sp, #40	@ 0x28
 800b27a:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b27e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b282:	aa09      	add	r2, sp, #36	@ 0x24
 800b284:	9200      	str	r2, [sp, #0]
 800b286:	4628      	mov	r0, r5
 800b288:	496a      	ldr	r1, [pc, #424]	@ (800b434 <_tzset_unlocked_r+0x430>)
 800b28a:	9303      	str	r3, [sp, #12]
 800b28c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b290:	f002 fa4a 	bl	800d728 <siscanf>
 800b294:	2803      	cmp	r0, #3
 800b296:	f47f aee3 	bne.w	800b060 <_tzset_unlocked_r+0x5c>
 800b29a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b29e:	1e4b      	subs	r3, r1, #1
 800b2a0:	2b0b      	cmp	r3, #11
 800b2a2:	f63f aedd 	bhi.w	800b060 <_tzset_unlocked_r+0x5c>
 800b2a6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b2aa:	1e53      	subs	r3, r2, #1
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	f63f aed7 	bhi.w	800b060 <_tzset_unlocked_r+0x5c>
 800b2b2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b2b6:	2b06      	cmp	r3, #6
 800b2b8:	f63f aed2 	bhi.w	800b060 <_tzset_unlocked_r+0x5c>
 800b2bc:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b2c0:	f887 9008 	strb.w	r9, [r7, #8]
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c8:	eb05 0903 	add.w	r9, r5, r3
 800b2cc:	2500      	movs	r5, #0
 800b2ce:	f04f 0302 	mov.w	r3, #2
 800b2d2:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b2d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b2da:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b2de:	950a      	str	r5, [sp, #40]	@ 0x28
 800b2e0:	f899 3000 	ldrb.w	r3, [r9]
 800b2e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2e6:	d177      	bne.n	800b3d8 <_tzset_unlocked_r+0x3d4>
 800b2e8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2ea:	aa08      	add	r2, sp, #32
 800b2ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2f0:	f10d 021e 	add.w	r2, sp, #30
 800b2f4:	9200      	str	r2, [sp, #0]
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	494f      	ldr	r1, [pc, #316]	@ (800b438 <_tzset_unlocked_r+0x434>)
 800b2fa:	9303      	str	r3, [sp, #12]
 800b2fc:	aa07      	add	r2, sp, #28
 800b2fe:	f002 fa13 	bl	800d728 <siscanf>
 800b302:	42a8      	cmp	r0, r5
 800b304:	dc68      	bgt.n	800b3d8 <_tzset_unlocked_r+0x3d4>
 800b306:	214a      	movs	r1, #74	@ 0x4a
 800b308:	2200      	movs	r2, #0
 800b30a:	2300      	movs	r3, #0
 800b30c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b310:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b314:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b318:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b31c:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b320:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b324:	7221      	strb	r1, [r4, #8]
 800b326:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b328:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b32c:	6525      	str	r5, [r4, #80]	@ 0x50
 800b32e:	e697      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b330:	4648      	mov	r0, r9
 800b332:	4a42      	ldr	r2, [pc, #264]	@ (800b43c <_tzset_unlocked_r+0x438>)
 800b334:	4942      	ldr	r1, [pc, #264]	@ (800b440 <_tzset_unlocked_r+0x43c>)
 800b336:	ab0a      	add	r3, sp, #40	@ 0x28
 800b338:	f002 f9f6 	bl	800d728 <siscanf>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f77f af1d 	ble.w	800b17c <_tzset_unlocked_r+0x178>
 800b342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b344:	3b03      	subs	r3, #3
 800b346:	2b07      	cmp	r3, #7
 800b348:	f67f af61 	bls.w	800b20e <_tzset_unlocked_r+0x20a>
 800b34c:	e688      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b34e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b350:	f04f 0901 	mov.w	r9, #1
 800b354:	bf08      	it	eq
 800b356:	3501      	addeq	r5, #1
 800b358:	e764      	b.n	800b224 <_tzset_unlocked_r+0x220>
 800b35a:	213c      	movs	r1, #60	@ 0x3c
 800b35c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b360:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b364:	fb01 3302 	mla	r3, r1, r2, r3
 800b368:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b36c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b370:	fb01 3302 	mla	r3, r1, r2, r3
 800b374:	fb09 f303 	mul.w	r3, r9, r3
 800b378:	e76e      	b.n	800b258 <_tzset_unlocked_r+0x254>
 800b37a:	f04f 0b01 	mov.w	fp, #1
 800b37e:	e771      	b.n	800b264 <_tzset_unlocked_r+0x260>
 800b380:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b384:	bf0a      	itet	eq
 800b386:	464b      	moveq	r3, r9
 800b388:	2344      	movne	r3, #68	@ 0x44
 800b38a:	3501      	addeq	r5, #1
 800b38c:	220a      	movs	r2, #10
 800b38e:	4628      	mov	r0, r5
 800b390:	a90b      	add	r1, sp, #44	@ 0x2c
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	f002 f908 	bl	800d5a8 <strtoul>
 800b398:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b39c:	9b05      	ldr	r3, [sp, #20]
 800b39e:	45a9      	cmp	r9, r5
 800b3a0:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b3a4:	d114      	bne.n	800b3d0 <_tzset_unlocked_r+0x3cc>
 800b3a6:	234d      	movs	r3, #77	@ 0x4d
 800b3a8:	f1bb 0f00 	cmp.w	fp, #0
 800b3ac:	d107      	bne.n	800b3be <_tzset_unlocked_r+0x3ba>
 800b3ae:	2103      	movs	r1, #3
 800b3b0:	7223      	strb	r3, [r4, #8]
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	f8c4 b014 	str.w	fp, [r4, #20]
 800b3b8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b3bc:	e786      	b.n	800b2cc <_tzset_unlocked_r+0x2c8>
 800b3be:	220b      	movs	r2, #11
 800b3c0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b3ce:	e77d      	b.n	800b2cc <_tzset_unlocked_r+0x2c8>
 800b3d0:	b280      	uxth	r0, r0
 800b3d2:	723b      	strb	r3, [r7, #8]
 800b3d4:	6178      	str	r0, [r7, #20]
 800b3d6:	e779      	b.n	800b2cc <_tzset_unlocked_r+0x2c8>
 800b3d8:	213c      	movs	r1, #60	@ 0x3c
 800b3da:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b3de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b3e2:	3728      	adds	r7, #40	@ 0x28
 800b3e4:	fb01 3302 	mla	r3, r1, r2, r3
 800b3e8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b3ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b3f0:	fb01 3302 	mla	r3, r1, r2, r3
 800b3f4:	f847 3c10 	str.w	r3, [r7, #-16]
 800b3f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b3fa:	444d      	add	r5, r9
 800b3fc:	f1bb 0f00 	cmp.w	fp, #0
 800b400:	d0bb      	beq.n	800b37a <_tzset_unlocked_r+0x376>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	6860      	ldr	r0, [r4, #4]
 800b406:	6523      	str	r3, [r4, #80]	@ 0x50
 800b408:	4b0e      	ldr	r3, [pc, #56]	@ (800b444 <_tzset_unlocked_r+0x440>)
 800b40a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b40c:	f8c8 3000 	str.w	r3, [r8]
 800b410:	4b0a      	ldr	r3, [pc, #40]	@ (800b43c <_tzset_unlocked_r+0x438>)
 800b412:	f8c8 3004 	str.w	r3, [r8, #4]
 800b416:	f7ff fd3b 	bl	800ae90 <__tzcalc_limits>
 800b41a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b41c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b41e:	f8ca 2000 	str.w	r2, [sl]
 800b422:	1a9b      	subs	r3, r3, r2
 800b424:	bf18      	it	ne
 800b426:	2301      	movne	r3, #1
 800b428:	4a07      	ldr	r2, [pc, #28]	@ (800b448 <_tzset_unlocked_r+0x444>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	e618      	b.n	800b060 <_tzset_unlocked_r+0x5c>
 800b42e:	bf00      	nop
 800b430:	0800ee80 	.word	0x0800ee80
 800b434:	0800ee6c 	.word	0x0800ee6c
 800b438:	0800ee7f 	.word	0x0800ee7f
 800b43c:	20000c20 	.word	0x20000c20
 800b440:	0800ee5e 	.word	0x0800ee5e
 800b444:	20000c2c 	.word	0x20000c2c
 800b448:	20000c3c 	.word	0x20000c3c

0800b44c <_localeconv_r>:
 800b44c:	4800      	ldr	r0, [pc, #0]	@ (800b450 <_localeconv_r+0x4>)
 800b44e:	4770      	bx	lr
 800b450:	20000118 	.word	0x20000118

0800b454 <_close_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	2300      	movs	r3, #0
 800b458:	4d05      	ldr	r5, [pc, #20]	@ (800b470 <_close_r+0x1c>)
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	602b      	str	r3, [r5, #0]
 800b460:	f7f9 fa7b 	bl	800495a <_close>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_close_r+0x1a>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_close_r+0x1a>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20000c40 	.word	0x20000c40

0800b474 <_lseek_r>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	2200      	movs	r2, #0
 800b47e:	4d05      	ldr	r5, [pc, #20]	@ (800b494 <_lseek_r+0x20>)
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f7f9 fa8d 	bl	80049a2 <_lseek>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_lseek_r+0x1e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_lseek_r+0x1e>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20000c40 	.word	0x20000c40

0800b498 <_read_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4d05      	ldr	r5, [pc, #20]	@ (800b4b8 <_read_r+0x20>)
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f7f9 fa1e 	bl	80048e8 <_read>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_read_r+0x1e>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_read_r+0x1e>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20000c40 	.word	0x20000c40

0800b4bc <_write_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4d05      	ldr	r5, [pc, #20]	@ (800b4dc <_write_r+0x20>)
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f9 fa29 	bl	8004922 <_write>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_write_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_write_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20000c40 	.word	0x20000c40

0800b4e0 <__errno>:
 800b4e0:	4b01      	ldr	r3, [pc, #4]	@ (800b4e8 <__errno+0x8>)
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000194 	.word	0x20000194

0800b4ec <__libc_init_array>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	2600      	movs	r6, #0
 800b4f0:	4d0c      	ldr	r5, [pc, #48]	@ (800b524 <__libc_init_array+0x38>)
 800b4f2:	4c0d      	ldr	r4, [pc, #52]	@ (800b528 <__libc_init_array+0x3c>)
 800b4f4:	1b64      	subs	r4, r4, r5
 800b4f6:	10a4      	asrs	r4, r4, #2
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	d109      	bne.n	800b510 <__libc_init_array+0x24>
 800b4fc:	f003 fb6e 	bl	800ebdc <_init>
 800b500:	2600      	movs	r6, #0
 800b502:	4d0a      	ldr	r5, [pc, #40]	@ (800b52c <__libc_init_array+0x40>)
 800b504:	4c0a      	ldr	r4, [pc, #40]	@ (800b530 <__libc_init_array+0x44>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	d105      	bne.n	800b51a <__libc_init_array+0x2e>
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	f855 3b04 	ldr.w	r3, [r5], #4
 800b514:	4798      	blx	r3
 800b516:	3601      	adds	r6, #1
 800b518:	e7ee      	b.n	800b4f8 <__libc_init_array+0xc>
 800b51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51e:	4798      	blx	r3
 800b520:	3601      	adds	r6, #1
 800b522:	e7f2      	b.n	800b50a <__libc_init_array+0x1e>
 800b524:	0800f1e8 	.word	0x0800f1e8
 800b528:	0800f1e8 	.word	0x0800f1e8
 800b52c:	0800f1e8 	.word	0x0800f1e8
 800b530:	0800f1ec 	.word	0x0800f1ec

0800b534 <__retarget_lock_init_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_acquire>:
 800b536:	4770      	bx	lr

0800b538 <__retarget_lock_acquire_recursive>:
 800b538:	4770      	bx	lr

0800b53a <__retarget_lock_release>:
 800b53a:	4770      	bx	lr

0800b53c <__retarget_lock_release_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <strcpy>:
 800b53e:	4603      	mov	r3, r0
 800b540:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b544:	f803 2b01 	strb.w	r2, [r3], #1
 800b548:	2a00      	cmp	r2, #0
 800b54a:	d1f9      	bne.n	800b540 <strcpy+0x2>
 800b54c:	4770      	bx	lr

0800b54e <memchr>:
 800b54e:	4603      	mov	r3, r0
 800b550:	b510      	push	{r4, lr}
 800b552:	b2c9      	uxtb	r1, r1
 800b554:	4402      	add	r2, r0
 800b556:	4293      	cmp	r3, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	d101      	bne.n	800b560 <memchr+0x12>
 800b55c:	2000      	movs	r0, #0
 800b55e:	e003      	b.n	800b568 <memchr+0x1a>
 800b560:	7804      	ldrb	r4, [r0, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	428c      	cmp	r4, r1
 800b566:	d1f6      	bne.n	800b556 <memchr+0x8>
 800b568:	bd10      	pop	{r4, pc}

0800b56a <memcpy>:
 800b56a:	440a      	add	r2, r1
 800b56c:	4291      	cmp	r1, r2
 800b56e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b572:	d100      	bne.n	800b576 <memcpy+0xc>
 800b574:	4770      	bx	lr
 800b576:	b510      	push	{r4, lr}
 800b578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b57c:	4291      	cmp	r1, r2
 800b57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b582:	d1f9      	bne.n	800b578 <memcpy+0xe>
 800b584:	bd10      	pop	{r4, pc}
	...

0800b588 <nan>:
 800b588:	2000      	movs	r0, #0
 800b58a:	4901      	ldr	r1, [pc, #4]	@ (800b590 <nan+0x8>)
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	7ff80000 	.word	0x7ff80000

0800b594 <nanf>:
 800b594:	4800      	ldr	r0, [pc, #0]	@ (800b598 <nanf+0x4>)
 800b596:	4770      	bx	lr
 800b598:	7fc00000 	.word	0x7fc00000

0800b59c <div>:
 800b59c:	b510      	push	{r4, lr}
 800b59e:	fb91 f4f2 	sdiv	r4, r1, r2
 800b5a2:	fb02 1114 	mls	r1, r2, r4, r1
 800b5a6:	6004      	str	r4, [r0, #0]
 800b5a8:	6041      	str	r1, [r0, #4]
 800b5aa:	bd10      	pop	{r4, pc}

0800b5ac <quorem>:
 800b5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	6903      	ldr	r3, [r0, #16]
 800b5b2:	690c      	ldr	r4, [r1, #16]
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	42a3      	cmp	r3, r4
 800b5b8:	db7e      	blt.n	800b6b8 <quorem+0x10c>
 800b5ba:	3c01      	subs	r4, #1
 800b5bc:	00a3      	lsls	r3, r4, #2
 800b5be:	f100 0514 	add.w	r5, r0, #20
 800b5c2:	f101 0814 	add.w	r8, r1, #20
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e2:	d32e      	bcc.n	800b642 <quorem+0x96>
 800b5e4:	f04f 0a00 	mov.w	sl, #0
 800b5e8:	46c4      	mov	ip, r8
 800b5ea:	46ae      	mov	lr, r5
 800b5ec:	46d3      	mov	fp, sl
 800b5ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5f2:	b298      	uxth	r0, r3
 800b5f4:	fb06 a000 	mla	r0, r6, r0, sl
 800b5f8:	0c1b      	lsrs	r3, r3, #16
 800b5fa:	0c02      	lsrs	r2, r0, #16
 800b5fc:	fb06 2303 	mla	r3, r6, r3, r2
 800b600:	f8de 2000 	ldr.w	r2, [lr]
 800b604:	b280      	uxth	r0, r0
 800b606:	b292      	uxth	r2, r2
 800b608:	1a12      	subs	r2, r2, r0
 800b60a:	445a      	add	r2, fp
 800b60c:	f8de 0000 	ldr.w	r0, [lr]
 800b610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b614:	b29b      	uxth	r3, r3
 800b616:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b61a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b61e:	b292      	uxth	r2, r2
 800b620:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b624:	45e1      	cmp	r9, ip
 800b626:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b62a:	f84e 2b04 	str.w	r2, [lr], #4
 800b62e:	d2de      	bcs.n	800b5ee <quorem+0x42>
 800b630:	9b00      	ldr	r3, [sp, #0]
 800b632:	58eb      	ldr	r3, [r5, r3]
 800b634:	b92b      	cbnz	r3, 800b642 <quorem+0x96>
 800b636:	9b01      	ldr	r3, [sp, #4]
 800b638:	3b04      	subs	r3, #4
 800b63a:	429d      	cmp	r5, r3
 800b63c:	461a      	mov	r2, r3
 800b63e:	d32f      	bcc.n	800b6a0 <quorem+0xf4>
 800b640:	613c      	str	r4, [r7, #16]
 800b642:	4638      	mov	r0, r7
 800b644:	f001 fd5c 	bl	800d100 <__mcmp>
 800b648:	2800      	cmp	r0, #0
 800b64a:	db25      	blt.n	800b698 <quorem+0xec>
 800b64c:	4629      	mov	r1, r5
 800b64e:	2000      	movs	r0, #0
 800b650:	f858 2b04 	ldr.w	r2, [r8], #4
 800b654:	f8d1 c000 	ldr.w	ip, [r1]
 800b658:	fa1f fe82 	uxth.w	lr, r2
 800b65c:	fa1f f38c 	uxth.w	r3, ip
 800b660:	eba3 030e 	sub.w	r3, r3, lr
 800b664:	4403      	add	r3, r0
 800b666:	0c12      	lsrs	r2, r2, #16
 800b668:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b66c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b670:	b29b      	uxth	r3, r3
 800b672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b676:	45c1      	cmp	r9, r8
 800b678:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b67c:	f841 3b04 	str.w	r3, [r1], #4
 800b680:	d2e6      	bcs.n	800b650 <quorem+0xa4>
 800b682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b68a:	b922      	cbnz	r2, 800b696 <quorem+0xea>
 800b68c:	3b04      	subs	r3, #4
 800b68e:	429d      	cmp	r5, r3
 800b690:	461a      	mov	r2, r3
 800b692:	d30b      	bcc.n	800b6ac <quorem+0x100>
 800b694:	613c      	str	r4, [r7, #16]
 800b696:	3601      	adds	r6, #1
 800b698:	4630      	mov	r0, r6
 800b69a:	b003      	add	sp, #12
 800b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a0:	6812      	ldr	r2, [r2, #0]
 800b6a2:	3b04      	subs	r3, #4
 800b6a4:	2a00      	cmp	r2, #0
 800b6a6:	d1cb      	bne.n	800b640 <quorem+0x94>
 800b6a8:	3c01      	subs	r4, #1
 800b6aa:	e7c6      	b.n	800b63a <quorem+0x8e>
 800b6ac:	6812      	ldr	r2, [r2, #0]
 800b6ae:	3b04      	subs	r3, #4
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	d1ef      	bne.n	800b694 <quorem+0xe8>
 800b6b4:	3c01      	subs	r4, #1
 800b6b6:	e7ea      	b.n	800b68e <quorem+0xe2>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e7ee      	b.n	800b69a <quorem+0xee>
 800b6bc:	0000      	movs	r0, r0
	...

0800b6c0 <_dtoa_r>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	69c7      	ldr	r7, [r0, #28]
 800b6ca:	b097      	sub	sp, #92	@ 0x5c
 800b6cc:	4683      	mov	fp, r0
 800b6ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b6d4:	b97f      	cbnz	r7, 800b6f6 <_dtoa_r+0x36>
 800b6d6:	2010      	movs	r0, #16
 800b6d8:	f001 f980 	bl	800c9dc <malloc>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6e2:	b920      	cbnz	r0, 800b6ee <_dtoa_r+0x2e>
 800b6e4:	21ef      	movs	r1, #239	@ 0xef
 800b6e6:	4ba8      	ldr	r3, [pc, #672]	@ (800b988 <_dtoa_r+0x2c8>)
 800b6e8:	48a8      	ldr	r0, [pc, #672]	@ (800b98c <_dtoa_r+0x2cc>)
 800b6ea:	f002 f85b 	bl	800d7a4 <__assert_func>
 800b6ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6f2:	6007      	str	r7, [r0, #0]
 800b6f4:	60c7      	str	r7, [r0, #12]
 800b6f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6fa:	6819      	ldr	r1, [r3, #0]
 800b6fc:	b159      	cbz	r1, 800b716 <_dtoa_r+0x56>
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	2301      	movs	r3, #1
 800b702:	4093      	lsls	r3, r2
 800b704:	604a      	str	r2, [r1, #4]
 800b706:	608b      	str	r3, [r1, #8]
 800b708:	4658      	mov	r0, fp
 800b70a:	f001 fa77 	bl	800cbfc <_Bfree>
 800b70e:	2200      	movs	r2, #0
 800b710:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	1e2b      	subs	r3, r5, #0
 800b718:	bfaf      	iteee	ge
 800b71a:	2300      	movge	r3, #0
 800b71c:	2201      	movlt	r2, #1
 800b71e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b722:	9303      	strlt	r3, [sp, #12]
 800b724:	bfa8      	it	ge
 800b726:	6033      	strge	r3, [r6, #0]
 800b728:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b72c:	4b98      	ldr	r3, [pc, #608]	@ (800b990 <_dtoa_r+0x2d0>)
 800b72e:	bfb8      	it	lt
 800b730:	6032      	strlt	r2, [r6, #0]
 800b732:	ea33 0308 	bics.w	r3, r3, r8
 800b736:	d112      	bne.n	800b75e <_dtoa_r+0x9e>
 800b738:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b73c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b744:	4323      	orrs	r3, r4
 800b746:	f000 8550 	beq.w	800c1ea <_dtoa_r+0xb2a>
 800b74a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b74c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b994 <_dtoa_r+0x2d4>
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 8552 	beq.w	800c1fa <_dtoa_r+0xb3a>
 800b756:	f10a 0303 	add.w	r3, sl, #3
 800b75a:	f000 bd4c 	b.w	800c1f6 <_dtoa_r+0xb36>
 800b75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b762:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b76a:	2200      	movs	r2, #0
 800b76c:	2300      	movs	r3, #0
 800b76e:	f7f5 f925 	bl	80009bc <__aeabi_dcmpeq>
 800b772:	4607      	mov	r7, r0
 800b774:	b158      	cbz	r0, 800b78e <_dtoa_r+0xce>
 800b776:	2301      	movs	r3, #1
 800b778:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b77e:	b113      	cbz	r3, 800b786 <_dtoa_r+0xc6>
 800b780:	4b85      	ldr	r3, [pc, #532]	@ (800b998 <_dtoa_r+0x2d8>)
 800b782:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b99c <_dtoa_r+0x2dc>
 800b78a:	f000 bd36 	b.w	800c1fa <_dtoa_r+0xb3a>
 800b78e:	ab14      	add	r3, sp, #80	@ 0x50
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	ab15      	add	r3, sp, #84	@ 0x54
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	4658      	mov	r0, fp
 800b798:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b79c:	f001 fdc8 	bl	800d330 <__d2b>
 800b7a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b7a4:	4681      	mov	r9, r0
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	d077      	beq.n	800b89a <_dtoa_r+0x1da>
 800b7aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7c0:	9712      	str	r7, [sp, #72]	@ 0x48
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4b76      	ldr	r3, [pc, #472]	@ (800b9a0 <_dtoa_r+0x2e0>)
 800b7c8:	f7f4 fcd8 	bl	800017c <__aeabi_dsub>
 800b7cc:	a368      	add	r3, pc, #416	@ (adr r3, 800b970 <_dtoa_r+0x2b0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fe8b 	bl	80004ec <__aeabi_dmul>
 800b7d6:	a368      	add	r3, pc, #416	@ (adr r3, 800b978 <_dtoa_r+0x2b8>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fcd0 	bl	8000180 <__adddf3>
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	f7f4 fe17 	bl	8000418 <__aeabi_i2d>
 800b7ea:	a365      	add	r3, pc, #404	@ (adr r3, 800b980 <_dtoa_r+0x2c0>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 fe7c 	bl	80004ec <__aeabi_dmul>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	f7f4 fcc0 	bl	8000180 <__adddf3>
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	f7f5 f922 	bl	8000a4c <__aeabi_d2iz>
 800b808:	2200      	movs	r2, #0
 800b80a:	4607      	mov	r7, r0
 800b80c:	2300      	movs	r3, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f8dd 	bl	80009d0 <__aeabi_dcmplt>
 800b816:	b140      	cbz	r0, 800b82a <_dtoa_r+0x16a>
 800b818:	4638      	mov	r0, r7
 800b81a:	f7f4 fdfd 	bl	8000418 <__aeabi_i2d>
 800b81e:	4622      	mov	r2, r4
 800b820:	462b      	mov	r3, r5
 800b822:	f7f5 f8cb 	bl	80009bc <__aeabi_dcmpeq>
 800b826:	b900      	cbnz	r0, 800b82a <_dtoa_r+0x16a>
 800b828:	3f01      	subs	r7, #1
 800b82a:	2f16      	cmp	r7, #22
 800b82c:	d853      	bhi.n	800b8d6 <_dtoa_r+0x216>
 800b82e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b832:	4b5c      	ldr	r3, [pc, #368]	@ (800b9a4 <_dtoa_r+0x2e4>)
 800b834:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f5 f8c8 	bl	80009d0 <__aeabi_dcmplt>
 800b840:	2800      	cmp	r0, #0
 800b842:	d04a      	beq.n	800b8da <_dtoa_r+0x21a>
 800b844:	2300      	movs	r3, #0
 800b846:	3f01      	subs	r7, #1
 800b848:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b84a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b84c:	1b9b      	subs	r3, r3, r6
 800b84e:	1e5a      	subs	r2, r3, #1
 800b850:	bf46      	itte	mi
 800b852:	f1c3 0801 	rsbmi	r8, r3, #1
 800b856:	2300      	movmi	r3, #0
 800b858:	f04f 0800 	movpl.w	r8, #0
 800b85c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b85e:	bf48      	it	mi
 800b860:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b862:	2f00      	cmp	r7, #0
 800b864:	db3b      	blt.n	800b8de <_dtoa_r+0x21e>
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	970e      	str	r7, [sp, #56]	@ 0x38
 800b86a:	443b      	add	r3, r7
 800b86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b86e:	2300      	movs	r3, #0
 800b870:	930a      	str	r3, [sp, #40]	@ 0x28
 800b872:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b874:	2b09      	cmp	r3, #9
 800b876:	d866      	bhi.n	800b946 <_dtoa_r+0x286>
 800b878:	2b05      	cmp	r3, #5
 800b87a:	bfc4      	itt	gt
 800b87c:	3b04      	subgt	r3, #4
 800b87e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b880:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b882:	bfc8      	it	gt
 800b884:	2400      	movgt	r4, #0
 800b886:	f1a3 0302 	sub.w	r3, r3, #2
 800b88a:	bfd8      	it	le
 800b88c:	2401      	movle	r4, #1
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d864      	bhi.n	800b95c <_dtoa_r+0x29c>
 800b892:	e8df f003 	tbb	[pc, r3]
 800b896:	382b      	.short	0x382b
 800b898:	5636      	.short	0x5636
 800b89a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b89e:	441e      	add	r6, r3
 800b8a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8a4:	2b20      	cmp	r3, #32
 800b8a6:	bfc1      	itttt	gt
 800b8a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b8ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b8b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b8b8:	bfd6      	itet	le
 800b8ba:	f1c3 0320 	rsble	r3, r3, #32
 800b8be:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8c2:	fa04 f003 	lslle.w	r0, r4, r3
 800b8c6:	f7f4 fd97 	bl	80003f8 <__aeabi_ui2d>
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8d0:	3e01      	subs	r6, #1
 800b8d2:	9212      	str	r2, [sp, #72]	@ 0x48
 800b8d4:	e775      	b.n	800b7c2 <_dtoa_r+0x102>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e7b6      	b.n	800b848 <_dtoa_r+0x188>
 800b8da:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b8dc:	e7b5      	b.n	800b84a <_dtoa_r+0x18a>
 800b8de:	427b      	negs	r3, r7
 800b8e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	eba8 0807 	sub.w	r8, r8, r7
 800b8e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8ea:	e7c2      	b.n	800b872 <_dtoa_r+0x1b2>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dc35      	bgt.n	800b962 <_dtoa_r+0x2a2>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b8fe:	9221      	str	r2, [sp, #132]	@ 0x84
 800b900:	e00b      	b.n	800b91a <_dtoa_r+0x25a>
 800b902:	2301      	movs	r3, #1
 800b904:	e7f3      	b.n	800b8ee <_dtoa_r+0x22e>
 800b906:	2300      	movs	r3, #0
 800b908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b90a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b90c:	18fb      	adds	r3, r7, r3
 800b90e:	9308      	str	r3, [sp, #32]
 800b910:	3301      	adds	r3, #1
 800b912:	2b01      	cmp	r3, #1
 800b914:	9307      	str	r3, [sp, #28]
 800b916:	bfb8      	it	lt
 800b918:	2301      	movlt	r3, #1
 800b91a:	2100      	movs	r1, #0
 800b91c:	2204      	movs	r2, #4
 800b91e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b922:	f102 0514 	add.w	r5, r2, #20
 800b926:	429d      	cmp	r5, r3
 800b928:	d91f      	bls.n	800b96a <_dtoa_r+0x2aa>
 800b92a:	6041      	str	r1, [r0, #4]
 800b92c:	4658      	mov	r0, fp
 800b92e:	f001 f925 	bl	800cb7c <_Balloc>
 800b932:	4682      	mov	sl, r0
 800b934:	2800      	cmp	r0, #0
 800b936:	d139      	bne.n	800b9ac <_dtoa_r+0x2ec>
 800b938:	4602      	mov	r2, r0
 800b93a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b93e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a8 <_dtoa_r+0x2e8>)
 800b940:	e6d2      	b.n	800b6e8 <_dtoa_r+0x28>
 800b942:	2301      	movs	r3, #1
 800b944:	e7e0      	b.n	800b908 <_dtoa_r+0x248>
 800b946:	2401      	movs	r4, #1
 800b948:	2300      	movs	r3, #0
 800b94a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b94c:	9320      	str	r3, [sp, #128]	@ 0x80
 800b94e:	f04f 33ff 	mov.w	r3, #4294967295
 800b952:	2200      	movs	r2, #0
 800b954:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b958:	2312      	movs	r3, #18
 800b95a:	e7d0      	b.n	800b8fe <_dtoa_r+0x23e>
 800b95c:	2301      	movs	r3, #1
 800b95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b960:	e7f5      	b.n	800b94e <_dtoa_r+0x28e>
 800b962:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b964:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b968:	e7d7      	b.n	800b91a <_dtoa_r+0x25a>
 800b96a:	3101      	adds	r1, #1
 800b96c:	0052      	lsls	r2, r2, #1
 800b96e:	e7d8      	b.n	800b922 <_dtoa_r+0x262>
 800b970:	636f4361 	.word	0x636f4361
 800b974:	3fd287a7 	.word	0x3fd287a7
 800b978:	8b60c8b3 	.word	0x8b60c8b3
 800b97c:	3fc68a28 	.word	0x3fc68a28
 800b980:	509f79fb 	.word	0x509f79fb
 800b984:	3fd34413 	.word	0x3fd34413
 800b988:	0800eea7 	.word	0x0800eea7
 800b98c:	0800eebe 	.word	0x0800eebe
 800b990:	7ff00000 	.word	0x7ff00000
 800b994:	0800eea3 	.word	0x0800eea3
 800b998:	0800f197 	.word	0x0800f197
 800b99c:	0800f196 	.word	0x0800f196
 800b9a0:	3ff80000 	.word	0x3ff80000
 800b9a4:	0800f018 	.word	0x0800f018
 800b9a8:	0800ef16 	.word	0x0800ef16
 800b9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9b0:	6018      	str	r0, [r3, #0]
 800b9b2:	9b07      	ldr	r3, [sp, #28]
 800b9b4:	2b0e      	cmp	r3, #14
 800b9b6:	f200 80a4 	bhi.w	800bb02 <_dtoa_r+0x442>
 800b9ba:	2c00      	cmp	r4, #0
 800b9bc:	f000 80a1 	beq.w	800bb02 <_dtoa_r+0x442>
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	dd33      	ble.n	800ba2c <_dtoa_r+0x36c>
 800b9c4:	4b86      	ldr	r3, [pc, #536]	@ (800bbe0 <_dtoa_r+0x520>)
 800b9c6:	f007 020f 	and.w	r2, r7, #15
 800b9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ce:	05f8      	lsls	r0, r7, #23
 800b9d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9dc:	d516      	bpl.n	800ba0c <_dtoa_r+0x34c>
 800b9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9e2:	4b80      	ldr	r3, [pc, #512]	@ (800bbe4 <_dtoa_r+0x524>)
 800b9e4:	2603      	movs	r6, #3
 800b9e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9ea:	f7f4 fea9 	bl	8000740 <__aeabi_ddiv>
 800b9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f2:	f004 040f 	and.w	r4, r4, #15
 800b9f6:	4d7b      	ldr	r5, [pc, #492]	@ (800bbe4 <_dtoa_r+0x524>)
 800b9f8:	b954      	cbnz	r4, 800ba10 <_dtoa_r+0x350>
 800b9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba02:	f7f4 fe9d 	bl	8000740 <__aeabi_ddiv>
 800ba06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba0a:	e028      	b.n	800ba5e <_dtoa_r+0x39e>
 800ba0c:	2602      	movs	r6, #2
 800ba0e:	e7f2      	b.n	800b9f6 <_dtoa_r+0x336>
 800ba10:	07e1      	lsls	r1, r4, #31
 800ba12:	d508      	bpl.n	800ba26 <_dtoa_r+0x366>
 800ba14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba1c:	f7f4 fd66 	bl	80004ec <__aeabi_dmul>
 800ba20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba24:	3601      	adds	r6, #1
 800ba26:	1064      	asrs	r4, r4, #1
 800ba28:	3508      	adds	r5, #8
 800ba2a:	e7e5      	b.n	800b9f8 <_dtoa_r+0x338>
 800ba2c:	f000 80d2 	beq.w	800bbd4 <_dtoa_r+0x514>
 800ba30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba34:	427c      	negs	r4, r7
 800ba36:	4b6a      	ldr	r3, [pc, #424]	@ (800bbe0 <_dtoa_r+0x520>)
 800ba38:	f004 020f 	and.w	r2, r4, #15
 800ba3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fd52 	bl	80004ec <__aeabi_dmul>
 800ba48:	2602      	movs	r6, #2
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba50:	4d64      	ldr	r5, [pc, #400]	@ (800bbe4 <_dtoa_r+0x524>)
 800ba52:	1124      	asrs	r4, r4, #4
 800ba54:	2c00      	cmp	r4, #0
 800ba56:	f040 80b2 	bne.w	800bbbe <_dtoa_r+0x4fe>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1d3      	bne.n	800ba06 <_dtoa_r+0x346>
 800ba5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 80b7 	beq.w	800bbd8 <_dtoa_r+0x518>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4b5d      	ldr	r3, [pc, #372]	@ (800bbe8 <_dtoa_r+0x528>)
 800ba72:	f7f4 ffad 	bl	80009d0 <__aeabi_dcmplt>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f000 80ae 	beq.w	800bbd8 <_dtoa_r+0x518>
 800ba7c:	9b07      	ldr	r3, [sp, #28]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80aa 	beq.w	800bbd8 <_dtoa_r+0x518>
 800ba84:	9b08      	ldr	r3, [sp, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd37      	ble.n	800bafa <_dtoa_r+0x43a>
 800ba8a:	1e7b      	subs	r3, r7, #1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	2200      	movs	r2, #0
 800ba92:	4629      	mov	r1, r5
 800ba94:	4b55      	ldr	r3, [pc, #340]	@ (800bbec <_dtoa_r+0x52c>)
 800ba96:	f7f4 fd29 	bl	80004ec <__aeabi_dmul>
 800ba9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba9e:	9c08      	ldr	r4, [sp, #32]
 800baa0:	3601      	adds	r6, #1
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7f4 fcb8 	bl	8000418 <__aeabi_i2d>
 800baa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baac:	f7f4 fd1e 	bl	80004ec <__aeabi_dmul>
 800bab0:	2200      	movs	r2, #0
 800bab2:	4b4f      	ldr	r3, [pc, #316]	@ (800bbf0 <_dtoa_r+0x530>)
 800bab4:	f7f4 fb64 	bl	8000180 <__adddf3>
 800bab8:	4605      	mov	r5, r0
 800baba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800babe:	2c00      	cmp	r4, #0
 800bac0:	f040 809a 	bne.w	800bbf8 <_dtoa_r+0x538>
 800bac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac8:	2200      	movs	r2, #0
 800baca:	4b4a      	ldr	r3, [pc, #296]	@ (800bbf4 <_dtoa_r+0x534>)
 800bacc:	f7f4 fb56 	bl	800017c <__aeabi_dsub>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bad8:	462a      	mov	r2, r5
 800bada:	4633      	mov	r3, r6
 800badc:	f7f4 ff96 	bl	8000a0c <__aeabi_dcmpgt>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f040 828e 	bne.w	800c002 <_dtoa_r+0x942>
 800bae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baea:	462a      	mov	r2, r5
 800baec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800baf0:	f7f4 ff6e 	bl	80009d0 <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	f040 8127 	bne.w	800bd48 <_dtoa_r+0x688>
 800bafa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bafe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f2c0 8163 	blt.w	800bdd0 <_dtoa_r+0x710>
 800bb0a:	2f0e      	cmp	r7, #14
 800bb0c:	f300 8160 	bgt.w	800bdd0 <_dtoa_r+0x710>
 800bb10:	4b33      	ldr	r3, [pc, #204]	@ (800bbe0 <_dtoa_r+0x520>)
 800bb12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da03      	bge.n	800bb2c <_dtoa_r+0x46c>
 800bb24:	9b07      	ldr	r3, [sp, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f340 8100 	ble.w	800bd2c <_dtoa_r+0x66c>
 800bb2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb30:	4656      	mov	r6, sl
 800bb32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fe01 	bl	8000740 <__aeabi_ddiv>
 800bb3e:	f7f4 ff85 	bl	8000a4c <__aeabi_d2iz>
 800bb42:	4680      	mov	r8, r0
 800bb44:	f7f4 fc68 	bl	8000418 <__aeabi_i2d>
 800bb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb4c:	f7f4 fcce 	bl	80004ec <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fb10 	bl	800017c <__aeabi_dsub>
 800bb5c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb60:	9d07      	ldr	r5, [sp, #28]
 800bb62:	f806 4b01 	strb.w	r4, [r6], #1
 800bb66:	eba6 040a 	sub.w	r4, r6, sl
 800bb6a:	42a5      	cmp	r5, r4
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	f040 8116 	bne.w	800bda0 <_dtoa_r+0x6e0>
 800bb74:	f7f4 fb04 	bl	8000180 <__adddf3>
 800bb78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	f7f4 ff44 	bl	8000a0c <__aeabi_dcmpgt>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	f040 80f8 	bne.w	800bd7a <_dtoa_r+0x6ba>
 800bb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 ff13 	bl	80009bc <__aeabi_dcmpeq>
 800bb96:	b118      	cbz	r0, 800bba0 <_dtoa_r+0x4e0>
 800bb98:	f018 0f01 	tst.w	r8, #1
 800bb9c:	f040 80ed 	bne.w	800bd7a <_dtoa_r+0x6ba>
 800bba0:	4649      	mov	r1, r9
 800bba2:	4658      	mov	r0, fp
 800bba4:	f001 f82a 	bl	800cbfc <_Bfree>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	7033      	strb	r3, [r6, #0]
 800bbac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bbae:	3701      	adds	r7, #1
 800bbb0:	601f      	str	r7, [r3, #0]
 800bbb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 8320 	beq.w	800c1fa <_dtoa_r+0xb3a>
 800bbba:	601e      	str	r6, [r3, #0]
 800bbbc:	e31d      	b.n	800c1fa <_dtoa_r+0xb3a>
 800bbbe:	07e2      	lsls	r2, r4, #31
 800bbc0:	d505      	bpl.n	800bbce <_dtoa_r+0x50e>
 800bbc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbc6:	f7f4 fc91 	bl	80004ec <__aeabi_dmul>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	3601      	adds	r6, #1
 800bbce:	1064      	asrs	r4, r4, #1
 800bbd0:	3508      	adds	r5, #8
 800bbd2:	e73f      	b.n	800ba54 <_dtoa_r+0x394>
 800bbd4:	2602      	movs	r6, #2
 800bbd6:	e742      	b.n	800ba5e <_dtoa_r+0x39e>
 800bbd8:	9c07      	ldr	r4, [sp, #28]
 800bbda:	9704      	str	r7, [sp, #16]
 800bbdc:	e761      	b.n	800baa2 <_dtoa_r+0x3e2>
 800bbde:	bf00      	nop
 800bbe0:	0800f018 	.word	0x0800f018
 800bbe4:	0800eff0 	.word	0x0800eff0
 800bbe8:	3ff00000 	.word	0x3ff00000
 800bbec:	40240000 	.word	0x40240000
 800bbf0:	401c0000 	.word	0x401c0000
 800bbf4:	40140000 	.word	0x40140000
 800bbf8:	4b70      	ldr	r3, [pc, #448]	@ (800bdbc <_dtoa_r+0x6fc>)
 800bbfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc04:	4454      	add	r4, sl
 800bc06:	2900      	cmp	r1, #0
 800bc08:	d045      	beq.n	800bc96 <_dtoa_r+0x5d6>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	496c      	ldr	r1, [pc, #432]	@ (800bdc0 <_dtoa_r+0x700>)
 800bc0e:	f7f4 fd97 	bl	8000740 <__aeabi_ddiv>
 800bc12:	4633      	mov	r3, r6
 800bc14:	462a      	mov	r2, r5
 800bc16:	f7f4 fab1 	bl	800017c <__aeabi_dsub>
 800bc1a:	4656      	mov	r6, sl
 800bc1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc24:	f7f4 ff12 	bl	8000a4c <__aeabi_d2iz>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	f7f4 fbf5 	bl	8000418 <__aeabi_i2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc36:	f7f4 faa1 	bl	800017c <__aeabi_dsub>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	3530      	adds	r5, #48	@ 0x30
 800bc40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc48:	f806 5b01 	strb.w	r5, [r6], #1
 800bc4c:	f7f4 fec0 	bl	80009d0 <__aeabi_dcmplt>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d163      	bne.n	800bd1c <_dtoa_r+0x65c>
 800bc54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc58:	2000      	movs	r0, #0
 800bc5a:	495a      	ldr	r1, [pc, #360]	@ (800bdc4 <_dtoa_r+0x704>)
 800bc5c:	f7f4 fa8e 	bl	800017c <__aeabi_dsub>
 800bc60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc64:	f7f4 feb4 	bl	80009d0 <__aeabi_dcmplt>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f040 8087 	bne.w	800bd7c <_dtoa_r+0x6bc>
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	f43f af43 	beq.w	800bafa <_dtoa_r+0x43a>
 800bc74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4b53      	ldr	r3, [pc, #332]	@ (800bdc8 <_dtoa_r+0x708>)
 800bc7c:	f7f4 fc36 	bl	80004ec <__aeabi_dmul>
 800bc80:	2200      	movs	r2, #0
 800bc82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8a:	4b4f      	ldr	r3, [pc, #316]	@ (800bdc8 <_dtoa_r+0x708>)
 800bc8c:	f7f4 fc2e 	bl	80004ec <__aeabi_dmul>
 800bc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc94:	e7c4      	b.n	800bc20 <_dtoa_r+0x560>
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f7f4 fc27 	bl	80004ec <__aeabi_dmul>
 800bc9e:	4656      	mov	r6, sl
 800bca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bca4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcaa:	f7f4 fecf 	bl	8000a4c <__aeabi_d2iz>
 800bcae:	4605      	mov	r5, r0
 800bcb0:	f7f4 fbb2 	bl	8000418 <__aeabi_i2d>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcbc:	f7f4 fa5e 	bl	800017c <__aeabi_dsub>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	3530      	adds	r5, #48	@ 0x30
 800bcc6:	f806 5b01 	strb.w	r5, [r6], #1
 800bcca:	42a6      	cmp	r6, r4
 800bccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	d124      	bne.n	800bd20 <_dtoa_r+0x660>
 800bcd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcda:	4b39      	ldr	r3, [pc, #228]	@ (800bdc0 <_dtoa_r+0x700>)
 800bcdc:	f7f4 fa50 	bl	8000180 <__adddf3>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bce8:	f7f4 fe90 	bl	8000a0c <__aeabi_dcmpgt>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d145      	bne.n	800bd7c <_dtoa_r+0x6bc>
 800bcf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	4932      	ldr	r1, [pc, #200]	@ (800bdc0 <_dtoa_r+0x700>)
 800bcf8:	f7f4 fa40 	bl	800017c <__aeabi_dsub>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd04:	f7f4 fe64 	bl	80009d0 <__aeabi_dcmplt>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	f43f aef6 	beq.w	800bafa <_dtoa_r+0x43a>
 800bd0e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd10:	1e73      	subs	r3, r6, #1
 800bd12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd18:	2b30      	cmp	r3, #48	@ 0x30
 800bd1a:	d0f8      	beq.n	800bd0e <_dtoa_r+0x64e>
 800bd1c:	9f04      	ldr	r7, [sp, #16]
 800bd1e:	e73f      	b.n	800bba0 <_dtoa_r+0x4e0>
 800bd20:	4b29      	ldr	r3, [pc, #164]	@ (800bdc8 <_dtoa_r+0x708>)
 800bd22:	f7f4 fbe3 	bl	80004ec <__aeabi_dmul>
 800bd26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd2a:	e7bc      	b.n	800bca6 <_dtoa_r+0x5e6>
 800bd2c:	d10c      	bne.n	800bd48 <_dtoa_r+0x688>
 800bd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd32:	2200      	movs	r2, #0
 800bd34:	4b25      	ldr	r3, [pc, #148]	@ (800bdcc <_dtoa_r+0x70c>)
 800bd36:	f7f4 fbd9 	bl	80004ec <__aeabi_dmul>
 800bd3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd3e:	f7f4 fe5b 	bl	80009f8 <__aeabi_dcmpge>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	f000 815b 	beq.w	800bffe <_dtoa_r+0x93e>
 800bd48:	2400      	movs	r4, #0
 800bd4a:	4625      	mov	r5, r4
 800bd4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd4e:	4656      	mov	r6, sl
 800bd50:	43db      	mvns	r3, r3
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	2700      	movs	r7, #0
 800bd56:	4621      	mov	r1, r4
 800bd58:	4658      	mov	r0, fp
 800bd5a:	f000 ff4f 	bl	800cbfc <_Bfree>
 800bd5e:	2d00      	cmp	r5, #0
 800bd60:	d0dc      	beq.n	800bd1c <_dtoa_r+0x65c>
 800bd62:	b12f      	cbz	r7, 800bd70 <_dtoa_r+0x6b0>
 800bd64:	42af      	cmp	r7, r5
 800bd66:	d003      	beq.n	800bd70 <_dtoa_r+0x6b0>
 800bd68:	4639      	mov	r1, r7
 800bd6a:	4658      	mov	r0, fp
 800bd6c:	f000 ff46 	bl	800cbfc <_Bfree>
 800bd70:	4629      	mov	r1, r5
 800bd72:	4658      	mov	r0, fp
 800bd74:	f000 ff42 	bl	800cbfc <_Bfree>
 800bd78:	e7d0      	b.n	800bd1c <_dtoa_r+0x65c>
 800bd7a:	9704      	str	r7, [sp, #16]
 800bd7c:	4633      	mov	r3, r6
 800bd7e:	461e      	mov	r6, r3
 800bd80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd84:	2a39      	cmp	r2, #57	@ 0x39
 800bd86:	d107      	bne.n	800bd98 <_dtoa_r+0x6d8>
 800bd88:	459a      	cmp	sl, r3
 800bd8a:	d1f8      	bne.n	800bd7e <_dtoa_r+0x6be>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	3201      	adds	r2, #1
 800bd90:	9204      	str	r2, [sp, #16]
 800bd92:	2230      	movs	r2, #48	@ 0x30
 800bd94:	f88a 2000 	strb.w	r2, [sl]
 800bd98:	781a      	ldrb	r2, [r3, #0]
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e7bd      	b.n	800bd1c <_dtoa_r+0x65c>
 800bda0:	2200      	movs	r2, #0
 800bda2:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <_dtoa_r+0x708>)
 800bda4:	f7f4 fba2 	bl	80004ec <__aeabi_dmul>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2300      	movs	r3, #0
 800bdac:	4604      	mov	r4, r0
 800bdae:	460d      	mov	r5, r1
 800bdb0:	f7f4 fe04 	bl	80009bc <__aeabi_dcmpeq>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f aebc 	beq.w	800bb32 <_dtoa_r+0x472>
 800bdba:	e6f1      	b.n	800bba0 <_dtoa_r+0x4e0>
 800bdbc:	0800f018 	.word	0x0800f018
 800bdc0:	3fe00000 	.word	0x3fe00000
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	40140000 	.word	0x40140000
 800bdd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	f000 80db 	beq.w	800bf8e <_dtoa_r+0x8ce>
 800bdd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdda:	2a01      	cmp	r2, #1
 800bddc:	f300 80bf 	bgt.w	800bf5e <_dtoa_r+0x89e>
 800bde0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	f000 80b7 	beq.w	800bf56 <_dtoa_r+0x896>
 800bde8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdec:	4646      	mov	r6, r8
 800bdee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	441a      	add	r2, r3
 800bdf6:	4658      	mov	r0, fp
 800bdf8:	4498      	add	r8, r3
 800bdfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdfc:	f000 fffc 	bl	800cdf8 <__i2b>
 800be00:	4605      	mov	r5, r0
 800be02:	b15e      	cbz	r6, 800be1c <_dtoa_r+0x75c>
 800be04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be06:	2b00      	cmp	r3, #0
 800be08:	dd08      	ble.n	800be1c <_dtoa_r+0x75c>
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	bfa8      	it	ge
 800be0e:	4633      	movge	r3, r6
 800be10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be12:	eba8 0803 	sub.w	r8, r8, r3
 800be16:	1af6      	subs	r6, r6, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be1e:	b1f3      	cbz	r3, 800be5e <_dtoa_r+0x79e>
 800be20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80b7 	beq.w	800bf96 <_dtoa_r+0x8d6>
 800be28:	b18c      	cbz	r4, 800be4e <_dtoa_r+0x78e>
 800be2a:	4629      	mov	r1, r5
 800be2c:	4622      	mov	r2, r4
 800be2e:	4658      	mov	r0, fp
 800be30:	f001 f8a0 	bl	800cf74 <__pow5mult>
 800be34:	464a      	mov	r2, r9
 800be36:	4601      	mov	r1, r0
 800be38:	4605      	mov	r5, r0
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fff2 	bl	800ce24 <__multiply>
 800be40:	4649      	mov	r1, r9
 800be42:	9004      	str	r0, [sp, #16]
 800be44:	4658      	mov	r0, fp
 800be46:	f000 fed9 	bl	800cbfc <_Bfree>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	4699      	mov	r9, r3
 800be4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be50:	1b1a      	subs	r2, r3, r4
 800be52:	d004      	beq.n	800be5e <_dtoa_r+0x79e>
 800be54:	4649      	mov	r1, r9
 800be56:	4658      	mov	r0, fp
 800be58:	f001 f88c 	bl	800cf74 <__pow5mult>
 800be5c:	4681      	mov	r9, r0
 800be5e:	2101      	movs	r1, #1
 800be60:	4658      	mov	r0, fp
 800be62:	f000 ffc9 	bl	800cdf8 <__i2b>
 800be66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be68:	4604      	mov	r4, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 81c9 	beq.w	800c202 <_dtoa_r+0xb42>
 800be70:	461a      	mov	r2, r3
 800be72:	4601      	mov	r1, r0
 800be74:	4658      	mov	r0, fp
 800be76:	f001 f87d 	bl	800cf74 <__pow5mult>
 800be7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be7c:	4604      	mov	r4, r0
 800be7e:	2b01      	cmp	r3, #1
 800be80:	f300 808f 	bgt.w	800bfa2 <_dtoa_r+0x8e2>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	f040 8087 	bne.w	800bf9a <_dtoa_r+0x8da>
 800be8c:	9b03      	ldr	r3, [sp, #12]
 800be8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 8083 	bne.w	800bf9e <_dtoa_r+0x8de>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be9e:	0d1b      	lsrs	r3, r3, #20
 800bea0:	051b      	lsls	r3, r3, #20
 800bea2:	b12b      	cbz	r3, 800beb0 <_dtoa_r+0x7f0>
 800bea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea6:	f108 0801 	add.w	r8, r8, #1
 800beaa:	3301      	adds	r3, #1
 800beac:	9309      	str	r3, [sp, #36]	@ 0x24
 800beae:	2301      	movs	r3, #1
 800beb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 81aa 	beq.w	800c20e <_dtoa_r+0xb4e>
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bec0:	6918      	ldr	r0, [r3, #16]
 800bec2:	f000 ff4d 	bl	800cd60 <__hi0bits>
 800bec6:	f1c0 0020 	rsb	r0, r0, #32
 800beca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800becc:	4418      	add	r0, r3
 800bece:	f010 001f 	ands.w	r0, r0, #31
 800bed2:	d071      	beq.n	800bfb8 <_dtoa_r+0x8f8>
 800bed4:	f1c0 0320 	rsb	r3, r0, #32
 800bed8:	2b04      	cmp	r3, #4
 800beda:	dd65      	ble.n	800bfa8 <_dtoa_r+0x8e8>
 800bedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bede:	f1c0 001c 	rsb	r0, r0, #28
 800bee2:	4403      	add	r3, r0
 800bee4:	4480      	add	r8, r0
 800bee6:	4406      	add	r6, r0
 800bee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beea:	f1b8 0f00 	cmp.w	r8, #0
 800beee:	dd05      	ble.n	800befc <_dtoa_r+0x83c>
 800bef0:	4649      	mov	r1, r9
 800bef2:	4642      	mov	r2, r8
 800bef4:	4658      	mov	r0, fp
 800bef6:	f001 f897 	bl	800d028 <__lshift>
 800befa:	4681      	mov	r9, r0
 800befc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800befe:	2b00      	cmp	r3, #0
 800bf00:	dd05      	ble.n	800bf0e <_dtoa_r+0x84e>
 800bf02:	4621      	mov	r1, r4
 800bf04:	461a      	mov	r2, r3
 800bf06:	4658      	mov	r0, fp
 800bf08:	f001 f88e 	bl	800d028 <__lshift>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d053      	beq.n	800bfbc <_dtoa_r+0x8fc>
 800bf14:	4621      	mov	r1, r4
 800bf16:	4648      	mov	r0, r9
 800bf18:	f001 f8f2 	bl	800d100 <__mcmp>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	da4d      	bge.n	800bfbc <_dtoa_r+0x8fc>
 800bf20:	1e7b      	subs	r3, r7, #1
 800bf22:	4649      	mov	r1, r9
 800bf24:	9304      	str	r3, [sp, #16]
 800bf26:	220a      	movs	r2, #10
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4658      	mov	r0, fp
 800bf2c:	f000 fe88 	bl	800cc40 <__multadd>
 800bf30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf32:	4681      	mov	r9, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 816c 	beq.w	800c212 <_dtoa_r+0xb52>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	220a      	movs	r2, #10
 800bf40:	4658      	mov	r0, fp
 800bf42:	f000 fe7d 	bl	800cc40 <__multadd>
 800bf46:	9b08      	ldr	r3, [sp, #32]
 800bf48:	4605      	mov	r5, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dc61      	bgt.n	800c012 <_dtoa_r+0x952>
 800bf4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	dc3b      	bgt.n	800bfcc <_dtoa_r+0x90c>
 800bf54:	e05d      	b.n	800c012 <_dtoa_r+0x952>
 800bf56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf5c:	e746      	b.n	800bdec <_dtoa_r+0x72c>
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	1e5c      	subs	r4, r3, #1
 800bf62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf64:	42a3      	cmp	r3, r4
 800bf66:	bfbf      	itttt	lt
 800bf68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bf6c:	1ae3      	sublt	r3, r4, r3
 800bf6e:	18d2      	addlt	r2, r2, r3
 800bf70:	bfa8      	it	ge
 800bf72:	1b1c      	subge	r4, r3, r4
 800bf74:	9b07      	ldr	r3, [sp, #28]
 800bf76:	bfbe      	ittt	lt
 800bf78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bf7c:	2400      	movlt	r4, #0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfb5      	itete	lt
 800bf82:	eba8 0603 	sublt.w	r6, r8, r3
 800bf86:	4646      	movge	r6, r8
 800bf88:	2300      	movlt	r3, #0
 800bf8a:	9b07      	ldrge	r3, [sp, #28]
 800bf8c:	e730      	b.n	800bdf0 <_dtoa_r+0x730>
 800bf8e:	4646      	mov	r6, r8
 800bf90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf94:	e735      	b.n	800be02 <_dtoa_r+0x742>
 800bf96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf98:	e75c      	b.n	800be54 <_dtoa_r+0x794>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e788      	b.n	800beb0 <_dtoa_r+0x7f0>
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	e786      	b.n	800beb0 <_dtoa_r+0x7f0>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa6:	e788      	b.n	800beba <_dtoa_r+0x7fa>
 800bfa8:	d09f      	beq.n	800beea <_dtoa_r+0x82a>
 800bfaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfac:	331c      	adds	r3, #28
 800bfae:	441a      	add	r2, r3
 800bfb0:	4498      	add	r8, r3
 800bfb2:	441e      	add	r6, r3
 800bfb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfb6:	e798      	b.n	800beea <_dtoa_r+0x82a>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	e7f6      	b.n	800bfaa <_dtoa_r+0x8ea>
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	9704      	str	r7, [sp, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dc20      	bgt.n	800c006 <_dtoa_r+0x946>
 800bfc4:	9308      	str	r3, [sp, #32]
 800bfc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	dd1e      	ble.n	800c00a <_dtoa_r+0x94a>
 800bfcc:	9b08      	ldr	r3, [sp, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f47f aebc 	bne.w	800bd4c <_dtoa_r+0x68c>
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	2205      	movs	r2, #5
 800bfd8:	4658      	mov	r0, fp
 800bfda:	f000 fe31 	bl	800cc40 <__multadd>
 800bfde:	4601      	mov	r1, r0
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	4648      	mov	r0, r9
 800bfe4:	f001 f88c 	bl	800d100 <__mcmp>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f77f aeaf 	ble.w	800bd4c <_dtoa_r+0x68c>
 800bfee:	2331      	movs	r3, #49	@ 0x31
 800bff0:	4656      	mov	r6, sl
 800bff2:	f806 3b01 	strb.w	r3, [r6], #1
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	3301      	adds	r3, #1
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	e6aa      	b.n	800bd54 <_dtoa_r+0x694>
 800bffe:	9c07      	ldr	r4, [sp, #28]
 800c000:	9704      	str	r7, [sp, #16]
 800c002:	4625      	mov	r5, r4
 800c004:	e7f3      	b.n	800bfee <_dtoa_r+0x92e>
 800c006:	9b07      	ldr	r3, [sp, #28]
 800c008:	9308      	str	r3, [sp, #32]
 800c00a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8104 	beq.w	800c21a <_dtoa_r+0xb5a>
 800c012:	2e00      	cmp	r6, #0
 800c014:	dd05      	ble.n	800c022 <_dtoa_r+0x962>
 800c016:	4629      	mov	r1, r5
 800c018:	4632      	mov	r2, r6
 800c01a:	4658      	mov	r0, fp
 800c01c:	f001 f804 	bl	800d028 <__lshift>
 800c020:	4605      	mov	r5, r0
 800c022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c024:	2b00      	cmp	r3, #0
 800c026:	d05a      	beq.n	800c0de <_dtoa_r+0xa1e>
 800c028:	4658      	mov	r0, fp
 800c02a:	6869      	ldr	r1, [r5, #4]
 800c02c:	f000 fda6 	bl	800cb7c <_Balloc>
 800c030:	4606      	mov	r6, r0
 800c032:	b928      	cbnz	r0, 800c040 <_dtoa_r+0x980>
 800c034:	4602      	mov	r2, r0
 800c036:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c03a:	4b83      	ldr	r3, [pc, #524]	@ (800c248 <_dtoa_r+0xb88>)
 800c03c:	f7ff bb54 	b.w	800b6e8 <_dtoa_r+0x28>
 800c040:	692a      	ldr	r2, [r5, #16]
 800c042:	f105 010c 	add.w	r1, r5, #12
 800c046:	3202      	adds	r2, #2
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	300c      	adds	r0, #12
 800c04c:	f7ff fa8d 	bl	800b56a <memcpy>
 800c050:	2201      	movs	r2, #1
 800c052:	4631      	mov	r1, r6
 800c054:	4658      	mov	r0, fp
 800c056:	f000 ffe7 	bl	800d028 <__lshift>
 800c05a:	462f      	mov	r7, r5
 800c05c:	4605      	mov	r5, r0
 800c05e:	f10a 0301 	add.w	r3, sl, #1
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	9b08      	ldr	r3, [sp, #32]
 800c066:	4453      	add	r3, sl
 800c068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	930a      	str	r3, [sp, #40]	@ 0x28
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	4621      	mov	r1, r4
 800c076:	3b01      	subs	r3, #1
 800c078:	4648      	mov	r0, r9
 800c07a:	9302      	str	r3, [sp, #8]
 800c07c:	f7ff fa96 	bl	800b5ac <quorem>
 800c080:	4639      	mov	r1, r7
 800c082:	9008      	str	r0, [sp, #32]
 800c084:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c088:	4648      	mov	r0, r9
 800c08a:	f001 f839 	bl	800d100 <__mcmp>
 800c08e:	462a      	mov	r2, r5
 800c090:	9009      	str	r0, [sp, #36]	@ 0x24
 800c092:	4621      	mov	r1, r4
 800c094:	4658      	mov	r0, fp
 800c096:	f001 f84f 	bl	800d138 <__mdiff>
 800c09a:	68c2      	ldr	r2, [r0, #12]
 800c09c:	4606      	mov	r6, r0
 800c09e:	bb02      	cbnz	r2, 800c0e2 <_dtoa_r+0xa22>
 800c0a0:	4601      	mov	r1, r0
 800c0a2:	4648      	mov	r0, r9
 800c0a4:	f001 f82c 	bl	800d100 <__mcmp>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4658      	mov	r0, fp
 800c0ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0b0:	f000 fda4 	bl	800cbfc <_Bfree>
 800c0b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c0b8:	9e07      	ldr	r6, [sp, #28]
 800c0ba:	ea43 0102 	orr.w	r1, r3, r2
 800c0be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c0:	4319      	orrs	r1, r3
 800c0c2:	d110      	bne.n	800c0e6 <_dtoa_r+0xa26>
 800c0c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0c8:	d029      	beq.n	800c11e <_dtoa_r+0xa5e>
 800c0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	dd02      	ble.n	800c0d6 <_dtoa_r+0xa16>
 800c0d0:	9b08      	ldr	r3, [sp, #32]
 800c0d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	f883 8000 	strb.w	r8, [r3]
 800c0dc:	e63b      	b.n	800bd56 <_dtoa_r+0x696>
 800c0de:	4628      	mov	r0, r5
 800c0e0:	e7bb      	b.n	800c05a <_dtoa_r+0x99a>
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	e7e1      	b.n	800c0aa <_dtoa_r+0x9ea>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	db04      	blt.n	800c0f6 <_dtoa_r+0xa36>
 800c0ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	d120      	bne.n	800c138 <_dtoa_r+0xa78>
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	dded      	ble.n	800c0d6 <_dtoa_r+0xa16>
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	4658      	mov	r0, fp
 800c100:	f000 ff92 	bl	800d028 <__lshift>
 800c104:	4621      	mov	r1, r4
 800c106:	4681      	mov	r9, r0
 800c108:	f000 fffa 	bl	800d100 <__mcmp>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	dc03      	bgt.n	800c118 <_dtoa_r+0xa58>
 800c110:	d1e1      	bne.n	800c0d6 <_dtoa_r+0xa16>
 800c112:	f018 0f01 	tst.w	r8, #1
 800c116:	d0de      	beq.n	800c0d6 <_dtoa_r+0xa16>
 800c118:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c11c:	d1d8      	bne.n	800c0d0 <_dtoa_r+0xa10>
 800c11e:	2339      	movs	r3, #57	@ 0x39
 800c120:	9a02      	ldr	r2, [sp, #8]
 800c122:	7013      	strb	r3, [r2, #0]
 800c124:	4633      	mov	r3, r6
 800c126:	461e      	mov	r6, r3
 800c128:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	2a39      	cmp	r2, #57	@ 0x39
 800c130:	d052      	beq.n	800c1d8 <_dtoa_r+0xb18>
 800c132:	3201      	adds	r2, #1
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e60e      	b.n	800bd56 <_dtoa_r+0x696>
 800c138:	2a00      	cmp	r2, #0
 800c13a:	dd07      	ble.n	800c14c <_dtoa_r+0xa8c>
 800c13c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c140:	d0ed      	beq.n	800c11e <_dtoa_r+0xa5e>
 800c142:	9a02      	ldr	r2, [sp, #8]
 800c144:	f108 0301 	add.w	r3, r8, #1
 800c148:	7013      	strb	r3, [r2, #0]
 800c14a:	e604      	b.n	800bd56 <_dtoa_r+0x696>
 800c14c:	9b07      	ldr	r3, [sp, #28]
 800c14e:	9a07      	ldr	r2, [sp, #28]
 800c150:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c156:	4293      	cmp	r3, r2
 800c158:	d028      	beq.n	800c1ac <_dtoa_r+0xaec>
 800c15a:	4649      	mov	r1, r9
 800c15c:	2300      	movs	r3, #0
 800c15e:	220a      	movs	r2, #10
 800c160:	4658      	mov	r0, fp
 800c162:	f000 fd6d 	bl	800cc40 <__multadd>
 800c166:	42af      	cmp	r7, r5
 800c168:	4681      	mov	r9, r0
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	f04f 020a 	mov.w	r2, #10
 800c172:	4639      	mov	r1, r7
 800c174:	4658      	mov	r0, fp
 800c176:	d107      	bne.n	800c188 <_dtoa_r+0xac8>
 800c178:	f000 fd62 	bl	800cc40 <__multadd>
 800c17c:	4607      	mov	r7, r0
 800c17e:	4605      	mov	r5, r0
 800c180:	9b07      	ldr	r3, [sp, #28]
 800c182:	3301      	adds	r3, #1
 800c184:	9307      	str	r3, [sp, #28]
 800c186:	e774      	b.n	800c072 <_dtoa_r+0x9b2>
 800c188:	f000 fd5a 	bl	800cc40 <__multadd>
 800c18c:	4629      	mov	r1, r5
 800c18e:	4607      	mov	r7, r0
 800c190:	2300      	movs	r3, #0
 800c192:	220a      	movs	r2, #10
 800c194:	4658      	mov	r0, fp
 800c196:	f000 fd53 	bl	800cc40 <__multadd>
 800c19a:	4605      	mov	r5, r0
 800c19c:	e7f0      	b.n	800c180 <_dtoa_r+0xac0>
 800c19e:	9b08      	ldr	r3, [sp, #32]
 800c1a0:	2700      	movs	r7, #0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	bfcc      	ite	gt
 800c1a6:	461e      	movgt	r6, r3
 800c1a8:	2601      	movle	r6, #1
 800c1aa:	4456      	add	r6, sl
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4658      	mov	r0, fp
 800c1b2:	f000 ff39 	bl	800d028 <__lshift>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	f000 ffa1 	bl	800d100 <__mcmp>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	dcb0      	bgt.n	800c124 <_dtoa_r+0xa64>
 800c1c2:	d102      	bne.n	800c1ca <_dtoa_r+0xb0a>
 800c1c4:	f018 0f01 	tst.w	r8, #1
 800c1c8:	d1ac      	bne.n	800c124 <_dtoa_r+0xa64>
 800c1ca:	4633      	mov	r3, r6
 800c1cc:	461e      	mov	r6, r3
 800c1ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1d2:	2a30      	cmp	r2, #48	@ 0x30
 800c1d4:	d0fa      	beq.n	800c1cc <_dtoa_r+0xb0c>
 800c1d6:	e5be      	b.n	800bd56 <_dtoa_r+0x696>
 800c1d8:	459a      	cmp	sl, r3
 800c1da:	d1a4      	bne.n	800c126 <_dtoa_r+0xa66>
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	2331      	movs	r3, #49	@ 0x31
 800c1e4:	f88a 3000 	strb.w	r3, [sl]
 800c1e8:	e5b5      	b.n	800bd56 <_dtoa_r+0x696>
 800c1ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c24c <_dtoa_r+0xb8c>
 800c1f0:	b11b      	cbz	r3, 800c1fa <_dtoa_r+0xb3a>
 800c1f2:	f10a 0308 	add.w	r3, sl, #8
 800c1f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	4650      	mov	r0, sl
 800c1fc:	b017      	add	sp, #92	@ 0x5c
 800c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c204:	2b01      	cmp	r3, #1
 800c206:	f77f ae3d 	ble.w	800be84 <_dtoa_r+0x7c4>
 800c20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c20c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c20e:	2001      	movs	r0, #1
 800c210:	e65b      	b.n	800beca <_dtoa_r+0x80a>
 800c212:	9b08      	ldr	r3, [sp, #32]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f77f aed6 	ble.w	800bfc6 <_dtoa_r+0x906>
 800c21a:	4656      	mov	r6, sl
 800c21c:	4621      	mov	r1, r4
 800c21e:	4648      	mov	r0, r9
 800c220:	f7ff f9c4 	bl	800b5ac <quorem>
 800c224:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c228:	9b08      	ldr	r3, [sp, #32]
 800c22a:	f806 8b01 	strb.w	r8, [r6], #1
 800c22e:	eba6 020a 	sub.w	r2, r6, sl
 800c232:	4293      	cmp	r3, r2
 800c234:	ddb3      	ble.n	800c19e <_dtoa_r+0xade>
 800c236:	4649      	mov	r1, r9
 800c238:	2300      	movs	r3, #0
 800c23a:	220a      	movs	r2, #10
 800c23c:	4658      	mov	r0, fp
 800c23e:	f000 fcff 	bl	800cc40 <__multadd>
 800c242:	4681      	mov	r9, r0
 800c244:	e7ea      	b.n	800c21c <_dtoa_r+0xb5c>
 800c246:	bf00      	nop
 800c248:	0800ef16 	.word	0x0800ef16
 800c24c:	0800ee9a 	.word	0x0800ee9a

0800c250 <_free_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4605      	mov	r5, r0
 800c254:	2900      	cmp	r1, #0
 800c256:	d040      	beq.n	800c2da <_free_r+0x8a>
 800c258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25c:	1f0c      	subs	r4, r1, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfb8      	it	lt
 800c262:	18e4      	addlt	r4, r4, r3
 800c264:	f000 fc7e 	bl	800cb64 <__malloc_lock>
 800c268:	4a1c      	ldr	r2, [pc, #112]	@ (800c2dc <_free_r+0x8c>)
 800c26a:	6813      	ldr	r3, [r2, #0]
 800c26c:	b933      	cbnz	r3, 800c27c <_free_r+0x2c>
 800c26e:	6063      	str	r3, [r4, #4]
 800c270:	6014      	str	r4, [r2, #0]
 800c272:	4628      	mov	r0, r5
 800c274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c278:	f000 bc7a 	b.w	800cb70 <__malloc_unlock>
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	d908      	bls.n	800c292 <_free_r+0x42>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	1821      	adds	r1, r4, r0
 800c284:	428b      	cmp	r3, r1
 800c286:	bf01      	itttt	eq
 800c288:	6819      	ldreq	r1, [r3, #0]
 800c28a:	685b      	ldreq	r3, [r3, #4]
 800c28c:	1809      	addeq	r1, r1, r0
 800c28e:	6021      	streq	r1, [r4, #0]
 800c290:	e7ed      	b.n	800c26e <_free_r+0x1e>
 800c292:	461a      	mov	r2, r3
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	b10b      	cbz	r3, 800c29c <_free_r+0x4c>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d9fa      	bls.n	800c292 <_free_r+0x42>
 800c29c:	6811      	ldr	r1, [r2, #0]
 800c29e:	1850      	adds	r0, r2, r1
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d10b      	bne.n	800c2bc <_free_r+0x6c>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	4401      	add	r1, r0
 800c2a8:	1850      	adds	r0, r2, r1
 800c2aa:	4283      	cmp	r3, r0
 800c2ac:	6011      	str	r1, [r2, #0]
 800c2ae:	d1e0      	bne.n	800c272 <_free_r+0x22>
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	4408      	add	r0, r1
 800c2b6:	6010      	str	r0, [r2, #0]
 800c2b8:	6053      	str	r3, [r2, #4]
 800c2ba:	e7da      	b.n	800c272 <_free_r+0x22>
 800c2bc:	d902      	bls.n	800c2c4 <_free_r+0x74>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	e7d6      	b.n	800c272 <_free_r+0x22>
 800c2c4:	6820      	ldr	r0, [r4, #0]
 800c2c6:	1821      	adds	r1, r4, r0
 800c2c8:	428b      	cmp	r3, r1
 800c2ca:	bf01      	itttt	eq
 800c2cc:	6819      	ldreq	r1, [r3, #0]
 800c2ce:	685b      	ldreq	r3, [r3, #4]
 800c2d0:	1809      	addeq	r1, r1, r0
 800c2d2:	6021      	streq	r1, [r4, #0]
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	6054      	str	r4, [r2, #4]
 800c2d8:	e7cb      	b.n	800c272 <_free_r+0x22>
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	20000c4c 	.word	0x20000c4c

0800c2e0 <rshift>:
 800c2e0:	6903      	ldr	r3, [r0, #16]
 800c2e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2ea:	f100 0414 	add.w	r4, r0, #20
 800c2ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2f2:	dd46      	ble.n	800c382 <rshift+0xa2>
 800c2f4:	f011 011f 	ands.w	r1, r1, #31
 800c2f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c300:	d10c      	bne.n	800c31c <rshift+0x3c>
 800c302:	4629      	mov	r1, r5
 800c304:	f100 0710 	add.w	r7, r0, #16
 800c308:	42b1      	cmp	r1, r6
 800c30a:	d335      	bcc.n	800c378 <rshift+0x98>
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	1eea      	subs	r2, r5, #3
 800c312:	4296      	cmp	r6, r2
 800c314:	bf38      	it	cc
 800c316:	2300      	movcc	r3, #0
 800c318:	4423      	add	r3, r4
 800c31a:	e015      	b.n	800c348 <rshift+0x68>
 800c31c:	46a1      	mov	r9, r4
 800c31e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c322:	f1c1 0820 	rsb	r8, r1, #32
 800c326:	40cf      	lsrs	r7, r1
 800c328:	f105 0e04 	add.w	lr, r5, #4
 800c32c:	4576      	cmp	r6, lr
 800c32e:	46f4      	mov	ip, lr
 800c330:	d816      	bhi.n	800c360 <rshift+0x80>
 800c332:	1a9a      	subs	r2, r3, r2
 800c334:	0092      	lsls	r2, r2, #2
 800c336:	3a04      	subs	r2, #4
 800c338:	3501      	adds	r5, #1
 800c33a:	42ae      	cmp	r6, r5
 800c33c:	bf38      	it	cc
 800c33e:	2200      	movcc	r2, #0
 800c340:	18a3      	adds	r3, r4, r2
 800c342:	50a7      	str	r7, [r4, r2]
 800c344:	b107      	cbz	r7, 800c348 <rshift+0x68>
 800c346:	3304      	adds	r3, #4
 800c348:	42a3      	cmp	r3, r4
 800c34a:	eba3 0204 	sub.w	r2, r3, r4
 800c34e:	bf08      	it	eq
 800c350:	2300      	moveq	r3, #0
 800c352:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c356:	6102      	str	r2, [r0, #16]
 800c358:	bf08      	it	eq
 800c35a:	6143      	streq	r3, [r0, #20]
 800c35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c360:	f8dc c000 	ldr.w	ip, [ip]
 800c364:	fa0c fc08 	lsl.w	ip, ip, r8
 800c368:	ea4c 0707 	orr.w	r7, ip, r7
 800c36c:	f849 7b04 	str.w	r7, [r9], #4
 800c370:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c374:	40cf      	lsrs	r7, r1
 800c376:	e7d9      	b.n	800c32c <rshift+0x4c>
 800c378:	f851 cb04 	ldr.w	ip, [r1], #4
 800c37c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c380:	e7c2      	b.n	800c308 <rshift+0x28>
 800c382:	4623      	mov	r3, r4
 800c384:	e7e0      	b.n	800c348 <rshift+0x68>

0800c386 <__hexdig_fun>:
 800c386:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c38a:	2b09      	cmp	r3, #9
 800c38c:	d802      	bhi.n	800c394 <__hexdig_fun+0xe>
 800c38e:	3820      	subs	r0, #32
 800c390:	b2c0      	uxtb	r0, r0
 800c392:	4770      	bx	lr
 800c394:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c398:	2b05      	cmp	r3, #5
 800c39a:	d801      	bhi.n	800c3a0 <__hexdig_fun+0x1a>
 800c39c:	3847      	subs	r0, #71	@ 0x47
 800c39e:	e7f7      	b.n	800c390 <__hexdig_fun+0xa>
 800c3a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c3a4:	2b05      	cmp	r3, #5
 800c3a6:	d801      	bhi.n	800c3ac <__hexdig_fun+0x26>
 800c3a8:	3827      	subs	r0, #39	@ 0x27
 800c3aa:	e7f1      	b.n	800c390 <__hexdig_fun+0xa>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	4770      	bx	lr

0800c3b0 <__gethex>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	468a      	mov	sl, r1
 800c3b6:	4690      	mov	r8, r2
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	9302      	str	r3, [sp, #8]
 800c3bc:	680b      	ldr	r3, [r1, #0]
 800c3be:	9001      	str	r0, [sp, #4]
 800c3c0:	1c9c      	adds	r4, r3, #2
 800c3c2:	46a1      	mov	r9, r4
 800c3c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3c8:	2830      	cmp	r0, #48	@ 0x30
 800c3ca:	d0fa      	beq.n	800c3c2 <__gethex+0x12>
 800c3cc:	eba9 0303 	sub.w	r3, r9, r3
 800c3d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3d4:	f7ff ffd7 	bl	800c386 <__hexdig_fun>
 800c3d8:	4605      	mov	r5, r0
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d168      	bne.n	800c4b0 <__gethex+0x100>
 800c3de:	2201      	movs	r2, #1
 800c3e0:	4648      	mov	r0, r9
 800c3e2:	499f      	ldr	r1, [pc, #636]	@ (800c660 <__gethex+0x2b0>)
 800c3e4:	f7fe fabd 	bl	800a962 <strncmp>
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d167      	bne.n	800c4be <__gethex+0x10e>
 800c3ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c3f2:	4626      	mov	r6, r4
 800c3f4:	f7ff ffc7 	bl	800c386 <__hexdig_fun>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d062      	beq.n	800c4c2 <__gethex+0x112>
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	7818      	ldrb	r0, [r3, #0]
 800c400:	4699      	mov	r9, r3
 800c402:	2830      	cmp	r0, #48	@ 0x30
 800c404:	f103 0301 	add.w	r3, r3, #1
 800c408:	d0f9      	beq.n	800c3fe <__gethex+0x4e>
 800c40a:	f7ff ffbc 	bl	800c386 <__hexdig_fun>
 800c40e:	fab0 f580 	clz	r5, r0
 800c412:	f04f 0b01 	mov.w	fp, #1
 800c416:	096d      	lsrs	r5, r5, #5
 800c418:	464a      	mov	r2, r9
 800c41a:	4616      	mov	r6, r2
 800c41c:	7830      	ldrb	r0, [r6, #0]
 800c41e:	3201      	adds	r2, #1
 800c420:	f7ff ffb1 	bl	800c386 <__hexdig_fun>
 800c424:	2800      	cmp	r0, #0
 800c426:	d1f8      	bne.n	800c41a <__gethex+0x6a>
 800c428:	2201      	movs	r2, #1
 800c42a:	4630      	mov	r0, r6
 800c42c:	498c      	ldr	r1, [pc, #560]	@ (800c660 <__gethex+0x2b0>)
 800c42e:	f7fe fa98 	bl	800a962 <strncmp>
 800c432:	2800      	cmp	r0, #0
 800c434:	d13f      	bne.n	800c4b6 <__gethex+0x106>
 800c436:	b944      	cbnz	r4, 800c44a <__gethex+0x9a>
 800c438:	1c74      	adds	r4, r6, #1
 800c43a:	4622      	mov	r2, r4
 800c43c:	4616      	mov	r6, r2
 800c43e:	7830      	ldrb	r0, [r6, #0]
 800c440:	3201      	adds	r2, #1
 800c442:	f7ff ffa0 	bl	800c386 <__hexdig_fun>
 800c446:	2800      	cmp	r0, #0
 800c448:	d1f8      	bne.n	800c43c <__gethex+0x8c>
 800c44a:	1ba4      	subs	r4, r4, r6
 800c44c:	00a7      	lsls	r7, r4, #2
 800c44e:	7833      	ldrb	r3, [r6, #0]
 800c450:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c454:	2b50      	cmp	r3, #80	@ 0x50
 800c456:	d13e      	bne.n	800c4d6 <__gethex+0x126>
 800c458:	7873      	ldrb	r3, [r6, #1]
 800c45a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c45c:	d033      	beq.n	800c4c6 <__gethex+0x116>
 800c45e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c460:	d034      	beq.n	800c4cc <__gethex+0x11c>
 800c462:	2400      	movs	r4, #0
 800c464:	1c71      	adds	r1, r6, #1
 800c466:	7808      	ldrb	r0, [r1, #0]
 800c468:	f7ff ff8d 	bl	800c386 <__hexdig_fun>
 800c46c:	1e43      	subs	r3, r0, #1
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b18      	cmp	r3, #24
 800c472:	d830      	bhi.n	800c4d6 <__gethex+0x126>
 800c474:	f1a0 0210 	sub.w	r2, r0, #16
 800c478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c47c:	f7ff ff83 	bl	800c386 <__hexdig_fun>
 800c480:	f100 3cff 	add.w	ip, r0, #4294967295
 800c484:	fa5f fc8c 	uxtb.w	ip, ip
 800c488:	f1bc 0f18 	cmp.w	ip, #24
 800c48c:	f04f 030a 	mov.w	r3, #10
 800c490:	d91e      	bls.n	800c4d0 <__gethex+0x120>
 800c492:	b104      	cbz	r4, 800c496 <__gethex+0xe6>
 800c494:	4252      	negs	r2, r2
 800c496:	4417      	add	r7, r2
 800c498:	f8ca 1000 	str.w	r1, [sl]
 800c49c:	b1ed      	cbz	r5, 800c4da <__gethex+0x12a>
 800c49e:	f1bb 0f00 	cmp.w	fp, #0
 800c4a2:	bf0c      	ite	eq
 800c4a4:	2506      	moveq	r5, #6
 800c4a6:	2500      	movne	r5, #0
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	b005      	add	sp, #20
 800c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	462c      	mov	r4, r5
 800c4b4:	e7b0      	b.n	800c418 <__gethex+0x68>
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	d1c7      	bne.n	800c44a <__gethex+0x9a>
 800c4ba:	4627      	mov	r7, r4
 800c4bc:	e7c7      	b.n	800c44e <__gethex+0x9e>
 800c4be:	464e      	mov	r6, r9
 800c4c0:	462f      	mov	r7, r5
 800c4c2:	2501      	movs	r5, #1
 800c4c4:	e7c3      	b.n	800c44e <__gethex+0x9e>
 800c4c6:	2400      	movs	r4, #0
 800c4c8:	1cb1      	adds	r1, r6, #2
 800c4ca:	e7cc      	b.n	800c466 <__gethex+0xb6>
 800c4cc:	2401      	movs	r4, #1
 800c4ce:	e7fb      	b.n	800c4c8 <__gethex+0x118>
 800c4d0:	fb03 0002 	mla	r0, r3, r2, r0
 800c4d4:	e7ce      	b.n	800c474 <__gethex+0xc4>
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	e7de      	b.n	800c498 <__gethex+0xe8>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	eba6 0309 	sub.w	r3, r6, r9
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	2b07      	cmp	r3, #7
 800c4e4:	dc0a      	bgt.n	800c4fc <__gethex+0x14c>
 800c4e6:	9801      	ldr	r0, [sp, #4]
 800c4e8:	f000 fb48 	bl	800cb7c <_Balloc>
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	b940      	cbnz	r0, 800c502 <__gethex+0x152>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	21e4      	movs	r1, #228	@ 0xe4
 800c4f4:	4b5b      	ldr	r3, [pc, #364]	@ (800c664 <__gethex+0x2b4>)
 800c4f6:	485c      	ldr	r0, [pc, #368]	@ (800c668 <__gethex+0x2b8>)
 800c4f8:	f001 f954 	bl	800d7a4 <__assert_func>
 800c4fc:	3101      	adds	r1, #1
 800c4fe:	105b      	asrs	r3, r3, #1
 800c500:	e7ef      	b.n	800c4e2 <__gethex+0x132>
 800c502:	2300      	movs	r3, #0
 800c504:	f100 0a14 	add.w	sl, r0, #20
 800c508:	4655      	mov	r5, sl
 800c50a:	469b      	mov	fp, r3
 800c50c:	45b1      	cmp	r9, r6
 800c50e:	d337      	bcc.n	800c580 <__gethex+0x1d0>
 800c510:	f845 bb04 	str.w	fp, [r5], #4
 800c514:	eba5 050a 	sub.w	r5, r5, sl
 800c518:	10ad      	asrs	r5, r5, #2
 800c51a:	6125      	str	r5, [r4, #16]
 800c51c:	4658      	mov	r0, fp
 800c51e:	f000 fc1f 	bl	800cd60 <__hi0bits>
 800c522:	016d      	lsls	r5, r5, #5
 800c524:	f8d8 6000 	ldr.w	r6, [r8]
 800c528:	1a2d      	subs	r5, r5, r0
 800c52a:	42b5      	cmp	r5, r6
 800c52c:	dd54      	ble.n	800c5d8 <__gethex+0x228>
 800c52e:	1bad      	subs	r5, r5, r6
 800c530:	4629      	mov	r1, r5
 800c532:	4620      	mov	r0, r4
 800c534:	f000 ffa7 	bl	800d486 <__any_on>
 800c538:	4681      	mov	r9, r0
 800c53a:	b178      	cbz	r0, 800c55c <__gethex+0x1ac>
 800c53c:	f04f 0901 	mov.w	r9, #1
 800c540:	1e6b      	subs	r3, r5, #1
 800c542:	1159      	asrs	r1, r3, #5
 800c544:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c548:	f003 021f 	and.w	r2, r3, #31
 800c54c:	fa09 f202 	lsl.w	r2, r9, r2
 800c550:	420a      	tst	r2, r1
 800c552:	d003      	beq.n	800c55c <__gethex+0x1ac>
 800c554:	454b      	cmp	r3, r9
 800c556:	dc36      	bgt.n	800c5c6 <__gethex+0x216>
 800c558:	f04f 0902 	mov.w	r9, #2
 800c55c:	4629      	mov	r1, r5
 800c55e:	4620      	mov	r0, r4
 800c560:	f7ff febe 	bl	800c2e0 <rshift>
 800c564:	442f      	add	r7, r5
 800c566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c56a:	42bb      	cmp	r3, r7
 800c56c:	da42      	bge.n	800c5f4 <__gethex+0x244>
 800c56e:	4621      	mov	r1, r4
 800c570:	9801      	ldr	r0, [sp, #4]
 800c572:	f000 fb43 	bl	800cbfc <_Bfree>
 800c576:	2300      	movs	r3, #0
 800c578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c57a:	25a3      	movs	r5, #163	@ 0xa3
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	e793      	b.n	800c4a8 <__gethex+0xf8>
 800c580:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c584:	2a2e      	cmp	r2, #46	@ 0x2e
 800c586:	d012      	beq.n	800c5ae <__gethex+0x1fe>
 800c588:	2b20      	cmp	r3, #32
 800c58a:	d104      	bne.n	800c596 <__gethex+0x1e6>
 800c58c:	f845 bb04 	str.w	fp, [r5], #4
 800c590:	f04f 0b00 	mov.w	fp, #0
 800c594:	465b      	mov	r3, fp
 800c596:	7830      	ldrb	r0, [r6, #0]
 800c598:	9303      	str	r3, [sp, #12]
 800c59a:	f7ff fef4 	bl	800c386 <__hexdig_fun>
 800c59e:	9b03      	ldr	r3, [sp, #12]
 800c5a0:	f000 000f 	and.w	r0, r0, #15
 800c5a4:	4098      	lsls	r0, r3
 800c5a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	e7ae      	b.n	800c50c <__gethex+0x15c>
 800c5ae:	45b1      	cmp	r9, r6
 800c5b0:	d8ea      	bhi.n	800c588 <__gethex+0x1d8>
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	492a      	ldr	r1, [pc, #168]	@ (800c660 <__gethex+0x2b0>)
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	f7fe f9d2 	bl	800a962 <strncmp>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d1e1      	bne.n	800c588 <__gethex+0x1d8>
 800c5c4:	e7a2      	b.n	800c50c <__gethex+0x15c>
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	1ea9      	subs	r1, r5, #2
 800c5ca:	f000 ff5c 	bl	800d486 <__any_on>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d0c2      	beq.n	800c558 <__gethex+0x1a8>
 800c5d2:	f04f 0903 	mov.w	r9, #3
 800c5d6:	e7c1      	b.n	800c55c <__gethex+0x1ac>
 800c5d8:	da09      	bge.n	800c5ee <__gethex+0x23e>
 800c5da:	1b75      	subs	r5, r6, r5
 800c5dc:	4621      	mov	r1, r4
 800c5de:	462a      	mov	r2, r5
 800c5e0:	9801      	ldr	r0, [sp, #4]
 800c5e2:	f000 fd21 	bl	800d028 <__lshift>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	1b7f      	subs	r7, r7, r5
 800c5ea:	f100 0a14 	add.w	sl, r0, #20
 800c5ee:	f04f 0900 	mov.w	r9, #0
 800c5f2:	e7b8      	b.n	800c566 <__gethex+0x1b6>
 800c5f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5f8:	42bd      	cmp	r5, r7
 800c5fa:	dd6f      	ble.n	800c6dc <__gethex+0x32c>
 800c5fc:	1bed      	subs	r5, r5, r7
 800c5fe:	42ae      	cmp	r6, r5
 800c600:	dc34      	bgt.n	800c66c <__gethex+0x2bc>
 800c602:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c606:	2b02      	cmp	r3, #2
 800c608:	d022      	beq.n	800c650 <__gethex+0x2a0>
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d024      	beq.n	800c658 <__gethex+0x2a8>
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d115      	bne.n	800c63e <__gethex+0x28e>
 800c612:	42ae      	cmp	r6, r5
 800c614:	d113      	bne.n	800c63e <__gethex+0x28e>
 800c616:	2e01      	cmp	r6, #1
 800c618:	d10b      	bne.n	800c632 <__gethex+0x282>
 800c61a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c61e:	9a02      	ldr	r2, [sp, #8]
 800c620:	2562      	movs	r5, #98	@ 0x62
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	2301      	movs	r3, #1
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	f8ca 3000 	str.w	r3, [sl]
 800c62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c62e:	601c      	str	r4, [r3, #0]
 800c630:	e73a      	b.n	800c4a8 <__gethex+0xf8>
 800c632:	4620      	mov	r0, r4
 800c634:	1e71      	subs	r1, r6, #1
 800c636:	f000 ff26 	bl	800d486 <__any_on>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d1ed      	bne.n	800c61a <__gethex+0x26a>
 800c63e:	4621      	mov	r1, r4
 800c640:	9801      	ldr	r0, [sp, #4]
 800c642:	f000 fadb 	bl	800cbfc <_Bfree>
 800c646:	2300      	movs	r3, #0
 800c648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c64a:	2550      	movs	r5, #80	@ 0x50
 800c64c:	6013      	str	r3, [r2, #0]
 800c64e:	e72b      	b.n	800c4a8 <__gethex+0xf8>
 800c650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1f3      	bne.n	800c63e <__gethex+0x28e>
 800c656:	e7e0      	b.n	800c61a <__gethex+0x26a>
 800c658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1dd      	bne.n	800c61a <__gethex+0x26a>
 800c65e:	e7ee      	b.n	800c63e <__gethex+0x28e>
 800c660:	0800ec5a 	.word	0x0800ec5a
 800c664:	0800ef16 	.word	0x0800ef16
 800c668:	0800ef27 	.word	0x0800ef27
 800c66c:	1e6f      	subs	r7, r5, #1
 800c66e:	f1b9 0f00 	cmp.w	r9, #0
 800c672:	d130      	bne.n	800c6d6 <__gethex+0x326>
 800c674:	b127      	cbz	r7, 800c680 <__gethex+0x2d0>
 800c676:	4639      	mov	r1, r7
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 ff04 	bl	800d486 <__any_on>
 800c67e:	4681      	mov	r9, r0
 800c680:	2301      	movs	r3, #1
 800c682:	4629      	mov	r1, r5
 800c684:	1b76      	subs	r6, r6, r5
 800c686:	2502      	movs	r5, #2
 800c688:	117a      	asrs	r2, r7, #5
 800c68a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c68e:	f007 071f 	and.w	r7, r7, #31
 800c692:	40bb      	lsls	r3, r7
 800c694:	4213      	tst	r3, r2
 800c696:	4620      	mov	r0, r4
 800c698:	bf18      	it	ne
 800c69a:	f049 0902 	orrne.w	r9, r9, #2
 800c69e:	f7ff fe1f 	bl	800c2e0 <rshift>
 800c6a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c6a6:	f1b9 0f00 	cmp.w	r9, #0
 800c6aa:	d047      	beq.n	800c73c <__gethex+0x38c>
 800c6ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d015      	beq.n	800c6e0 <__gethex+0x330>
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d017      	beq.n	800c6e8 <__gethex+0x338>
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d109      	bne.n	800c6d0 <__gethex+0x320>
 800c6bc:	f019 0f02 	tst.w	r9, #2
 800c6c0:	d006      	beq.n	800c6d0 <__gethex+0x320>
 800c6c2:	f8da 3000 	ldr.w	r3, [sl]
 800c6c6:	ea49 0903 	orr.w	r9, r9, r3
 800c6ca:	f019 0f01 	tst.w	r9, #1
 800c6ce:	d10e      	bne.n	800c6ee <__gethex+0x33e>
 800c6d0:	f045 0510 	orr.w	r5, r5, #16
 800c6d4:	e032      	b.n	800c73c <__gethex+0x38c>
 800c6d6:	f04f 0901 	mov.w	r9, #1
 800c6da:	e7d1      	b.n	800c680 <__gethex+0x2d0>
 800c6dc:	2501      	movs	r5, #1
 800c6de:	e7e2      	b.n	800c6a6 <__gethex+0x2f6>
 800c6e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6e2:	f1c3 0301 	rsb	r3, r3, #1
 800c6e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0f0      	beq.n	800c6d0 <__gethex+0x320>
 800c6ee:	f04f 0c00 	mov.w	ip, #0
 800c6f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6f6:	f104 0314 	add.w	r3, r4, #20
 800c6fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c702:	4618      	mov	r0, r3
 800c704:	f853 2b04 	ldr.w	r2, [r3], #4
 800c708:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c70c:	d01b      	beq.n	800c746 <__gethex+0x396>
 800c70e:	3201      	adds	r2, #1
 800c710:	6002      	str	r2, [r0, #0]
 800c712:	2d02      	cmp	r5, #2
 800c714:	f104 0314 	add.w	r3, r4, #20
 800c718:	d13c      	bne.n	800c794 <__gethex+0x3e4>
 800c71a:	f8d8 2000 	ldr.w	r2, [r8]
 800c71e:	3a01      	subs	r2, #1
 800c720:	42b2      	cmp	r2, r6
 800c722:	d109      	bne.n	800c738 <__gethex+0x388>
 800c724:	2201      	movs	r2, #1
 800c726:	1171      	asrs	r1, r6, #5
 800c728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c72c:	f006 061f 	and.w	r6, r6, #31
 800c730:	fa02 f606 	lsl.w	r6, r2, r6
 800c734:	421e      	tst	r6, r3
 800c736:	d13a      	bne.n	800c7ae <__gethex+0x3fe>
 800c738:	f045 0520 	orr.w	r5, r5, #32
 800c73c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c73e:	601c      	str	r4, [r3, #0]
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	601f      	str	r7, [r3, #0]
 800c744:	e6b0      	b.n	800c4a8 <__gethex+0xf8>
 800c746:	4299      	cmp	r1, r3
 800c748:	f843 cc04 	str.w	ip, [r3, #-4]
 800c74c:	d8d9      	bhi.n	800c702 <__gethex+0x352>
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	459b      	cmp	fp, r3
 800c752:	db17      	blt.n	800c784 <__gethex+0x3d4>
 800c754:	6861      	ldr	r1, [r4, #4]
 800c756:	9801      	ldr	r0, [sp, #4]
 800c758:	3101      	adds	r1, #1
 800c75a:	f000 fa0f 	bl	800cb7c <_Balloc>
 800c75e:	4681      	mov	r9, r0
 800c760:	b918      	cbnz	r0, 800c76a <__gethex+0x3ba>
 800c762:	4602      	mov	r2, r0
 800c764:	2184      	movs	r1, #132	@ 0x84
 800c766:	4b19      	ldr	r3, [pc, #100]	@ (800c7cc <__gethex+0x41c>)
 800c768:	e6c5      	b.n	800c4f6 <__gethex+0x146>
 800c76a:	6922      	ldr	r2, [r4, #16]
 800c76c:	f104 010c 	add.w	r1, r4, #12
 800c770:	3202      	adds	r2, #2
 800c772:	0092      	lsls	r2, r2, #2
 800c774:	300c      	adds	r0, #12
 800c776:	f7fe fef8 	bl	800b56a <memcpy>
 800c77a:	4621      	mov	r1, r4
 800c77c:	9801      	ldr	r0, [sp, #4]
 800c77e:	f000 fa3d 	bl	800cbfc <_Bfree>
 800c782:	464c      	mov	r4, r9
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	6122      	str	r2, [r4, #16]
 800c78a:	2201      	movs	r2, #1
 800c78c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c790:	615a      	str	r2, [r3, #20]
 800c792:	e7be      	b.n	800c712 <__gethex+0x362>
 800c794:	6922      	ldr	r2, [r4, #16]
 800c796:	455a      	cmp	r2, fp
 800c798:	dd0b      	ble.n	800c7b2 <__gethex+0x402>
 800c79a:	2101      	movs	r1, #1
 800c79c:	4620      	mov	r0, r4
 800c79e:	f7ff fd9f 	bl	800c2e0 <rshift>
 800c7a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7a6:	3701      	adds	r7, #1
 800c7a8:	42bb      	cmp	r3, r7
 800c7aa:	f6ff aee0 	blt.w	800c56e <__gethex+0x1be>
 800c7ae:	2501      	movs	r5, #1
 800c7b0:	e7c2      	b.n	800c738 <__gethex+0x388>
 800c7b2:	f016 061f 	ands.w	r6, r6, #31
 800c7b6:	d0fa      	beq.n	800c7ae <__gethex+0x3fe>
 800c7b8:	4453      	add	r3, sl
 800c7ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7be:	f000 facf 	bl	800cd60 <__hi0bits>
 800c7c2:	f1c6 0620 	rsb	r6, r6, #32
 800c7c6:	42b0      	cmp	r0, r6
 800c7c8:	dbe7      	blt.n	800c79a <__gethex+0x3ea>
 800c7ca:	e7f0      	b.n	800c7ae <__gethex+0x3fe>
 800c7cc:	0800ef16 	.word	0x0800ef16

0800c7d0 <L_shift>:
 800c7d0:	f1c2 0208 	rsb	r2, r2, #8
 800c7d4:	0092      	lsls	r2, r2, #2
 800c7d6:	b570      	push	{r4, r5, r6, lr}
 800c7d8:	f1c2 0620 	rsb	r6, r2, #32
 800c7dc:	6843      	ldr	r3, [r0, #4]
 800c7de:	6804      	ldr	r4, [r0, #0]
 800c7e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c7e4:	432c      	orrs	r4, r5
 800c7e6:	40d3      	lsrs	r3, r2
 800c7e8:	6004      	str	r4, [r0, #0]
 800c7ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7ee:	4288      	cmp	r0, r1
 800c7f0:	d3f4      	bcc.n	800c7dc <L_shift+0xc>
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}

0800c7f4 <__match>:
 800c7f4:	b530      	push	{r4, r5, lr}
 800c7f6:	6803      	ldr	r3, [r0, #0]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fe:	b914      	cbnz	r4, 800c806 <__match+0x12>
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	2001      	movs	r0, #1
 800c804:	bd30      	pop	{r4, r5, pc}
 800c806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c80a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c80e:	2d19      	cmp	r5, #25
 800c810:	bf98      	it	ls
 800c812:	3220      	addls	r2, #32
 800c814:	42a2      	cmp	r2, r4
 800c816:	d0f0      	beq.n	800c7fa <__match+0x6>
 800c818:	2000      	movs	r0, #0
 800c81a:	e7f3      	b.n	800c804 <__match+0x10>

0800c81c <__hexnan>:
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	2500      	movs	r5, #0
 800c822:	680b      	ldr	r3, [r1, #0]
 800c824:	4682      	mov	sl, r0
 800c826:	115e      	asrs	r6, r3, #5
 800c828:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c82c:	f013 031f 	ands.w	r3, r3, #31
 800c830:	bf18      	it	ne
 800c832:	3604      	addne	r6, #4
 800c834:	1f37      	subs	r7, r6, #4
 800c836:	4690      	mov	r8, r2
 800c838:	46b9      	mov	r9, r7
 800c83a:	463c      	mov	r4, r7
 800c83c:	46ab      	mov	fp, r5
 800c83e:	b087      	sub	sp, #28
 800c840:	6801      	ldr	r1, [r0, #0]
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	f846 5c04 	str.w	r5, [r6, #-4]
 800c848:	9502      	str	r5, [sp, #8]
 800c84a:	784a      	ldrb	r2, [r1, #1]
 800c84c:	1c4b      	adds	r3, r1, #1
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	b342      	cbz	r2, 800c8a4 <__hexnan+0x88>
 800c852:	4610      	mov	r0, r2
 800c854:	9105      	str	r1, [sp, #20]
 800c856:	9204      	str	r2, [sp, #16]
 800c858:	f7ff fd95 	bl	800c386 <__hexdig_fun>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d151      	bne.n	800c904 <__hexnan+0xe8>
 800c860:	9a04      	ldr	r2, [sp, #16]
 800c862:	9905      	ldr	r1, [sp, #20]
 800c864:	2a20      	cmp	r2, #32
 800c866:	d818      	bhi.n	800c89a <__hexnan+0x7e>
 800c868:	9b02      	ldr	r3, [sp, #8]
 800c86a:	459b      	cmp	fp, r3
 800c86c:	dd13      	ble.n	800c896 <__hexnan+0x7a>
 800c86e:	454c      	cmp	r4, r9
 800c870:	d206      	bcs.n	800c880 <__hexnan+0x64>
 800c872:	2d07      	cmp	r5, #7
 800c874:	dc04      	bgt.n	800c880 <__hexnan+0x64>
 800c876:	462a      	mov	r2, r5
 800c878:	4649      	mov	r1, r9
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff ffa8 	bl	800c7d0 <L_shift>
 800c880:	4544      	cmp	r4, r8
 800c882:	d952      	bls.n	800c92a <__hexnan+0x10e>
 800c884:	2300      	movs	r3, #0
 800c886:	f1a4 0904 	sub.w	r9, r4, #4
 800c88a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c88e:	461d      	mov	r5, r3
 800c890:	464c      	mov	r4, r9
 800c892:	f8cd b008 	str.w	fp, [sp, #8]
 800c896:	9903      	ldr	r1, [sp, #12]
 800c898:	e7d7      	b.n	800c84a <__hexnan+0x2e>
 800c89a:	2a29      	cmp	r2, #41	@ 0x29
 800c89c:	d157      	bne.n	800c94e <__hexnan+0x132>
 800c89e:	3102      	adds	r1, #2
 800c8a0:	f8ca 1000 	str.w	r1, [sl]
 800c8a4:	f1bb 0f00 	cmp.w	fp, #0
 800c8a8:	d051      	beq.n	800c94e <__hexnan+0x132>
 800c8aa:	454c      	cmp	r4, r9
 800c8ac:	d206      	bcs.n	800c8bc <__hexnan+0xa0>
 800c8ae:	2d07      	cmp	r5, #7
 800c8b0:	dc04      	bgt.n	800c8bc <__hexnan+0xa0>
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f7ff ff8a 	bl	800c7d0 <L_shift>
 800c8bc:	4544      	cmp	r4, r8
 800c8be:	d936      	bls.n	800c92e <__hexnan+0x112>
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	f1a8 0204 	sub.w	r2, r8, #4
 800c8c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8ca:	429f      	cmp	r7, r3
 800c8cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8d0:	d2f9      	bcs.n	800c8c6 <__hexnan+0xaa>
 800c8d2:	1b3b      	subs	r3, r7, r4
 800c8d4:	f023 0303 	bic.w	r3, r3, #3
 800c8d8:	3304      	adds	r3, #4
 800c8da:	3401      	adds	r4, #1
 800c8dc:	3e03      	subs	r6, #3
 800c8de:	42b4      	cmp	r4, r6
 800c8e0:	bf88      	it	hi
 800c8e2:	2304      	movhi	r3, #4
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4443      	add	r3, r8
 800c8e8:	f843 2b04 	str.w	r2, [r3], #4
 800c8ec:	429f      	cmp	r7, r3
 800c8ee:	d2fb      	bcs.n	800c8e8 <__hexnan+0xcc>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	b91b      	cbnz	r3, 800c8fc <__hexnan+0xe0>
 800c8f4:	4547      	cmp	r7, r8
 800c8f6:	d128      	bne.n	800c94a <__hexnan+0x12e>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	2005      	movs	r0, #5
 800c8fe:	b007      	add	sp, #28
 800c900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c904:	3501      	adds	r5, #1
 800c906:	2d08      	cmp	r5, #8
 800c908:	f10b 0b01 	add.w	fp, fp, #1
 800c90c:	dd06      	ble.n	800c91c <__hexnan+0x100>
 800c90e:	4544      	cmp	r4, r8
 800c910:	d9c1      	bls.n	800c896 <__hexnan+0x7a>
 800c912:	2300      	movs	r3, #0
 800c914:	2501      	movs	r5, #1
 800c916:	f844 3c04 	str.w	r3, [r4, #-4]
 800c91a:	3c04      	subs	r4, #4
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	f000 000f 	and.w	r0, r0, #15
 800c922:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c926:	6020      	str	r0, [r4, #0]
 800c928:	e7b5      	b.n	800c896 <__hexnan+0x7a>
 800c92a:	2508      	movs	r5, #8
 800c92c:	e7b3      	b.n	800c896 <__hexnan+0x7a>
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d0dd      	beq.n	800c8f0 <__hexnan+0xd4>
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	f1c3 0320 	rsb	r3, r3, #32
 800c93c:	40da      	lsrs	r2, r3
 800c93e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c942:	4013      	ands	r3, r2
 800c944:	f846 3c04 	str.w	r3, [r6, #-4]
 800c948:	e7d2      	b.n	800c8f0 <__hexnan+0xd4>
 800c94a:	3f04      	subs	r7, #4
 800c94c:	e7d0      	b.n	800c8f0 <__hexnan+0xd4>
 800c94e:	2004      	movs	r0, #4
 800c950:	e7d5      	b.n	800c8fe <__hexnan+0xe2>
	...

0800c954 <_findenv_r>:
 800c954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c958:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800c9c8 <_findenv_r+0x74>
 800c95c:	4606      	mov	r6, r0
 800c95e:	4689      	mov	r9, r1
 800c960:	4617      	mov	r7, r2
 800c962:	f000 ff51 	bl	800d808 <__env_lock>
 800c966:	f8da 4000 	ldr.w	r4, [sl]
 800c96a:	b134      	cbz	r4, 800c97a <_findenv_r+0x26>
 800c96c:	464b      	mov	r3, r9
 800c96e:	4698      	mov	r8, r3
 800c970:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c974:	b13a      	cbz	r2, 800c986 <_findenv_r+0x32>
 800c976:	2a3d      	cmp	r2, #61	@ 0x3d
 800c978:	d1f9      	bne.n	800c96e <_findenv_r+0x1a>
 800c97a:	4630      	mov	r0, r6
 800c97c:	f000 ff4a 	bl	800d814 <__env_unlock>
 800c980:	2000      	movs	r0, #0
 800c982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	eba8 0809 	sub.w	r8, r8, r9
 800c98a:	46a3      	mov	fp, r4
 800c98c:	f854 0b04 	ldr.w	r0, [r4], #4
 800c990:	2800      	cmp	r0, #0
 800c992:	d0f2      	beq.n	800c97a <_findenv_r+0x26>
 800c994:	4642      	mov	r2, r8
 800c996:	4649      	mov	r1, r9
 800c998:	f7fd ffe3 	bl	800a962 <strncmp>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d1f4      	bne.n	800c98a <_findenv_r+0x36>
 800c9a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c9a4:	eb03 0508 	add.w	r5, r3, r8
 800c9a8:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c9ac:	2b3d      	cmp	r3, #61	@ 0x3d
 800c9ae:	d1ec      	bne.n	800c98a <_findenv_r+0x36>
 800c9b0:	f8da 3000 	ldr.w	r3, [sl]
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	ebab 0303 	sub.w	r3, fp, r3
 800c9ba:	109b      	asrs	r3, r3, #2
 800c9bc:	603b      	str	r3, [r7, #0]
 800c9be:	f000 ff29 	bl	800d814 <__env_unlock>
 800c9c2:	1c68      	adds	r0, r5, #1
 800c9c4:	e7dd      	b.n	800c982 <_findenv_r+0x2e>
 800c9c6:	bf00      	nop
 800c9c8:	20000004 	.word	0x20000004

0800c9cc <_getenv_r>:
 800c9cc:	b507      	push	{r0, r1, r2, lr}
 800c9ce:	aa01      	add	r2, sp, #4
 800c9d0:	f7ff ffc0 	bl	800c954 <_findenv_r>
 800c9d4:	b003      	add	sp, #12
 800c9d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c9dc <malloc>:
 800c9dc:	4b02      	ldr	r3, [pc, #8]	@ (800c9e8 <malloc+0xc>)
 800c9de:	4601      	mov	r1, r0
 800c9e0:	6818      	ldr	r0, [r3, #0]
 800c9e2:	f000 b82d 	b.w	800ca40 <_malloc_r>
 800c9e6:	bf00      	nop
 800c9e8:	20000194 	.word	0x20000194

0800c9ec <free>:
 800c9ec:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <free+0xc>)
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	f7ff bc2d 	b.w	800c250 <_free_r>
 800c9f6:	bf00      	nop
 800c9f8:	20000194 	.word	0x20000194

0800c9fc <sbrk_aligned>:
 800c9fc:	b570      	push	{r4, r5, r6, lr}
 800c9fe:	4e0f      	ldr	r6, [pc, #60]	@ (800ca3c <sbrk_aligned+0x40>)
 800ca00:	460c      	mov	r4, r1
 800ca02:	6831      	ldr	r1, [r6, #0]
 800ca04:	4605      	mov	r5, r0
 800ca06:	b911      	cbnz	r1, 800ca0e <sbrk_aligned+0x12>
 800ca08:	f000 febc 	bl	800d784 <_sbrk_r>
 800ca0c:	6030      	str	r0, [r6, #0]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	f000 feb7 	bl	800d784 <_sbrk_r>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d103      	bne.n	800ca22 <sbrk_aligned+0x26>
 800ca1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca1e:	4620      	mov	r0, r4
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	1cc4      	adds	r4, r0, #3
 800ca24:	f024 0403 	bic.w	r4, r4, #3
 800ca28:	42a0      	cmp	r0, r4
 800ca2a:	d0f8      	beq.n	800ca1e <sbrk_aligned+0x22>
 800ca2c:	1a21      	subs	r1, r4, r0
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f000 fea8 	bl	800d784 <_sbrk_r>
 800ca34:	3001      	adds	r0, #1
 800ca36:	d1f2      	bne.n	800ca1e <sbrk_aligned+0x22>
 800ca38:	e7ef      	b.n	800ca1a <sbrk_aligned+0x1e>
 800ca3a:	bf00      	nop
 800ca3c:	20000c48 	.word	0x20000c48

0800ca40 <_malloc_r>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	1ccd      	adds	r5, r1, #3
 800ca46:	f025 0503 	bic.w	r5, r5, #3
 800ca4a:	3508      	adds	r5, #8
 800ca4c:	2d0c      	cmp	r5, #12
 800ca4e:	bf38      	it	cc
 800ca50:	250c      	movcc	r5, #12
 800ca52:	2d00      	cmp	r5, #0
 800ca54:	4606      	mov	r6, r0
 800ca56:	db01      	blt.n	800ca5c <_malloc_r+0x1c>
 800ca58:	42a9      	cmp	r1, r5
 800ca5a:	d904      	bls.n	800ca66 <_malloc_r+0x26>
 800ca5c:	230c      	movs	r3, #12
 800ca5e:	6033      	str	r3, [r6, #0]
 800ca60:	2000      	movs	r0, #0
 800ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb3c <_malloc_r+0xfc>
 800ca6a:	f000 f87b 	bl	800cb64 <__malloc_lock>
 800ca6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca72:	461c      	mov	r4, r3
 800ca74:	bb44      	cbnz	r4, 800cac8 <_malloc_r+0x88>
 800ca76:	4629      	mov	r1, r5
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff ffbf 	bl	800c9fc <sbrk_aligned>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	4604      	mov	r4, r0
 800ca82:	d158      	bne.n	800cb36 <_malloc_r+0xf6>
 800ca84:	f8d8 4000 	ldr.w	r4, [r8]
 800ca88:	4627      	mov	r7, r4
 800ca8a:	2f00      	cmp	r7, #0
 800ca8c:	d143      	bne.n	800cb16 <_malloc_r+0xd6>
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	d04b      	beq.n	800cb2a <_malloc_r+0xea>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	4639      	mov	r1, r7
 800ca96:	4630      	mov	r0, r6
 800ca98:	eb04 0903 	add.w	r9, r4, r3
 800ca9c:	f000 fe72 	bl	800d784 <_sbrk_r>
 800caa0:	4581      	cmp	r9, r0
 800caa2:	d142      	bne.n	800cb2a <_malloc_r+0xea>
 800caa4:	6821      	ldr	r1, [r4, #0]
 800caa6:	4630      	mov	r0, r6
 800caa8:	1a6d      	subs	r5, r5, r1
 800caaa:	4629      	mov	r1, r5
 800caac:	f7ff ffa6 	bl	800c9fc <sbrk_aligned>
 800cab0:	3001      	adds	r0, #1
 800cab2:	d03a      	beq.n	800cb2a <_malloc_r+0xea>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	442b      	add	r3, r5
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	f8d8 3000 	ldr.w	r3, [r8]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	bb62      	cbnz	r2, 800cb1c <_malloc_r+0xdc>
 800cac2:	f8c8 7000 	str.w	r7, [r8]
 800cac6:	e00f      	b.n	800cae8 <_malloc_r+0xa8>
 800cac8:	6822      	ldr	r2, [r4, #0]
 800caca:	1b52      	subs	r2, r2, r5
 800cacc:	d420      	bmi.n	800cb10 <_malloc_r+0xd0>
 800cace:	2a0b      	cmp	r2, #11
 800cad0:	d917      	bls.n	800cb02 <_malloc_r+0xc2>
 800cad2:	1961      	adds	r1, r4, r5
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	6025      	str	r5, [r4, #0]
 800cad8:	bf18      	it	ne
 800cada:	6059      	strne	r1, [r3, #4]
 800cadc:	6863      	ldr	r3, [r4, #4]
 800cade:	bf08      	it	eq
 800cae0:	f8c8 1000 	streq.w	r1, [r8]
 800cae4:	5162      	str	r2, [r4, r5]
 800cae6:	604b      	str	r3, [r1, #4]
 800cae8:	4630      	mov	r0, r6
 800caea:	f000 f841 	bl	800cb70 <__malloc_unlock>
 800caee:	f104 000b 	add.w	r0, r4, #11
 800caf2:	1d23      	adds	r3, r4, #4
 800caf4:	f020 0007 	bic.w	r0, r0, #7
 800caf8:	1ac2      	subs	r2, r0, r3
 800cafa:	bf1c      	itt	ne
 800cafc:	1a1b      	subne	r3, r3, r0
 800cafe:	50a3      	strne	r3, [r4, r2]
 800cb00:	e7af      	b.n	800ca62 <_malloc_r+0x22>
 800cb02:	6862      	ldr	r2, [r4, #4]
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	bf0c      	ite	eq
 800cb08:	f8c8 2000 	streq.w	r2, [r8]
 800cb0c:	605a      	strne	r2, [r3, #4]
 800cb0e:	e7eb      	b.n	800cae8 <_malloc_r+0xa8>
 800cb10:	4623      	mov	r3, r4
 800cb12:	6864      	ldr	r4, [r4, #4]
 800cb14:	e7ae      	b.n	800ca74 <_malloc_r+0x34>
 800cb16:	463c      	mov	r4, r7
 800cb18:	687f      	ldr	r7, [r7, #4]
 800cb1a:	e7b6      	b.n	800ca8a <_malloc_r+0x4a>
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	d1fb      	bne.n	800cb1c <_malloc_r+0xdc>
 800cb24:	2300      	movs	r3, #0
 800cb26:	6053      	str	r3, [r2, #4]
 800cb28:	e7de      	b.n	800cae8 <_malloc_r+0xa8>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	6033      	str	r3, [r6, #0]
 800cb30:	f000 f81e 	bl	800cb70 <__malloc_unlock>
 800cb34:	e794      	b.n	800ca60 <_malloc_r+0x20>
 800cb36:	6005      	str	r5, [r0, #0]
 800cb38:	e7d6      	b.n	800cae8 <_malloc_r+0xa8>
 800cb3a:	bf00      	nop
 800cb3c:	20000c4c 	.word	0x20000c4c

0800cb40 <__ascii_mbtowc>:
 800cb40:	b082      	sub	sp, #8
 800cb42:	b901      	cbnz	r1, 800cb46 <__ascii_mbtowc+0x6>
 800cb44:	a901      	add	r1, sp, #4
 800cb46:	b142      	cbz	r2, 800cb5a <__ascii_mbtowc+0x1a>
 800cb48:	b14b      	cbz	r3, 800cb5e <__ascii_mbtowc+0x1e>
 800cb4a:	7813      	ldrb	r3, [r2, #0]
 800cb4c:	600b      	str	r3, [r1, #0]
 800cb4e:	7812      	ldrb	r2, [r2, #0]
 800cb50:	1e10      	subs	r0, r2, #0
 800cb52:	bf18      	it	ne
 800cb54:	2001      	movne	r0, #1
 800cb56:	b002      	add	sp, #8
 800cb58:	4770      	bx	lr
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	e7fb      	b.n	800cb56 <__ascii_mbtowc+0x16>
 800cb5e:	f06f 0001 	mvn.w	r0, #1
 800cb62:	e7f8      	b.n	800cb56 <__ascii_mbtowc+0x16>

0800cb64 <__malloc_lock>:
 800cb64:	4801      	ldr	r0, [pc, #4]	@ (800cb6c <__malloc_lock+0x8>)
 800cb66:	f7fe bce7 	b.w	800b538 <__retarget_lock_acquire_recursive>
 800cb6a:	bf00      	nop
 800cb6c:	20000c46 	.word	0x20000c46

0800cb70 <__malloc_unlock>:
 800cb70:	4801      	ldr	r0, [pc, #4]	@ (800cb78 <__malloc_unlock+0x8>)
 800cb72:	f7fe bce3 	b.w	800b53c <__retarget_lock_release_recursive>
 800cb76:	bf00      	nop
 800cb78:	20000c46 	.word	0x20000c46

0800cb7c <_Balloc>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	69c6      	ldr	r6, [r0, #28]
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	b976      	cbnz	r6, 800cba4 <_Balloc+0x28>
 800cb86:	2010      	movs	r0, #16
 800cb88:	f7ff ff28 	bl	800c9dc <malloc>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	61e0      	str	r0, [r4, #28]
 800cb90:	b920      	cbnz	r0, 800cb9c <_Balloc+0x20>
 800cb92:	216b      	movs	r1, #107	@ 0x6b
 800cb94:	4b17      	ldr	r3, [pc, #92]	@ (800cbf4 <_Balloc+0x78>)
 800cb96:	4818      	ldr	r0, [pc, #96]	@ (800cbf8 <_Balloc+0x7c>)
 800cb98:	f000 fe04 	bl	800d7a4 <__assert_func>
 800cb9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cba0:	6006      	str	r6, [r0, #0]
 800cba2:	60c6      	str	r6, [r0, #12]
 800cba4:	69e6      	ldr	r6, [r4, #28]
 800cba6:	68f3      	ldr	r3, [r6, #12]
 800cba8:	b183      	cbz	r3, 800cbcc <_Balloc+0x50>
 800cbaa:	69e3      	ldr	r3, [r4, #28]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbb2:	b9b8      	cbnz	r0, 800cbe4 <_Balloc+0x68>
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	fa01 f605 	lsl.w	r6, r1, r5
 800cbba:	1d72      	adds	r2, r6, #5
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	0092      	lsls	r2, r2, #2
 800cbc0:	f000 fe0e 	bl	800d7e0 <_calloc_r>
 800cbc4:	b160      	cbz	r0, 800cbe0 <_Balloc+0x64>
 800cbc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbca:	e00e      	b.n	800cbea <_Balloc+0x6e>
 800cbcc:	2221      	movs	r2, #33	@ 0x21
 800cbce:	2104      	movs	r1, #4
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f000 fe05 	bl	800d7e0 <_calloc_r>
 800cbd6:	69e3      	ldr	r3, [r4, #28]
 800cbd8:	60f0      	str	r0, [r6, #12]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e4      	bne.n	800cbaa <_Balloc+0x2e>
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	bd70      	pop	{r4, r5, r6, pc}
 800cbe4:	6802      	ldr	r2, [r0, #0]
 800cbe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbea:	2300      	movs	r3, #0
 800cbec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbf0:	e7f7      	b.n	800cbe2 <_Balloc+0x66>
 800cbf2:	bf00      	nop
 800cbf4:	0800eea7 	.word	0x0800eea7
 800cbf8:	0800ef87 	.word	0x0800ef87

0800cbfc <_Bfree>:
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	69c6      	ldr	r6, [r0, #28]
 800cc00:	4605      	mov	r5, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b976      	cbnz	r6, 800cc24 <_Bfree+0x28>
 800cc06:	2010      	movs	r0, #16
 800cc08:	f7ff fee8 	bl	800c9dc <malloc>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	61e8      	str	r0, [r5, #28]
 800cc10:	b920      	cbnz	r0, 800cc1c <_Bfree+0x20>
 800cc12:	218f      	movs	r1, #143	@ 0x8f
 800cc14:	4b08      	ldr	r3, [pc, #32]	@ (800cc38 <_Bfree+0x3c>)
 800cc16:	4809      	ldr	r0, [pc, #36]	@ (800cc3c <_Bfree+0x40>)
 800cc18:	f000 fdc4 	bl	800d7a4 <__assert_func>
 800cc1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc20:	6006      	str	r6, [r0, #0]
 800cc22:	60c6      	str	r6, [r0, #12]
 800cc24:	b13c      	cbz	r4, 800cc36 <_Bfree+0x3a>
 800cc26:	69eb      	ldr	r3, [r5, #28]
 800cc28:	6862      	ldr	r2, [r4, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc30:	6021      	str	r1, [r4, #0]
 800cc32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	0800eea7 	.word	0x0800eea7
 800cc3c:	0800ef87 	.word	0x0800ef87

0800cc40 <__multadd>:
 800cc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc44:	4607      	mov	r7, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	461e      	mov	r6, r3
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	690d      	ldr	r5, [r1, #16]
 800cc4e:	f101 0c14 	add.w	ip, r1, #20
 800cc52:	f8dc 3000 	ldr.w	r3, [ip]
 800cc56:	3001      	adds	r0, #1
 800cc58:	b299      	uxth	r1, r3
 800cc5a:	fb02 6101 	mla	r1, r2, r1, r6
 800cc5e:	0c1e      	lsrs	r6, r3, #16
 800cc60:	0c0b      	lsrs	r3, r1, #16
 800cc62:	fb02 3306 	mla	r3, r2, r6, r3
 800cc66:	b289      	uxth	r1, r1
 800cc68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc6c:	4285      	cmp	r5, r0
 800cc6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc72:	f84c 1b04 	str.w	r1, [ip], #4
 800cc76:	dcec      	bgt.n	800cc52 <__multadd+0x12>
 800cc78:	b30e      	cbz	r6, 800ccbe <__multadd+0x7e>
 800cc7a:	68a3      	ldr	r3, [r4, #8]
 800cc7c:	42ab      	cmp	r3, r5
 800cc7e:	dc19      	bgt.n	800ccb4 <__multadd+0x74>
 800cc80:	6861      	ldr	r1, [r4, #4]
 800cc82:	4638      	mov	r0, r7
 800cc84:	3101      	adds	r1, #1
 800cc86:	f7ff ff79 	bl	800cb7c <_Balloc>
 800cc8a:	4680      	mov	r8, r0
 800cc8c:	b928      	cbnz	r0, 800cc9a <__multadd+0x5a>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	21ba      	movs	r1, #186	@ 0xba
 800cc92:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc4 <__multadd+0x84>)
 800cc94:	480c      	ldr	r0, [pc, #48]	@ (800ccc8 <__multadd+0x88>)
 800cc96:	f000 fd85 	bl	800d7a4 <__assert_func>
 800cc9a:	6922      	ldr	r2, [r4, #16]
 800cc9c:	f104 010c 	add.w	r1, r4, #12
 800cca0:	3202      	adds	r2, #2
 800cca2:	0092      	lsls	r2, r2, #2
 800cca4:	300c      	adds	r0, #12
 800cca6:	f7fe fc60 	bl	800b56a <memcpy>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4638      	mov	r0, r7
 800ccae:	f7ff ffa5 	bl	800cbfc <_Bfree>
 800ccb2:	4644      	mov	r4, r8
 800ccb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccb8:	3501      	adds	r5, #1
 800ccba:	615e      	str	r6, [r3, #20]
 800ccbc:	6125      	str	r5, [r4, #16]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc4:	0800ef16 	.word	0x0800ef16
 800ccc8:	0800ef87 	.word	0x0800ef87

0800cccc <__s2b>:
 800cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	4615      	mov	r5, r2
 800ccd2:	2209      	movs	r2, #9
 800ccd4:	461f      	mov	r7, r3
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	460c      	mov	r4, r1
 800ccda:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccde:	4606      	mov	r6, r0
 800cce0:	2201      	movs	r2, #1
 800cce2:	2100      	movs	r1, #0
 800cce4:	429a      	cmp	r2, r3
 800cce6:	db09      	blt.n	800ccfc <__s2b+0x30>
 800cce8:	4630      	mov	r0, r6
 800ccea:	f7ff ff47 	bl	800cb7c <_Balloc>
 800ccee:	b940      	cbnz	r0, 800cd02 <__s2b+0x36>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	21d3      	movs	r1, #211	@ 0xd3
 800ccf4:	4b18      	ldr	r3, [pc, #96]	@ (800cd58 <__s2b+0x8c>)
 800ccf6:	4819      	ldr	r0, [pc, #100]	@ (800cd5c <__s2b+0x90>)
 800ccf8:	f000 fd54 	bl	800d7a4 <__assert_func>
 800ccfc:	0052      	lsls	r2, r2, #1
 800ccfe:	3101      	adds	r1, #1
 800cd00:	e7f0      	b.n	800cce4 <__s2b+0x18>
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	2d09      	cmp	r5, #9
 800cd06:	6143      	str	r3, [r0, #20]
 800cd08:	f04f 0301 	mov.w	r3, #1
 800cd0c:	6103      	str	r3, [r0, #16]
 800cd0e:	dd16      	ble.n	800cd3e <__s2b+0x72>
 800cd10:	f104 0909 	add.w	r9, r4, #9
 800cd14:	46c8      	mov	r8, r9
 800cd16:	442c      	add	r4, r5
 800cd18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	220a      	movs	r2, #10
 800cd20:	4630      	mov	r0, r6
 800cd22:	3b30      	subs	r3, #48	@ 0x30
 800cd24:	f7ff ff8c 	bl	800cc40 <__multadd>
 800cd28:	45a0      	cmp	r8, r4
 800cd2a:	d1f5      	bne.n	800cd18 <__s2b+0x4c>
 800cd2c:	f1a5 0408 	sub.w	r4, r5, #8
 800cd30:	444c      	add	r4, r9
 800cd32:	1b2d      	subs	r5, r5, r4
 800cd34:	1963      	adds	r3, r4, r5
 800cd36:	42bb      	cmp	r3, r7
 800cd38:	db04      	blt.n	800cd44 <__s2b+0x78>
 800cd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3e:	2509      	movs	r5, #9
 800cd40:	340a      	adds	r4, #10
 800cd42:	e7f6      	b.n	800cd32 <__s2b+0x66>
 800cd44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd48:	4601      	mov	r1, r0
 800cd4a:	220a      	movs	r2, #10
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	3b30      	subs	r3, #48	@ 0x30
 800cd50:	f7ff ff76 	bl	800cc40 <__multadd>
 800cd54:	e7ee      	b.n	800cd34 <__s2b+0x68>
 800cd56:	bf00      	nop
 800cd58:	0800ef16 	.word	0x0800ef16
 800cd5c:	0800ef87 	.word	0x0800ef87

0800cd60 <__hi0bits>:
 800cd60:	4603      	mov	r3, r0
 800cd62:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd66:	bf3a      	itte	cc
 800cd68:	0403      	lslcc	r3, r0, #16
 800cd6a:	2010      	movcc	r0, #16
 800cd6c:	2000      	movcs	r0, #0
 800cd6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd72:	bf3c      	itt	cc
 800cd74:	021b      	lslcc	r3, r3, #8
 800cd76:	3008      	addcc	r0, #8
 800cd78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd7c:	bf3c      	itt	cc
 800cd7e:	011b      	lslcc	r3, r3, #4
 800cd80:	3004      	addcc	r0, #4
 800cd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd86:	bf3c      	itt	cc
 800cd88:	009b      	lslcc	r3, r3, #2
 800cd8a:	3002      	addcc	r0, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	db05      	blt.n	800cd9c <__hi0bits+0x3c>
 800cd90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd94:	f100 0001 	add.w	r0, r0, #1
 800cd98:	bf08      	it	eq
 800cd9a:	2020      	moveq	r0, #32
 800cd9c:	4770      	bx	lr

0800cd9e <__lo0bits>:
 800cd9e:	6803      	ldr	r3, [r0, #0]
 800cda0:	4602      	mov	r2, r0
 800cda2:	f013 0007 	ands.w	r0, r3, #7
 800cda6:	d00b      	beq.n	800cdc0 <__lo0bits+0x22>
 800cda8:	07d9      	lsls	r1, r3, #31
 800cdaa:	d421      	bmi.n	800cdf0 <__lo0bits+0x52>
 800cdac:	0798      	lsls	r0, r3, #30
 800cdae:	bf49      	itett	mi
 800cdb0:	085b      	lsrmi	r3, r3, #1
 800cdb2:	089b      	lsrpl	r3, r3, #2
 800cdb4:	2001      	movmi	r0, #1
 800cdb6:	6013      	strmi	r3, [r2, #0]
 800cdb8:	bf5c      	itt	pl
 800cdba:	2002      	movpl	r0, #2
 800cdbc:	6013      	strpl	r3, [r2, #0]
 800cdbe:	4770      	bx	lr
 800cdc0:	b299      	uxth	r1, r3
 800cdc2:	b909      	cbnz	r1, 800cdc8 <__lo0bits+0x2a>
 800cdc4:	2010      	movs	r0, #16
 800cdc6:	0c1b      	lsrs	r3, r3, #16
 800cdc8:	b2d9      	uxtb	r1, r3
 800cdca:	b909      	cbnz	r1, 800cdd0 <__lo0bits+0x32>
 800cdcc:	3008      	adds	r0, #8
 800cdce:	0a1b      	lsrs	r3, r3, #8
 800cdd0:	0719      	lsls	r1, r3, #28
 800cdd2:	bf04      	itt	eq
 800cdd4:	091b      	lsreq	r3, r3, #4
 800cdd6:	3004      	addeq	r0, #4
 800cdd8:	0799      	lsls	r1, r3, #30
 800cdda:	bf04      	itt	eq
 800cddc:	089b      	lsreq	r3, r3, #2
 800cdde:	3002      	addeq	r0, #2
 800cde0:	07d9      	lsls	r1, r3, #31
 800cde2:	d403      	bmi.n	800cdec <__lo0bits+0x4e>
 800cde4:	085b      	lsrs	r3, r3, #1
 800cde6:	f100 0001 	add.w	r0, r0, #1
 800cdea:	d003      	beq.n	800cdf4 <__lo0bits+0x56>
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	4770      	bx	lr
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	4770      	bx	lr
 800cdf4:	2020      	movs	r0, #32
 800cdf6:	4770      	bx	lr

0800cdf8 <__i2b>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	f7ff febd 	bl	800cb7c <_Balloc>
 800ce02:	4602      	mov	r2, r0
 800ce04:	b928      	cbnz	r0, 800ce12 <__i2b+0x1a>
 800ce06:	f240 1145 	movw	r1, #325	@ 0x145
 800ce0a:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <__i2b+0x24>)
 800ce0c:	4804      	ldr	r0, [pc, #16]	@ (800ce20 <__i2b+0x28>)
 800ce0e:	f000 fcc9 	bl	800d7a4 <__assert_func>
 800ce12:	2301      	movs	r3, #1
 800ce14:	6144      	str	r4, [r0, #20]
 800ce16:	6103      	str	r3, [r0, #16]
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0800ef16 	.word	0x0800ef16
 800ce20:	0800ef87 	.word	0x0800ef87

0800ce24 <__multiply>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	4614      	mov	r4, r2
 800ce2a:	690a      	ldr	r2, [r1, #16]
 800ce2c:	6923      	ldr	r3, [r4, #16]
 800ce2e:	460f      	mov	r7, r1
 800ce30:	429a      	cmp	r2, r3
 800ce32:	bfa2      	ittt	ge
 800ce34:	4623      	movge	r3, r4
 800ce36:	460c      	movge	r4, r1
 800ce38:	461f      	movge	r7, r3
 800ce3a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce3e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce42:	68a3      	ldr	r3, [r4, #8]
 800ce44:	6861      	ldr	r1, [r4, #4]
 800ce46:	eb0a 0609 	add.w	r6, sl, r9
 800ce4a:	42b3      	cmp	r3, r6
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	bfb8      	it	lt
 800ce50:	3101      	addlt	r1, #1
 800ce52:	f7ff fe93 	bl	800cb7c <_Balloc>
 800ce56:	b930      	cbnz	r0, 800ce66 <__multiply+0x42>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce5e:	4b43      	ldr	r3, [pc, #268]	@ (800cf6c <__multiply+0x148>)
 800ce60:	4843      	ldr	r0, [pc, #268]	@ (800cf70 <__multiply+0x14c>)
 800ce62:	f000 fc9f 	bl	800d7a4 <__assert_func>
 800ce66:	f100 0514 	add.w	r5, r0, #20
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce72:	4543      	cmp	r3, r8
 800ce74:	d321      	bcc.n	800ceba <__multiply+0x96>
 800ce76:	f107 0114 	add.w	r1, r7, #20
 800ce7a:	f104 0214 	add.w	r2, r4, #20
 800ce7e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce82:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce86:	9302      	str	r3, [sp, #8]
 800ce88:	1b13      	subs	r3, r2, r4
 800ce8a:	3b15      	subs	r3, #21
 800ce8c:	f023 0303 	bic.w	r3, r3, #3
 800ce90:	3304      	adds	r3, #4
 800ce92:	f104 0715 	add.w	r7, r4, #21
 800ce96:	42ba      	cmp	r2, r7
 800ce98:	bf38      	it	cc
 800ce9a:	2304      	movcc	r3, #4
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	9b02      	ldr	r3, [sp, #8]
 800cea0:	9103      	str	r1, [sp, #12]
 800cea2:	428b      	cmp	r3, r1
 800cea4:	d80c      	bhi.n	800cec0 <__multiply+0x9c>
 800cea6:	2e00      	cmp	r6, #0
 800cea8:	dd03      	ble.n	800ceb2 <__multiply+0x8e>
 800ceaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d05a      	beq.n	800cf68 <__multiply+0x144>
 800ceb2:	6106      	str	r6, [r0, #16]
 800ceb4:	b005      	add	sp, #20
 800ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	f843 2b04 	str.w	r2, [r3], #4
 800cebe:	e7d8      	b.n	800ce72 <__multiply+0x4e>
 800cec0:	f8b1 a000 	ldrh.w	sl, [r1]
 800cec4:	f1ba 0f00 	cmp.w	sl, #0
 800cec8:	d023      	beq.n	800cf12 <__multiply+0xee>
 800ceca:	46a9      	mov	r9, r5
 800cecc:	f04f 0c00 	mov.w	ip, #0
 800ced0:	f104 0e14 	add.w	lr, r4, #20
 800ced4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ced8:	f8d9 3000 	ldr.w	r3, [r9]
 800cedc:	fa1f fb87 	uxth.w	fp, r7
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	fb0a 330b 	mla	r3, sl, fp, r3
 800cee6:	4463      	add	r3, ip
 800cee8:	f8d9 c000 	ldr.w	ip, [r9]
 800ceec:	0c3f      	lsrs	r7, r7, #16
 800ceee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cef2:	fb0a c707 	mla	r7, sl, r7, ip
 800cef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf00:	4572      	cmp	r2, lr
 800cf02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf06:	f849 3b04 	str.w	r3, [r9], #4
 800cf0a:	d8e3      	bhi.n	800ced4 <__multiply+0xb0>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	f845 c003 	str.w	ip, [r5, r3]
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	3104      	adds	r1, #4
 800cf16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf1a:	f1b9 0f00 	cmp.w	r9, #0
 800cf1e:	d021      	beq.n	800cf64 <__multiply+0x140>
 800cf20:	46ae      	mov	lr, r5
 800cf22:	f04f 0a00 	mov.w	sl, #0
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	f104 0c14 	add.w	ip, r4, #20
 800cf2c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	fb09 770b 	mla	r7, r9, fp, r7
 800cf3a:	4457      	add	r7, sl
 800cf3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf40:	f84e 3b04 	str.w	r3, [lr], #4
 800cf44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf4c:	f8be 3000 	ldrh.w	r3, [lr]
 800cf50:	4562      	cmp	r2, ip
 800cf52:	fb09 330a 	mla	r3, r9, sl, r3
 800cf56:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf5e:	d8e5      	bhi.n	800cf2c <__multiply+0x108>
 800cf60:	9f01      	ldr	r7, [sp, #4]
 800cf62:	51eb      	str	r3, [r5, r7]
 800cf64:	3504      	adds	r5, #4
 800cf66:	e79a      	b.n	800ce9e <__multiply+0x7a>
 800cf68:	3e01      	subs	r6, #1
 800cf6a:	e79c      	b.n	800cea6 <__multiply+0x82>
 800cf6c:	0800ef16 	.word	0x0800ef16
 800cf70:	0800ef87 	.word	0x0800ef87

0800cf74 <__pow5mult>:
 800cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf78:	4615      	mov	r5, r2
 800cf7a:	f012 0203 	ands.w	r2, r2, #3
 800cf7e:	4607      	mov	r7, r0
 800cf80:	460e      	mov	r6, r1
 800cf82:	d007      	beq.n	800cf94 <__pow5mult+0x20>
 800cf84:	4c25      	ldr	r4, [pc, #148]	@ (800d01c <__pow5mult+0xa8>)
 800cf86:	3a01      	subs	r2, #1
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf8e:	f7ff fe57 	bl	800cc40 <__multadd>
 800cf92:	4606      	mov	r6, r0
 800cf94:	10ad      	asrs	r5, r5, #2
 800cf96:	d03d      	beq.n	800d014 <__pow5mult+0xa0>
 800cf98:	69fc      	ldr	r4, [r7, #28]
 800cf9a:	b97c      	cbnz	r4, 800cfbc <__pow5mult+0x48>
 800cf9c:	2010      	movs	r0, #16
 800cf9e:	f7ff fd1d 	bl	800c9dc <malloc>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	61f8      	str	r0, [r7, #28]
 800cfa6:	b928      	cbnz	r0, 800cfb4 <__pow5mult+0x40>
 800cfa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfac:	4b1c      	ldr	r3, [pc, #112]	@ (800d020 <__pow5mult+0xac>)
 800cfae:	481d      	ldr	r0, [pc, #116]	@ (800d024 <__pow5mult+0xb0>)
 800cfb0:	f000 fbf8 	bl	800d7a4 <__assert_func>
 800cfb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfb8:	6004      	str	r4, [r0, #0]
 800cfba:	60c4      	str	r4, [r0, #12]
 800cfbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfc4:	b94c      	cbnz	r4, 800cfda <__pow5mult+0x66>
 800cfc6:	f240 2171 	movw	r1, #625	@ 0x271
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f7ff ff14 	bl	800cdf8 <__i2b>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	f04f 0900 	mov.w	r9, #0
 800cfde:	07eb      	lsls	r3, r5, #31
 800cfe0:	d50a      	bpl.n	800cff8 <__pow5mult+0x84>
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	f7ff ff1c 	bl	800ce24 <__multiply>
 800cfec:	4680      	mov	r8, r0
 800cfee:	4631      	mov	r1, r6
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff fe03 	bl	800cbfc <_Bfree>
 800cff6:	4646      	mov	r6, r8
 800cff8:	106d      	asrs	r5, r5, #1
 800cffa:	d00b      	beq.n	800d014 <__pow5mult+0xa0>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	b938      	cbnz	r0, 800d010 <__pow5mult+0x9c>
 800d000:	4622      	mov	r2, r4
 800d002:	4621      	mov	r1, r4
 800d004:	4638      	mov	r0, r7
 800d006:	f7ff ff0d 	bl	800ce24 <__multiply>
 800d00a:	6020      	str	r0, [r4, #0]
 800d00c:	f8c0 9000 	str.w	r9, [r0]
 800d010:	4604      	mov	r4, r0
 800d012:	e7e4      	b.n	800cfde <__pow5mult+0x6a>
 800d014:	4630      	mov	r0, r6
 800d016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d01a:	bf00      	nop
 800d01c:	0800efe0 	.word	0x0800efe0
 800d020:	0800eea7 	.word	0x0800eea7
 800d024:	0800ef87 	.word	0x0800ef87

0800d028 <__lshift>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	460c      	mov	r4, r1
 800d02e:	4607      	mov	r7, r0
 800d030:	4691      	mov	r9, r2
 800d032:	6923      	ldr	r3, [r4, #16]
 800d034:	6849      	ldr	r1, [r1, #4]
 800d036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d03a:	68a3      	ldr	r3, [r4, #8]
 800d03c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d040:	f108 0601 	add.w	r6, r8, #1
 800d044:	42b3      	cmp	r3, r6
 800d046:	db0b      	blt.n	800d060 <__lshift+0x38>
 800d048:	4638      	mov	r0, r7
 800d04a:	f7ff fd97 	bl	800cb7c <_Balloc>
 800d04e:	4605      	mov	r5, r0
 800d050:	b948      	cbnz	r0, 800d066 <__lshift+0x3e>
 800d052:	4602      	mov	r2, r0
 800d054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d058:	4b27      	ldr	r3, [pc, #156]	@ (800d0f8 <__lshift+0xd0>)
 800d05a:	4828      	ldr	r0, [pc, #160]	@ (800d0fc <__lshift+0xd4>)
 800d05c:	f000 fba2 	bl	800d7a4 <__assert_func>
 800d060:	3101      	adds	r1, #1
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	e7ee      	b.n	800d044 <__lshift+0x1c>
 800d066:	2300      	movs	r3, #0
 800d068:	f100 0114 	add.w	r1, r0, #20
 800d06c:	f100 0210 	add.w	r2, r0, #16
 800d070:	4618      	mov	r0, r3
 800d072:	4553      	cmp	r3, sl
 800d074:	db33      	blt.n	800d0de <__lshift+0xb6>
 800d076:	6920      	ldr	r0, [r4, #16]
 800d078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d07c:	f104 0314 	add.w	r3, r4, #20
 800d080:	f019 091f 	ands.w	r9, r9, #31
 800d084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d08c:	d02b      	beq.n	800d0e6 <__lshift+0xbe>
 800d08e:	468a      	mov	sl, r1
 800d090:	2200      	movs	r2, #0
 800d092:	f1c9 0e20 	rsb	lr, r9, #32
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	fa00 f009 	lsl.w	r0, r0, r9
 800d09c:	4310      	orrs	r0, r2
 800d09e:	f84a 0b04 	str.w	r0, [sl], #4
 800d0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a6:	459c      	cmp	ip, r3
 800d0a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0ac:	d8f3      	bhi.n	800d096 <__lshift+0x6e>
 800d0ae:	ebac 0304 	sub.w	r3, ip, r4
 800d0b2:	3b15      	subs	r3, #21
 800d0b4:	f023 0303 	bic.w	r3, r3, #3
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	f104 0015 	add.w	r0, r4, #21
 800d0be:	4584      	cmp	ip, r0
 800d0c0:	bf38      	it	cc
 800d0c2:	2304      	movcc	r3, #4
 800d0c4:	50ca      	str	r2, [r1, r3]
 800d0c6:	b10a      	cbz	r2, 800d0cc <__lshift+0xa4>
 800d0c8:	f108 0602 	add.w	r6, r8, #2
 800d0cc:	3e01      	subs	r6, #1
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	612e      	str	r6, [r5, #16]
 800d0d4:	f7ff fd92 	bl	800cbfc <_Bfree>
 800d0d8:	4628      	mov	r0, r5
 800d0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0de:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	e7c5      	b.n	800d072 <__lshift+0x4a>
 800d0e6:	3904      	subs	r1, #4
 800d0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ec:	459c      	cmp	ip, r3
 800d0ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0f2:	d8f9      	bhi.n	800d0e8 <__lshift+0xc0>
 800d0f4:	e7ea      	b.n	800d0cc <__lshift+0xa4>
 800d0f6:	bf00      	nop
 800d0f8:	0800ef16 	.word	0x0800ef16
 800d0fc:	0800ef87 	.word	0x0800ef87

0800d100 <__mcmp>:
 800d100:	4603      	mov	r3, r0
 800d102:	690a      	ldr	r2, [r1, #16]
 800d104:	6900      	ldr	r0, [r0, #16]
 800d106:	b530      	push	{r4, r5, lr}
 800d108:	1a80      	subs	r0, r0, r2
 800d10a:	d10e      	bne.n	800d12a <__mcmp+0x2a>
 800d10c:	3314      	adds	r3, #20
 800d10e:	3114      	adds	r1, #20
 800d110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d11c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d120:	4295      	cmp	r5, r2
 800d122:	d003      	beq.n	800d12c <__mcmp+0x2c>
 800d124:	d205      	bcs.n	800d132 <__mcmp+0x32>
 800d126:	f04f 30ff 	mov.w	r0, #4294967295
 800d12a:	bd30      	pop	{r4, r5, pc}
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	d3f3      	bcc.n	800d118 <__mcmp+0x18>
 800d130:	e7fb      	b.n	800d12a <__mcmp+0x2a>
 800d132:	2001      	movs	r0, #1
 800d134:	e7f9      	b.n	800d12a <__mcmp+0x2a>
	...

0800d138 <__mdiff>:
 800d138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	4689      	mov	r9, r1
 800d13e:	4606      	mov	r6, r0
 800d140:	4611      	mov	r1, r2
 800d142:	4648      	mov	r0, r9
 800d144:	4614      	mov	r4, r2
 800d146:	f7ff ffdb 	bl	800d100 <__mcmp>
 800d14a:	1e05      	subs	r5, r0, #0
 800d14c:	d112      	bne.n	800d174 <__mdiff+0x3c>
 800d14e:	4629      	mov	r1, r5
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff fd13 	bl	800cb7c <_Balloc>
 800d156:	4602      	mov	r2, r0
 800d158:	b928      	cbnz	r0, 800d166 <__mdiff+0x2e>
 800d15a:	f240 2137 	movw	r1, #567	@ 0x237
 800d15e:	4b3e      	ldr	r3, [pc, #248]	@ (800d258 <__mdiff+0x120>)
 800d160:	483e      	ldr	r0, [pc, #248]	@ (800d25c <__mdiff+0x124>)
 800d162:	f000 fb1f 	bl	800d7a4 <__assert_func>
 800d166:	2301      	movs	r3, #1
 800d168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d16c:	4610      	mov	r0, r2
 800d16e:	b003      	add	sp, #12
 800d170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d174:	bfbc      	itt	lt
 800d176:	464b      	movlt	r3, r9
 800d178:	46a1      	movlt	r9, r4
 800d17a:	4630      	mov	r0, r6
 800d17c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d180:	bfba      	itte	lt
 800d182:	461c      	movlt	r4, r3
 800d184:	2501      	movlt	r5, #1
 800d186:	2500      	movge	r5, #0
 800d188:	f7ff fcf8 	bl	800cb7c <_Balloc>
 800d18c:	4602      	mov	r2, r0
 800d18e:	b918      	cbnz	r0, 800d198 <__mdiff+0x60>
 800d190:	f240 2145 	movw	r1, #581	@ 0x245
 800d194:	4b30      	ldr	r3, [pc, #192]	@ (800d258 <__mdiff+0x120>)
 800d196:	e7e3      	b.n	800d160 <__mdiff+0x28>
 800d198:	f100 0b14 	add.w	fp, r0, #20
 800d19c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1a0:	f109 0310 	add.w	r3, r9, #16
 800d1a4:	60c5      	str	r5, [r0, #12]
 800d1a6:	f04f 0c00 	mov.w	ip, #0
 800d1aa:	f109 0514 	add.w	r5, r9, #20
 800d1ae:	46d9      	mov	r9, fp
 800d1b0:	6926      	ldr	r6, [r4, #16]
 800d1b2:	f104 0e14 	add.w	lr, r4, #20
 800d1b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	9b01      	ldr	r3, [sp, #4]
 800d1c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1ca:	b281      	uxth	r1, r0
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	fa1f f38a 	uxth.w	r3, sl
 800d1d2:	1a5b      	subs	r3, r3, r1
 800d1d4:	0c00      	lsrs	r0, r0, #16
 800d1d6:	4463      	add	r3, ip
 800d1d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1e6:	4576      	cmp	r6, lr
 800d1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ec:	f849 3b04 	str.w	r3, [r9], #4
 800d1f0:	d8e6      	bhi.n	800d1c0 <__mdiff+0x88>
 800d1f2:	1b33      	subs	r3, r6, r4
 800d1f4:	3b15      	subs	r3, #21
 800d1f6:	f023 0303 	bic.w	r3, r3, #3
 800d1fa:	3415      	adds	r4, #21
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	42a6      	cmp	r6, r4
 800d200:	bf38      	it	cc
 800d202:	2304      	movcc	r3, #4
 800d204:	441d      	add	r5, r3
 800d206:	445b      	add	r3, fp
 800d208:	461e      	mov	r6, r3
 800d20a:	462c      	mov	r4, r5
 800d20c:	4544      	cmp	r4, r8
 800d20e:	d30e      	bcc.n	800d22e <__mdiff+0xf6>
 800d210:	f108 0103 	add.w	r1, r8, #3
 800d214:	1b49      	subs	r1, r1, r5
 800d216:	f021 0103 	bic.w	r1, r1, #3
 800d21a:	3d03      	subs	r5, #3
 800d21c:	45a8      	cmp	r8, r5
 800d21e:	bf38      	it	cc
 800d220:	2100      	movcc	r1, #0
 800d222:	440b      	add	r3, r1
 800d224:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d228:	b199      	cbz	r1, 800d252 <__mdiff+0x11a>
 800d22a:	6117      	str	r7, [r2, #16]
 800d22c:	e79e      	b.n	800d16c <__mdiff+0x34>
 800d22e:	46e6      	mov	lr, ip
 800d230:	f854 1b04 	ldr.w	r1, [r4], #4
 800d234:	fa1f fc81 	uxth.w	ip, r1
 800d238:	44f4      	add	ip, lr
 800d23a:	0c08      	lsrs	r0, r1, #16
 800d23c:	4471      	add	r1, lr
 800d23e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d242:	b289      	uxth	r1, r1
 800d244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d24c:	f846 1b04 	str.w	r1, [r6], #4
 800d250:	e7dc      	b.n	800d20c <__mdiff+0xd4>
 800d252:	3f01      	subs	r7, #1
 800d254:	e7e6      	b.n	800d224 <__mdiff+0xec>
 800d256:	bf00      	nop
 800d258:	0800ef16 	.word	0x0800ef16
 800d25c:	0800ef87 	.word	0x0800ef87

0800d260 <__ulp>:
 800d260:	4b0e      	ldr	r3, [pc, #56]	@ (800d29c <__ulp+0x3c>)
 800d262:	400b      	ands	r3, r1
 800d264:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	dc08      	bgt.n	800d27e <__ulp+0x1e>
 800d26c:	425b      	negs	r3, r3
 800d26e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d272:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d276:	da04      	bge.n	800d282 <__ulp+0x22>
 800d278:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d27c:	4113      	asrs	r3, r2
 800d27e:	2200      	movs	r2, #0
 800d280:	e008      	b.n	800d294 <__ulp+0x34>
 800d282:	f1a2 0314 	sub.w	r3, r2, #20
 800d286:	2b1e      	cmp	r3, #30
 800d288:	bfd6      	itet	le
 800d28a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d28e:	2201      	movgt	r2, #1
 800d290:	40da      	lsrle	r2, r3
 800d292:	2300      	movs	r3, #0
 800d294:	4619      	mov	r1, r3
 800d296:	4610      	mov	r0, r2
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	7ff00000 	.word	0x7ff00000

0800d2a0 <__b2d>:
 800d2a0:	6902      	ldr	r2, [r0, #16]
 800d2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a4:	f100 0614 	add.w	r6, r0, #20
 800d2a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d2ac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d2b0:	4f1e      	ldr	r7, [pc, #120]	@ (800d32c <__b2d+0x8c>)
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff fd54 	bl	800cd60 <__hi0bits>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f1c0 0020 	rsb	r0, r0, #32
 800d2be:	2b0a      	cmp	r3, #10
 800d2c0:	f1a2 0504 	sub.w	r5, r2, #4
 800d2c4:	6008      	str	r0, [r1, #0]
 800d2c6:	dc12      	bgt.n	800d2ee <__b2d+0x4e>
 800d2c8:	42ae      	cmp	r6, r5
 800d2ca:	bf2c      	ite	cs
 800d2cc:	2200      	movcs	r2, #0
 800d2ce:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d2d2:	f1c3 0c0b 	rsb	ip, r3, #11
 800d2d6:	3315      	adds	r3, #21
 800d2d8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d2dc:	fa04 f303 	lsl.w	r3, r4, r3
 800d2e0:	fa22 f20c 	lsr.w	r2, r2, ip
 800d2e4:	ea4e 0107 	orr.w	r1, lr, r7
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ee:	42ae      	cmp	r6, r5
 800d2f0:	bf36      	itet	cc
 800d2f2:	f1a2 0508 	subcc.w	r5, r2, #8
 800d2f6:	2200      	movcs	r2, #0
 800d2f8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d2fc:	3b0b      	subs	r3, #11
 800d2fe:	d012      	beq.n	800d326 <__b2d+0x86>
 800d300:	f1c3 0720 	rsb	r7, r3, #32
 800d304:	fa22 f107 	lsr.w	r1, r2, r7
 800d308:	409c      	lsls	r4, r3
 800d30a:	430c      	orrs	r4, r1
 800d30c:	42b5      	cmp	r5, r6
 800d30e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d312:	bf94      	ite	ls
 800d314:	2400      	movls	r4, #0
 800d316:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d31a:	409a      	lsls	r2, r3
 800d31c:	40fc      	lsrs	r4, r7
 800d31e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d322:	4322      	orrs	r2, r4
 800d324:	e7e1      	b.n	800d2ea <__b2d+0x4a>
 800d326:	ea44 0107 	orr.w	r1, r4, r7
 800d32a:	e7de      	b.n	800d2ea <__b2d+0x4a>
 800d32c:	3ff00000 	.word	0x3ff00000

0800d330 <__d2b>:
 800d330:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d334:	2101      	movs	r1, #1
 800d336:	4690      	mov	r8, r2
 800d338:	4699      	mov	r9, r3
 800d33a:	9e08      	ldr	r6, [sp, #32]
 800d33c:	f7ff fc1e 	bl	800cb7c <_Balloc>
 800d340:	4604      	mov	r4, r0
 800d342:	b930      	cbnz	r0, 800d352 <__d2b+0x22>
 800d344:	4602      	mov	r2, r0
 800d346:	f240 310f 	movw	r1, #783	@ 0x30f
 800d34a:	4b23      	ldr	r3, [pc, #140]	@ (800d3d8 <__d2b+0xa8>)
 800d34c:	4823      	ldr	r0, [pc, #140]	@ (800d3dc <__d2b+0xac>)
 800d34e:	f000 fa29 	bl	800d7a4 <__assert_func>
 800d352:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d356:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d35a:	b10d      	cbz	r5, 800d360 <__d2b+0x30>
 800d35c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	f1b8 0300 	subs.w	r3, r8, #0
 800d366:	d024      	beq.n	800d3b2 <__d2b+0x82>
 800d368:	4668      	mov	r0, sp
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	f7ff fd17 	bl	800cd9e <__lo0bits>
 800d370:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d374:	b1d8      	cbz	r0, 800d3ae <__d2b+0x7e>
 800d376:	f1c0 0320 	rsb	r3, r0, #32
 800d37a:	fa02 f303 	lsl.w	r3, r2, r3
 800d37e:	430b      	orrs	r3, r1
 800d380:	40c2      	lsrs	r2, r0
 800d382:	6163      	str	r3, [r4, #20]
 800d384:	9201      	str	r2, [sp, #4]
 800d386:	9b01      	ldr	r3, [sp, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bf0c      	ite	eq
 800d38c:	2201      	moveq	r2, #1
 800d38e:	2202      	movne	r2, #2
 800d390:	61a3      	str	r3, [r4, #24]
 800d392:	6122      	str	r2, [r4, #16]
 800d394:	b1ad      	cbz	r5, 800d3c2 <__d2b+0x92>
 800d396:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d39a:	4405      	add	r5, r0
 800d39c:	6035      	str	r5, [r6, #0]
 800d39e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a4:	6018      	str	r0, [r3, #0]
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	b002      	add	sp, #8
 800d3aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d3ae:	6161      	str	r1, [r4, #20]
 800d3b0:	e7e9      	b.n	800d386 <__d2b+0x56>
 800d3b2:	a801      	add	r0, sp, #4
 800d3b4:	f7ff fcf3 	bl	800cd9e <__lo0bits>
 800d3b8:	9b01      	ldr	r3, [sp, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	6163      	str	r3, [r4, #20]
 800d3be:	3020      	adds	r0, #32
 800d3c0:	e7e7      	b.n	800d392 <__d2b+0x62>
 800d3c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3ca:	6030      	str	r0, [r6, #0]
 800d3cc:	6918      	ldr	r0, [r3, #16]
 800d3ce:	f7ff fcc7 	bl	800cd60 <__hi0bits>
 800d3d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3d6:	e7e4      	b.n	800d3a2 <__d2b+0x72>
 800d3d8:	0800ef16 	.word	0x0800ef16
 800d3dc:	0800ef87 	.word	0x0800ef87

0800d3e0 <__ratio>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	e9cd 1000 	strd	r1, r0, [sp]
 800d3ea:	a902      	add	r1, sp, #8
 800d3ec:	f7ff ff58 	bl	800d2a0 <__b2d>
 800d3f0:	468b      	mov	fp, r1
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	460f      	mov	r7, r1
 800d3f6:	9800      	ldr	r0, [sp, #0]
 800d3f8:	a903      	add	r1, sp, #12
 800d3fa:	f7ff ff51 	bl	800d2a0 <__b2d>
 800d3fe:	460d      	mov	r5, r1
 800d400:	9b01      	ldr	r3, [sp, #4]
 800d402:	4689      	mov	r9, r1
 800d404:	6919      	ldr	r1, [r3, #16]
 800d406:	9b00      	ldr	r3, [sp, #0]
 800d408:	4604      	mov	r4, r0
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	4630      	mov	r0, r6
 800d40e:	1ac9      	subs	r1, r1, r3
 800d410:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfcd      	iteet	gt
 800d41e:	463a      	movgt	r2, r7
 800d420:	462a      	movle	r2, r5
 800d422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d426:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d42a:	bfd8      	it	le
 800d42c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d430:	464b      	mov	r3, r9
 800d432:	4622      	mov	r2, r4
 800d434:	4659      	mov	r1, fp
 800d436:	f7f3 f983 	bl	8000740 <__aeabi_ddiv>
 800d43a:	b005      	add	sp, #20
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d440 <__copybits>:
 800d440:	3901      	subs	r1, #1
 800d442:	b570      	push	{r4, r5, r6, lr}
 800d444:	1149      	asrs	r1, r1, #5
 800d446:	6914      	ldr	r4, [r2, #16]
 800d448:	3101      	adds	r1, #1
 800d44a:	f102 0314 	add.w	r3, r2, #20
 800d44e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d452:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d456:	1f05      	subs	r5, r0, #4
 800d458:	42a3      	cmp	r3, r4
 800d45a:	d30c      	bcc.n	800d476 <__copybits+0x36>
 800d45c:	1aa3      	subs	r3, r4, r2
 800d45e:	3b11      	subs	r3, #17
 800d460:	f023 0303 	bic.w	r3, r3, #3
 800d464:	3211      	adds	r2, #17
 800d466:	42a2      	cmp	r2, r4
 800d468:	bf88      	it	hi
 800d46a:	2300      	movhi	r3, #0
 800d46c:	4418      	add	r0, r3
 800d46e:	2300      	movs	r3, #0
 800d470:	4288      	cmp	r0, r1
 800d472:	d305      	bcc.n	800d480 <__copybits+0x40>
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	f853 6b04 	ldr.w	r6, [r3], #4
 800d47a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d47e:	e7eb      	b.n	800d458 <__copybits+0x18>
 800d480:	f840 3b04 	str.w	r3, [r0], #4
 800d484:	e7f4      	b.n	800d470 <__copybits+0x30>

0800d486 <__any_on>:
 800d486:	f100 0214 	add.w	r2, r0, #20
 800d48a:	6900      	ldr	r0, [r0, #16]
 800d48c:	114b      	asrs	r3, r1, #5
 800d48e:	4298      	cmp	r0, r3
 800d490:	b510      	push	{r4, lr}
 800d492:	db11      	blt.n	800d4b8 <__any_on+0x32>
 800d494:	dd0a      	ble.n	800d4ac <__any_on+0x26>
 800d496:	f011 011f 	ands.w	r1, r1, #31
 800d49a:	d007      	beq.n	800d4ac <__any_on+0x26>
 800d49c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4a0:	fa24 f001 	lsr.w	r0, r4, r1
 800d4a4:	fa00 f101 	lsl.w	r1, r0, r1
 800d4a8:	428c      	cmp	r4, r1
 800d4aa:	d10b      	bne.n	800d4c4 <__any_on+0x3e>
 800d4ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d803      	bhi.n	800d4bc <__any_on+0x36>
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	bd10      	pop	{r4, pc}
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	e7f7      	b.n	800d4ac <__any_on+0x26>
 800d4bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4c0:	2900      	cmp	r1, #0
 800d4c2:	d0f5      	beq.n	800d4b0 <__any_on+0x2a>
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	e7f6      	b.n	800d4b6 <__any_on+0x30>

0800d4c8 <_strtoul_l.constprop.0>:
 800d4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4cc:	4686      	mov	lr, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	4e33      	ldr	r6, [pc, #204]	@ (800d5a0 <_strtoul_l.constprop.0+0xd8>)
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4d8:	5d37      	ldrb	r7, [r6, r4]
 800d4da:	f017 0708 	ands.w	r7, r7, #8
 800d4de:	d1f8      	bne.n	800d4d2 <_strtoul_l.constprop.0+0xa>
 800d4e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800d4e2:	d12f      	bne.n	800d544 <_strtoul_l.constprop.0+0x7c>
 800d4e4:	2701      	movs	r7, #1
 800d4e6:	782c      	ldrb	r4, [r5, #0]
 800d4e8:	1c85      	adds	r5, r0, #2
 800d4ea:	f033 0010 	bics.w	r0, r3, #16
 800d4ee:	d109      	bne.n	800d504 <_strtoul_l.constprop.0+0x3c>
 800d4f0:	2c30      	cmp	r4, #48	@ 0x30
 800d4f2:	d12c      	bne.n	800d54e <_strtoul_l.constprop.0+0x86>
 800d4f4:	7828      	ldrb	r0, [r5, #0]
 800d4f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d4fa:	2858      	cmp	r0, #88	@ 0x58
 800d4fc:	d127      	bne.n	800d54e <_strtoul_l.constprop.0+0x86>
 800d4fe:	2310      	movs	r3, #16
 800d500:	786c      	ldrb	r4, [r5, #1]
 800d502:	3502      	adds	r5, #2
 800d504:	f04f 38ff 	mov.w	r8, #4294967295
 800d508:	fbb8 f8f3 	udiv	r8, r8, r3
 800d50c:	2600      	movs	r6, #0
 800d50e:	fb03 f908 	mul.w	r9, r3, r8
 800d512:	4630      	mov	r0, r6
 800d514:	ea6f 0909 	mvn.w	r9, r9
 800d518:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d51c:	f1bc 0f09 	cmp.w	ip, #9
 800d520:	d81c      	bhi.n	800d55c <_strtoul_l.constprop.0+0x94>
 800d522:	4664      	mov	r4, ip
 800d524:	42a3      	cmp	r3, r4
 800d526:	dd2a      	ble.n	800d57e <_strtoul_l.constprop.0+0xb6>
 800d528:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d52c:	d007      	beq.n	800d53e <_strtoul_l.constprop.0+0x76>
 800d52e:	4580      	cmp	r8, r0
 800d530:	d322      	bcc.n	800d578 <_strtoul_l.constprop.0+0xb0>
 800d532:	d101      	bne.n	800d538 <_strtoul_l.constprop.0+0x70>
 800d534:	45a1      	cmp	r9, r4
 800d536:	db1f      	blt.n	800d578 <_strtoul_l.constprop.0+0xb0>
 800d538:	2601      	movs	r6, #1
 800d53a:	fb00 4003 	mla	r0, r0, r3, r4
 800d53e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d542:	e7e9      	b.n	800d518 <_strtoul_l.constprop.0+0x50>
 800d544:	2c2b      	cmp	r4, #43	@ 0x2b
 800d546:	bf04      	itt	eq
 800d548:	782c      	ldrbeq	r4, [r5, #0]
 800d54a:	1c85      	addeq	r5, r0, #2
 800d54c:	e7cd      	b.n	800d4ea <_strtoul_l.constprop.0+0x22>
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1d8      	bne.n	800d504 <_strtoul_l.constprop.0+0x3c>
 800d552:	2c30      	cmp	r4, #48	@ 0x30
 800d554:	bf0c      	ite	eq
 800d556:	2308      	moveq	r3, #8
 800d558:	230a      	movne	r3, #10
 800d55a:	e7d3      	b.n	800d504 <_strtoul_l.constprop.0+0x3c>
 800d55c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d560:	f1bc 0f19 	cmp.w	ip, #25
 800d564:	d801      	bhi.n	800d56a <_strtoul_l.constprop.0+0xa2>
 800d566:	3c37      	subs	r4, #55	@ 0x37
 800d568:	e7dc      	b.n	800d524 <_strtoul_l.constprop.0+0x5c>
 800d56a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d56e:	f1bc 0f19 	cmp.w	ip, #25
 800d572:	d804      	bhi.n	800d57e <_strtoul_l.constprop.0+0xb6>
 800d574:	3c57      	subs	r4, #87	@ 0x57
 800d576:	e7d5      	b.n	800d524 <_strtoul_l.constprop.0+0x5c>
 800d578:	f04f 36ff 	mov.w	r6, #4294967295
 800d57c:	e7df      	b.n	800d53e <_strtoul_l.constprop.0+0x76>
 800d57e:	1c73      	adds	r3, r6, #1
 800d580:	d106      	bne.n	800d590 <_strtoul_l.constprop.0+0xc8>
 800d582:	2322      	movs	r3, #34	@ 0x22
 800d584:	4630      	mov	r0, r6
 800d586:	f8ce 3000 	str.w	r3, [lr]
 800d58a:	b932      	cbnz	r2, 800d59a <_strtoul_l.constprop.0+0xd2>
 800d58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d590:	b107      	cbz	r7, 800d594 <_strtoul_l.constprop.0+0xcc>
 800d592:	4240      	negs	r0, r0
 800d594:	2a00      	cmp	r2, #0
 800d596:	d0f9      	beq.n	800d58c <_strtoul_l.constprop.0+0xc4>
 800d598:	b106      	cbz	r6, 800d59c <_strtoul_l.constprop.0+0xd4>
 800d59a:	1e69      	subs	r1, r5, #1
 800d59c:	6011      	str	r1, [r2, #0]
 800d59e:	e7f5      	b.n	800d58c <_strtoul_l.constprop.0+0xc4>
 800d5a0:	0800ecb1 	.word	0x0800ecb1

0800d5a4 <_strtoul_r>:
 800d5a4:	f7ff bf90 	b.w	800d4c8 <_strtoul_l.constprop.0>

0800d5a8 <strtoul>:
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	460a      	mov	r2, r1
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	4802      	ldr	r0, [pc, #8]	@ (800d5b8 <strtoul+0x10>)
 800d5b0:	6800      	ldr	r0, [r0, #0]
 800d5b2:	f7ff bf89 	b.w	800d4c8 <_strtoul_l.constprop.0>
 800d5b6:	bf00      	nop
 800d5b8:	20000194 	.word	0x20000194

0800d5bc <__ascii_wctomb>:
 800d5bc:	4603      	mov	r3, r0
 800d5be:	4608      	mov	r0, r1
 800d5c0:	b141      	cbz	r1, 800d5d4 <__ascii_wctomb+0x18>
 800d5c2:	2aff      	cmp	r2, #255	@ 0xff
 800d5c4:	d904      	bls.n	800d5d0 <__ascii_wctomb+0x14>
 800d5c6:	228a      	movs	r2, #138	@ 0x8a
 800d5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5cc:	601a      	str	r2, [r3, #0]
 800d5ce:	4770      	bx	lr
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	700a      	strb	r2, [r1, #0]
 800d5d4:	4770      	bx	lr
	...

0800d5d8 <__sflush_r>:
 800d5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	0716      	lsls	r6, r2, #28
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	d454      	bmi.n	800d690 <__sflush_r+0xb8>
 800d5e6:	684b      	ldr	r3, [r1, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	dc02      	bgt.n	800d5f2 <__sflush_r+0x1a>
 800d5ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	dd48      	ble.n	800d684 <__sflush_r+0xac>
 800d5f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5f4:	2e00      	cmp	r6, #0
 800d5f6:	d045      	beq.n	800d684 <__sflush_r+0xac>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5fe:	682f      	ldr	r7, [r5, #0]
 800d600:	6a21      	ldr	r1, [r4, #32]
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	d030      	beq.n	800d668 <__sflush_r+0x90>
 800d606:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	0759      	lsls	r1, r3, #29
 800d60c:	d505      	bpl.n	800d61a <__sflush_r+0x42>
 800d60e:	6863      	ldr	r3, [r4, #4]
 800d610:	1ad2      	subs	r2, r2, r3
 800d612:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d614:	b10b      	cbz	r3, 800d61a <__sflush_r+0x42>
 800d616:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d618:	1ad2      	subs	r2, r2, r3
 800d61a:	2300      	movs	r3, #0
 800d61c:	4628      	mov	r0, r5
 800d61e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d620:	6a21      	ldr	r1, [r4, #32]
 800d622:	47b0      	blx	r6
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	d106      	bne.n	800d638 <__sflush_r+0x60>
 800d62a:	6829      	ldr	r1, [r5, #0]
 800d62c:	291d      	cmp	r1, #29
 800d62e:	d82b      	bhi.n	800d688 <__sflush_r+0xb0>
 800d630:	4a28      	ldr	r2, [pc, #160]	@ (800d6d4 <__sflush_r+0xfc>)
 800d632:	410a      	asrs	r2, r1
 800d634:	07d6      	lsls	r6, r2, #31
 800d636:	d427      	bmi.n	800d688 <__sflush_r+0xb0>
 800d638:	2200      	movs	r2, #0
 800d63a:	6062      	str	r2, [r4, #4]
 800d63c:	6922      	ldr	r2, [r4, #16]
 800d63e:	04d9      	lsls	r1, r3, #19
 800d640:	6022      	str	r2, [r4, #0]
 800d642:	d504      	bpl.n	800d64e <__sflush_r+0x76>
 800d644:	1c42      	adds	r2, r0, #1
 800d646:	d101      	bne.n	800d64c <__sflush_r+0x74>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b903      	cbnz	r3, 800d64e <__sflush_r+0x76>
 800d64c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d64e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d650:	602f      	str	r7, [r5, #0]
 800d652:	b1b9      	cbz	r1, 800d684 <__sflush_r+0xac>
 800d654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d658:	4299      	cmp	r1, r3
 800d65a:	d002      	beq.n	800d662 <__sflush_r+0x8a>
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7fe fdf7 	bl	800c250 <_free_r>
 800d662:	2300      	movs	r3, #0
 800d664:	6363      	str	r3, [r4, #52]	@ 0x34
 800d666:	e00d      	b.n	800d684 <__sflush_r+0xac>
 800d668:	2301      	movs	r3, #1
 800d66a:	4628      	mov	r0, r5
 800d66c:	47b0      	blx	r6
 800d66e:	4602      	mov	r2, r0
 800d670:	1c50      	adds	r0, r2, #1
 800d672:	d1c9      	bne.n	800d608 <__sflush_r+0x30>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0c6      	beq.n	800d608 <__sflush_r+0x30>
 800d67a:	2b1d      	cmp	r3, #29
 800d67c:	d001      	beq.n	800d682 <__sflush_r+0xaa>
 800d67e:	2b16      	cmp	r3, #22
 800d680:	d11d      	bne.n	800d6be <__sflush_r+0xe6>
 800d682:	602f      	str	r7, [r5, #0]
 800d684:	2000      	movs	r0, #0
 800d686:	e021      	b.n	800d6cc <__sflush_r+0xf4>
 800d688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d68c:	b21b      	sxth	r3, r3
 800d68e:	e01a      	b.n	800d6c6 <__sflush_r+0xee>
 800d690:	690f      	ldr	r7, [r1, #16]
 800d692:	2f00      	cmp	r7, #0
 800d694:	d0f6      	beq.n	800d684 <__sflush_r+0xac>
 800d696:	0793      	lsls	r3, r2, #30
 800d698:	bf18      	it	ne
 800d69a:	2300      	movne	r3, #0
 800d69c:	680e      	ldr	r6, [r1, #0]
 800d69e:	bf08      	it	eq
 800d6a0:	694b      	ldreq	r3, [r1, #20]
 800d6a2:	1bf6      	subs	r6, r6, r7
 800d6a4:	600f      	str	r7, [r1, #0]
 800d6a6:	608b      	str	r3, [r1, #8]
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	ddeb      	ble.n	800d684 <__sflush_r+0xac>
 800d6ac:	4633      	mov	r3, r6
 800d6ae:	463a      	mov	r2, r7
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	6a21      	ldr	r1, [r4, #32]
 800d6b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d6b8:	47e0      	blx	ip
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	dc07      	bgt.n	800d6ce <__sflush_r+0xf6>
 800d6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ce:	4407      	add	r7, r0
 800d6d0:	1a36      	subs	r6, r6, r0
 800d6d2:	e7e9      	b.n	800d6a8 <__sflush_r+0xd0>
 800d6d4:	dfbffffe 	.word	0xdfbffffe

0800d6d8 <_fflush_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	690b      	ldr	r3, [r1, #16]
 800d6dc:	4605      	mov	r5, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	b913      	cbnz	r3, 800d6e8 <_fflush_r+0x10>
 800d6e2:	2500      	movs	r5, #0
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	b118      	cbz	r0, 800d6f2 <_fflush_r+0x1a>
 800d6ea:	6a03      	ldr	r3, [r0, #32]
 800d6ec:	b90b      	cbnz	r3, 800d6f2 <_fflush_r+0x1a>
 800d6ee:	f7fd f8b5 	bl	800a85c <__sinit>
 800d6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0f3      	beq.n	800d6e2 <_fflush_r+0xa>
 800d6fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6fc:	07d0      	lsls	r0, r2, #31
 800d6fe:	d404      	bmi.n	800d70a <_fflush_r+0x32>
 800d700:	0599      	lsls	r1, r3, #22
 800d702:	d402      	bmi.n	800d70a <_fflush_r+0x32>
 800d704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d706:	f7fd ff17 	bl	800b538 <__retarget_lock_acquire_recursive>
 800d70a:	4628      	mov	r0, r5
 800d70c:	4621      	mov	r1, r4
 800d70e:	f7ff ff63 	bl	800d5d8 <__sflush_r>
 800d712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d714:	4605      	mov	r5, r0
 800d716:	07da      	lsls	r2, r3, #31
 800d718:	d4e4      	bmi.n	800d6e4 <_fflush_r+0xc>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	059b      	lsls	r3, r3, #22
 800d71e:	d4e1      	bmi.n	800d6e4 <_fflush_r+0xc>
 800d720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d722:	f7fd ff0b 	bl	800b53c <__retarget_lock_release_recursive>
 800d726:	e7dd      	b.n	800d6e4 <_fflush_r+0xc>

0800d728 <siscanf>:
 800d728:	b40e      	push	{r1, r2, r3}
 800d72a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d72e:	b530      	push	{r4, r5, lr}
 800d730:	b09c      	sub	sp, #112	@ 0x70
 800d732:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d734:	f854 5b04 	ldr.w	r5, [r4], #4
 800d738:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d73c:	9002      	str	r0, [sp, #8]
 800d73e:	9006      	str	r0, [sp, #24]
 800d740:	f7f2 fd10 	bl	8000164 <strlen>
 800d744:	4b0b      	ldr	r3, [pc, #44]	@ (800d774 <siscanf+0x4c>)
 800d746:	9003      	str	r0, [sp, #12]
 800d748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d74a:	2300      	movs	r3, #0
 800d74c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d74e:	9314      	str	r3, [sp, #80]	@ 0x50
 800d750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d754:	9007      	str	r0, [sp, #28]
 800d756:	4808      	ldr	r0, [pc, #32]	@ (800d778 <siscanf+0x50>)
 800d758:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d75c:	462a      	mov	r2, r5
 800d75e:	4623      	mov	r3, r4
 800d760:	a902      	add	r1, sp, #8
 800d762:	6800      	ldr	r0, [r0, #0]
 800d764:	9401      	str	r4, [sp, #4]
 800d766:	f000 f8b3 	bl	800d8d0 <__ssvfiscanf_r>
 800d76a:	b01c      	add	sp, #112	@ 0x70
 800d76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d770:	b003      	add	sp, #12
 800d772:	4770      	bx	lr
 800d774:	0800a8eb 	.word	0x0800a8eb
 800d778:	20000194 	.word	0x20000194

0800d77c <__gettzinfo>:
 800d77c:	4800      	ldr	r0, [pc, #0]	@ (800d780 <__gettzinfo+0x4>)
 800d77e:	4770      	bx	lr
 800d780:	200001e8 	.word	0x200001e8

0800d784 <_sbrk_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	2300      	movs	r3, #0
 800d788:	4d05      	ldr	r5, [pc, #20]	@ (800d7a0 <_sbrk_r+0x1c>)
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	602b      	str	r3, [r5, #0]
 800d790:	f7f7 f914 	bl	80049bc <_sbrk>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d102      	bne.n	800d79e <_sbrk_r+0x1a>
 800d798:	682b      	ldr	r3, [r5, #0]
 800d79a:	b103      	cbz	r3, 800d79e <_sbrk_r+0x1a>
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	20000c40 	.word	0x20000c40

0800d7a4 <__assert_func>:
 800d7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7a6:	4614      	mov	r4, r2
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <__assert_func+0x2c>)
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68d8      	ldr	r0, [r3, #12]
 800d7b2:	b954      	cbnz	r4, 800d7ca <__assert_func+0x26>
 800d7b4:	4b07      	ldr	r3, [pc, #28]	@ (800d7d4 <__assert_func+0x30>)
 800d7b6:	461c      	mov	r4, r3
 800d7b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7bc:	9100      	str	r1, [sp, #0]
 800d7be:	462b      	mov	r3, r5
 800d7c0:	4905      	ldr	r1, [pc, #20]	@ (800d7d8 <__assert_func+0x34>)
 800d7c2:	f000 fb43 	bl	800de4c <fiprintf>
 800d7c6:	f000 fbc4 	bl	800df52 <abort>
 800d7ca:	4b04      	ldr	r3, [pc, #16]	@ (800d7dc <__assert_func+0x38>)
 800d7cc:	e7f4      	b.n	800d7b8 <__assert_func+0x14>
 800d7ce:	bf00      	nop
 800d7d0:	20000194 	.word	0x20000194
 800d7d4:	0800f17b 	.word	0x0800f17b
 800d7d8:	0800f14d 	.word	0x0800f14d
 800d7dc:	0800f140 	.word	0x0800f140

0800d7e0 <_calloc_r>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	fba1 5402 	umull	r5, r4, r1, r2
 800d7e6:	b93c      	cbnz	r4, 800d7f8 <_calloc_r+0x18>
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	f7ff f929 	bl	800ca40 <_malloc_r>
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	b928      	cbnz	r0, 800d7fe <_calloc_r+0x1e>
 800d7f2:	2600      	movs	r6, #0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	220c      	movs	r2, #12
 800d7fa:	6002      	str	r2, [r0, #0]
 800d7fc:	e7f9      	b.n	800d7f2 <_calloc_r+0x12>
 800d7fe:	462a      	mov	r2, r5
 800d800:	4621      	mov	r1, r4
 800d802:	f7fd f8a6 	bl	800a952 <memset>
 800d806:	e7f5      	b.n	800d7f4 <_calloc_r+0x14>

0800d808 <__env_lock>:
 800d808:	4801      	ldr	r0, [pc, #4]	@ (800d810 <__env_lock+0x8>)
 800d80a:	f7fd be95 	b.w	800b538 <__retarget_lock_acquire_recursive>
 800d80e:	bf00      	nop
 800d810:	20000c45 	.word	0x20000c45

0800d814 <__env_unlock>:
 800d814:	4801      	ldr	r0, [pc, #4]	@ (800d81c <__env_unlock+0x8>)
 800d816:	f7fd be91 	b.w	800b53c <__retarget_lock_release_recursive>
 800d81a:	bf00      	nop
 800d81c:	20000c45 	.word	0x20000c45

0800d820 <_sungetc_r>:
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	1c4b      	adds	r3, r1, #1
 800d824:	4614      	mov	r4, r2
 800d826:	d103      	bne.n	800d830 <_sungetc_r+0x10>
 800d828:	f04f 35ff 	mov.w	r5, #4294967295
 800d82c:	4628      	mov	r0, r5
 800d82e:	bd38      	pop	{r3, r4, r5, pc}
 800d830:	8993      	ldrh	r3, [r2, #12]
 800d832:	b2cd      	uxtb	r5, r1
 800d834:	f023 0320 	bic.w	r3, r3, #32
 800d838:	8193      	strh	r3, [r2, #12]
 800d83a:	6853      	ldr	r3, [r2, #4]
 800d83c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d83e:	b18a      	cbz	r2, 800d864 <_sungetc_r+0x44>
 800d840:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d842:	429a      	cmp	r2, r3
 800d844:	dd08      	ble.n	800d858 <_sungetc_r+0x38>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	6022      	str	r2, [r4, #0]
 800d84c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d850:	6863      	ldr	r3, [r4, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	6063      	str	r3, [r4, #4]
 800d856:	e7e9      	b.n	800d82c <_sungetc_r+0xc>
 800d858:	4621      	mov	r1, r4
 800d85a:	f000 fb42 	bl	800dee2 <__submore>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d0f1      	beq.n	800d846 <_sungetc_r+0x26>
 800d862:	e7e1      	b.n	800d828 <_sungetc_r+0x8>
 800d864:	6921      	ldr	r1, [r4, #16]
 800d866:	6822      	ldr	r2, [r4, #0]
 800d868:	b141      	cbz	r1, 800d87c <_sungetc_r+0x5c>
 800d86a:	4291      	cmp	r1, r2
 800d86c:	d206      	bcs.n	800d87c <_sungetc_r+0x5c>
 800d86e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d872:	42a9      	cmp	r1, r5
 800d874:	d102      	bne.n	800d87c <_sungetc_r+0x5c>
 800d876:	3a01      	subs	r2, #1
 800d878:	6022      	str	r2, [r4, #0]
 800d87a:	e7ea      	b.n	800d852 <_sungetc_r+0x32>
 800d87c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d884:	6363      	str	r3, [r4, #52]	@ 0x34
 800d886:	2303      	movs	r3, #3
 800d888:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d88a:	4623      	mov	r3, r4
 800d88c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	2301      	movs	r3, #1
 800d894:	e7de      	b.n	800d854 <_sungetc_r+0x34>

0800d896 <__ssrefill_r>:
 800d896:	b510      	push	{r4, lr}
 800d898:	460c      	mov	r4, r1
 800d89a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d89c:	b169      	cbz	r1, 800d8ba <__ssrefill_r+0x24>
 800d89e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8a2:	4299      	cmp	r1, r3
 800d8a4:	d001      	beq.n	800d8aa <__ssrefill_r+0x14>
 800d8a6:	f7fe fcd3 	bl	800c250 <_free_r>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800d8b0:	6063      	str	r3, [r4, #4]
 800d8b2:	b113      	cbz	r3, 800d8ba <__ssrefill_r+0x24>
 800d8b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	6923      	ldr	r3, [r4, #16]
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6063      	str	r3, [r4, #4]
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f043 0320 	orr.w	r3, r3, #32
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	e7f3      	b.n	800d8b8 <__ssrefill_r+0x22>

0800d8d0 <__ssvfiscanf_r>:
 800d8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	4606      	mov	r6, r0
 800d8da:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d8de:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d8e2:	49aa      	ldr	r1, [pc, #680]	@ (800db8c <__ssvfiscanf_r+0x2bc>)
 800d8e4:	f10d 0804 	add.w	r8, sp, #4
 800d8e8:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d8ea:	49a9      	ldr	r1, [pc, #676]	@ (800db90 <__ssvfiscanf_r+0x2c0>)
 800d8ec:	4fa9      	ldr	r7, [pc, #676]	@ (800db94 <__ssvfiscanf_r+0x2c4>)
 800d8ee:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d8f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	7813      	ldrb	r3, [r2, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 8159 	beq.w	800dbb0 <__ssvfiscanf_r+0x2e0>
 800d8fe:	5cf9      	ldrb	r1, [r7, r3]
 800d900:	1c55      	adds	r5, r2, #1
 800d902:	f011 0108 	ands.w	r1, r1, #8
 800d906:	d019      	beq.n	800d93c <__ssvfiscanf_r+0x6c>
 800d908:	6863      	ldr	r3, [r4, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dd0f      	ble.n	800d92e <__ssvfiscanf_r+0x5e>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	781a      	ldrb	r2, [r3, #0]
 800d912:	5cba      	ldrb	r2, [r7, r2]
 800d914:	0712      	lsls	r2, r2, #28
 800d916:	d401      	bmi.n	800d91c <__ssvfiscanf_r+0x4c>
 800d918:	462a      	mov	r2, r5
 800d91a:	e7ec      	b.n	800d8f6 <__ssvfiscanf_r+0x26>
 800d91c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d91e:	3301      	adds	r3, #1
 800d920:	3201      	adds	r2, #1
 800d922:	9245      	str	r2, [sp, #276]	@ 0x114
 800d924:	6862      	ldr	r2, [r4, #4]
 800d926:	6023      	str	r3, [r4, #0]
 800d928:	3a01      	subs	r2, #1
 800d92a:	6062      	str	r2, [r4, #4]
 800d92c:	e7ec      	b.n	800d908 <__ssvfiscanf_r+0x38>
 800d92e:	4621      	mov	r1, r4
 800d930:	4630      	mov	r0, r6
 800d932:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d934:	4798      	blx	r3
 800d936:	2800      	cmp	r0, #0
 800d938:	d0e9      	beq.n	800d90e <__ssvfiscanf_r+0x3e>
 800d93a:	e7ed      	b.n	800d918 <__ssvfiscanf_r+0x48>
 800d93c:	2b25      	cmp	r3, #37	@ 0x25
 800d93e:	d012      	beq.n	800d966 <__ssvfiscanf_r+0x96>
 800d940:	4699      	mov	r9, r3
 800d942:	6863      	ldr	r3, [r4, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f340 8094 	ble.w	800da72 <__ssvfiscanf_r+0x1a2>
 800d94a:	6822      	ldr	r2, [r4, #0]
 800d94c:	7813      	ldrb	r3, [r2, #0]
 800d94e:	454b      	cmp	r3, r9
 800d950:	f040 812e 	bne.w	800dbb0 <__ssvfiscanf_r+0x2e0>
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	3201      	adds	r2, #1
 800d958:	3b01      	subs	r3, #1
 800d95a:	6063      	str	r3, [r4, #4]
 800d95c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	3301      	adds	r3, #1
 800d962:	9345      	str	r3, [sp, #276]	@ 0x114
 800d964:	e7d8      	b.n	800d918 <__ssvfiscanf_r+0x48>
 800d966:	9141      	str	r1, [sp, #260]	@ 0x104
 800d968:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d96a:	7853      	ldrb	r3, [r2, #1]
 800d96c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d96e:	bf04      	itt	eq
 800d970:	2310      	moveq	r3, #16
 800d972:	1c95      	addeq	r5, r2, #2
 800d974:	f04f 020a 	mov.w	r2, #10
 800d978:	bf08      	it	eq
 800d97a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d97c:	46a9      	mov	r9, r5
 800d97e:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d982:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d986:	2b09      	cmp	r3, #9
 800d988:	d91e      	bls.n	800d9c8 <__ssvfiscanf_r+0xf8>
 800d98a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800db98 <__ssvfiscanf_r+0x2c8>
 800d98e:	2203      	movs	r2, #3
 800d990:	4650      	mov	r0, sl
 800d992:	f7fd fddc 	bl	800b54e <memchr>
 800d996:	b138      	cbz	r0, 800d9a8 <__ssvfiscanf_r+0xd8>
 800d998:	2301      	movs	r3, #1
 800d99a:	464d      	mov	r5, r9
 800d99c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d99e:	eba0 000a 	sub.w	r0, r0, sl
 800d9a2:	4083      	lsls	r3, r0
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	9341      	str	r3, [sp, #260]	@ 0x104
 800d9a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9ac:	2b78      	cmp	r3, #120	@ 0x78
 800d9ae:	d806      	bhi.n	800d9be <__ssvfiscanf_r+0xee>
 800d9b0:	2b57      	cmp	r3, #87	@ 0x57
 800d9b2:	d810      	bhi.n	800d9d6 <__ssvfiscanf_r+0x106>
 800d9b4:	2b25      	cmp	r3, #37	@ 0x25
 800d9b6:	d0c3      	beq.n	800d940 <__ssvfiscanf_r+0x70>
 800d9b8:	d856      	bhi.n	800da68 <__ssvfiscanf_r+0x198>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d064      	beq.n	800da88 <__ssvfiscanf_r+0x1b8>
 800d9be:	2303      	movs	r3, #3
 800d9c0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d9c2:	230a      	movs	r3, #10
 800d9c4:	9342      	str	r3, [sp, #264]	@ 0x108
 800d9c6:	e077      	b.n	800dab8 <__ssvfiscanf_r+0x1e8>
 800d9c8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d9ca:	464d      	mov	r5, r9
 800d9cc:	fb02 1103 	mla	r1, r2, r3, r1
 800d9d0:	3930      	subs	r1, #48	@ 0x30
 800d9d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d9d4:	e7d2      	b.n	800d97c <__ssvfiscanf_r+0xac>
 800d9d6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d9da:	2a20      	cmp	r2, #32
 800d9dc:	d8ef      	bhi.n	800d9be <__ssvfiscanf_r+0xee>
 800d9de:	a101      	add	r1, pc, #4	@ (adr r1, 800d9e4 <__ssvfiscanf_r+0x114>)
 800d9e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d9e4:	0800da97 	.word	0x0800da97
 800d9e8:	0800d9bf 	.word	0x0800d9bf
 800d9ec:	0800d9bf 	.word	0x0800d9bf
 800d9f0:	0800daf1 	.word	0x0800daf1
 800d9f4:	0800d9bf 	.word	0x0800d9bf
 800d9f8:	0800d9bf 	.word	0x0800d9bf
 800d9fc:	0800d9bf 	.word	0x0800d9bf
 800da00:	0800d9bf 	.word	0x0800d9bf
 800da04:	0800d9bf 	.word	0x0800d9bf
 800da08:	0800d9bf 	.word	0x0800d9bf
 800da0c:	0800d9bf 	.word	0x0800d9bf
 800da10:	0800db07 	.word	0x0800db07
 800da14:	0800daed 	.word	0x0800daed
 800da18:	0800da6f 	.word	0x0800da6f
 800da1c:	0800da6f 	.word	0x0800da6f
 800da20:	0800da6f 	.word	0x0800da6f
 800da24:	0800d9bf 	.word	0x0800d9bf
 800da28:	0800daa9 	.word	0x0800daa9
 800da2c:	0800d9bf 	.word	0x0800d9bf
 800da30:	0800d9bf 	.word	0x0800d9bf
 800da34:	0800d9bf 	.word	0x0800d9bf
 800da38:	0800d9bf 	.word	0x0800d9bf
 800da3c:	0800db17 	.word	0x0800db17
 800da40:	0800dab1 	.word	0x0800dab1
 800da44:	0800da8f 	.word	0x0800da8f
 800da48:	0800d9bf 	.word	0x0800d9bf
 800da4c:	0800d9bf 	.word	0x0800d9bf
 800da50:	0800db13 	.word	0x0800db13
 800da54:	0800d9bf 	.word	0x0800d9bf
 800da58:	0800daed 	.word	0x0800daed
 800da5c:	0800d9bf 	.word	0x0800d9bf
 800da60:	0800d9bf 	.word	0x0800d9bf
 800da64:	0800da97 	.word	0x0800da97
 800da68:	3b45      	subs	r3, #69	@ 0x45
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d8a7      	bhi.n	800d9be <__ssvfiscanf_r+0xee>
 800da6e:	2305      	movs	r3, #5
 800da70:	e021      	b.n	800dab6 <__ssvfiscanf_r+0x1e6>
 800da72:	4621      	mov	r1, r4
 800da74:	4630      	mov	r0, r6
 800da76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da78:	4798      	blx	r3
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f43f af65 	beq.w	800d94a <__ssvfiscanf_r+0x7a>
 800da80:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800da82:	2800      	cmp	r0, #0
 800da84:	f040 808c 	bne.w	800dba0 <__ssvfiscanf_r+0x2d0>
 800da88:	f04f 30ff 	mov.w	r0, #4294967295
 800da8c:	e08c      	b.n	800dba8 <__ssvfiscanf_r+0x2d8>
 800da8e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da90:	f042 0220 	orr.w	r2, r2, #32
 800da94:	9241      	str	r2, [sp, #260]	@ 0x104
 800da96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da9c:	9241      	str	r2, [sp, #260]	@ 0x104
 800da9e:	2210      	movs	r2, #16
 800daa0:	2b6e      	cmp	r3, #110	@ 0x6e
 800daa2:	9242      	str	r2, [sp, #264]	@ 0x108
 800daa4:	d902      	bls.n	800daac <__ssvfiscanf_r+0x1dc>
 800daa6:	e005      	b.n	800dab4 <__ssvfiscanf_r+0x1e4>
 800daa8:	2300      	movs	r3, #0
 800daaa:	9342      	str	r3, [sp, #264]	@ 0x108
 800daac:	2303      	movs	r3, #3
 800daae:	e002      	b.n	800dab6 <__ssvfiscanf_r+0x1e6>
 800dab0:	2308      	movs	r3, #8
 800dab2:	9342      	str	r3, [sp, #264]	@ 0x108
 800dab4:	2304      	movs	r3, #4
 800dab6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dab8:	6863      	ldr	r3, [r4, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dd39      	ble.n	800db32 <__ssvfiscanf_r+0x262>
 800dabe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dac0:	0659      	lsls	r1, r3, #25
 800dac2:	d404      	bmi.n	800dace <__ssvfiscanf_r+0x1fe>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	5cba      	ldrb	r2, [r7, r2]
 800daca:	0712      	lsls	r2, r2, #28
 800dacc:	d438      	bmi.n	800db40 <__ssvfiscanf_r+0x270>
 800dace:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	dc47      	bgt.n	800db64 <__ssvfiscanf_r+0x294>
 800dad4:	466b      	mov	r3, sp
 800dad6:	4622      	mov	r2, r4
 800dad8:	4630      	mov	r0, r6
 800dada:	a941      	add	r1, sp, #260	@ 0x104
 800dadc:	f000 f86a 	bl	800dbb4 <_scanf_chars>
 800dae0:	2801      	cmp	r0, #1
 800dae2:	d065      	beq.n	800dbb0 <__ssvfiscanf_r+0x2e0>
 800dae4:	2802      	cmp	r0, #2
 800dae6:	f47f af17 	bne.w	800d918 <__ssvfiscanf_r+0x48>
 800daea:	e7c9      	b.n	800da80 <__ssvfiscanf_r+0x1b0>
 800daec:	220a      	movs	r2, #10
 800daee:	e7d7      	b.n	800daa0 <__ssvfiscanf_r+0x1d0>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4640      	mov	r0, r8
 800daf4:	f000 f9bc 	bl	800de70 <__sccl>
 800daf8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dafa:	4605      	mov	r5, r0
 800dafc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db00:	9341      	str	r3, [sp, #260]	@ 0x104
 800db02:	2301      	movs	r3, #1
 800db04:	e7d7      	b.n	800dab6 <__ssvfiscanf_r+0x1e6>
 800db06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db0c:	9341      	str	r3, [sp, #260]	@ 0x104
 800db0e:	2300      	movs	r3, #0
 800db10:	e7d1      	b.n	800dab6 <__ssvfiscanf_r+0x1e6>
 800db12:	2302      	movs	r3, #2
 800db14:	e7cf      	b.n	800dab6 <__ssvfiscanf_r+0x1e6>
 800db16:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800db18:	06c3      	lsls	r3, r0, #27
 800db1a:	f53f aefd 	bmi.w	800d918 <__ssvfiscanf_r+0x48>
 800db1e:	9b00      	ldr	r3, [sp, #0]
 800db20:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db22:	1d19      	adds	r1, r3, #4
 800db24:	9100      	str	r1, [sp, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	07c0      	lsls	r0, r0, #31
 800db2a:	bf4c      	ite	mi
 800db2c:	801a      	strhmi	r2, [r3, #0]
 800db2e:	601a      	strpl	r2, [r3, #0]
 800db30:	e6f2      	b.n	800d918 <__ssvfiscanf_r+0x48>
 800db32:	4621      	mov	r1, r4
 800db34:	4630      	mov	r0, r6
 800db36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800db38:	4798      	blx	r3
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d0bf      	beq.n	800dabe <__ssvfiscanf_r+0x1ee>
 800db3e:	e79f      	b.n	800da80 <__ssvfiscanf_r+0x1b0>
 800db40:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db42:	3201      	adds	r2, #1
 800db44:	9245      	str	r2, [sp, #276]	@ 0x114
 800db46:	6862      	ldr	r2, [r4, #4]
 800db48:	3a01      	subs	r2, #1
 800db4a:	2a00      	cmp	r2, #0
 800db4c:	6062      	str	r2, [r4, #4]
 800db4e:	dd02      	ble.n	800db56 <__ssvfiscanf_r+0x286>
 800db50:	3301      	adds	r3, #1
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	e7b6      	b.n	800dac4 <__ssvfiscanf_r+0x1f4>
 800db56:	4621      	mov	r1, r4
 800db58:	4630      	mov	r0, r6
 800db5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800db5c:	4798      	blx	r3
 800db5e:	2800      	cmp	r0, #0
 800db60:	d0b0      	beq.n	800dac4 <__ssvfiscanf_r+0x1f4>
 800db62:	e78d      	b.n	800da80 <__ssvfiscanf_r+0x1b0>
 800db64:	2b04      	cmp	r3, #4
 800db66:	dc06      	bgt.n	800db76 <__ssvfiscanf_r+0x2a6>
 800db68:	466b      	mov	r3, sp
 800db6a:	4622      	mov	r2, r4
 800db6c:	4630      	mov	r0, r6
 800db6e:	a941      	add	r1, sp, #260	@ 0x104
 800db70:	f000 f87a 	bl	800dc68 <_scanf_i>
 800db74:	e7b4      	b.n	800dae0 <__ssvfiscanf_r+0x210>
 800db76:	4b09      	ldr	r3, [pc, #36]	@ (800db9c <__ssvfiscanf_r+0x2cc>)
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f43f aecd 	beq.w	800d918 <__ssvfiscanf_r+0x48>
 800db7e:	466b      	mov	r3, sp
 800db80:	4622      	mov	r2, r4
 800db82:	4630      	mov	r0, r6
 800db84:	a941      	add	r1, sp, #260	@ 0x104
 800db86:	f3af 8000 	nop.w
 800db8a:	e7a9      	b.n	800dae0 <__ssvfiscanf_r+0x210>
 800db8c:	0800d821 	.word	0x0800d821
 800db90:	0800d897 	.word	0x0800d897
 800db94:	0800ecb1 	.word	0x0800ecb1
 800db98:	0800f17c 	.word	0x0800f17c
 800db9c:	00000000 	.word	0x00000000
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	065b      	lsls	r3, r3, #25
 800dba4:	f53f af70 	bmi.w	800da88 <__ssvfiscanf_r+0x1b8>
 800dba8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dbb2:	e7f9      	b.n	800dba8 <__ssvfiscanf_r+0x2d8>

0800dbb4 <_scanf_chars>:
 800dbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb8:	4615      	mov	r5, r2
 800dbba:	688a      	ldr	r2, [r1, #8]
 800dbbc:	4680      	mov	r8, r0
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	b932      	cbnz	r2, 800dbd0 <_scanf_chars+0x1c>
 800dbc2:	698a      	ldr	r2, [r1, #24]
 800dbc4:	2a00      	cmp	r2, #0
 800dbc6:	bf14      	ite	ne
 800dbc8:	f04f 32ff 	movne.w	r2, #4294967295
 800dbcc:	2201      	moveq	r2, #1
 800dbce:	608a      	str	r2, [r1, #8]
 800dbd0:	2700      	movs	r7, #0
 800dbd2:	6822      	ldr	r2, [r4, #0]
 800dbd4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800dc64 <_scanf_chars+0xb0>
 800dbd8:	06d1      	lsls	r1, r2, #27
 800dbda:	bf5f      	itttt	pl
 800dbdc:	681a      	ldrpl	r2, [r3, #0]
 800dbde:	1d11      	addpl	r1, r2, #4
 800dbe0:	6019      	strpl	r1, [r3, #0]
 800dbe2:	6816      	ldrpl	r6, [r2, #0]
 800dbe4:	69a0      	ldr	r0, [r4, #24]
 800dbe6:	b188      	cbz	r0, 800dc0c <_scanf_chars+0x58>
 800dbe8:	2801      	cmp	r0, #1
 800dbea:	d107      	bne.n	800dbfc <_scanf_chars+0x48>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	781a      	ldrb	r2, [r3, #0]
 800dbf0:	6963      	ldr	r3, [r4, #20]
 800dbf2:	5c9b      	ldrb	r3, [r3, r2]
 800dbf4:	b953      	cbnz	r3, 800dc0c <_scanf_chars+0x58>
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	d031      	beq.n	800dc5e <_scanf_chars+0xaa>
 800dbfa:	e022      	b.n	800dc42 <_scanf_chars+0x8e>
 800dbfc:	2802      	cmp	r0, #2
 800dbfe:	d120      	bne.n	800dc42 <_scanf_chars+0x8e>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dc08:	071b      	lsls	r3, r3, #28
 800dc0a:	d41a      	bmi.n	800dc42 <_scanf_chars+0x8e>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	3701      	adds	r7, #1
 800dc10:	06da      	lsls	r2, r3, #27
 800dc12:	bf5e      	ittt	pl
 800dc14:	682b      	ldrpl	r3, [r5, #0]
 800dc16:	781b      	ldrbpl	r3, [r3, #0]
 800dc18:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dc1c:	682a      	ldr	r2, [r5, #0]
 800dc1e:	686b      	ldr	r3, [r5, #4]
 800dc20:	3201      	adds	r2, #1
 800dc22:	602a      	str	r2, [r5, #0]
 800dc24:	68a2      	ldr	r2, [r4, #8]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	3a01      	subs	r2, #1
 800dc2a:	606b      	str	r3, [r5, #4]
 800dc2c:	60a2      	str	r2, [r4, #8]
 800dc2e:	b142      	cbz	r2, 800dc42 <_scanf_chars+0x8e>
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dcd7      	bgt.n	800dbe4 <_scanf_chars+0x30>
 800dc34:	4629      	mov	r1, r5
 800dc36:	4640      	mov	r0, r8
 800dc38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dc3c:	4798      	blx	r3
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d0d0      	beq.n	800dbe4 <_scanf_chars+0x30>
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	f013 0310 	ands.w	r3, r3, #16
 800dc48:	d105      	bne.n	800dc56 <_scanf_chars+0xa2>
 800dc4a:	68e2      	ldr	r2, [r4, #12]
 800dc4c:	3201      	adds	r2, #1
 800dc4e:	60e2      	str	r2, [r4, #12]
 800dc50:	69a2      	ldr	r2, [r4, #24]
 800dc52:	b102      	cbz	r2, 800dc56 <_scanf_chars+0xa2>
 800dc54:	7033      	strb	r3, [r6, #0]
 800dc56:	2000      	movs	r0, #0
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	443b      	add	r3, r7
 800dc5c:	6123      	str	r3, [r4, #16]
 800dc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc62:	bf00      	nop
 800dc64:	0800ecb1 	.word	0x0800ecb1

0800dc68 <_scanf_i>:
 800dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	4698      	mov	r8, r3
 800dc70:	4b72      	ldr	r3, [pc, #456]	@ (800de3c <_scanf_i+0x1d4>)
 800dc72:	b087      	sub	sp, #28
 800dc74:	4682      	mov	sl, r0
 800dc76:	4616      	mov	r6, r2
 800dc78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc7c:	ab03      	add	r3, sp, #12
 800dc7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dc82:	4b6f      	ldr	r3, [pc, #444]	@ (800de40 <_scanf_i+0x1d8>)
 800dc84:	69a1      	ldr	r1, [r4, #24]
 800dc86:	4a6f      	ldr	r2, [pc, #444]	@ (800de44 <_scanf_i+0x1dc>)
 800dc88:	4627      	mov	r7, r4
 800dc8a:	2903      	cmp	r1, #3
 800dc8c:	bf08      	it	eq
 800dc8e:	461a      	moveq	r2, r3
 800dc90:	68a3      	ldr	r3, [r4, #8]
 800dc92:	9201      	str	r2, [sp, #4]
 800dc94:	1e5a      	subs	r2, r3, #1
 800dc96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dc9a:	bf81      	itttt	hi
 800dc9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dca0:	eb03 0905 	addhi.w	r9, r3, r5
 800dca4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dca8:	60a3      	strhi	r3, [r4, #8]
 800dcaa:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dcae:	bf98      	it	ls
 800dcb0:	f04f 0900 	movls.w	r9, #0
 800dcb4:	463d      	mov	r5, r7
 800dcb6:	f04f 0b00 	mov.w	fp, #0
 800dcba:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	6831      	ldr	r1, [r6, #0]
 800dcc2:	ab03      	add	r3, sp, #12
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	7809      	ldrb	r1, [r1, #0]
 800dcc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dccc:	f7fd fc3f 	bl	800b54e <memchr>
 800dcd0:	b328      	cbz	r0, 800dd1e <_scanf_i+0xb6>
 800dcd2:	f1bb 0f01 	cmp.w	fp, #1
 800dcd6:	d159      	bne.n	800dd8c <_scanf_i+0x124>
 800dcd8:	6862      	ldr	r2, [r4, #4]
 800dcda:	b92a      	cbnz	r2, 800dce8 <_scanf_i+0x80>
 800dcdc:	2108      	movs	r1, #8
 800dcde:	6822      	ldr	r2, [r4, #0]
 800dce0:	6061      	str	r1, [r4, #4]
 800dce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dce6:	6022      	str	r2, [r4, #0]
 800dce8:	6822      	ldr	r2, [r4, #0]
 800dcea:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	68a2      	ldr	r2, [r4, #8]
 800dcf2:	1e51      	subs	r1, r2, #1
 800dcf4:	60a1      	str	r1, [r4, #8]
 800dcf6:	b192      	cbz	r2, 800dd1e <_scanf_i+0xb6>
 800dcf8:	6832      	ldr	r2, [r6, #0]
 800dcfa:	1c51      	adds	r1, r2, #1
 800dcfc:	6031      	str	r1, [r6, #0]
 800dcfe:	7812      	ldrb	r2, [r2, #0]
 800dd00:	f805 2b01 	strb.w	r2, [r5], #1
 800dd04:	6872      	ldr	r2, [r6, #4]
 800dd06:	3a01      	subs	r2, #1
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	6072      	str	r2, [r6, #4]
 800dd0c:	dc07      	bgt.n	800dd1e <_scanf_i+0xb6>
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4650      	mov	r0, sl
 800dd12:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dd16:	4790      	blx	r2
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	f040 8085 	bne.w	800de28 <_scanf_i+0x1c0>
 800dd1e:	f10b 0b01 	add.w	fp, fp, #1
 800dd22:	f1bb 0f03 	cmp.w	fp, #3
 800dd26:	d1cb      	bne.n	800dcc0 <_scanf_i+0x58>
 800dd28:	6863      	ldr	r3, [r4, #4]
 800dd2a:	b90b      	cbnz	r3, 800dd30 <_scanf_i+0xc8>
 800dd2c:	230a      	movs	r3, #10
 800dd2e:	6063      	str	r3, [r4, #4]
 800dd30:	6863      	ldr	r3, [r4, #4]
 800dd32:	4945      	ldr	r1, [pc, #276]	@ (800de48 <_scanf_i+0x1e0>)
 800dd34:	6960      	ldr	r0, [r4, #20]
 800dd36:	1ac9      	subs	r1, r1, r3
 800dd38:	f000 f89a 	bl	800de70 <__sccl>
 800dd3c:	f04f 0b00 	mov.w	fp, #0
 800dd40:	68a3      	ldr	r3, [r4, #8]
 800dd42:	6822      	ldr	r2, [r4, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d03d      	beq.n	800ddc4 <_scanf_i+0x15c>
 800dd48:	6831      	ldr	r1, [r6, #0]
 800dd4a:	6960      	ldr	r0, [r4, #20]
 800dd4c:	f891 c000 	ldrb.w	ip, [r1]
 800dd50:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d035      	beq.n	800ddc4 <_scanf_i+0x15c>
 800dd58:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800dd5c:	d124      	bne.n	800dda8 <_scanf_i+0x140>
 800dd5e:	0510      	lsls	r0, r2, #20
 800dd60:	d522      	bpl.n	800dda8 <_scanf_i+0x140>
 800dd62:	f10b 0b01 	add.w	fp, fp, #1
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	d003      	beq.n	800dd74 <_scanf_i+0x10c>
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd72:	60a3      	str	r3, [r4, #8]
 800dd74:	6873      	ldr	r3, [r6, #4]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	6073      	str	r3, [r6, #4]
 800dd7c:	dd1b      	ble.n	800ddb6 <_scanf_i+0x14e>
 800dd7e:	6833      	ldr	r3, [r6, #0]
 800dd80:	3301      	adds	r3, #1
 800dd82:	6033      	str	r3, [r6, #0]
 800dd84:	68a3      	ldr	r3, [r4, #8]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	60a3      	str	r3, [r4, #8]
 800dd8a:	e7d9      	b.n	800dd40 <_scanf_i+0xd8>
 800dd8c:	f1bb 0f02 	cmp.w	fp, #2
 800dd90:	d1ae      	bne.n	800dcf0 <_scanf_i+0x88>
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800dd98:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800dd9c:	d1bf      	bne.n	800dd1e <_scanf_i+0xb6>
 800dd9e:	2110      	movs	r1, #16
 800dda0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dda4:	6061      	str	r1, [r4, #4]
 800dda6:	e7a2      	b.n	800dcee <_scanf_i+0x86>
 800dda8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ddac:	6022      	str	r2, [r4, #0]
 800ddae:	780b      	ldrb	r3, [r1, #0]
 800ddb0:	f805 3b01 	strb.w	r3, [r5], #1
 800ddb4:	e7de      	b.n	800dd74 <_scanf_i+0x10c>
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4650      	mov	r0, sl
 800ddba:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ddbe:	4798      	blx	r3
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d0df      	beq.n	800dd84 <_scanf_i+0x11c>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	05d9      	lsls	r1, r3, #23
 800ddc8:	d50d      	bpl.n	800dde6 <_scanf_i+0x17e>
 800ddca:	42bd      	cmp	r5, r7
 800ddcc:	d909      	bls.n	800dde2 <_scanf_i+0x17a>
 800ddce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ddda:	f105 39ff 	add.w	r9, r5, #4294967295
 800ddde:	4798      	blx	r3
 800dde0:	464d      	mov	r5, r9
 800dde2:	42bd      	cmp	r5, r7
 800dde4:	d028      	beq.n	800de38 <_scanf_i+0x1d0>
 800dde6:	6822      	ldr	r2, [r4, #0]
 800dde8:	f012 0210 	ands.w	r2, r2, #16
 800ddec:	d113      	bne.n	800de16 <_scanf_i+0x1ae>
 800ddee:	702a      	strb	r2, [r5, #0]
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	6863      	ldr	r3, [r4, #4]
 800ddf4:	4650      	mov	r0, sl
 800ddf6:	9e01      	ldr	r6, [sp, #4]
 800ddf8:	47b0      	blx	r6
 800ddfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ddfe:	6821      	ldr	r1, [r4, #0]
 800de00:	1d1a      	adds	r2, r3, #4
 800de02:	f8c8 2000 	str.w	r2, [r8]
 800de06:	f011 0f20 	tst.w	r1, #32
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	d00f      	beq.n	800de2e <_scanf_i+0x1c6>
 800de0e:	6018      	str	r0, [r3, #0]
 800de10:	68e3      	ldr	r3, [r4, #12]
 800de12:	3301      	adds	r3, #1
 800de14:	60e3      	str	r3, [r4, #12]
 800de16:	2000      	movs	r0, #0
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	1bed      	subs	r5, r5, r7
 800de1c:	445d      	add	r5, fp
 800de1e:	442b      	add	r3, r5
 800de20:	6123      	str	r3, [r4, #16]
 800de22:	b007      	add	sp, #28
 800de24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de28:	f04f 0b00 	mov.w	fp, #0
 800de2c:	e7ca      	b.n	800ddc4 <_scanf_i+0x15c>
 800de2e:	07ca      	lsls	r2, r1, #31
 800de30:	bf4c      	ite	mi
 800de32:	8018      	strhmi	r0, [r3, #0]
 800de34:	6018      	strpl	r0, [r3, #0]
 800de36:	e7eb      	b.n	800de10 <_scanf_i+0x1a8>
 800de38:	2001      	movs	r0, #1
 800de3a:	e7f2      	b.n	800de22 <_scanf_i+0x1ba>
 800de3c:	0800ec04 	.word	0x0800ec04
 800de40:	08009e75 	.word	0x08009e75
 800de44:	0800d5a5 	.word	0x0800d5a5
 800de48:	0800f190 	.word	0x0800f190

0800de4c <fiprintf>:
 800de4c:	b40e      	push	{r1, r2, r3}
 800de4e:	b503      	push	{r0, r1, lr}
 800de50:	4601      	mov	r1, r0
 800de52:	ab03      	add	r3, sp, #12
 800de54:	4805      	ldr	r0, [pc, #20]	@ (800de6c <fiprintf+0x20>)
 800de56:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5a:	6800      	ldr	r0, [r0, #0]
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	f000 f8d5 	bl	800e00c <_vfiprintf_r>
 800de62:	b002      	add	sp, #8
 800de64:	f85d eb04 	ldr.w	lr, [sp], #4
 800de68:	b003      	add	sp, #12
 800de6a:	4770      	bx	lr
 800de6c:	20000194 	.word	0x20000194

0800de70 <__sccl>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	780b      	ldrb	r3, [r1, #0]
 800de74:	4604      	mov	r4, r0
 800de76:	2b5e      	cmp	r3, #94	@ 0x5e
 800de78:	bf0b      	itete	eq
 800de7a:	784b      	ldrbeq	r3, [r1, #1]
 800de7c:	1c4a      	addne	r2, r1, #1
 800de7e:	1c8a      	addeq	r2, r1, #2
 800de80:	2100      	movne	r1, #0
 800de82:	bf08      	it	eq
 800de84:	2101      	moveq	r1, #1
 800de86:	3801      	subs	r0, #1
 800de88:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800de8c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800de90:	42a8      	cmp	r0, r5
 800de92:	d1fb      	bne.n	800de8c <__sccl+0x1c>
 800de94:	b90b      	cbnz	r3, 800de9a <__sccl+0x2a>
 800de96:	1e50      	subs	r0, r2, #1
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	f081 0101 	eor.w	r1, r1, #1
 800de9e:	4610      	mov	r0, r2
 800dea0:	54e1      	strb	r1, [r4, r3]
 800dea2:	4602      	mov	r2, r0
 800dea4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dea8:	2d2d      	cmp	r5, #45	@ 0x2d
 800deaa:	d005      	beq.n	800deb8 <__sccl+0x48>
 800deac:	2d5d      	cmp	r5, #93	@ 0x5d
 800deae:	d016      	beq.n	800dede <__sccl+0x6e>
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	d0f1      	beq.n	800de98 <__sccl+0x28>
 800deb4:	462b      	mov	r3, r5
 800deb6:	e7f2      	b.n	800de9e <__sccl+0x2e>
 800deb8:	7846      	ldrb	r6, [r0, #1]
 800deba:	2e5d      	cmp	r6, #93	@ 0x5d
 800debc:	d0fa      	beq.n	800deb4 <__sccl+0x44>
 800debe:	42b3      	cmp	r3, r6
 800dec0:	dcf8      	bgt.n	800deb4 <__sccl+0x44>
 800dec2:	461a      	mov	r2, r3
 800dec4:	3002      	adds	r0, #2
 800dec6:	3201      	adds	r2, #1
 800dec8:	4296      	cmp	r6, r2
 800deca:	54a1      	strb	r1, [r4, r2]
 800decc:	dcfb      	bgt.n	800dec6 <__sccl+0x56>
 800dece:	1af2      	subs	r2, r6, r3
 800ded0:	3a01      	subs	r2, #1
 800ded2:	42b3      	cmp	r3, r6
 800ded4:	bfa8      	it	ge
 800ded6:	2200      	movge	r2, #0
 800ded8:	1c5d      	adds	r5, r3, #1
 800deda:	18ab      	adds	r3, r5, r2
 800dedc:	e7e1      	b.n	800dea2 <__sccl+0x32>
 800dede:	4610      	mov	r0, r2
 800dee0:	e7da      	b.n	800de98 <__sccl+0x28>

0800dee2 <__submore>:
 800dee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee6:	460c      	mov	r4, r1
 800dee8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800deea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800deee:	4299      	cmp	r1, r3
 800def0:	d11b      	bne.n	800df2a <__submore+0x48>
 800def2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800def6:	f7fe fda3 	bl	800ca40 <_malloc_r>
 800defa:	b918      	cbnz	r0, 800df04 <__submore+0x22>
 800defc:	f04f 30ff 	mov.w	r0, #4294967295
 800df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df08:	63a3      	str	r3, [r4, #56]	@ 0x38
 800df0a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800df0e:	6360      	str	r0, [r4, #52]	@ 0x34
 800df10:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800df14:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800df18:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800df1c:	7043      	strb	r3, [r0, #1]
 800df1e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df22:	7003      	strb	r3, [r0, #0]
 800df24:	6020      	str	r0, [r4, #0]
 800df26:	2000      	movs	r0, #0
 800df28:	e7ea      	b.n	800df00 <__submore+0x1e>
 800df2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800df2c:	0077      	lsls	r7, r6, #1
 800df2e:	463a      	mov	r2, r7
 800df30:	f000 f816 	bl	800df60 <_realloc_r>
 800df34:	4605      	mov	r5, r0
 800df36:	2800      	cmp	r0, #0
 800df38:	d0e0      	beq.n	800defc <__submore+0x1a>
 800df3a:	eb00 0806 	add.w	r8, r0, r6
 800df3e:	4601      	mov	r1, r0
 800df40:	4632      	mov	r2, r6
 800df42:	4640      	mov	r0, r8
 800df44:	f7fd fb11 	bl	800b56a <memcpy>
 800df48:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800df4c:	f8c4 8000 	str.w	r8, [r4]
 800df50:	e7e9      	b.n	800df26 <__submore+0x44>

0800df52 <abort>:
 800df52:	2006      	movs	r0, #6
 800df54:	b508      	push	{r3, lr}
 800df56:	f000 fa2d 	bl	800e3b4 <raise>
 800df5a:	2001      	movs	r0, #1
 800df5c:	f7f6 fcb9 	bl	80048d2 <_exit>

0800df60 <_realloc_r>:
 800df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df64:	4680      	mov	r8, r0
 800df66:	4615      	mov	r5, r2
 800df68:	460c      	mov	r4, r1
 800df6a:	b921      	cbnz	r1, 800df76 <_realloc_r+0x16>
 800df6c:	4611      	mov	r1, r2
 800df6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df72:	f7fe bd65 	b.w	800ca40 <_malloc_r>
 800df76:	b92a      	cbnz	r2, 800df84 <_realloc_r+0x24>
 800df78:	f7fe f96a 	bl	800c250 <_free_r>
 800df7c:	2400      	movs	r4, #0
 800df7e:	4620      	mov	r0, r4
 800df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df84:	f000 fa32 	bl	800e3ec <_malloc_usable_size_r>
 800df88:	4285      	cmp	r5, r0
 800df8a:	4606      	mov	r6, r0
 800df8c:	d802      	bhi.n	800df94 <_realloc_r+0x34>
 800df8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df92:	d8f4      	bhi.n	800df7e <_realloc_r+0x1e>
 800df94:	4629      	mov	r1, r5
 800df96:	4640      	mov	r0, r8
 800df98:	f7fe fd52 	bl	800ca40 <_malloc_r>
 800df9c:	4607      	mov	r7, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d0ec      	beq.n	800df7c <_realloc_r+0x1c>
 800dfa2:	42b5      	cmp	r5, r6
 800dfa4:	462a      	mov	r2, r5
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	bf28      	it	cs
 800dfaa:	4632      	movcs	r2, r6
 800dfac:	f7fd fadd 	bl	800b56a <memcpy>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	f7fe f94c 	bl	800c250 <_free_r>
 800dfb8:	463c      	mov	r4, r7
 800dfba:	e7e0      	b.n	800df7e <_realloc_r+0x1e>

0800dfbc <__sfputc_r>:
 800dfbc:	6893      	ldr	r3, [r2, #8]
 800dfbe:	b410      	push	{r4}
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	6093      	str	r3, [r2, #8]
 800dfc6:	da07      	bge.n	800dfd8 <__sfputc_r+0x1c>
 800dfc8:	6994      	ldr	r4, [r2, #24]
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	db01      	blt.n	800dfd2 <__sfputc_r+0x16>
 800dfce:	290a      	cmp	r1, #10
 800dfd0:	d102      	bne.n	800dfd8 <__sfputc_r+0x1c>
 800dfd2:	bc10      	pop	{r4}
 800dfd4:	f000 b932 	b.w	800e23c <__swbuf_r>
 800dfd8:	6813      	ldr	r3, [r2, #0]
 800dfda:	1c58      	adds	r0, r3, #1
 800dfdc:	6010      	str	r0, [r2, #0]
 800dfde:	7019      	strb	r1, [r3, #0]
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	bc10      	pop	{r4}
 800dfe4:	4770      	bx	lr

0800dfe6 <__sfputs_r>:
 800dfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	4614      	mov	r4, r2
 800dfee:	18d5      	adds	r5, r2, r3
 800dff0:	42ac      	cmp	r4, r5
 800dff2:	d101      	bne.n	800dff8 <__sfputs_r+0x12>
 800dff4:	2000      	movs	r0, #0
 800dff6:	e007      	b.n	800e008 <__sfputs_r+0x22>
 800dff8:	463a      	mov	r2, r7
 800dffa:	4630      	mov	r0, r6
 800dffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e000:	f7ff ffdc 	bl	800dfbc <__sfputc_r>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d1f3      	bne.n	800dff0 <__sfputs_r+0xa>
 800e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e00c <_vfiprintf_r>:
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	460d      	mov	r5, r1
 800e012:	4614      	mov	r4, r2
 800e014:	4698      	mov	r8, r3
 800e016:	4606      	mov	r6, r0
 800e018:	b09d      	sub	sp, #116	@ 0x74
 800e01a:	b118      	cbz	r0, 800e024 <_vfiprintf_r+0x18>
 800e01c:	6a03      	ldr	r3, [r0, #32]
 800e01e:	b90b      	cbnz	r3, 800e024 <_vfiprintf_r+0x18>
 800e020:	f7fc fc1c 	bl	800a85c <__sinit>
 800e024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e026:	07d9      	lsls	r1, r3, #31
 800e028:	d405      	bmi.n	800e036 <_vfiprintf_r+0x2a>
 800e02a:	89ab      	ldrh	r3, [r5, #12]
 800e02c:	059a      	lsls	r2, r3, #22
 800e02e:	d402      	bmi.n	800e036 <_vfiprintf_r+0x2a>
 800e030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e032:	f7fd fa81 	bl	800b538 <__retarget_lock_acquire_recursive>
 800e036:	89ab      	ldrh	r3, [r5, #12]
 800e038:	071b      	lsls	r3, r3, #28
 800e03a:	d501      	bpl.n	800e040 <_vfiprintf_r+0x34>
 800e03c:	692b      	ldr	r3, [r5, #16]
 800e03e:	b99b      	cbnz	r3, 800e068 <_vfiprintf_r+0x5c>
 800e040:	4629      	mov	r1, r5
 800e042:	4630      	mov	r0, r6
 800e044:	f000 f938 	bl	800e2b8 <__swsetup_r>
 800e048:	b170      	cbz	r0, 800e068 <_vfiprintf_r+0x5c>
 800e04a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e04c:	07dc      	lsls	r4, r3, #31
 800e04e:	d504      	bpl.n	800e05a <_vfiprintf_r+0x4e>
 800e050:	f04f 30ff 	mov.w	r0, #4294967295
 800e054:	b01d      	add	sp, #116	@ 0x74
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05a:	89ab      	ldrh	r3, [r5, #12]
 800e05c:	0598      	lsls	r0, r3, #22
 800e05e:	d4f7      	bmi.n	800e050 <_vfiprintf_r+0x44>
 800e060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e062:	f7fd fa6b 	bl	800b53c <__retarget_lock_release_recursive>
 800e066:	e7f3      	b.n	800e050 <_vfiprintf_r+0x44>
 800e068:	2300      	movs	r3, #0
 800e06a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e06c:	2320      	movs	r3, #32
 800e06e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e072:	2330      	movs	r3, #48	@ 0x30
 800e074:	f04f 0901 	mov.w	r9, #1
 800e078:	f8cd 800c 	str.w	r8, [sp, #12]
 800e07c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e228 <_vfiprintf_r+0x21c>
 800e080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e084:	4623      	mov	r3, r4
 800e086:	469a      	mov	sl, r3
 800e088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e08c:	b10a      	cbz	r2, 800e092 <_vfiprintf_r+0x86>
 800e08e:	2a25      	cmp	r2, #37	@ 0x25
 800e090:	d1f9      	bne.n	800e086 <_vfiprintf_r+0x7a>
 800e092:	ebba 0b04 	subs.w	fp, sl, r4
 800e096:	d00b      	beq.n	800e0b0 <_vfiprintf_r+0xa4>
 800e098:	465b      	mov	r3, fp
 800e09a:	4622      	mov	r2, r4
 800e09c:	4629      	mov	r1, r5
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff ffa1 	bl	800dfe6 <__sfputs_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	f000 80a7 	beq.w	800e1f8 <_vfiprintf_r+0x1ec>
 800e0aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ac:	445a      	add	r2, fp
 800e0ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f000 809f 	beq.w	800e1f8 <_vfiprintf_r+0x1ec>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c4:	f10a 0a01 	add.w	sl, sl, #1
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	9307      	str	r3, [sp, #28]
 800e0cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0d2:	4654      	mov	r4, sl
 800e0d4:	2205      	movs	r2, #5
 800e0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0da:	4853      	ldr	r0, [pc, #332]	@ (800e228 <_vfiprintf_r+0x21c>)
 800e0dc:	f7fd fa37 	bl	800b54e <memchr>
 800e0e0:	9a04      	ldr	r2, [sp, #16]
 800e0e2:	b9d8      	cbnz	r0, 800e11c <_vfiprintf_r+0x110>
 800e0e4:	06d1      	lsls	r1, r2, #27
 800e0e6:	bf44      	itt	mi
 800e0e8:	2320      	movmi	r3, #32
 800e0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0ee:	0713      	lsls	r3, r2, #28
 800e0f0:	bf44      	itt	mi
 800e0f2:	232b      	movmi	r3, #43	@ 0x2b
 800e0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0fe:	d015      	beq.n	800e12c <_vfiprintf_r+0x120>
 800e100:	4654      	mov	r4, sl
 800e102:	2000      	movs	r0, #0
 800e104:	f04f 0c0a 	mov.w	ip, #10
 800e108:	9a07      	ldr	r2, [sp, #28]
 800e10a:	4621      	mov	r1, r4
 800e10c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e110:	3b30      	subs	r3, #48	@ 0x30
 800e112:	2b09      	cmp	r3, #9
 800e114:	d94b      	bls.n	800e1ae <_vfiprintf_r+0x1a2>
 800e116:	b1b0      	cbz	r0, 800e146 <_vfiprintf_r+0x13a>
 800e118:	9207      	str	r2, [sp, #28]
 800e11a:	e014      	b.n	800e146 <_vfiprintf_r+0x13a>
 800e11c:	eba0 0308 	sub.w	r3, r0, r8
 800e120:	fa09 f303 	lsl.w	r3, r9, r3
 800e124:	4313      	orrs	r3, r2
 800e126:	46a2      	mov	sl, r4
 800e128:	9304      	str	r3, [sp, #16]
 800e12a:	e7d2      	b.n	800e0d2 <_vfiprintf_r+0xc6>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	1d19      	adds	r1, r3, #4
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	9103      	str	r1, [sp, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfbb      	ittet	lt
 800e138:	425b      	neglt	r3, r3
 800e13a:	f042 0202 	orrlt.w	r2, r2, #2
 800e13e:	9307      	strge	r3, [sp, #28]
 800e140:	9307      	strlt	r3, [sp, #28]
 800e142:	bfb8      	it	lt
 800e144:	9204      	strlt	r2, [sp, #16]
 800e146:	7823      	ldrb	r3, [r4, #0]
 800e148:	2b2e      	cmp	r3, #46	@ 0x2e
 800e14a:	d10a      	bne.n	800e162 <_vfiprintf_r+0x156>
 800e14c:	7863      	ldrb	r3, [r4, #1]
 800e14e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e150:	d132      	bne.n	800e1b8 <_vfiprintf_r+0x1ac>
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	3402      	adds	r4, #2
 800e156:	1d1a      	adds	r2, r3, #4
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	9203      	str	r2, [sp, #12]
 800e15c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e160:	9305      	str	r3, [sp, #20]
 800e162:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e22c <_vfiprintf_r+0x220>
 800e166:	2203      	movs	r2, #3
 800e168:	4650      	mov	r0, sl
 800e16a:	7821      	ldrb	r1, [r4, #0]
 800e16c:	f7fd f9ef 	bl	800b54e <memchr>
 800e170:	b138      	cbz	r0, 800e182 <_vfiprintf_r+0x176>
 800e172:	2240      	movs	r2, #64	@ 0x40
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	eba0 000a 	sub.w	r0, r0, sl
 800e17a:	4082      	lsls	r2, r0
 800e17c:	4313      	orrs	r3, r2
 800e17e:	3401      	adds	r4, #1
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e186:	2206      	movs	r2, #6
 800e188:	4829      	ldr	r0, [pc, #164]	@ (800e230 <_vfiprintf_r+0x224>)
 800e18a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e18e:	f7fd f9de 	bl	800b54e <memchr>
 800e192:	2800      	cmp	r0, #0
 800e194:	d03f      	beq.n	800e216 <_vfiprintf_r+0x20a>
 800e196:	4b27      	ldr	r3, [pc, #156]	@ (800e234 <_vfiprintf_r+0x228>)
 800e198:	bb1b      	cbnz	r3, 800e1e2 <_vfiprintf_r+0x1d6>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	3307      	adds	r3, #7
 800e19e:	f023 0307 	bic.w	r3, r3, #7
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	9303      	str	r3, [sp, #12]
 800e1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a8:	443b      	add	r3, r7
 800e1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ac:	e76a      	b.n	800e084 <_vfiprintf_r+0x78>
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b6:	e7a8      	b.n	800e10a <_vfiprintf_r+0xfe>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f04f 0c0a 	mov.w	ip, #10
 800e1be:	4619      	mov	r1, r3
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	9305      	str	r3, [sp, #20]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ca:	3a30      	subs	r2, #48	@ 0x30
 800e1cc:	2a09      	cmp	r2, #9
 800e1ce:	d903      	bls.n	800e1d8 <_vfiprintf_r+0x1cc>
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0c6      	beq.n	800e162 <_vfiprintf_r+0x156>
 800e1d4:	9105      	str	r1, [sp, #20]
 800e1d6:	e7c4      	b.n	800e162 <_vfiprintf_r+0x156>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2301      	movs	r3, #1
 800e1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e0:	e7f0      	b.n	800e1c4 <_vfiprintf_r+0x1b8>
 800e1e2:	ab03      	add	r3, sp, #12
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	462a      	mov	r2, r5
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4b13      	ldr	r3, [pc, #76]	@ (800e238 <_vfiprintf_r+0x22c>)
 800e1ec:	a904      	add	r1, sp, #16
 800e1ee:	f7fb feeb 	bl	8009fc8 <_printf_float>
 800e1f2:	4607      	mov	r7, r0
 800e1f4:	1c78      	adds	r0, r7, #1
 800e1f6:	d1d6      	bne.n	800e1a6 <_vfiprintf_r+0x19a>
 800e1f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1fa:	07d9      	lsls	r1, r3, #31
 800e1fc:	d405      	bmi.n	800e20a <_vfiprintf_r+0x1fe>
 800e1fe:	89ab      	ldrh	r3, [r5, #12]
 800e200:	059a      	lsls	r2, r3, #22
 800e202:	d402      	bmi.n	800e20a <_vfiprintf_r+0x1fe>
 800e204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e206:	f7fd f999 	bl	800b53c <__retarget_lock_release_recursive>
 800e20a:	89ab      	ldrh	r3, [r5, #12]
 800e20c:	065b      	lsls	r3, r3, #25
 800e20e:	f53f af1f 	bmi.w	800e050 <_vfiprintf_r+0x44>
 800e212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e214:	e71e      	b.n	800e054 <_vfiprintf_r+0x48>
 800e216:	ab03      	add	r3, sp, #12
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	462a      	mov	r2, r5
 800e21c:	4630      	mov	r0, r6
 800e21e:	4b06      	ldr	r3, [pc, #24]	@ (800e238 <_vfiprintf_r+0x22c>)
 800e220:	a904      	add	r1, sp, #16
 800e222:	f7fc f96f 	bl	800a504 <_printf_i>
 800e226:	e7e4      	b.n	800e1f2 <_vfiprintf_r+0x1e6>
 800e228:	0800f19b 	.word	0x0800f19b
 800e22c:	0800f17c 	.word	0x0800f17c
 800e230:	0800f1a1 	.word	0x0800f1a1
 800e234:	08009fc9 	.word	0x08009fc9
 800e238:	0800dfe7 	.word	0x0800dfe7

0800e23c <__swbuf_r>:
 800e23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23e:	460e      	mov	r6, r1
 800e240:	4614      	mov	r4, r2
 800e242:	4605      	mov	r5, r0
 800e244:	b118      	cbz	r0, 800e24e <__swbuf_r+0x12>
 800e246:	6a03      	ldr	r3, [r0, #32]
 800e248:	b90b      	cbnz	r3, 800e24e <__swbuf_r+0x12>
 800e24a:	f7fc fb07 	bl	800a85c <__sinit>
 800e24e:	69a3      	ldr	r3, [r4, #24]
 800e250:	60a3      	str	r3, [r4, #8]
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	071a      	lsls	r2, r3, #28
 800e256:	d501      	bpl.n	800e25c <__swbuf_r+0x20>
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	b943      	cbnz	r3, 800e26e <__swbuf_r+0x32>
 800e25c:	4621      	mov	r1, r4
 800e25e:	4628      	mov	r0, r5
 800e260:	f000 f82a 	bl	800e2b8 <__swsetup_r>
 800e264:	b118      	cbz	r0, 800e26e <__swbuf_r+0x32>
 800e266:	f04f 37ff 	mov.w	r7, #4294967295
 800e26a:	4638      	mov	r0, r7
 800e26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	6922      	ldr	r2, [r4, #16]
 800e272:	b2f6      	uxtb	r6, r6
 800e274:	1a98      	subs	r0, r3, r2
 800e276:	6963      	ldr	r3, [r4, #20]
 800e278:	4637      	mov	r7, r6
 800e27a:	4283      	cmp	r3, r0
 800e27c:	dc05      	bgt.n	800e28a <__swbuf_r+0x4e>
 800e27e:	4621      	mov	r1, r4
 800e280:	4628      	mov	r0, r5
 800e282:	f7ff fa29 	bl	800d6d8 <_fflush_r>
 800e286:	2800      	cmp	r0, #0
 800e288:	d1ed      	bne.n	800e266 <__swbuf_r+0x2a>
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	60a3      	str	r3, [r4, #8]
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	6022      	str	r2, [r4, #0]
 800e296:	701e      	strb	r6, [r3, #0]
 800e298:	6962      	ldr	r2, [r4, #20]
 800e29a:	1c43      	adds	r3, r0, #1
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d004      	beq.n	800e2aa <__swbuf_r+0x6e>
 800e2a0:	89a3      	ldrh	r3, [r4, #12]
 800e2a2:	07db      	lsls	r3, r3, #31
 800e2a4:	d5e1      	bpl.n	800e26a <__swbuf_r+0x2e>
 800e2a6:	2e0a      	cmp	r6, #10
 800e2a8:	d1df      	bne.n	800e26a <__swbuf_r+0x2e>
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f7ff fa13 	bl	800d6d8 <_fflush_r>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d0d9      	beq.n	800e26a <__swbuf_r+0x2e>
 800e2b6:	e7d6      	b.n	800e266 <__swbuf_r+0x2a>

0800e2b8 <__swsetup_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4b29      	ldr	r3, [pc, #164]	@ (800e360 <__swsetup_r+0xa8>)
 800e2bc:	4605      	mov	r5, r0
 800e2be:	6818      	ldr	r0, [r3, #0]
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	b118      	cbz	r0, 800e2cc <__swsetup_r+0x14>
 800e2c4:	6a03      	ldr	r3, [r0, #32]
 800e2c6:	b90b      	cbnz	r3, 800e2cc <__swsetup_r+0x14>
 800e2c8:	f7fc fac8 	bl	800a85c <__sinit>
 800e2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d0:	0719      	lsls	r1, r3, #28
 800e2d2:	d422      	bmi.n	800e31a <__swsetup_r+0x62>
 800e2d4:	06da      	lsls	r2, r3, #27
 800e2d6:	d407      	bmi.n	800e2e8 <__swsetup_r+0x30>
 800e2d8:	2209      	movs	r2, #9
 800e2da:	602a      	str	r2, [r5, #0]
 800e2dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	81a3      	strh	r3, [r4, #12]
 800e2e6:	e033      	b.n	800e350 <__swsetup_r+0x98>
 800e2e8:	0758      	lsls	r0, r3, #29
 800e2ea:	d512      	bpl.n	800e312 <__swsetup_r+0x5a>
 800e2ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2ee:	b141      	cbz	r1, 800e302 <__swsetup_r+0x4a>
 800e2f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2f4:	4299      	cmp	r1, r3
 800e2f6:	d002      	beq.n	800e2fe <__swsetup_r+0x46>
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7fd ffa9 	bl	800c250 <_free_r>
 800e2fe:	2300      	movs	r3, #0
 800e300:	6363      	str	r3, [r4, #52]	@ 0x34
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e308:	81a3      	strh	r3, [r4, #12]
 800e30a:	2300      	movs	r3, #0
 800e30c:	6063      	str	r3, [r4, #4]
 800e30e:	6923      	ldr	r3, [r4, #16]
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	89a3      	ldrh	r3, [r4, #12]
 800e314:	f043 0308 	orr.w	r3, r3, #8
 800e318:	81a3      	strh	r3, [r4, #12]
 800e31a:	6923      	ldr	r3, [r4, #16]
 800e31c:	b94b      	cbnz	r3, 800e332 <__swsetup_r+0x7a>
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e328:	d003      	beq.n	800e332 <__swsetup_r+0x7a>
 800e32a:	4621      	mov	r1, r4
 800e32c:	4628      	mov	r0, r5
 800e32e:	f000 f88a 	bl	800e446 <__smakebuf_r>
 800e332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e336:	f013 0201 	ands.w	r2, r3, #1
 800e33a:	d00a      	beq.n	800e352 <__swsetup_r+0x9a>
 800e33c:	2200      	movs	r2, #0
 800e33e:	60a2      	str	r2, [r4, #8]
 800e340:	6962      	ldr	r2, [r4, #20]
 800e342:	4252      	negs	r2, r2
 800e344:	61a2      	str	r2, [r4, #24]
 800e346:	6922      	ldr	r2, [r4, #16]
 800e348:	b942      	cbnz	r2, 800e35c <__swsetup_r+0xa4>
 800e34a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e34e:	d1c5      	bne.n	800e2dc <__swsetup_r+0x24>
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	0799      	lsls	r1, r3, #30
 800e354:	bf58      	it	pl
 800e356:	6962      	ldrpl	r2, [r4, #20]
 800e358:	60a2      	str	r2, [r4, #8]
 800e35a:	e7f4      	b.n	800e346 <__swsetup_r+0x8e>
 800e35c:	2000      	movs	r0, #0
 800e35e:	e7f7      	b.n	800e350 <__swsetup_r+0x98>
 800e360:	20000194 	.word	0x20000194

0800e364 <_raise_r>:
 800e364:	291f      	cmp	r1, #31
 800e366:	b538      	push	{r3, r4, r5, lr}
 800e368:	4605      	mov	r5, r0
 800e36a:	460c      	mov	r4, r1
 800e36c:	d904      	bls.n	800e378 <_raise_r+0x14>
 800e36e:	2316      	movs	r3, #22
 800e370:	6003      	str	r3, [r0, #0]
 800e372:	f04f 30ff 	mov.w	r0, #4294967295
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e37a:	b112      	cbz	r2, 800e382 <_raise_r+0x1e>
 800e37c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e380:	b94b      	cbnz	r3, 800e396 <_raise_r+0x32>
 800e382:	4628      	mov	r0, r5
 800e384:	f000 f830 	bl	800e3e8 <_getpid_r>
 800e388:	4622      	mov	r2, r4
 800e38a:	4601      	mov	r1, r0
 800e38c:	4628      	mov	r0, r5
 800e38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e392:	f000 b817 	b.w	800e3c4 <_kill_r>
 800e396:	2b01      	cmp	r3, #1
 800e398:	d00a      	beq.n	800e3b0 <_raise_r+0x4c>
 800e39a:	1c59      	adds	r1, r3, #1
 800e39c:	d103      	bne.n	800e3a6 <_raise_r+0x42>
 800e39e:	2316      	movs	r3, #22
 800e3a0:	6003      	str	r3, [r0, #0]
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	e7e7      	b.n	800e376 <_raise_r+0x12>
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e3ae:	4798      	blx	r3
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7e0      	b.n	800e376 <_raise_r+0x12>

0800e3b4 <raise>:
 800e3b4:	4b02      	ldr	r3, [pc, #8]	@ (800e3c0 <raise+0xc>)
 800e3b6:	4601      	mov	r1, r0
 800e3b8:	6818      	ldr	r0, [r3, #0]
 800e3ba:	f7ff bfd3 	b.w	800e364 <_raise_r>
 800e3be:	bf00      	nop
 800e3c0:	20000194 	.word	0x20000194

0800e3c4 <_kill_r>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	4d06      	ldr	r5, [pc, #24]	@ (800e3e4 <_kill_r+0x20>)
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	602b      	str	r3, [r5, #0]
 800e3d2:	f7f6 fa6e 	bl	80048b2 <_kill>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d102      	bne.n	800e3e0 <_kill_r+0x1c>
 800e3da:	682b      	ldr	r3, [r5, #0]
 800e3dc:	b103      	cbz	r3, 800e3e0 <_kill_r+0x1c>
 800e3de:	6023      	str	r3, [r4, #0]
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20000c40 	.word	0x20000c40

0800e3e8 <_getpid_r>:
 800e3e8:	f7f6 ba5c 	b.w	80048a4 <_getpid>

0800e3ec <_malloc_usable_size_r>:
 800e3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f0:	1f18      	subs	r0, r3, #4
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bfbc      	itt	lt
 800e3f6:	580b      	ldrlt	r3, [r1, r0]
 800e3f8:	18c0      	addlt	r0, r0, r3
 800e3fa:	4770      	bx	lr

0800e3fc <__swhatbuf_r>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	460c      	mov	r4, r1
 800e400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e404:	4615      	mov	r5, r2
 800e406:	2900      	cmp	r1, #0
 800e408:	461e      	mov	r6, r3
 800e40a:	b096      	sub	sp, #88	@ 0x58
 800e40c:	da0c      	bge.n	800e428 <__swhatbuf_r+0x2c>
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	2100      	movs	r1, #0
 800e412:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e416:	bf14      	ite	ne
 800e418:	2340      	movne	r3, #64	@ 0x40
 800e41a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e41e:	2000      	movs	r0, #0
 800e420:	6031      	str	r1, [r6, #0]
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	b016      	add	sp, #88	@ 0x58
 800e426:	bd70      	pop	{r4, r5, r6, pc}
 800e428:	466a      	mov	r2, sp
 800e42a:	f000 f849 	bl	800e4c0 <_fstat_r>
 800e42e:	2800      	cmp	r0, #0
 800e430:	dbed      	blt.n	800e40e <__swhatbuf_r+0x12>
 800e432:	9901      	ldr	r1, [sp, #4]
 800e434:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e438:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e43c:	4259      	negs	r1, r3
 800e43e:	4159      	adcs	r1, r3
 800e440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e444:	e7eb      	b.n	800e41e <__swhatbuf_r+0x22>

0800e446 <__smakebuf_r>:
 800e446:	898b      	ldrh	r3, [r1, #12]
 800e448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e44a:	079d      	lsls	r5, r3, #30
 800e44c:	4606      	mov	r6, r0
 800e44e:	460c      	mov	r4, r1
 800e450:	d507      	bpl.n	800e462 <__smakebuf_r+0x1c>
 800e452:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	6123      	str	r3, [r4, #16]
 800e45a:	2301      	movs	r3, #1
 800e45c:	6163      	str	r3, [r4, #20]
 800e45e:	b003      	add	sp, #12
 800e460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e462:	466a      	mov	r2, sp
 800e464:	ab01      	add	r3, sp, #4
 800e466:	f7ff ffc9 	bl	800e3fc <__swhatbuf_r>
 800e46a:	9f00      	ldr	r7, [sp, #0]
 800e46c:	4605      	mov	r5, r0
 800e46e:	4639      	mov	r1, r7
 800e470:	4630      	mov	r0, r6
 800e472:	f7fe fae5 	bl	800ca40 <_malloc_r>
 800e476:	b948      	cbnz	r0, 800e48c <__smakebuf_r+0x46>
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d4ee      	bmi.n	800e45e <__smakebuf_r+0x18>
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	f043 0302 	orr.w	r3, r3, #2
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	e7e2      	b.n	800e452 <__smakebuf_r+0xc>
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e496:	81a3      	strh	r3, [r4, #12]
 800e498:	9b01      	ldr	r3, [sp, #4]
 800e49a:	6020      	str	r0, [r4, #0]
 800e49c:	b15b      	cbz	r3, 800e4b6 <__smakebuf_r+0x70>
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a4:	f000 f81e 	bl	800e4e4 <_isatty_r>
 800e4a8:	b128      	cbz	r0, 800e4b6 <__smakebuf_r+0x70>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f023 0303 	bic.w	r3, r3, #3
 800e4b0:	f043 0301 	orr.w	r3, r3, #1
 800e4b4:	81a3      	strh	r3, [r4, #12]
 800e4b6:	89a3      	ldrh	r3, [r4, #12]
 800e4b8:	431d      	orrs	r5, r3
 800e4ba:	81a5      	strh	r5, [r4, #12]
 800e4bc:	e7cf      	b.n	800e45e <__smakebuf_r+0x18>
	...

0800e4c0 <_fstat_r>:
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	4d06      	ldr	r5, [pc, #24]	@ (800e4e0 <_fstat_r+0x20>)
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	4608      	mov	r0, r1
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	602b      	str	r3, [r5, #0]
 800e4ce:	f7f6 fa4f 	bl	8004970 <_fstat>
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	d102      	bne.n	800e4dc <_fstat_r+0x1c>
 800e4d6:	682b      	ldr	r3, [r5, #0]
 800e4d8:	b103      	cbz	r3, 800e4dc <_fstat_r+0x1c>
 800e4da:	6023      	str	r3, [r4, #0]
 800e4dc:	bd38      	pop	{r3, r4, r5, pc}
 800e4de:	bf00      	nop
 800e4e0:	20000c40 	.word	0x20000c40

0800e4e4 <_isatty_r>:
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4d05      	ldr	r5, [pc, #20]	@ (800e500 <_isatty_r+0x1c>)
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	602b      	str	r3, [r5, #0]
 800e4f0:	f7f6 fa4d 	bl	800498e <_isatty>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d102      	bne.n	800e4fe <_isatty_r+0x1a>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	b103      	cbz	r3, 800e4fe <_isatty_r+0x1a>
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	20000c40 	.word	0x20000c40

0800e504 <asinf>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4604      	mov	r4, r0
 800e508:	f000 f822 	bl	800e550 <__ieee754_asinf>
 800e50c:	4621      	mov	r1, r4
 800e50e:	4605      	mov	r5, r0
 800e510:	4620      	mov	r0, r4
 800e512:	f7f2 fe07 	bl	8001124 <__aeabi_fcmpun>
 800e516:	b980      	cbnz	r0, 800e53a <asinf+0x36>
 800e518:	4620      	mov	r0, r4
 800e51a:	f000 f815 	bl	800e548 <fabsf>
 800e51e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e522:	f7f2 fdf5 	bl	8001110 <__aeabi_fcmpgt>
 800e526:	b140      	cbz	r0, 800e53a <asinf+0x36>
 800e528:	f7fc ffda 	bl	800b4e0 <__errno>
 800e52c:	2321      	movs	r3, #33	@ 0x21
 800e52e:	6003      	str	r3, [r0, #0]
 800e530:	4803      	ldr	r0, [pc, #12]	@ (800e540 <asinf+0x3c>)
 800e532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e536:	f7fd b82d 	b.w	800b594 <nanf>
 800e53a:	4628      	mov	r0, r5
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	bf00      	nop
 800e540:	0800f17b 	.word	0x0800f17b

0800e544 <atan2f>:
 800e544:	f000 b946 	b.w	800e7d4 <__ieee754_atan2f>

0800e548 <fabsf>:
 800e548:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e54c:	4770      	bx	lr
	...

0800e550 <__ieee754_asinf>:
 800e550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e554:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e558:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e55c:	4604      	mov	r4, r0
 800e55e:	4605      	mov	r5, r0
 800e560:	d10c      	bne.n	800e57c <__ieee754_asinf+0x2c>
 800e562:	498c      	ldr	r1, [pc, #560]	@ (800e794 <__ieee754_asinf+0x244>)
 800e564:	f7f2 fc18 	bl	8000d98 <__aeabi_fmul>
 800e568:	498b      	ldr	r1, [pc, #556]	@ (800e798 <__ieee754_asinf+0x248>)
 800e56a:	4605      	mov	r5, r0
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7f2 fc13 	bl	8000d98 <__aeabi_fmul>
 800e572:	4601      	mov	r1, r0
 800e574:	4628      	mov	r0, r5
 800e576:	f7f2 fb07 	bl	8000b88 <__addsf3>
 800e57a:	e006      	b.n	800e58a <__ieee754_asinf+0x3a>
 800e57c:	d909      	bls.n	800e592 <__ieee754_asinf+0x42>
 800e57e:	4601      	mov	r1, r0
 800e580:	f7f2 fb00 	bl	8000b84 <__aeabi_fsub>
 800e584:	4601      	mov	r1, r0
 800e586:	f7f2 fcbb 	bl	8000f00 <__aeabi_fdiv>
 800e58a:	4604      	mov	r4, r0
 800e58c:	4620      	mov	r0, r4
 800e58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e592:	f1b8 5f7c 	cmp.w	r8, #1056964608	@ 0x3f000000
 800e596:	d20b      	bcs.n	800e5b0 <__ieee754_asinf+0x60>
 800e598:	f1b8 5f48 	cmp.w	r8, #838860800	@ 0x32000000
 800e59c:	d273      	bcs.n	800e686 <__ieee754_asinf+0x136>
 800e59e:	497f      	ldr	r1, [pc, #508]	@ (800e79c <__ieee754_asinf+0x24c>)
 800e5a0:	f7f2 faf2 	bl	8000b88 <__addsf3>
 800e5a4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e5a8:	f7f2 fdb2 	bl	8001110 <__aeabi_fcmpgt>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d1ed      	bne.n	800e58c <__ieee754_asinf+0x3c>
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff ffc9 	bl	800e548 <fabsf>
 800e5b6:	4601      	mov	r1, r0
 800e5b8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e5bc:	f7f2 fae2 	bl	8000b84 <__aeabi_fsub>
 800e5c0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e5c4:	f7f2 fbe8 	bl	8000d98 <__aeabi_fmul>
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	4975      	ldr	r1, [pc, #468]	@ (800e7a0 <__ieee754_asinf+0x250>)
 800e5cc:	f7f2 fbe4 	bl	8000d98 <__aeabi_fmul>
 800e5d0:	4974      	ldr	r1, [pc, #464]	@ (800e7a4 <__ieee754_asinf+0x254>)
 800e5d2:	f7f2 fad9 	bl	8000b88 <__addsf3>
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	f7f2 fbde 	bl	8000d98 <__aeabi_fmul>
 800e5dc:	4972      	ldr	r1, [pc, #456]	@ (800e7a8 <__ieee754_asinf+0x258>)
 800e5de:	f7f2 fad1 	bl	8000b84 <__aeabi_fsub>
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	f7f2 fbd8 	bl	8000d98 <__aeabi_fmul>
 800e5e8:	4970      	ldr	r1, [pc, #448]	@ (800e7ac <__ieee754_asinf+0x25c>)
 800e5ea:	f7f2 facd 	bl	8000b88 <__addsf3>
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	f7f2 fbd2 	bl	8000d98 <__aeabi_fmul>
 800e5f4:	496e      	ldr	r1, [pc, #440]	@ (800e7b0 <__ieee754_asinf+0x260>)
 800e5f6:	f7f2 fac5 	bl	8000b84 <__aeabi_fsub>
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	f7f2 fbcc 	bl	8000d98 <__aeabi_fmul>
 800e600:	496c      	ldr	r1, [pc, #432]	@ (800e7b4 <__ieee754_asinf+0x264>)
 800e602:	f7f2 fac1 	bl	8000b88 <__addsf3>
 800e606:	4631      	mov	r1, r6
 800e608:	f7f2 fbc6 	bl	8000d98 <__aeabi_fmul>
 800e60c:	496a      	ldr	r1, [pc, #424]	@ (800e7b8 <__ieee754_asinf+0x268>)
 800e60e:	4681      	mov	r9, r0
 800e610:	4630      	mov	r0, r6
 800e612:	f7f2 fbc1 	bl	8000d98 <__aeabi_fmul>
 800e616:	4969      	ldr	r1, [pc, #420]	@ (800e7bc <__ieee754_asinf+0x26c>)
 800e618:	f7f2 fab4 	bl	8000b84 <__aeabi_fsub>
 800e61c:	4631      	mov	r1, r6
 800e61e:	f7f2 fbbb 	bl	8000d98 <__aeabi_fmul>
 800e622:	4967      	ldr	r1, [pc, #412]	@ (800e7c0 <__ieee754_asinf+0x270>)
 800e624:	f7f2 fab0 	bl	8000b88 <__addsf3>
 800e628:	4631      	mov	r1, r6
 800e62a:	f7f2 fbb5 	bl	8000d98 <__aeabi_fmul>
 800e62e:	4965      	ldr	r1, [pc, #404]	@ (800e7c4 <__ieee754_asinf+0x274>)
 800e630:	f7f2 faa8 	bl	8000b84 <__aeabi_fsub>
 800e634:	4631      	mov	r1, r6
 800e636:	f7f2 fbaf 	bl	8000d98 <__aeabi_fmul>
 800e63a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e63e:	f7f2 faa3 	bl	8000b88 <__addsf3>
 800e642:	4682      	mov	sl, r0
 800e644:	4630      	mov	r0, r6
 800e646:	f000 fa59 	bl	800eafc <__ieee754_sqrtf>
 800e64a:	4b5f      	ldr	r3, [pc, #380]	@ (800e7c8 <__ieee754_asinf+0x278>)
 800e64c:	4607      	mov	r7, r0
 800e64e:	4598      	cmp	r8, r3
 800e650:	d963      	bls.n	800e71a <__ieee754_asinf+0x1ca>
 800e652:	4651      	mov	r1, sl
 800e654:	4648      	mov	r0, r9
 800e656:	f7f2 fc53 	bl	8000f00 <__aeabi_fdiv>
 800e65a:	4639      	mov	r1, r7
 800e65c:	f7f2 fb9c 	bl	8000d98 <__aeabi_fmul>
 800e660:	4639      	mov	r1, r7
 800e662:	f7f2 fa91 	bl	8000b88 <__addsf3>
 800e666:	4601      	mov	r1, r0
 800e668:	f7f2 fa8e 	bl	8000b88 <__addsf3>
 800e66c:	4957      	ldr	r1, [pc, #348]	@ (800e7cc <__ieee754_asinf+0x27c>)
 800e66e:	f7f2 fa8b 	bl	8000b88 <__addsf3>
 800e672:	4601      	mov	r1, r0
 800e674:	4847      	ldr	r0, [pc, #284]	@ (800e794 <__ieee754_asinf+0x244>)
 800e676:	f7f2 fa85 	bl	8000b84 <__aeabi_fsub>
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	4604      	mov	r4, r0
 800e67e:	bfd8      	it	le
 800e680:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800e684:	e782      	b.n	800e58c <__ieee754_asinf+0x3c>
 800e686:	4601      	mov	r1, r0
 800e688:	f7f2 fb86 	bl	8000d98 <__aeabi_fmul>
 800e68c:	4605      	mov	r5, r0
 800e68e:	4944      	ldr	r1, [pc, #272]	@ (800e7a0 <__ieee754_asinf+0x250>)
 800e690:	f7f2 fb82 	bl	8000d98 <__aeabi_fmul>
 800e694:	4943      	ldr	r1, [pc, #268]	@ (800e7a4 <__ieee754_asinf+0x254>)
 800e696:	f7f2 fa77 	bl	8000b88 <__addsf3>
 800e69a:	4629      	mov	r1, r5
 800e69c:	f7f2 fb7c 	bl	8000d98 <__aeabi_fmul>
 800e6a0:	4941      	ldr	r1, [pc, #260]	@ (800e7a8 <__ieee754_asinf+0x258>)
 800e6a2:	f7f2 fa6f 	bl	8000b84 <__aeabi_fsub>
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f7f2 fb76 	bl	8000d98 <__aeabi_fmul>
 800e6ac:	493f      	ldr	r1, [pc, #252]	@ (800e7ac <__ieee754_asinf+0x25c>)
 800e6ae:	f7f2 fa6b 	bl	8000b88 <__addsf3>
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	f7f2 fb70 	bl	8000d98 <__aeabi_fmul>
 800e6b8:	493d      	ldr	r1, [pc, #244]	@ (800e7b0 <__ieee754_asinf+0x260>)
 800e6ba:	f7f2 fa63 	bl	8000b84 <__aeabi_fsub>
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f2 fb6a 	bl	8000d98 <__aeabi_fmul>
 800e6c4:	493b      	ldr	r1, [pc, #236]	@ (800e7b4 <__ieee754_asinf+0x264>)
 800e6c6:	f7f2 fa5f 	bl	8000b88 <__addsf3>
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	f7f2 fb64 	bl	8000d98 <__aeabi_fmul>
 800e6d0:	4939      	ldr	r1, [pc, #228]	@ (800e7b8 <__ieee754_asinf+0x268>)
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f7f2 fb5f 	bl	8000d98 <__aeabi_fmul>
 800e6da:	4938      	ldr	r1, [pc, #224]	@ (800e7bc <__ieee754_asinf+0x26c>)
 800e6dc:	f7f2 fa52 	bl	8000b84 <__aeabi_fsub>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	f7f2 fb59 	bl	8000d98 <__aeabi_fmul>
 800e6e6:	4936      	ldr	r1, [pc, #216]	@ (800e7c0 <__ieee754_asinf+0x270>)
 800e6e8:	f7f2 fa4e 	bl	8000b88 <__addsf3>
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	f7f2 fb53 	bl	8000d98 <__aeabi_fmul>
 800e6f2:	4934      	ldr	r1, [pc, #208]	@ (800e7c4 <__ieee754_asinf+0x274>)
 800e6f4:	f7f2 fa46 	bl	8000b84 <__aeabi_fsub>
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7f2 fb4d 	bl	8000d98 <__aeabi_fmul>
 800e6fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e702:	f7f2 fa41 	bl	8000b88 <__addsf3>
 800e706:	4601      	mov	r1, r0
 800e708:	4630      	mov	r0, r6
 800e70a:	f7f2 fbf9 	bl	8000f00 <__aeabi_fdiv>
 800e70e:	4621      	mov	r1, r4
 800e710:	f7f2 fb42 	bl	8000d98 <__aeabi_fmul>
 800e714:	4601      	mov	r1, r0
 800e716:	4620      	mov	r0, r4
 800e718:	e72d      	b.n	800e576 <__ieee754_asinf+0x26>
 800e71a:	4601      	mov	r1, r0
 800e71c:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800e720:	f7f2 fa32 	bl	8000b88 <__addsf3>
 800e724:	4651      	mov	r1, sl
 800e726:	4604      	mov	r4, r0
 800e728:	4648      	mov	r0, r9
 800e72a:	f7f2 fbe9 	bl	8000f00 <__aeabi_fdiv>
 800e72e:	4601      	mov	r1, r0
 800e730:	4620      	mov	r0, r4
 800e732:	f7f2 fb31 	bl	8000d98 <__aeabi_fmul>
 800e736:	f028 080f 	bic.w	r8, r8, #15
 800e73a:	4681      	mov	r9, r0
 800e73c:	4641      	mov	r1, r8
 800e73e:	4640      	mov	r0, r8
 800e740:	f7f2 fb2a 	bl	8000d98 <__aeabi_fmul>
 800e744:	4601      	mov	r1, r0
 800e746:	4630      	mov	r0, r6
 800e748:	f7f2 fa1c 	bl	8000b84 <__aeabi_fsub>
 800e74c:	4641      	mov	r1, r8
 800e74e:	4604      	mov	r4, r0
 800e750:	4638      	mov	r0, r7
 800e752:	f7f2 fa19 	bl	8000b88 <__addsf3>
 800e756:	4601      	mov	r1, r0
 800e758:	4620      	mov	r0, r4
 800e75a:	f7f2 fbd1 	bl	8000f00 <__aeabi_fdiv>
 800e75e:	4601      	mov	r1, r0
 800e760:	f7f2 fa12 	bl	8000b88 <__addsf3>
 800e764:	4601      	mov	r1, r0
 800e766:	480c      	ldr	r0, [pc, #48]	@ (800e798 <__ieee754_asinf+0x248>)
 800e768:	f7f2 fa0c 	bl	8000b84 <__aeabi_fsub>
 800e76c:	4601      	mov	r1, r0
 800e76e:	4648      	mov	r0, r9
 800e770:	f7f2 fa08 	bl	8000b84 <__aeabi_fsub>
 800e774:	4641      	mov	r1, r8
 800e776:	4604      	mov	r4, r0
 800e778:	4640      	mov	r0, r8
 800e77a:	f7f2 fa05 	bl	8000b88 <__addsf3>
 800e77e:	4601      	mov	r1, r0
 800e780:	4813      	ldr	r0, [pc, #76]	@ (800e7d0 <__ieee754_asinf+0x280>)
 800e782:	f7f2 f9ff 	bl	8000b84 <__aeabi_fsub>
 800e786:	4601      	mov	r1, r0
 800e788:	4620      	mov	r0, r4
 800e78a:	f7f2 f9fb 	bl	8000b84 <__aeabi_fsub>
 800e78e:	4601      	mov	r1, r0
 800e790:	480f      	ldr	r0, [pc, #60]	@ (800e7d0 <__ieee754_asinf+0x280>)
 800e792:	e770      	b.n	800e676 <__ieee754_asinf+0x126>
 800e794:	3fc90fdb 	.word	0x3fc90fdb
 800e798:	b33bbd2e 	.word	0xb33bbd2e
 800e79c:	7149f2ca 	.word	0x7149f2ca
 800e7a0:	3811ef08 	.word	0x3811ef08
 800e7a4:	3a4f7f04 	.word	0x3a4f7f04
 800e7a8:	3d241146 	.word	0x3d241146
 800e7ac:	3e4e0aa8 	.word	0x3e4e0aa8
 800e7b0:	3ea6b090 	.word	0x3ea6b090
 800e7b4:	3e2aaaab 	.word	0x3e2aaaab
 800e7b8:	3d9dc62e 	.word	0x3d9dc62e
 800e7bc:	3f303361 	.word	0x3f303361
 800e7c0:	4001572d 	.word	0x4001572d
 800e7c4:	4019d139 	.word	0x4019d139
 800e7c8:	3f799999 	.word	0x3f799999
 800e7cc:	333bbd2e 	.word	0x333bbd2e
 800e7d0:	3f490fdb 	.word	0x3f490fdb

0800e7d4 <__ieee754_atan2f>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e7da:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e7de:	4603      	mov	r3, r0
 800e7e0:	d805      	bhi.n	800e7ee <__ieee754_atan2f+0x1a>
 800e7e2:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e7e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	d904      	bls.n	800e7f8 <__ieee754_atan2f+0x24>
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7f2 f9ca 	bl	8000b88 <__addsf3>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	e010      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e7f8:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e7fc:	d103      	bne.n	800e806 <__ieee754_atan2f+0x32>
 800e7fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e802:	f000 b86f 	b.w	800e8e4 <atanf>
 800e806:	178c      	asrs	r4, r1, #30
 800e808:	f004 0402 	and.w	r4, r4, #2
 800e80c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e810:	b92a      	cbnz	r2, 800e81e <__ieee754_atan2f+0x4a>
 800e812:	2c02      	cmp	r4, #2
 800e814:	d04b      	beq.n	800e8ae <__ieee754_atan2f+0xda>
 800e816:	2c03      	cmp	r4, #3
 800e818:	d04b      	beq.n	800e8b2 <__ieee754_atan2f+0xde>
 800e81a:	4618      	mov	r0, r3
 800e81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e81e:	b91e      	cbnz	r6, 800e828 <__ieee754_atan2f+0x54>
 800e820:	2f00      	cmp	r7, #0
 800e822:	da4c      	bge.n	800e8be <__ieee754_atan2f+0xea>
 800e824:	4b27      	ldr	r3, [pc, #156]	@ (800e8c4 <__ieee754_atan2f+0xf0>)
 800e826:	e7f8      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e828:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e82c:	d10e      	bne.n	800e84c <__ieee754_atan2f+0x78>
 800e82e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e832:	f104 34ff 	add.w	r4, r4, #4294967295
 800e836:	d105      	bne.n	800e844 <__ieee754_atan2f+0x70>
 800e838:	2c02      	cmp	r4, #2
 800e83a:	d83c      	bhi.n	800e8b6 <__ieee754_atan2f+0xe2>
 800e83c:	4b22      	ldr	r3, [pc, #136]	@ (800e8c8 <__ieee754_atan2f+0xf4>)
 800e83e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e842:	e7ea      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e844:	2c02      	cmp	r4, #2
 800e846:	d838      	bhi.n	800e8ba <__ieee754_atan2f+0xe6>
 800e848:	4b20      	ldr	r3, [pc, #128]	@ (800e8cc <__ieee754_atan2f+0xf8>)
 800e84a:	e7f8      	b.n	800e83e <__ieee754_atan2f+0x6a>
 800e84c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e850:	d0e6      	beq.n	800e820 <__ieee754_atan2f+0x4c>
 800e852:	1b92      	subs	r2, r2, r6
 800e854:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800e858:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800e85c:	da17      	bge.n	800e88e <__ieee754_atan2f+0xba>
 800e85e:	2900      	cmp	r1, #0
 800e860:	da01      	bge.n	800e866 <__ieee754_atan2f+0x92>
 800e862:	303c      	adds	r0, #60	@ 0x3c
 800e864:	db15      	blt.n	800e892 <__ieee754_atan2f+0xbe>
 800e866:	4618      	mov	r0, r3
 800e868:	f7f2 fb4a 	bl	8000f00 <__aeabi_fdiv>
 800e86c:	f7ff fe6c 	bl	800e548 <fabsf>
 800e870:	f000 f838 	bl	800e8e4 <atanf>
 800e874:	4603      	mov	r3, r0
 800e876:	2c01      	cmp	r4, #1
 800e878:	d00d      	beq.n	800e896 <__ieee754_atan2f+0xc2>
 800e87a:	2c02      	cmp	r4, #2
 800e87c:	d00e      	beq.n	800e89c <__ieee754_atan2f+0xc8>
 800e87e:	2c00      	cmp	r4, #0
 800e880:	d0cb      	beq.n	800e81a <__ieee754_atan2f+0x46>
 800e882:	4913      	ldr	r1, [pc, #76]	@ (800e8d0 <__ieee754_atan2f+0xfc>)
 800e884:	4618      	mov	r0, r3
 800e886:	f7f2 f97f 	bl	8000b88 <__addsf3>
 800e88a:	4912      	ldr	r1, [pc, #72]	@ (800e8d4 <__ieee754_atan2f+0x100>)
 800e88c:	e00c      	b.n	800e8a8 <__ieee754_atan2f+0xd4>
 800e88e:	4b12      	ldr	r3, [pc, #72]	@ (800e8d8 <__ieee754_atan2f+0x104>)
 800e890:	e7f1      	b.n	800e876 <__ieee754_atan2f+0xa2>
 800e892:	2300      	movs	r3, #0
 800e894:	e7ef      	b.n	800e876 <__ieee754_atan2f+0xa2>
 800e896:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e89a:	e7be      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e89c:	490c      	ldr	r1, [pc, #48]	@ (800e8d0 <__ieee754_atan2f+0xfc>)
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f2 f972 	bl	8000b88 <__addsf3>
 800e8a4:	4601      	mov	r1, r0
 800e8a6:	480b      	ldr	r0, [pc, #44]	@ (800e8d4 <__ieee754_atan2f+0x100>)
 800e8a8:	f7f2 f96c 	bl	8000b84 <__aeabi_fsub>
 800e8ac:	e7a2      	b.n	800e7f4 <__ieee754_atan2f+0x20>
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <__ieee754_atan2f+0x100>)
 800e8b0:	e7b3      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e8dc <__ieee754_atan2f+0x108>)
 800e8b4:	e7b1      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e0 <__ieee754_atan2f+0x10c>)
 800e8b8:	e7af      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e7ad      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e8be:	4b06      	ldr	r3, [pc, #24]	@ (800e8d8 <__ieee754_atan2f+0x104>)
 800e8c0:	e7ab      	b.n	800e81a <__ieee754_atan2f+0x46>
 800e8c2:	bf00      	nop
 800e8c4:	bfc90fdb 	.word	0xbfc90fdb
 800e8c8:	0800f1b4 	.word	0x0800f1b4
 800e8cc:	0800f1a8 	.word	0x0800f1a8
 800e8d0:	33bbbd2e 	.word	0x33bbbd2e
 800e8d4:	40490fdb 	.word	0x40490fdb
 800e8d8:	3fc90fdb 	.word	0x3fc90fdb
 800e8dc:	c0490fdb 	.word	0xc0490fdb
 800e8e0:	3f490fdb 	.word	0x3f490fdb

0800e8e4 <atanf>:
 800e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e8ec:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	d30e      	bcc.n	800e914 <atanf+0x30>
 800e8f6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e8fa:	d904      	bls.n	800e906 <atanf+0x22>
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	f7f2 f943 	bl	8000b88 <__addsf3>
 800e902:	4604      	mov	r4, r0
 800e904:	e003      	b.n	800e90e <atanf+0x2a>
 800e906:	2800      	cmp	r0, #0
 800e908:	f340 80ce 	ble.w	800eaa8 <atanf+0x1c4>
 800e90c:	4c67      	ldr	r4, [pc, #412]	@ (800eaac <atanf+0x1c8>)
 800e90e:	4620      	mov	r0, r4
 800e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e914:	4b66      	ldr	r3, [pc, #408]	@ (800eab0 <atanf+0x1cc>)
 800e916:	429d      	cmp	r5, r3
 800e918:	d80e      	bhi.n	800e938 <atanf+0x54>
 800e91a:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800e91e:	d208      	bcs.n	800e932 <atanf+0x4e>
 800e920:	4964      	ldr	r1, [pc, #400]	@ (800eab4 <atanf+0x1d0>)
 800e922:	f7f2 f931 	bl	8000b88 <__addsf3>
 800e926:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e92a:	f7f2 fbf1 	bl	8001110 <__aeabi_fcmpgt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d1ed      	bne.n	800e90e <atanf+0x2a>
 800e932:	f04f 36ff 	mov.w	r6, #4294967295
 800e936:	e01c      	b.n	800e972 <atanf+0x8e>
 800e938:	f7ff fe06 	bl	800e548 <fabsf>
 800e93c:	4b5e      	ldr	r3, [pc, #376]	@ (800eab8 <atanf+0x1d4>)
 800e93e:	4604      	mov	r4, r0
 800e940:	429d      	cmp	r5, r3
 800e942:	d87c      	bhi.n	800ea3e <atanf+0x15a>
 800e944:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e948:	429d      	cmp	r5, r3
 800e94a:	d867      	bhi.n	800ea1c <atanf+0x138>
 800e94c:	4601      	mov	r1, r0
 800e94e:	f7f2 f91b 	bl	8000b88 <__addsf3>
 800e952:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e956:	f7f2 f915 	bl	8000b84 <__aeabi_fsub>
 800e95a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e95e:	4605      	mov	r5, r0
 800e960:	4620      	mov	r0, r4
 800e962:	f7f2 f911 	bl	8000b88 <__addsf3>
 800e966:	4601      	mov	r1, r0
 800e968:	4628      	mov	r0, r5
 800e96a:	f7f2 fac9 	bl	8000f00 <__aeabi_fdiv>
 800e96e:	2600      	movs	r6, #0
 800e970:	4604      	mov	r4, r0
 800e972:	4621      	mov	r1, r4
 800e974:	4620      	mov	r0, r4
 800e976:	f7f2 fa0f 	bl	8000d98 <__aeabi_fmul>
 800e97a:	4601      	mov	r1, r0
 800e97c:	4607      	mov	r7, r0
 800e97e:	f7f2 fa0b 	bl	8000d98 <__aeabi_fmul>
 800e982:	4605      	mov	r5, r0
 800e984:	494d      	ldr	r1, [pc, #308]	@ (800eabc <atanf+0x1d8>)
 800e986:	f7f2 fa07 	bl	8000d98 <__aeabi_fmul>
 800e98a:	494d      	ldr	r1, [pc, #308]	@ (800eac0 <atanf+0x1dc>)
 800e98c:	f7f2 f8fc 	bl	8000b88 <__addsf3>
 800e990:	4629      	mov	r1, r5
 800e992:	f7f2 fa01 	bl	8000d98 <__aeabi_fmul>
 800e996:	494b      	ldr	r1, [pc, #300]	@ (800eac4 <atanf+0x1e0>)
 800e998:	f7f2 f8f6 	bl	8000b88 <__addsf3>
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7f2 f9fb 	bl	8000d98 <__aeabi_fmul>
 800e9a2:	4949      	ldr	r1, [pc, #292]	@ (800eac8 <atanf+0x1e4>)
 800e9a4:	f7f2 f8f0 	bl	8000b88 <__addsf3>
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	f7f2 f9f5 	bl	8000d98 <__aeabi_fmul>
 800e9ae:	4947      	ldr	r1, [pc, #284]	@ (800eacc <atanf+0x1e8>)
 800e9b0:	f7f2 f8ea 	bl	8000b88 <__addsf3>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	f7f2 f9ef 	bl	8000d98 <__aeabi_fmul>
 800e9ba:	4945      	ldr	r1, [pc, #276]	@ (800ead0 <atanf+0x1ec>)
 800e9bc:	f7f2 f8e4 	bl	8000b88 <__addsf3>
 800e9c0:	4639      	mov	r1, r7
 800e9c2:	f7f2 f9e9 	bl	8000d98 <__aeabi_fmul>
 800e9c6:	4943      	ldr	r1, [pc, #268]	@ (800ead4 <atanf+0x1f0>)
 800e9c8:	4607      	mov	r7, r0
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f7f2 f9e4 	bl	8000d98 <__aeabi_fmul>
 800e9d0:	4941      	ldr	r1, [pc, #260]	@ (800ead8 <atanf+0x1f4>)
 800e9d2:	f7f2 f8d7 	bl	8000b84 <__aeabi_fsub>
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f7f2 f9de 	bl	8000d98 <__aeabi_fmul>
 800e9dc:	493f      	ldr	r1, [pc, #252]	@ (800eadc <atanf+0x1f8>)
 800e9de:	f7f2 f8d1 	bl	8000b84 <__aeabi_fsub>
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	f7f2 f9d8 	bl	8000d98 <__aeabi_fmul>
 800e9e8:	493d      	ldr	r1, [pc, #244]	@ (800eae0 <atanf+0x1fc>)
 800e9ea:	f7f2 f8cb 	bl	8000b84 <__aeabi_fsub>
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	f7f2 f9d2 	bl	8000d98 <__aeabi_fmul>
 800e9f4:	493b      	ldr	r1, [pc, #236]	@ (800eae4 <atanf+0x200>)
 800e9f6:	f7f2 f8c5 	bl	8000b84 <__aeabi_fsub>
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	f7f2 f9cc 	bl	8000d98 <__aeabi_fmul>
 800ea00:	4601      	mov	r1, r0
 800ea02:	4638      	mov	r0, r7
 800ea04:	f7f2 f8c0 	bl	8000b88 <__addsf3>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	f7f2 f9c5 	bl	8000d98 <__aeabi_fmul>
 800ea0e:	1c73      	adds	r3, r6, #1
 800ea10:	4601      	mov	r1, r0
 800ea12:	d133      	bne.n	800ea7c <atanf+0x198>
 800ea14:	4620      	mov	r0, r4
 800ea16:	f7f2 f8b5 	bl	8000b84 <__aeabi_fsub>
 800ea1a:	e772      	b.n	800e902 <atanf+0x1e>
 800ea1c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ea20:	f7f2 f8b0 	bl	8000b84 <__aeabi_fsub>
 800ea24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ea28:	4605      	mov	r5, r0
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7f2 f8ac 	bl	8000b88 <__addsf3>
 800ea30:	4601      	mov	r1, r0
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7f2 fa64 	bl	8000f00 <__aeabi_fdiv>
 800ea38:	2601      	movs	r6, #1
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	e799      	b.n	800e972 <atanf+0x8e>
 800ea3e:	4b2a      	ldr	r3, [pc, #168]	@ (800eae8 <atanf+0x204>)
 800ea40:	429d      	cmp	r5, r3
 800ea42:	d814      	bhi.n	800ea6e <atanf+0x18a>
 800ea44:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ea48:	f7f2 f89c 	bl	8000b84 <__aeabi_fsub>
 800ea4c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ea50:	4605      	mov	r5, r0
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7f2 f9a0 	bl	8000d98 <__aeabi_fmul>
 800ea58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ea5c:	f7f2 f894 	bl	8000b88 <__addsf3>
 800ea60:	4601      	mov	r1, r0
 800ea62:	4628      	mov	r0, r5
 800ea64:	f7f2 fa4c 	bl	8000f00 <__aeabi_fdiv>
 800ea68:	2602      	movs	r6, #2
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	e781      	b.n	800e972 <atanf+0x8e>
 800ea6e:	4601      	mov	r1, r0
 800ea70:	481e      	ldr	r0, [pc, #120]	@ (800eaec <atanf+0x208>)
 800ea72:	f7f2 fa45 	bl	8000f00 <__aeabi_fdiv>
 800ea76:	2603      	movs	r6, #3
 800ea78:	4604      	mov	r4, r0
 800ea7a:	e77a      	b.n	800e972 <atanf+0x8e>
 800ea7c:	4b1c      	ldr	r3, [pc, #112]	@ (800eaf0 <atanf+0x20c>)
 800ea7e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ea82:	f7f2 f87f 	bl	8000b84 <__aeabi_fsub>
 800ea86:	4621      	mov	r1, r4
 800ea88:	f7f2 f87c 	bl	8000b84 <__aeabi_fsub>
 800ea8c:	4b19      	ldr	r3, [pc, #100]	@ (800eaf4 <atanf+0x210>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ea94:	f7f2 f876 	bl	8000b84 <__aeabi_fsub>
 800ea98:	f1b8 0f00 	cmp.w	r8, #0
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	f6bf af36 	bge.w	800e90e <atanf+0x2a>
 800eaa2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800eaa6:	e732      	b.n	800e90e <atanf+0x2a>
 800eaa8:	4c13      	ldr	r4, [pc, #76]	@ (800eaf8 <atanf+0x214>)
 800eaaa:	e730      	b.n	800e90e <atanf+0x2a>
 800eaac:	3fc90fdb 	.word	0x3fc90fdb
 800eab0:	3edfffff 	.word	0x3edfffff
 800eab4:	7149f2ca 	.word	0x7149f2ca
 800eab8:	3f97ffff 	.word	0x3f97ffff
 800eabc:	3c8569d7 	.word	0x3c8569d7
 800eac0:	3d4bda59 	.word	0x3d4bda59
 800eac4:	3d886b35 	.word	0x3d886b35
 800eac8:	3dba2e6e 	.word	0x3dba2e6e
 800eacc:	3e124925 	.word	0x3e124925
 800ead0:	3eaaaaab 	.word	0x3eaaaaab
 800ead4:	bd15a221 	.word	0xbd15a221
 800ead8:	3d6ef16b 	.word	0x3d6ef16b
 800eadc:	3d9d8795 	.word	0x3d9d8795
 800eae0:	3de38e38 	.word	0x3de38e38
 800eae4:	3e4ccccd 	.word	0x3e4ccccd
 800eae8:	401bffff 	.word	0x401bffff
 800eaec:	bf800000 	.word	0xbf800000
 800eaf0:	0800f1c0 	.word	0x0800f1c0
 800eaf4:	0800f1d0 	.word	0x0800f1d0
 800eaf8:	bfc90fdb 	.word	0xbfc90fdb

0800eafc <__ieee754_sqrtf>:
 800eafc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800eb00:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800eb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb08:	4603      	mov	r3, r0
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	d30a      	bcc.n	800eb24 <__ieee754_sqrtf+0x28>
 800eb0e:	4601      	mov	r1, r0
 800eb10:	f7f2 f942 	bl	8000d98 <__aeabi_fmul>
 800eb14:	4601      	mov	r1, r0
 800eb16:	4620      	mov	r0, r4
 800eb18:	f7f2 f836 	bl	8000b88 <__addsf3>
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	4620      	mov	r0, r4
 800eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb24:	2a00      	cmp	r2, #0
 800eb26:	d0fa      	beq.n	800eb1e <__ieee754_sqrtf+0x22>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	da06      	bge.n	800eb3a <__ieee754_sqrtf+0x3e>
 800eb2c:	4601      	mov	r1, r0
 800eb2e:	f7f2 f829 	bl	8000b84 <__aeabi_fsub>
 800eb32:	4601      	mov	r1, r0
 800eb34:	f7f2 f9e4 	bl	8000f00 <__aeabi_fdiv>
 800eb38:	e7f0      	b.n	800eb1c <__ieee754_sqrtf+0x20>
 800eb3a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800eb3e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800eb42:	d03e      	beq.n	800ebc2 <__ieee754_sqrtf+0xc6>
 800eb44:	2400      	movs	r4, #0
 800eb46:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800eb4a:	07ca      	lsls	r2, r1, #31
 800eb4c:	f04f 0019 	mov.w	r0, #25
 800eb50:	4626      	mov	r6, r4
 800eb52:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800eb56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eb5e:	bf58      	it	pl
 800eb60:	005b      	lslpl	r3, r3, #1
 800eb62:	106d      	asrs	r5, r5, #1
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	1872      	adds	r2, r6, r1
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	bfcf      	iteee	gt
 800eb6c:	461a      	movgt	r2, r3
 800eb6e:	1856      	addle	r6, r2, r1
 800eb70:	1864      	addle	r4, r4, r1
 800eb72:	1a9a      	suble	r2, r3, r2
 800eb74:	3801      	subs	r0, #1
 800eb76:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800eb7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb7e:	d1f2      	bne.n	800eb66 <__ieee754_sqrtf+0x6a>
 800eb80:	b1ba      	cbz	r2, 800ebb2 <__ieee754_sqrtf+0xb6>
 800eb82:	4e14      	ldr	r6, [pc, #80]	@ (800ebd4 <__ieee754_sqrtf+0xd8>)
 800eb84:	4f14      	ldr	r7, [pc, #80]	@ (800ebd8 <__ieee754_sqrtf+0xdc>)
 800eb86:	6830      	ldr	r0, [r6, #0]
 800eb88:	6839      	ldr	r1, [r7, #0]
 800eb8a:	f7f1 fffb 	bl	8000b84 <__aeabi_fsub>
 800eb8e:	f8d6 8000 	ldr.w	r8, [r6]
 800eb92:	4601      	mov	r1, r0
 800eb94:	4640      	mov	r0, r8
 800eb96:	f7f2 faa7 	bl	80010e8 <__aeabi_fcmple>
 800eb9a:	b150      	cbz	r0, 800ebb2 <__ieee754_sqrtf+0xb6>
 800eb9c:	6830      	ldr	r0, [r6, #0]
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	f7f1 fff2 	bl	8000b88 <__addsf3>
 800eba4:	6836      	ldr	r6, [r6, #0]
 800eba6:	4601      	mov	r1, r0
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f7f2 fa93 	bl	80010d4 <__aeabi_fcmplt>
 800ebae:	b168      	cbz	r0, 800ebcc <__ieee754_sqrtf+0xd0>
 800ebb0:	3402      	adds	r4, #2
 800ebb2:	1064      	asrs	r4, r4, #1
 800ebb4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800ebb8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800ebbc:	e7af      	b.n	800eb1e <__ieee754_sqrtf+0x22>
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	3201      	adds	r2, #1
 800ebc2:	0218      	lsls	r0, r3, #8
 800ebc4:	d5fb      	bpl.n	800ebbe <__ieee754_sqrtf+0xc2>
 800ebc6:	3a01      	subs	r2, #1
 800ebc8:	1a89      	subs	r1, r1, r2
 800ebca:	e7bb      	b.n	800eb44 <__ieee754_sqrtf+0x48>
 800ebcc:	3401      	adds	r4, #1
 800ebce:	f024 0401 	bic.w	r4, r4, #1
 800ebd2:	e7ee      	b.n	800ebb2 <__ieee754_sqrtf+0xb6>
 800ebd4:	20000244 	.word	0x20000244
 800ebd8:	20000240 	.word	0x20000240

0800ebdc <_init>:
 800ebdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebde:	bf00      	nop
 800ebe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebe2:	bc08      	pop	{r3}
 800ebe4:	469e      	mov	lr, r3
 800ebe6:	4770      	bx	lr

0800ebe8 <_fini>:
 800ebe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebea:	bf00      	nop
 800ebec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebee:	bc08      	pop	{r3}
 800ebf0:	469e      	mov	lr, r3
 800ebf2:	4770      	bx	lr
